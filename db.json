{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/512x512.png","path":"images/hikari_tairitsu/512x512.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/android-chrome-192x192.png","path":"images/hikari_tairitsu/android-chrome-192x192.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/android-chrome-512x512.png","path":"images/hikari_tairitsu/android-chrome-512x512.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/apple-touch-icon.png","path":"images/hikari_tairitsu/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/browserconfig.xml","path":"images/hikari_tairitsu/browserconfig.xml","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/avatar.jpg","path":"images/hikari_tairitsu/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/favicon-16x16.png","path":"images/hikari_tairitsu/favicon-16x16.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/favicon.ico","path":"images/hikari_tairitsu/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/mstile-150x150.png","path":"images/hikari_tairitsu/mstile-150x150.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/favicon-32x32.png","path":"images/hikari_tairitsu/favicon-32x32.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/safari-pinned-tab.svg","path":"images/hikari_tairitsu/safari-pinned-tab.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/site.webmanifest","path":"images/hikari_tairitsu/site.webmanifest","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/algolia_logo.svg","path":"images/next/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/apple-touch-icon-next.png","path":"images/next/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-by-nc-sa.svg","path":"images/next/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/avatar.gif","path":"images/next/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-by-nc-nd.svg","path":"images/next/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-by-nc.svg","path":"images/next/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-zero.svg","path":"images/next/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-by-nd.svg","path":"images/next/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-by.svg","path":"images/next/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-by-sa.svg","path":"images/next/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/favicon-16x16-next.png","path":"images/next/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/logo.svg","path":"images/next/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/favicon-32x32-next.png","path":"images/next/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/LICENSE","path":"lib/pjax/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","path":"lib/pjax/CHANGELOG.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/README.md","path":"lib/pjax/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.d.ts","path":"lib/pjax/index.d.ts","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.js","path":"lib/pjax/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/package.json","path":"lib/pjax/package.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.js","path":"lib/pjax/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.min.js","path":"lib/pjax/pjax.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/forms.html","path":"lib/pjax/example/forms.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/example.js","path":"lib/pjax/example/example.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/page2.html","path":"lib/pjax/example/page2.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","path":"lib/pjax/lib/abort-request.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/page3.html","path":"lib/pjax/example/page3.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/index.html","path":"lib/pjax/example/index.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","path":"lib/pjax/lib/eval-script.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","path":"lib/pjax/lib/execute-scripts.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","path":"lib/pjax/lib/foreach-selectors.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","path":"lib/pjax/lib/foreach-els.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","path":"lib/pjax/lib/is-supported.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","path":"lib/pjax/lib/parse-options.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","path":"lib/pjax/lib/switches-selectors.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","path":"lib/pjax/lib/send-request.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","path":"lib/pjax/lib/uniqueid.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/switches.js","path":"lib/pjax/lib/switches.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/setup.js","path":"lib/pjax/tests/setup.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/test.ts","path":"lib/pjax/tests/test.ts","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/off.js","path":"lib/pjax/lib/events/off.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/on.js","path":"lib/pjax/lib/events/on.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-form.js","path":"lib/pjax/lib/proto/attach-form.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/trigger.js","path":"lib/pjax/lib/events/trigger.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-link.js","path":"lib/pjax/lib/proto/attach-link.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/handle-response.js","path":"lib/pjax/lib/proto/handle-response.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/log.js","path":"lib/pjax/lib/proto/log.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/clone.js","path":"lib/pjax/lib/util/clone.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/contains.js","path":"lib/pjax/lib/util/contains.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/parse-element.js","path":"lib/pjax/lib/proto/parse-element.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/noop.js","path":"lib/pjax/lib/util/noop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/extend.js","path":"lib/pjax/lib/util/extend.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/update-query-string.js","path":"lib/pjax/lib/util/update-query-string.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/eval-scripts.js","path":"lib/pjax/tests/lib/eval-scripts.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/events.js","path":"lib/pjax/tests/lib/events.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/execute-scripts.js","path":"lib/pjax/tests/lib/execute-scripts.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-els.js","path":"lib/pjax/tests/lib/foreach-els.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-selectors.js","path":"lib/pjax/tests/lib/foreach-selectors.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/abort-request.js","path":"lib/pjax/tests/lib/abort-request.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/is-supported.js","path":"lib/pjax/tests/lib/is-supported.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/parse-options.js","path":"lib/pjax/tests/lib/parse-options.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/send-request.js","path":"lib/pjax/tests/lib/send-request.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/switch-selectors.js","path":"lib/pjax/tests/lib/switch-selectors.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/switches.js","path":"lib/pjax/tests/lib/switches.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/uniqueid.js","path":"lib/pjax/tests/lib/uniqueid.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-form.js","path":"lib/pjax/tests/lib/proto/attach-form.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-link.js","path":"lib/pjax/tests/lib/proto/attach-link.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/handle-response.js","path":"lib/pjax/tests/lib/proto/handle-response.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/parse-element.js","path":"lib/pjax/tests/lib/proto/parse-element.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/contains.js","path":"lib/pjax/tests/lib/util/contains.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/clone.js","path":"lib/pjax/tests/lib/util/clone.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/extend.js","path":"lib/pjax/tests/lib/util/extend.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/update-query-string.js","path":"lib/pjax/tests/lib/util/update-query-string.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/noop.js","path":"lib/pjax/tests/lib/util/noop.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"26075fcaa308104e5e7ca6c41e057749c4a83c0e","modified":1726156624704},{"_id":"source/_posts/BookNote-DesignPatterns-by-JieCheng-2.md","hash":"7e6efface49b5a198fda3782a72beaa97e830b67","modified":1727192392964},{"_id":"source/_posts/BookNote-DesignPatterns-by-JieCheng-1.md","hash":"3a12683bcd9309a51f127678b575536a7daff659","modified":1727190375318},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2.md","hash":"7115d03f493cd54888db9b14a9e5f78fb2bb97d8","modified":1729956249543},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1.md","hash":"fe8e88105db4d9f99f5b731f213875e61a320edf","modified":1728830054784},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-3.md","hash":"6e247a2e19cfabccbb63973e9f1d8eba3ce6223a","modified":1730128094930},{"_id":"source/_posts/LeetCode-P4.md","hash":"8a505c2fc8975971d98363d955d22c4d2645b36e","modified":1726942842472},{"_id":"source/_posts/SPA-A1.md","hash":"fd8a82fab075383e5919723dc19b86d90d52f4ea","modified":1730134020283},{"_id":"source/_posts/SPA-A2.md","hash":"16b0d0622c8c5d82aa96ac5ba502e92c9f2b52c7","modified":1730134011367},{"_id":"source/_posts/hello-world.md","hash":"64b80c7a245c44ab06658d1ee1a7df45c0c0f056","modified":1726156147668},{"_id":"source/categories/index.md","hash":"c23c701eaef0f153fd1b945f4bc272fc009a48d6","modified":1725797619004},{"_id":"source/about/index.md","hash":"cd845e4bdce68fe6807eccb3a4059915966388c9","modified":1725797234611},{"_id":"source/tags/index.md","hash":"fdbe12a425d04095e0203c30b2d7955adfdfbb49","modified":1725789470758},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png","hash":"556f97266a898d436eb241fe36e04562b4a76448","modified":1727023278241},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png","hash":"6e0bf2a27a938ea2dd5d03d1c893c98b1cd6aff8","modified":1729915332255},{"_id":"source/_posts/LeetCode-P4/P4.fig","hash":"cface4afc2a4a7b0b3806c92aeb5ee23de267be7","modified":1726943166550},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png","hash":"b18268ea95d8b3256a4b6cf476f76e77b820d14b","modified":1728840936591},{"_id":"source/_posts/LeetCode-P4/p1.png","hash":"2b98623ba44e6eefa5838e3a949e1e7f2d363fd3","modified":1726939682473},{"_id":"source/_posts/LeetCode-P4/p2.png","hash":"5fcaecfe56ef8074aebeb98783c70eae2cd45676","modified":1726940485290},{"_id":"source/_posts/SPA-A2/SPA-A2-IR示意图.fig","hash":"1fa7f57109d343c698e16e3701eab38009d942f6","modified":1730126849753},{"_id":"source/_posts/SPA-A2/pic6.png","hash":"7a5e27da54be8eea0c4691fd8ce11cc508c1b3ae","modified":1730126245155},{"_id":"source/_posts/hello-world/test.txt","hash":"f49ca7a5a1d8058de58f1c715d20105186dd9106","modified":1726123019770},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png","hash":"35d876713df544c20ab77e5722dc9608ba242286","modified":1727014016487},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png","hash":"a69db2ced9f20a604f3507b388c98ed97d76391e","modified":1727013956337},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png","hash":"66945618fb91e93cf151904b3a8ad3699cbcfaa1","modified":1727023566876},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png","hash":"a5d6238f80bd187d177650a6fdec7a60775db466","modified":1728842533867},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png","hash":"092d9dca186f75a11e1408d8d1bbb9f379e4b172","modified":1729047113313},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png","hash":"60fd3465aa635f3dfecb3be98b22efdd9ca6897f","modified":1729915483322},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png","hash":"3b72face6ef696f051d916b13e4f1648b63b499b","modified":1728832670546},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png","hash":"480a3edaa705475401db2fb873326151985b1f66","modified":1728836049686},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png","hash":"023729df677ba9b638aafed18a14b0e15d5ceb4e","modified":1728830978756},{"_id":"source/_posts/SPA-A1/pic1.png","hash":"cf90af784d6d894635f8b035989ef119a917d691","modified":1729356206394},{"_id":"source/_posts/SPA-A2/pic2.png","hash":"fd4dddbc2f86738ba28962636762e65cab03c7f5","modified":1730121937550},{"_id":"source/_posts/SPA-A2/pic3.png","hash":"32906bde5aeb02bb8d9ab10f1e08b22f0b2ff90f","modified":1730124189452},{"_id":"source/_posts/SPA-A2/pic4.png","hash":"e1933b1b51b45568089ae71e72c03c73c4605b94","modified":1730124652494},{"_id":"source/_posts/SPA-A1/pic2.png","hash":"dc0d9a67d2a034428415d7da77d7407f0b924f4a","modified":1729356321414},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png","hash":"c9b9d9dfe32dc8d3a396e47a52f73495724ec740","modified":1727014255159},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png","hash":"e7855296030e7cf77637b82ea94322651ca0a1ac","modified":1728810091703},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png","hash":"0da9857ddea00179ed911ac070c812689efbfefb","modified":1729912075201},{"_id":"source/_posts/SPA-A2/pic1.png","hash":"8ee41437e3906eb29a3a1f6493007d1b13cbb503","modified":1730120970076},{"_id":"source/_posts/SPA-A1/pic3.png","hash":"ed4db827bc36e997cd72c834ae5d457d5a393907","modified":1729357543195},{"_id":"source/_posts/SPA-A2/pic5.png","hash":"6764066a82c1fca12d7cbc16b674a51d22a76a59","modified":1730126019200},{"_id":"source/_posts/SPA-A2/pic7.png","hash":"76aec718ca9537be2954a93497397eb65e8b1df3","modified":1730128863227},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png","hash":"8689c4fc9af5e5dfbd49238799e7518373f4e15c","modified":1728833192667},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png","hash":"ba76dc635506ca916057049fac464a357f34a027","modified":1729911928403},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png","hash":"884efd303ca1b3c5fd1d8413996ec83f85514dd9","modified":1728838580496},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png","hash":"2f59ef050e9131c6b34a0e05eaeef69caa1de6ac","modified":1728806432161},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1725775287823},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1725775287825},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1725775287831},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1725775287825},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1725775287831},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1725775287830},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1725775287831},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1725775287832},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1725775287842},{"_id":"themes/next/_config.yml","hash":"a0acab0244cc0e4628e147f3af901201d5a2d3d4","modified":1726678201123},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1725775287833},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1725775287878},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1725775287828},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1725775287828},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1725775287826},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1725775287829},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1725775287826},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1725775287829},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1725775287829},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1725775287829},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1725775287829},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1725775287830},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1725775287834},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1725775287830},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1725775287833},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1725775287834},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1725775287834},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1725775287836},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1725775287835},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1725775287836},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1725775287851},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1725775287835},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1725775287876},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1726057310336},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1725775287876},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1725775287836},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1725775287843},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1725775287877},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1725775287843},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1725775287877},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1725775287877},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1725775287845},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1725775287844},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1725775287845},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1725775287844},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1725775287845},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1725775287844},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1725775287846},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1725775287846},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1725775287846},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1725775287847},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1725775287846},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1725775287847},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1725775287848},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1725775287847},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1725775287848},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1725775287849},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1725775287848},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1725775287849},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1725775287849},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1725775287850},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1725775287887},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1725775287827},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1725775287827},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1725775287827},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1725775287851},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1725775287827},{"_id":"themes/next/layout/_macro/post.swig","hash":"5e0c93a291873bf4721c3f4e0f521074868a4533","modified":1726142824694},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1725775287853},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1725775287852},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e2220f970e8d3ca25ef7461d84a1ac43ba277d66","modified":1726142356748},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1725775287860},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1725775287856},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1725775287857},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1725775287861},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1725775287862},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1725775287861},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1725775287864},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1725775287864},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1725775287839},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1725775287837},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1725775287837},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1725775287838},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1725775287838},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1725775287839},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1725775287840},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1725775287840},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1725775287839},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1725775287841},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1725775287841},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1725775287842},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1725775287866},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1725775287869},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1725775287878},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1725775287871},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1725775287842},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1725775287872},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1725775287884},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1725775287886},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1725775287885},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1725775287885},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1725775287886},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1725775287885},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1725775287888},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1725775287886},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1725775287887},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1725775287888},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1725775287887},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1725775287888},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1725775287889},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1725775287889},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1725775287890},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1725775287889},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1725775287891},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1725775287916},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1725775287890},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1725775287891},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1725775287926},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1725775287890},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1725775287932},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1725775287932},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1725775287935},{"_id":"themes/next/source/js/next-boot.js","hash":"28a082026aa01f8be204d104d6733550e866faaa","modified":1726065808203},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1725775287932},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1725775287933},{"_id":"themes/next/source/js/utils.js","hash":"d0d0aa46e813fe3997842b2e0f1751155c815f6d","modified":1726065767786},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1725775287853},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"b719c3b5bf5cbbca7323d5aa0dbb545e4ec73922","modified":1726154327480},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1725775287854},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1725775287855},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1725775287854},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1725775287855},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1725775287856},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1725775287858},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1725775287858},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1725775287855},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1725775287857},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1725775287859},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1725775287858},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1725775287858},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1725775287859},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1725775287860},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1725775287863},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1725775287862},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1725775287859},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1725775287863},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1725775287863},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1725775287863},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1725775287859},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1725775287865},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1725775287866},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1725775287867},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1725775287865},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1725775287866},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1725775287868},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1725775287867},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1725775287868},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1725775287868},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1725775287869},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1725775287868},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1725775287869},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1725775287870},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1725775287871},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1725775287871},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1725775287873},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1725775287873},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1725775287872},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1725775287874},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1725775287874},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1725775287874},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1725775287875},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"0693a22f8a8f5a92c218e223536949e1f38d2bc0","modified":1726148317760},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1725775287875},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1725775287881},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1725775287875},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1725775287881},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1725775287882},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1725775287883},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1725775287879},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1725775287882},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1725775287884},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1725775287883},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1725775287884},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1725775287880},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1725775287880},{"_id":"themes/next/source/images/hikari_tairitsu/android-chrome-192x192.png","hash":"25865e7af2504be3394770ce0a72727aecdcc525","modified":1725781375878},{"_id":"themes/next/source/images/hikari_tairitsu/apple-touch-icon.png","hash":"8f04c5e4e06ae947c8c0663ef50a0f3bb7f09f1b","modified":1725781375729},{"_id":"themes/next/source/images/hikari_tairitsu/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1725781375744},{"_id":"themes/next/source/images/hikari_tairitsu/favicon-16x16.png","hash":"c26e50b60f618ca7b5982219bb8a695103f8bb46","modified":1725781375782},{"_id":"themes/next/source/images/hikari_tairitsu/favicon.ico","hash":"0007af3e6daabafb6100ef2f1dfada4728a54e8b","modified":1725781375762},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1725775287925},{"_id":"themes/next/source/images/hikari_tairitsu/mstile-150x150.png","hash":"84cd4238961f5176f0695bc1e8673dcf295cf0dd","modified":1725781375826},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1725775287925},{"_id":"themes/next/source/images/hikari_tairitsu/safari-pinned-tab.svg","hash":"3c200590c537484feebe28e90af1da625d9a6e0e","modified":1725781375843},{"_id":"themes/next/source/images/hikari_tairitsu/site.webmanifest","hash":"13e5aa58eb2182d8ace63266856c8cc29c47c083","modified":1725781375858},{"_id":"themes/next/source/images/hikari_tairitsu/favicon-32x32.png","hash":"6974521760b637c8d4f3de05fe58d46b8ac31ff3","modified":1725781375810},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1725775287925},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1725775287925},{"_id":"themes/next/source/images/next/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1725775287926},{"_id":"themes/next/source/css/_variables/base.styl","hash":"723cca3d5c683bca6c7750699bd7e46088955dec","modified":1727313495287},{"_id":"themes/next/source/images/next/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1725775287927},{"_id":"themes/next/source/images/next/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1725775287928},{"_id":"themes/next/source/images/next/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1725775287927},{"_id":"themes/next/source/images/next/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1725775287927},{"_id":"themes/next/source/images/next/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1725775287928},{"_id":"themes/next/source/images/next/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1725775287930},{"_id":"themes/next/source/images/next/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1725775287928},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1725775287934},{"_id":"themes/next/source/images/next/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1725775287930},{"_id":"themes/next/source/images/next/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1725775287931},{"_id":"themes/next/source/images/next/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1725775287930},{"_id":"themes/next/source/images/next/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1725775287931},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1725775287934},{"_id":"themes/next/source/images/next/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1725775287931},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1725775287939},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1725775287939},{"_id":"themes/next/source/lib/pjax/.editorconfig","hash":"8c81c4efc1ebde69b4c084c370c29071af62ed2f","modified":1725787408070},{"_id":"themes/next/source/lib/pjax/.eslintignore","hash":"72a528c49453bc417123c12a5482f9a3dec8e1a5","modified":1725787408070},{"_id":"themes/next/source/lib/pjax/.gitignore","hash":"37a0d5efc8a1eaa132681e1c2bf9f68333c2fbff","modified":1725787408070},{"_id":"themes/next/source/lib/pjax/.eslintrc.json","hash":"37eb8287500c9f2d4e1b887bec1c7636791a31dc","modified":1725787408070},{"_id":"themes/next/source/lib/pjax/.prettierignore","hash":"72a528c49453bc417123c12a5482f9a3dec8e1a5","modified":1725787408071},{"_id":"themes/next/source/lib/pjax/.travis.yml","hash":"a8afaf403ef826c018803df13ed5a36943320983","modified":1725787408071},{"_id":"themes/next/source/lib/pjax/LICENSE","hash":"2c7168814d9d35ea9500809b0904962f511eb4a8","modified":1725787408072},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","hash":"c6bec1421c73c2b33eb0f2974566351968eac342","modified":1725787408071},{"_id":"themes/next/source/lib/pjax/README.md","hash":"f3f023db70ec08d0e8602e091c9aee621978a23d","modified":1725787408072},{"_id":"themes/next/source/lib/pjax/index.d.ts","hash":"c452cd6e990eeeea10f7dbf17fefbc6845585bf6","modified":1725787408075},{"_id":"themes/next/source/lib/pjax/index.js","hash":"e6fc3fb4501520bae1505c5d95214d3318810c2d","modified":1725787408076},{"_id":"themes/next/source/lib/pjax/package.json","hash":"c3670a3576aa4bc6d0818edda3723e034b647e52","modified":1725787408088},{"_id":"themes/next/source/lib/pjax/pjax.js","hash":"39b3063839a090bf3224c0c4776ffcedf2faf327","modified":1725787408088},{"_id":"themes/next/source/lib/pjax/pjax.min.js","hash":"68d0c6ad28f042c78fc18a6e9d782a7047c01905","modified":1725787408089},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1725775287905},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1725775287892},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1725775287905},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1725775287892},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1725775287909},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1725775287893},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1725775287899},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1725775287909},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1725775287909},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1725775287911},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1725775287913},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1725775287913},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1725775287912},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1725775287916},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1725775287918},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1725775287918},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1725775287918},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1725775287919},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1725775287919},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1725775287919},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1725775287920},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1725775287920},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1725775287919},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1725775287920},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1725775287920},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1725775287922},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1725775287922},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1725775287922},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1725775287922},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1725775287923},{"_id":"themes/next/source/lib/pjax/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1725787408058},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1725775287922},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1725775287923},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1725775287937},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1725775287938},{"_id":"themes/next/source/lib/pjax/.git/config","hash":"010b0a17841ab64c111503876d0d06bafdd7ef62","modified":1725787408067},{"_id":"themes/next/source/lib/pjax/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1725787405310},{"_id":"themes/next/source/lib/pjax/.git/index","hash":"d2be17337efe4a7e0a3e4fa1d09d2d0395fa6674","modified":1725787408099},{"_id":"themes/next/source/lib/pjax/.git/packed-refs","hash":"edbdf218d3ec5dca511b8e29e88aebcf725d68ad","modified":1725787408051},{"_id":"themes/next/source/lib/pjax/example/forms.html","hash":"35769b826750d64ad649f93ee2272961d65a61c7","modified":1725787408074},{"_id":"themes/next/source/lib/pjax/example/example.js","hash":"4d9fea820f1a91590b0d49099e8a79d3984ba9bf","modified":1725787408074},{"_id":"themes/next/source/lib/pjax/example/page2.html","hash":"5396196c9179746716ef02833504b1172332243f","modified":1725787408075},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","hash":"a6eae74d5b80dccde2ee4485ee427aca39dbe66b","modified":1725787408076},{"_id":"themes/next/source/lib/pjax/example/page3.html","hash":"703e2d34011c3d8918ba811ead26f1734d4d74fb","modified":1725787408075},{"_id":"themes/next/source/lib/pjax/example/index.html","hash":"1cc0a16040597669b26e8a7168a620520c98f4a1","modified":1725787408075},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","hash":"773d5fddaad11e76df9354f3cf8078f26ad760ff","modified":1725787408076},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","hash":"b16da782b37eb0538ac267f4ec4d478e79e96fa6","modified":1725787408079},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","hash":"95df8390d94be89f23f50e2acbde8e08a6264096","modified":1725787408080},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","hash":"e79ce0bccb20e9245605ae7b2d7dc35fa4213c45","modified":1725787408080},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","hash":"dea4eb52b70fd285ba3df161b51496d30677d9e9","modified":1725787408081},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","hash":"0b29aa13306a0462d5c6ba0761acd75e65bb1691","modified":1725787408081},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","hash":"1348fec349076f4ccf72bb6f01999988764bdafd","modified":1725787408085},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","hash":"ca86271d363eecd1abc854bf03491130101b427d","modified":1725787408085},{"_id":"themes/next/source/lib/pjax/lib/switches.js","hash":"29ea82638d566d41dc6562873fb3d58310ca34d0","modified":1725787408085},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","hash":"643336dc475999234b7843b1e7b38c60a48041bc","modified":1725787408086},{"_id":"themes/next/source/lib/pjax/tests/setup.js","hash":"de561f5d8212d10ae79188b294c94264e6f96386","modified":1725787408098},{"_id":"themes/next/source/lib/pjax/tests/test.ts","hash":"5fc54ab37b36965037b2476e62adbc684cdd5537","modified":1725787408099},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1725775287903},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1725775287902},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1725775287903},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1725775287903},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1725775287904},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1725775287904},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1725775287906},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1725775287904},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1725775287905},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1725775287906},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1725775287906},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1725775287907},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1725775287907},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1725775287907},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1725775287908},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1725775287895},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1725775287908},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1725775287908},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1725775287909},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1725775287895},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1726651211827},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1725775287896},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1725775287897},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1725775287896},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1725775287897},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1725775287898},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1725775287898},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1725775287893},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1725775287898},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1725775287898},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1725775287899},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1725775287899},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1725775287894},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1725775287900},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1725775287901},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1725775287894},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1725775287894},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1725775287901},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1725775287901},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1725775287910},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1725775287910},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1725775287902},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1725775287894},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1725775287910},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1725775287913},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1725775287914},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1725775287911},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1725775287914},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1725775287915},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1725775287915},{"_id":"themes/next/source/lib/pjax/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1725787405311},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1725775287916},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1725775287916},{"_id":"themes/next/source/lib/pjax/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1725787405312},{"_id":"themes/next/source/lib/pjax/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1725787405314},{"_id":"themes/next/source/lib/pjax/.git/hooks/fsmonitor-watchman.sample","hash":"0ec0ec9ac11111433d17ea79e0ae8cec650dcfa4","modified":1725787405313},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1725787405316},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1725787405314},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1725787405314},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1725787405317},{"_id":"themes/next/source/lib/pjax/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1725787405321},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1725787405317},{"_id":"themes/next/source/lib/pjax/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1725787405318},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1725787405318},{"_id":"themes/next/source/lib/pjax/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1725787405319},{"_id":"themes/next/source/lib/pjax/.git/logs/HEAD","hash":"3897e35b3c96d21338501293d7da1800999c80c5","modified":1725787408062},{"_id":"themes/next/source/lib/pjax/lib/events/off.js","hash":"edc5309f813bc323a0f470836d763aa54d996042","modified":1725787408078},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-form.js","hash":"65db8791b8914ab29f2bad44202d2ee20cfaac1f","modified":1725787408082},{"_id":"themes/next/source/lib/pjax/lib/events/trigger.js","hash":"1e8b098cc0ff96a964fe90595bcf65b7d6ca1792","modified":1725787408079},{"_id":"themes/next/source/lib/pjax/lib/events/on.js","hash":"c8d6059a8117c61e64e10e65a977e6d82b866af8","modified":1725787408078},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-link.js","hash":"de0d6d91ecb8650e0cb49dc40470233c4bab57e9","modified":1725787408082},{"_id":"themes/next/source/lib/pjax/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1725787405320},{"_id":"themes/next/source/lib/pjax/lib/proto/handle-response.js","hash":"43bff3061ccc910c86247735c6059ff489310a81","modified":1725787408083},{"_id":"themes/next/source/lib/pjax/lib/proto/log.js","hash":"a61b7223e6af70a075bb7c6c5f6ebfa4adbc5f31","modified":1725787408083},{"_id":"themes/next/source/lib/pjax/lib/util/contains.js","hash":"77fd6688fb2c1818d9b35f17b6d3b6a70cc492f7","modified":1725787408086},{"_id":"themes/next/source/lib/pjax/lib/proto/parse-element.js","hash":"fa128f4b896c22c48c748b41cd6886ac7325a2d4","modified":1725787408083},{"_id":"themes/next/source/lib/pjax/lib/util/clone.js","hash":"862544f772345622927de6a4bcb27e4ef18aec3e","modified":1725787408086},{"_id":"themes/next/source/lib/pjax/lib/util/noop.js","hash":"674eb07958489875f1d449b7864511f6bc70ee45","modified":1725787408087},{"_id":"themes/next/source/lib/pjax/lib/util/update-query-string.js","hash":"d505d78906844c180503c63767083d599bfbbfa8","modified":1725787408087},{"_id":"themes/next/source/lib/pjax/lib/util/extend.js","hash":"bfd842a1c6b091b9a231652cc9aa4b59bcc4ea6f","modified":1725787408087},{"_id":"themes/next/source/lib/pjax/tests/lib/events.js","hash":"6c4e2b245605bf78d84fcd596034680f6e483dee","modified":1725787408090},{"_id":"themes/next/source/lib/pjax/tests/lib/eval-scripts.js","hash":"3a11fd9978ccc4c5b5ca91699a55336633173d33","modified":1725787408090},{"_id":"themes/next/source/lib/pjax/tests/lib/execute-scripts.js","hash":"2419bf5111e717b720643dbf5f89e49f301b4ac0","modified":1725787408091},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-els.js","hash":"a94e48ceede2b4543e82f74ed0f2b2da3fb8357f","modified":1725787408091},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-selectors.js","hash":"2ca80242a94d2aab40fd0e25d91a6db4991802ce","modified":1725787408092},{"_id":"themes/next/source/lib/pjax/tests/lib/abort-request.js","hash":"edb7512db755a13b963510914152b53aaf490e40","modified":1725787408090},{"_id":"themes/next/source/lib/pjax/tests/lib/is-supported.js","hash":"19f819a9508f4ce2ce11ad8f27979fa84d7a2a52","modified":1725787408092},{"_id":"themes/next/source/lib/pjax/tests/lib/parse-options.js","hash":"65baba099b1074521287a10f5ff3f4e99cf8f8ee","modified":1725787408092},{"_id":"themes/next/source/lib/pjax/tests/lib/send-request.js","hash":"b8fd6112a0d908c0f4c64ec898578bedbd23ed70","modified":1725787408095},{"_id":"themes/next/source/lib/pjax/tests/lib/switch-selectors.js","hash":"b3f170dd24a1d4a9aefbb5cdfbaad16dfafa6c80","modified":1725787408096},{"_id":"themes/next/source/lib/pjax/tests/lib/switches.js","hash":"0274886c7f0985da381c234a3ddca510e1a8cc0f","modified":1725787408096},{"_id":"themes/next/source/lib/pjax/.git/refs/heads/master","hash":"3c8414e83b32974579667c4c79e04af7d699edde","modified":1725787408061},{"_id":"themes/next/source/lib/pjax/tests/lib/uniqueid.js","hash":"e0bc8cf01dcc15eb72a856c4f0734f02790e3275","modified":1725787408096},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-form.js","hash":"93675412f1c9e4008ab5c64edcb9a08b549bb477","modified":1725787408093},{"_id":"themes/next/source/lib/pjax/.git/objects/pack/pack-c44afb8b14583aea8a946bf5944820752f2a752d.idx","hash":"db4f698e84be1b114c7d29712172449b3183c286","modified":1725787408007},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-link.js","hash":"9b1b047dc1d1d3d114540438511afcedb5b86528","modified":1725787408093},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/parse-element.js","hash":"942486a70ec1f582f456834df4f22effa2603a87","modified":1725787408095},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/handle-response.js","hash":"1dbbfa86a360c1109fc1153bea363cfd57d05afe","modified":1725787408095},{"_id":"themes/next/source/lib/pjax/tests/lib/util/contains.js","hash":"c8b155c78944368f37715f9631115769ea1f645b","modified":1725787408097},{"_id":"themes/next/source/lib/pjax/tests/lib/util/clone.js","hash":"306d6430ddcddf7c67c1d76ed784036713cd86a1","modified":1725787408097},{"_id":"themes/next/source/lib/pjax/tests/lib/util/extend.js","hash":"f46afc9bf5c2ebe3766ffeb0ee638ac610e70332","modified":1725787408097},{"_id":"themes/next/source/lib/pjax/tests/lib/util/update-query-string.js","hash":"ffd39a45f445e2f2d20593415ef31280bff7dfdd","modified":1725787408098},{"_id":"themes/next/source/lib/pjax/tests/lib/util/noop.js","hash":"ed2fb792fe378b9b92cf7854a3e395fc6eec21bf","modified":1725787408098},{"_id":"themes/next/source/lib/pjax/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1725787408057},{"_id":"themes/next/source/lib/pjax/.git/logs/refs/heads/master","hash":"3897e35b3c96d21338501293d7da1800999c80c5","modified":1725787408063},{"_id":"themes/next/source/lib/pjax/.git/logs/refs/remotes/origin/HEAD","hash":"3897e35b3c96d21338501293d7da1800999c80c5","modified":1725787408057},{"_id":"themes/next/source/images/hikari_tairitsu/avatar.jpg","hash":"2c0edcf5c1b0d07f8b4733bb90155faedf4c6a3f","modified":1725782310886},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1725775287937},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1725775287938},{"_id":"themes/next/source/images/hikari_tairitsu/512x512.png","hash":"585cd7139de7f0823d5b74b6a2e65e51206a62f8","modified":1725780804812},{"_id":"themes/next/source/images/hikari_tairitsu/android-chrome-512x512.png","hash":"585cd7139de7f0823d5b74b6a2e65e51206a62f8","modified":1725781375899},{"_id":"themes/next/source/lib/pjax/.git/objects/pack/pack-c44afb8b14583aea8a946bf5944820752f2a752d.pack","hash":"c1012ba4ce7f42ed478471cc6dd0c20153bfc19f","modified":1725787408006},{"_id":"source/_posts/hello-world/picture.png","hash":"a18f398678d463eec974cfc47b722cec91f83d36","modified":1656555203837},{"_id":"public/atom.xml","hash":"6f5db1e6307e7e6913bfd1fe783aeef91a901935","modified":1730134030410},{"_id":"public/search.xml","hash":"7050c0dd3d26e907f605ad5cbb940719d8de2139","modified":1730134030410},{"_id":"public/sitemap.xml","hash":"fe979f07eac9d55515cfa02f8a310e0f877bace1","modified":1730134030410},{"_id":"public/sitemap.txt","hash":"6bf457ce86547b9100756b9597fab0a7fb1e03c7","modified":1730134030410},{"_id":"public/404.html","hash":"3414be1a53c6ea1efa84c246621e17e4565e2496","modified":1730134030410},{"_id":"public/tags/index.html","hash":"5cbc1dfade435a8e7b1c59db3663153cfe7f7df9","modified":1730134030410},{"_id":"public/about/index.html","hash":"4f01b9d3d87b6171d05b7cc40e24188d81bb7d8d","modified":1730134030410},{"_id":"public/categories/index.html","hash":"5efcda5d6bdd049d4c99718f6c4508d50bce8322","modified":1730134030410},{"_id":"public/2024/10/28/SPA-A2/index.html","hash":"d39e6186a12e05f83d209bfb25cbed7302539c98","modified":1730134030410},{"_id":"public/2024/10/20/SPA-A1/index.html","hash":"e367460929eb958fcf31fbc93fd87b4dc2cfff86","modified":1730134030410},{"_id":"public/2024/09/21/LeetCode-P4/index.html","hash":"babe1297b5fee275d7bf7ba297b8a58625255c4b","modified":1730134030410},{"_id":"public/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/index.html","hash":"953ef0215fba5ecd23656755fb34216e898300b9","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/index.html","hash":"7b6c47af02612465fcfbdb4d9f69fa86dc46cc7b","modified":1730134030410},{"_id":"public/2024/09/10/BookNote-DesignPatterns-by-JieCheng-1/index.html","hash":"d0d35fdd54cbeb704912dc4fb88fd478427daed7","modified":1730134030410},{"_id":"public/2024/09/08/hello-world/index.html","hash":"d74206e6cc699eb3b5f16323c72f8f2ad4ca61ea","modified":1730134030410},{"_id":"public/2024/10/26/BookNote-MachineLearning-by-ZhihuaZhou-3/index.html","hash":"b563c30a4ea38d7801562b1d65768ccc5782c424","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-DesignPatterns-by-JieCheng-2/index.html","hash":"70b4f9a8d98d964676df339f6686f6224df72349","modified":1730134030410},{"_id":"public/archives/index.html","hash":"077e3064259d199bb81b3a9b67fcf1ce3d8b547e","modified":1730134030410},{"_id":"public/archives/2024/index.html","hash":"136109a01b6909536cd688c407e52464b117d9c0","modified":1730134030410},{"_id":"public/archives/2024/09/index.html","hash":"5a12bd7df3ca26b29c92cd5dfb2543bbf69d691a","modified":1730134030410},{"_id":"public/archives/2024/10/index.html","hash":"efe5539869ea13c8ff6f7f95d52ab0e7d09ca973","modified":1730134030410},{"_id":"public/categories/读书笔记/index.html","hash":"1eb400aa290801686dff97fdb326026db6ed913f","modified":1730134030410},{"_id":"public/categories/LeetCode刷题记录/index.html","hash":"2e8f8cb9b3ce3879e74de301ff4cff8b82b763ff","modified":1730134030410},{"_id":"public/categories/NJU静态分析实验记录/index.html","hash":"1d1ba846bfb7cab0ddf93e3645a3998e27d71c49","modified":1730134030410},{"_id":"public/categories/杂项/index.html","hash":"1c442dc25e1ca25754395f31198de18ac2c4b9ae","modified":1730134030410},{"_id":"public/index.html","hash":"6091a57c293494786fb26a1b5f5b39b78c6f06db","modified":1730134030410},{"_id":"public/tags/读书笔记/index.html","hash":"acd9956d4fd7233213adbc2804bc145ca8fbb0b6","modified":1730134030410},{"_id":"public/tags/机器学习/index.html","hash":"a410d9a265e80b98a97e98391732513cae03c9e0","modified":1730134030410},{"_id":"public/tags/设计模式/index.html","hash":"3e7b9bc3a45321fa16ea3a08ce790769c14bda65","modified":1730134030410},{"_id":"public/tags/LeetCode/index.html","hash":"ac644bc4c29046d3c74fb6b45d473b3261855694","modified":1730134030410},{"_id":"public/tags/二分/index.html","hash":"e057813c75de44f02033d259f5d4ba9340747465","modified":1730134030410},{"_id":"public/tags/NJU/index.html","hash":"8ac894166adc193f61811b111252a558d4405fcf","modified":1730134030410},{"_id":"public/tags/静态分析/index.html","hash":"b23c3782a783b56a7c02bd57e98f46bc046a044a","modified":1730134030410},{"_id":"public/tags/杂项/index.html","hash":"a420bc3fb76fbc54d3f17715a0f93facbd48bd57","modified":1730134030410},{"_id":"public/images/hikari_tairitsu/android-chrome-192x192.png","hash":"25865e7af2504be3394770ce0a72727aecdcc525","modified":1730134030410},{"_id":"public/images/hikari_tairitsu/apple-touch-icon.png","hash":"8f04c5e4e06ae947c8c0663ef50a0f3bb7f09f1b","modified":1730134030410},{"_id":"public/images/hikari_tairitsu/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1730134030410},{"_id":"public/images/hikari_tairitsu/favicon-16x16.png","hash":"c26e50b60f618ca7b5982219bb8a695103f8bb46","modified":1730134030410},{"_id":"public/images/hikari_tairitsu/favicon.ico","hash":"0007af3e6daabafb6100ef2f1dfada4728a54e8b","modified":1730134030410},{"_id":"public/images/hikari_tairitsu/mstile-150x150.png","hash":"84cd4238961f5176f0695bc1e8673dcf295cf0dd","modified":1730134030410},{"_id":"public/images/hikari_tairitsu/favicon-32x32.png","hash":"6974521760b637c8d4f3de05fe58d46b8ac31ff3","modified":1730134030410},{"_id":"public/images/hikari_tairitsu/safari-pinned-tab.svg","hash":"3c200590c537484feebe28e90af1da625d9a6e0e","modified":1730134030410},{"_id":"public/images/hikari_tairitsu/site.webmanifest","hash":"13e5aa58eb2182d8ace63266856c8cc29c47c083","modified":1730134030410},{"_id":"public/images/next/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1730134030410},{"_id":"public/images/next/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1730134030410},{"_id":"public/images/next/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1730134030410},{"_id":"public/images/next/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1730134030410},{"_id":"public/images/next/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1730134030410},{"_id":"public/images/next/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1730134030410},{"_id":"public/images/next/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1730134030410},{"_id":"public/images/next/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1730134030410},{"_id":"public/images/next/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1730134030410},{"_id":"public/images/next/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1730134030410},{"_id":"public/images/next/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1730134030410},{"_id":"public/images/next/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1730134030410},{"_id":"public/images/next/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1730134030410},{"_id":"public/lib/pjax/index.d.ts","hash":"c452cd6e990eeeea10f7dbf17fefbc6845585bf6","modified":1730134030410},{"_id":"public/lib/pjax/LICENSE","hash":"2c7168814d9d35ea9500809b0904962f511eb4a8","modified":1730134030410},{"_id":"public/lib/pjax/tests/test.ts","hash":"5fc54ab37b36965037b2476e62adbc684cdd5537","modified":1730134030410},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png","hash":"6e0bf2a27a938ea2dd5d03d1c893c98b1cd6aff8","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png","hash":"b18268ea95d8b3256a4b6cf476f76e77b820d14b","modified":1730134030410},{"_id":"public/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png","hash":"556f97266a898d436eb241fe36e04562b4a76448","modified":1730134030410},{"_id":"public/2024/09/21/LeetCode-P4/p2.png","hash":"5fcaecfe56ef8074aebeb98783c70eae2cd45676","modified":1730134030410},{"_id":"public/2024/09/21/LeetCode-P4/p1.png","hash":"2b98623ba44e6eefa5838e3a949e1e7f2d363fd3","modified":1730134030410},{"_id":"public/2024/09/21/LeetCode-P4/P4.fig","hash":"cface4afc2a4a7b0b3806c92aeb5ee23de267be7","modified":1730134030410},{"_id":"public/2024/10/28/SPA-A2/pic6.png","hash":"7a5e27da54be8eea0c4691fd8ce11cc508c1b3ae","modified":1730134030410},{"_id":"public/2024/10/28/SPA-A2/SPA-A2-IR示意图.fig","hash":"1fa7f57109d343c698e16e3701eab38009d942f6","modified":1730134030410},{"_id":"public/2024/09/08/hello-world/test.txt","hash":"f49ca7a5a1d8058de58f1c715d20105186dd9106","modified":1730134030410},{"_id":"public/images/hikari_tairitsu/avatar.jpg","hash":"2c0edcf5c1b0d07f8b4733bb90155faedf4c6a3f","modified":1730134030410},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1730134030410},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png","hash":"a5d6238f80bd187d177650a6fdec7a60775db466","modified":1730134030410},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1730134030410},{"_id":"public/css/main.css","hash":"912eb781198b1f8b0978af15e6b8578fb48d021d","modified":1730134030410},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1730134030410},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1730134030410},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1730134030410},{"_id":"public/js/next-boot.js","hash":"1db2e0d1486ff7792eb36b7924a464569329f47c","modified":1730134030410},{"_id":"public/js/utils.js","hash":"7096e3d049263aff233c795b959910e34f1bde06","modified":1730134030410},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1730134030410},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1730134030410},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1730134030410},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1730134030410},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1730134030410},{"_id":"public/lib/pjax/CHANGELOG.html","hash":"dca956c3e61e68bf3eb9eab2d2f79b3cfe5492b2","modified":1730134030410},{"_id":"public/lib/pjax/package.json","hash":"da55143475b12cb91a44aeb5a995c53879fe3326","modified":1730134030410},{"_id":"public/lib/pjax/README.html","hash":"f05e5fafe43fa4a3aa205391417bc36b3706d964","modified":1730134030410},{"_id":"public/lib/pjax/index.js","hash":"4af61bcf253ce67d67bb0f524b441869301de9a5","modified":1730134030410},{"_id":"public/lib/pjax/pjax.min.js","hash":"68d0c6ad28f042c78fc18a6e9d782a7047c01905","modified":1730134030410},{"_id":"public/lib/pjax/pjax.js","hash":"e973e2c6ffb6f6d7b4a1730ba0ed6d3628b2b39f","modified":1730134030410},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1730134030410},{"_id":"public/lib/pjax/lib/abort-request.js","hash":"cbae038c94f70163340801cb608f4e503640b88d","modified":1730134030410},{"_id":"public/lib/pjax/example/forms.html","hash":"aa62fc6e697e17e16a947eb0176dc24e2e42d72c","modified":1730134030410},{"_id":"public/lib/pjax/lib/execute-scripts.js","hash":"8c7c18b14c11af7e2d8dd0146b7df428bf8149bb","modified":1730134030410},{"_id":"public/lib/pjax/example/example.js","hash":"48b27c93eb351d2fa91247c35038a9f1627e971a","modified":1730134030410},{"_id":"public/lib/pjax/example/page3.html","hash":"8d1d6a9afd80caf29e5b22f10a849b23a864a6a4","modified":1730134030410},{"_id":"public/lib/pjax/example/page2.html","hash":"7654e0a5a471bec5d74fb88d9f2f218817afdd52","modified":1730134030410},{"_id":"public/lib/pjax/lib/foreach-selectors.js","hash":"b11d36344a7a6aa36d533a335785772c9bfb6bc9","modified":1730134030410},{"_id":"public/lib/pjax/lib/foreach-els.js","hash":"d8e50967878930891112f4acb46f47697ddc3ad7","modified":1730134030410},{"_id":"public/lib/pjax/lib/is-supported.js","hash":"62ede7268080ab7efddd64fced8b3e79af2901f6","modified":1730134030410},{"_id":"public/lib/pjax/lib/parse-options.js","hash":"054a902e9f350f7414b80f62419da004dd90aa37","modified":1730134030410},{"_id":"public/lib/pjax/lib/switches-selectors.js","hash":"f31b4af163db3d9a5b3bb7c7534a4a2dd5543435","modified":1730134030410},{"_id":"public/lib/pjax/lib/send-request.js","hash":"15c341d066b0d60879ef3ca5ff858103381fb378","modified":1730134030410},{"_id":"public/lib/pjax/lib/switches.js","hash":"4e283f667c10e0fea15e269f1c73ccb699979bb4","modified":1730134030410},{"_id":"public/lib/pjax/tests/setup.js","hash":"4a9489e72cbe98527931d95d68b68e2d6a9bff6e","modified":1730134030410},{"_id":"public/lib/pjax/lib/uniqueid.js","hash":"eb127cf8936e5bdcaa7459cf5bd042ff96b5a387","modified":1730134030410},{"_id":"public/lib/pjax/lib/events/on.js","hash":"111fba16cc4ca701aefedea2589c832b60af303d","modified":1730134030410},{"_id":"public/lib/pjax/lib/eval-script.js","hash":"d5980b3c5f3c1a95427eab0d7d2263324fb72bca","modified":1730134030410},{"_id":"public/lib/pjax/lib/events/off.js","hash":"79920b24246e150f1c73511f1a271b93b9c5d9c8","modified":1730134030410},{"_id":"public/lib/pjax/lib/events/trigger.js","hash":"c05ba73199c5e2c7682655491ed37743bd451751","modified":1730134030410},{"_id":"public/lib/pjax/lib/proto/attach-form.js","hash":"b41c66e58897e6371fbd04cd2b9eb7bae10e0d89","modified":1730134030410},{"_id":"public/lib/pjax/lib/proto/attach-link.js","hash":"d15a61235aa8c1615e60ea34d9bbee834be804d0","modified":1730134030410},{"_id":"public/lib/pjax/lib/proto/handle-response.js","hash":"f68bab958cce4dbbcb91920d7a8aba55b9066b41","modified":1730134030410},{"_id":"public/lib/pjax/example/index.html","hash":"4a00b556253eeb11fc10013c8c3940a019154001","modified":1730134030410},{"_id":"public/lib/pjax/lib/proto/log.js","hash":"c728730594aed7d81509787c5bb487af014415e1","modified":1730134030410},{"_id":"public/lib/pjax/lib/proto/parse-element.js","hash":"52bef8a845aab0d54907f73875fa58b4084019be","modified":1730134030410},{"_id":"public/lib/pjax/lib/util/clone.js","hash":"55027b88e007818c6963205fcd0090a61af8237c","modified":1730134030410},{"_id":"public/lib/pjax/lib/util/contains.js","hash":"fcc9be0477d941b7c4ba71de328773e556ded7ce","modified":1730134030410},{"_id":"public/lib/pjax/lib/util/noop.js","hash":"2c9f7e231af1a62db195875ca62df7edc253c3c4","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/eval-scripts.js","hash":"3c9125a04cec9d511f16f9311656533ef6a115d1","modified":1730134030410},{"_id":"public/lib/pjax/lib/util/update-query-string.js","hash":"eefcbff322f8c607865d47ee8fa49f1c8bfa8d7a","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/events.js","hash":"70ca7ec140d1dcf8c4958e7b6788b09ef2b60181","modified":1730134030410},{"_id":"public/lib/pjax/lib/util/extend.js","hash":"e599aaef93e3a00ccbd92cd87df09898d712e398","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/foreach-els.js","hash":"85995dd27d0d866cfaf5c560732fab8b0099938c","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/execute-scripts.js","hash":"2d02a0151ead9924516cdae9308f8667b27a7ea7","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/foreach-selectors.js","hash":"898b48ef191719070488f16a54fba8a794b10057","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/abort-request.js","hash":"96d7a604ca275455199bd94d16b9cdc254bee9b9","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/parse-options.js","hash":"45ab302da33e5457a71fd22bbd082e51f5b06b49","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/send-request.js","hash":"d6adad7f95754c53b9885c0999a5118995fdc76f","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/is-supported.js","hash":"e25c7e69c8b7a64a44affcae317adb2b3889aee6","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/switch-selectors.js","hash":"993dd67b1b629288feb8d167fb12b602626cf1d5","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/proto/attach-link.js","hash":"9d283cb0b09730e932673c73a3352a2d2e8939fa","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/switches.js","hash":"f5dfdf57bafd2b4edd5f854d70837b5fe760756e","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/proto/handle-response.js","hash":"26e0e334f0b20ff2fe75b3ab12a93ce44a5823f0","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/uniqueid.js","hash":"430550f31b9e6356c2e3a033c1b418bd6acd9667","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/proto/parse-element.js","hash":"474edc8844028de67cbad054da79c05727620785","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/util/contains.js","hash":"bc0c8be855e9736cb256a2aa44fd46f3a7d1d6c5","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/util/clone.js","hash":"4b0e62bd0f4eef3549b0da70987f63ce4953bef0","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/proto/attach-form.js","hash":"3614a962e3185b354a2e0d987bcecdef4a209da6","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/util/update-query-string.js","hash":"4158dcd877c5f229400417e0da22eb4c5b8e8e38","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/util/noop.js","hash":"6959a4c02c41453a5edfa4163e36752fcfa3edf9","modified":1730134030410},{"_id":"public/lib/pjax/tests/lib/util/extend.js","hash":"d45488ff6f8e3e1b59a62d0c88c86b750fe50ed4","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png","hash":"092d9dca186f75a11e1408d8d1bbb9f379e4b172","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png","hash":"60fd3465aa635f3dfecb3be98b22efdd9ca6897f","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png","hash":"3b72face6ef696f051d916b13e4f1648b63b499b","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png","hash":"480a3edaa705475401db2fb873326151985b1f66","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png","hash":"023729df677ba9b638aafed18a14b0e15d5ceb4e","modified":1730134030410},{"_id":"public/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png","hash":"35d876713df544c20ab77e5722dc9608ba242286","modified":1730134030410},{"_id":"public/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png","hash":"66945618fb91e93cf151904b3a8ad3699cbcfaa1","modified":1730134030410},{"_id":"public/2024/10/20/SPA-A1/pic1.png","hash":"cf90af784d6d894635f8b035989ef119a917d691","modified":1730134030410},{"_id":"public/2024/10/20/SPA-A1/pic2.png","hash":"dc0d9a67d2a034428415d7da77d7407f0b924f4a","modified":1730134030410},{"_id":"public/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png","hash":"a69db2ced9f20a604f3507b388c98ed97d76391e","modified":1730134030410},{"_id":"public/2024/10/28/SPA-A2/pic2.png","hash":"fd4dddbc2f86738ba28962636762e65cab03c7f5","modified":1730134030410},{"_id":"public/2024/10/28/SPA-A2/pic3.png","hash":"32906bde5aeb02bb8d9ab10f1e08b22f0b2ff90f","modified":1730134030410},{"_id":"public/2024/10/28/SPA-A2/pic4.png","hash":"e1933b1b51b45568089ae71e72c03c73c4605b94","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png","hash":"e7855296030e7cf77637b82ea94322651ca0a1ac","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png","hash":"0da9857ddea00179ed911ac070c812689efbfefb","modified":1730134030410},{"_id":"public/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png","hash":"c9b9d9dfe32dc8d3a396e47a52f73495724ec740","modified":1730134030410},{"_id":"public/2024/10/28/SPA-A2/pic1.png","hash":"8ee41437e3906eb29a3a1f6493007d1b13cbb503","modified":1730134030410},{"_id":"public/2024/10/20/SPA-A1/pic3.png","hash":"ed4db827bc36e997cd72c834ae5d457d5a393907","modified":1730134030410},{"_id":"public/2024/10/28/SPA-A2/pic7.png","hash":"76aec718ca9537be2954a93497397eb65e8b1df3","modified":1730134030410},{"_id":"public/2024/10/28/SPA-A2/pic5.png","hash":"6764066a82c1fca12d7cbc16b674a51d22a76a59","modified":1730134030410},{"_id":"public/images/hikari_tairitsu/512x512.png","hash":"585cd7139de7f0823d5b74b6a2e65e51206a62f8","modified":1730134030410},{"_id":"public/images/hikari_tairitsu/android-chrome-512x512.png","hash":"585cd7139de7f0823d5b74b6a2e65e51206a62f8","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png","hash":"8689c4fc9af5e5dfbd49238799e7518373f4e15c","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png","hash":"884efd303ca1b3c5fd1d8413996ec83f85514dd9","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png","hash":"ba76dc635506ca916057049fac464a357f34a027","modified":1730134030410},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png","hash":"2f59ef050e9131c6b34a0e05eaeef69caa1de6ac","modified":1730134030410},{"_id":"public/2024/09/08/hello-world/picture.png","hash":"a18f398678d463eec974cfc47b722cec91f83d36","modified":1730134030410}],"Category":[{"name":"读书笔记","_id":"cm2t94r2y0004gwild6lb6l8y"},{"name":"LeetCode刷题记录","_id":"cm2t94r3a0011gwil0pp5bb9l"},{"name":"NJU静态分析实验记录","_id":"cm2t94r3c0015gwileut9er4h"},{"name":"杂项","_id":"cm2t94r3d001cgwildsox60xf"}],"Data":[],"Page":[{"title":"404 Not Found","date":"2024-09-12T15:49:23.000Z","comments":0,"toc":false,"_content":"","source":"404/index.md","raw":"---\ntitle: 404 Not Found\ndate: 2024-09-12 23:49:23\npermalink: /404.html\ncomments: false\ntoc: false\n---\n","updated":"2024-09-12T15:57:04.704Z","path":"/404.html","layout":"page","_id":"cm2t94r2q0000gwil7vi69lhi","content":"\r\n","length":0,"excerpt":"","more":"\r\n"},{"title":"Tags","date":"2024-09-08T09:29:15.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2024-09-08 17:29:15\ntype: tags\ncomments: false\n---\n","updated":"2024-09-08T09:57:50.758Z","path":"tags/index.html","layout":"page","_id":"cm2t94r2w0002gwilap7vcmei","content":"\r\n","length":0,"excerpt":"","more":"\r\n"},{"title":"About","date":"2024-09-08T09:34:16.000Z","_content":"\nTBD\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2024-09-08 17:34:16\n---\n\nTBD\n","updated":"2024-09-08T12:07:14.611Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm2t94r2z0006gwil425f2w96","content":"<p>TBD</p>\r\n","length":1,"excerpt":"","more":"<p>TBD</p>\r\n"},{"title":"Categories","date":"2024-09-08T12:08:26.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2024-09-08 20:08:26\ntype: categories\ncomments: false\n---\n","updated":"2024-09-08T12:13:39.004Z","path":"categories/index.html","layout":"page","_id":"cm2t94r300008gwil8suw3xem","content":"\r\n","length":0,"excerpt":"","more":"\r\n"}],"Post":[{"title":"读书笔记-大话设计模式 Ch1-","date":"2024-09-24T15:12:19.000Z","hidden":true,"_content":"\n[Chapter 1: 简单工厂模式](#chapter-1-简单工厂模式)\n\n**好的代码可维护, 可复用, 可扩展, 灵活性强.**\n\n<!--more-->\n\n<p><font size = 5><b>目录</b></font></p>\n\n## Chapter 1: 简单工厂模式\n","source":"_posts/BookNote-DesignPatterns-by-JieCheng-2.md","raw":"---\ntitle: 读书笔记-大话设计模式 Ch1-\ndate: 2024-09-24 23:12:19\nhidden: true\ntags:\n- 读书笔记\n- 设计模式\ncategories:\n- 读书笔记\n---\n\n[Chapter 1: 简单工厂模式](#chapter-1-简单工厂模式)\n\n**好的代码可维护, 可复用, 可扩展, 灵活性强.**\n\n<!--more-->\n\n<p><font size = 5><b>目录</b></font></p>\n\n## Chapter 1: 简单工厂模式\n","slug":"BookNote-DesignPatterns-by-JieCheng-2","published":1,"updated":"2024-09-24T15:39:52.964Z","comments":1,"layout":"post","photos":[],"_id":"cm2t94r2t0001gwil1vuk7shg","content":"<p><a href=\"#chapter-1-简单工厂模式\">Chapter 1: 简单工厂模式</a></p>\r\n<p><strong>好的代码可维护, 可复用, 可扩展, 灵活性强.</strong></p>\r\n<span id=\"more\"></span>\r\n<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<h2 id=\"chapter-1-简单工厂模式\">Chapter 1: 简单工厂模式</h2>\r\n<!-- flag of hidden posts -->","length":44,"excerpt":"<p><a href=\"#chapter-1-简单工厂模式\">Chapter 1: 简单工厂模式</a></p>\r\n<p><strong>好的代码可维护, 可复用, 可扩展, 灵活性强.</strong></p>","more":"<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<h2 id=\"chapter-1-简单工厂模式\">Chapter 1: 简单工厂模式</h2>"},{"title":"读书笔记-机器学习 Ch2","date":"2024-09-24T15:38:02.000Z","hidden":false,"_content":"\n**有多个算法和参数生成的模型, 哪个才是好的模型?**\n\n<!-- more -->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [Chapter 2: 模型评估与选择](#chapter-2-模型评估与选择)\n  - [$ 2.1 经验误差与过拟合](#-21-经验误差与过拟合)\n  - [$ 2.2 评估方法](#-22-评估方法)\n    - [$ 2.2.1 留出法(Hold-Out)](#-221-留出法hold-out)\n    - [$ 2.2.2 交叉验证法(Cross Validation)](#-222-交叉验证法cross-validation)\n    - [$ 2.2.3 自助法(Bootstapping)](#-223-自助法bootstapping)\n    - [$ 2.2.4 调参与最终模型](#-224-调参与最终模型)\n  - [$ 2.3 性能度量](#-23-性能度量)\n    - [$ 2.3.1 错误率与精度](#-231-错误率与精度)\n    - [$ 2.3.2 查准率(Precision), 查全率(Recall), F1](#-232-查准率precision-查全率recall-f1)\n    - [$ 2.3.3 ROC与AUC](#-233-roc与auc)\n    - [$ 2.3.4 代价敏感错误率与代价曲线](#-234-代价敏感错误率与代价曲线)\n  - [$ 2.4 比较检验](#-24-比较检验)\n    - [$ 2.4.1 假设检验](#-241-假设检验)\n    - [$ 2.4.2 多学习器比较](#-242-多学习器比较)\n  - [2.5 偏差与方差](#25-偏差与方差)\n\n---\n\n## Chapter 2: 模型评估与选择\n\n### $ 2.1 经验误差与过拟合\n\n- **错误率(Error Rate):** 分类错误的样本数占样本总数的比例, 记样本数为$m$, $a$个错误分类的样本, 错误率 $E=\\frac{a}{m}$ .\n\n- **精度(Accuracy):** $(1 - \\frac{a}{m}) \\times 100\\%$ 称为精度, 即 \"精度 = 1 - 错误率\".\n\n- **误差(Error):** 更一般地, 我们把**学习器的实际预测输出**与**样本的真实输出**之间的差异称为误差, 学习器在训练集上的误差称为 **训练误差(Training Error)/经验误差(Empirical Error)**, 在新样本上的误差称为**泛化误差(Generalization Error)**.\n\n    > **Tips:** 这里的误差均指**误差期望**.\n\n尽管我们希望得到一个泛化误差小的学习器, 使得其在新样本上表现很好, 但我们并不能预测新样本, 因此我们只能尝试降低经验误差. 但经验误差很小的学习器往往在泛化误差的表现上都很糟糕. 这样的学习器发生了**过拟合**.\n\n- **过拟合(Overfitting):** 学习器可能将训练样本自身的一些特点当作了所有潜在样本都具有的一般性质, 导致泛化能力下降的现象.\n\n- **欠拟合(Underfitting):** 与过拟合相对, 指对训练样本的一般性质尚未学好.\n\n![pic2-1](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png)\n\n> **Tips:** 导致过拟合的原因很多, 最常见的原因是学习能力过强; 欠拟合则相反, 因为学习能力低下. 欠拟合容易克服, 但过拟合很难解决, 且过拟合无法彻底避免.\n\n- **模型选择(Model Selection):** 在实际中, 面对同一个问题, 往往有多种学习算法可以选择, 参数配置也会对模型产生影响.\n\n![spic2-2](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png)\n\n### $ 2.2 评估方法\n\n通常我们可以通过实验测试对学习器的泛化误差进行评估, 使用**测试集(Testing Set)**测试学习器对新样本的判别能力, 以测试集上**测试误差(Testing Error)**作为泛化误差的近似. 但需要注意的是, 测试集应尽可能与训练集互斥.\n\n> 假设我们有且只有一个包含$m$个样例的数据集$D = \\{(x_1,y_1),(x_2,y_2), ..., (x_m,y_m)\\}$, 既要训练, 又要测试, 这样就需要对$D$进行适当处理, 从中产生 **训练集** $S$和 **测试集** $T$.\n\n#### $ 2.2.1 留出法(Hold-Out)\n\n留出法的思路很简单, 直接将数据集$D$划分成两个互斥的集合, 即$D = S \\cup T, S \\cap T = \\emptyset$.\n\n使用留出法时需要注意训练集和测试集的划分需要保持数据分布一致性, 避免因数据划分引入额外偏差对结果产生影响. 同时单次留出法得到的估计往往并不够准确可靠, 一般采用若干次随机划分, 重复进行实验评估取平均值作为留出法评估结果. 关于划分比例, 通常取2/3 ~ 4/5的样本用于训练, 其余用于测试.\n\n#### $ 2.2.2 交叉验证法(Cross Validation)\n\n交叉验证法可以看作是一种具体的留出法, 其方法过程是:\n\n先将数据集$D$划分为$k$个大小相似的互斥子集, $D = D_1 \\cup D_2 \\cup ... \\cup D_k, D_i \\cap D_j = \\emptyset (i \\neq j)$, 子集$D_i$通过保留类别比例的**分层采样(Stratified Sampling)**来尽可能保持数据分布一致性.\n\n接下来每次取$k-1$个子集作为训练集, 余下一个作为测试集, 进行$k$次训练和测试, 最终结果取$k$个结果的均值.\n\n![pic2-2](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png)\n\n显然交叉验证法评估结果的**稳定性(Stability)**和**保真性(Fidelity)**与$k$的取值强相关. 故而交叉验证法又称**k折交叉验证(k-fold Cross Validation)**. 最常见的取值是 $k=10$.\n\n由于$D$的$k$划分不唯一, k折交叉验证通常也要重复多次, 记为$p$, 最终结果取这$p$次k折交叉验证结果的均值.\n\n**留一法(Leave-One-Out, LOO)**, $|D| = m$, 则令$k = m$ 就得到了留一法.\n\n留一法的优势是不受样本划分影响(有且仅有一种划分方式), 训练集仅比$D$少一个样本, 绝大多数情况下留一法中被评估的模型与期望用$D$训练的模型相似. 因此认为留一法评估结果较为准确. 缺点是当$m$较大时, 计算开销过大以致无法接受.\n\n#### $ 2.2.3 自助法(Bootstapping)\n\n留出法和交叉验证法都保留了一部分样本用于测试, 因此实际评估的模型所使用的训练集比$D$小, 必然会引入一些因训练样本规模不同而导致的估计偏差. 留一法的计算复杂度又太高了. 自助法提供了一个较好的解决方案.\n\n自助法直接以 **自助采样法(Bootstrap Sampling)** 为基础. 给定包含$m$个样本的数据集$D$, 对其进行采样产生数据集$D'$. 采样过程每次随即从$D$中挑选一个样本, 将拷贝放入$M'$ **(意味着下次采样该样本仍有可能被采样到)**. 重复该过程$m$次, 得到了包含$m$个样本的数据集$D'$.\n\n  > **Tips:** 此处\"自助\"为意译, 称**可重复采样/有放回采样**更符合其原理.\n\n不难看出, 可能存在部分样本被多次采样到, 部分样本未被采样到. 我们关注某个样本在$m$次中未被采样的概率,有\n\n$$\\begin{equation}\n\\lim_{m \\rightarrow \\infty}(1 - \\frac{1}{m})^m  = \\frac{1}{e} \\approx 0.368 \\tag{2.1}\n\\end{equation}$$\n\n通过自主采样, 初始数据集$D$中约有$36.8\\%$的样本未出现在采样数据集$D'$中, 将$D'$作为训练集, $D \\backslash D'$作为测试集. 这样的测试结果称为**包外估计(Out-Of-Bagestimate)**.\n\n自助法在数据集较小, 难以有效划分训练和测试集的时候具有优势. 但自助法产生的数据集改变了初始数据集的分布, 会引入估计误差. 初始数据集较大时更常用留出法和交叉验证法.\n\n#### $ 2.2.4 调参与最终模型\n\n**参数(Parameter)**和**调参(Parameter Tuning)**释义见名称.\n\n> **Tips:** 机器学习常涉及两类参数: 算法参数和模型参数.\n\n- **验证集(Validation Set):** 模型评估与选择中用于评估测试的数据集常称为验证集.\n\n  > **Additonal:** 关于训练集, 测试集和验证集的区别, 笔者在此参考[**[知乎|训练集、验证集、测试集]**](https://zhuanlan.zhihu.com/p/98532085)\n\n### $ 2.3 性能度量\n\n- **性能度量(Performance Measure):** 衡量模型泛化能力的评价标准. 显然该标准取决于任务需求.\n\n以预测任务为例, 给定样例集$D = \\{(\\boldsymbol{x_1}, y_1), (\\boldsymbol{x_2}, y_2), ..., (\\boldsymbol{x_m}, y_m)\\}$, 其中$y_i$是$\\boldsymbol{x_i}$的真实标记, 评估学习器$f$的性能, 需要比较预测结果$f(x)$与真实标记$y$.\n\n回归任务常用性能度量**均方误差(Mean Squared Error)**\n\n$$\\begin{equation}\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}(f(\\boldsymbol{x_i}) - y_i)^2 \\tag{2.2}\n\\end{equation}$$\n\n更一般地, 对于数据分布$\\mathcal{D}$和概率密度函数$p(\\cdot)$, 均方误差描述为\n\n$$\\begin{equation}\nE(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}(f(\\boldsymbol{x}) - y)^2 p(\\boldsymbol{x}) d\\boldsymbol{x} \\tag{2.3}\n\\end{equation}$$\n\n#### $ 2.3.1 错误率与精度\n\n错误率和精度是分类任务中最常用的两种性能度量.\n\n对于样例集$\\mathcal{D}$, 错误率和精度定义为\n\n$$\\begin{equation}\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) \\neq y_i) \\tag{2.4}\n\\end{equation}$$\n\n$$\\begin{equation}\nacc(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) = y_i) = 1 - E(f;D) \\tag{2.5}\n\\end{equation}$$\n\n对于数据分布$\\mathcal{D}$和概率密度函数$p(\\cdot)$, 错误率和精度定义为\n\n$$\\begin{equation}\nE(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) \\neq y) p(\\boldsymbol{x}) d\\boldsymbol{x} \\tag{2.6}\n\\end{equation}$$\n\n$$\\begin{equation}\nacc(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) = y) p(\\boldsymbol{x}) d\\boldsymbol{x} = 1 - E(f;\\mathcal{D}) \\tag{2.7}\n\\end{equation}$$\n\n#### $ 2.3.2 查准率(Precision), 查全率(Recall), F1\n\n有时我们更关心模型的正确率, 比如说\"挑选出来的瓜有多少是好瓜\",\"有多少好瓜被挑选出来了\", 查准率和查全率更适合用来度量.\n\n对于二分类问题, 我们有**混淆矩阵(Confusion Matrix)**\n\n![tab2-1](BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png)\n\n定义查准率$P$, 查全率$R$\n\n$$\\begin{equation}\nP = \\frac{TP}{TP + FP}\\tag{2.8}\n\\end{equation}$$\n\n$$\\begin{equation}\nP = \\frac{TP}{TP + FN}\\tag{2.9}\n\\end{equation}$$\n\n> **Tips:** 自然语言解释就是, 查准率是在预测正确中实际正确的比率, 查全率是在实际正确中预测正确的比率.\n\n查准率和查全率是一对矛盾的度量, 二者负相关. 是**sound**和**complete**的关系\n\n![spic2-1](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png)\n\n> **Tips:** 该图片截选自NJU软件分析课件, ~~ly和tt老师应该不会在意吧(雾)~~\n>\n> 课程地址链接[**[Static Program Analysis]**](https://tai-e.pascal-lab.net/lectures.html)\n\n查准率和查全率的关系可以用**P-R图**表示\n\n![pic2-3](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png)\n\n- **平衡点(Break-Even Point, BEP):** $P=R$时的取值, 可基于BEP评估两个学习器的优劣, 如图2-3, 可认为$A>B>C$\n\n比BEP更常用的是$F1$度量定义为\n\n$$\\begin{equation}\nF1 = \\frac{2 \\times P \\times R}{P + R} = \\frac{2 \\times TP}{样例总数 + TP - TN}\\tag{2.10}\n\\end{equation}$$\n\n$F_{\\beta}$是$F_1$的一般形式, 定义为\n\n$$\\begin{equation}\nF_{\\beta} = \\frac{(1 + \\beta^2) \\times P \\times R}{(\\beta^2 \\times P) + R}\\tag{2.11}\n\\end{equation}$$\n\n其中$\\beta > 0$度量了查全率对查准率的相对重要性, $\\beta = 1$时退化为$F_1$, $\\beta > 1$时查全率影响更大, $\\beta < 1$时查准率影响更大.\n\n> **Tips:**\n>\n> $F_1$基于调和平均定义, $\\frac{1}{F_1} = \\frac{1}{2} \\cdot (\\frac{1}{P} + \\frac{1}{R})$.\n>\n> $F_\\beta$基于加权调和平均定义, $\\frac{1}{F_\\beta} = \\frac{1}{1 + \\beta^2} \\cdot (\\frac{1}{P} + \\frac{\\beta^2}{R})$\n\n若在n个二分类混淆矩阵上考察准确率和查全率, 我们有**macro**和**micro**两种选择.\n\n对于**宏(macro)**, 在各个混淆矩阵上分别计算$P$和$R$, 再取平均.得到**宏查准率(macro-P)**, **宏查全率(macro-R)**, **宏F1(macro-F1)**\n\n$$\\begin{equation}\nmacro\\text{-}P = \\frac{1}{n} \\sum_{i=1}^{n} P_i\\tag{2.12}\n\\end{equation}$$\n\n$$\\begin{equation}\nmacro\\text{-}R = \\frac{1}{n} \\sum_{i=1}^{n} R_i\\tag{2.13}\n\\end{equation}$$\n\n$$\\begin{equation}\nmacro\\text{-}F1 = \\frac{2 \\times macro\\text{-}P \\times macro\\text{-}R}{macro\\text{-}P + macro\\text{-}R}\\tag{2.14}\n\\end{equation}$$\n\n对于**微(micro)**, 先平均混淆矩阵得到$\\overline{TP}, \\overline{FP}, \\overline{TN}, \\overline{FN} $, 再计算出**微查准率(micro-P)**, **微查全率(micro-R)**, **微F1(micro-F1)**\n\n$$\\begin{equation}\nmicro\\text{-}P = \\frac{\\overline{TP}}{\\overline{TP}+\\overline{FP}}\\tag{2.15}\n\\end{equation}$$\n\n$$\\begin{equation}\nmicro\\text{-}R = \\frac{\\overline{TP}}{\\overline{TP}+\\overline{FN}}\n\\tag{2.16}\n\\end{equation}$$\n\n$$\\begin{equation}\nmicro\\text{-}F1 = \\frac{2 \\times micro\\text{-}P \\times micro\\text{-}R}{micro\\text{-}P + micro\\text{-}R}\\tag{2.17}\n\\end{equation}$$\n\n#### $ 2.3.3 ROC与AUC\n\n现重新考虑查准率和查全率, 首先我们来看看学习器如何给正/反的分类.\n\n很多学习器为测试样本产生一个实值或概率预测, 将预测值与**分类阈值(Threshold)**比较, 大于阈值则为正类, 否则为反类. 根据该实值或概率预测进行排序, 概率高的在前, 概率低的在后, 则这个分类阈值就是**截断点(Cut Point)**, 前一部分为正例, 后一部分为负例.\n\n不难得到以下结论: 截断点越靠前, 查准率增高而查全率降低; 截断点越靠后, 查准率降低而查全率增高. 同时, 排序质量越好的学习器\"在一般情况下\"泛化性能越好, ROC基于此度量模型的泛化能力.\n\n**受试者工作特征(Receiver Operating Characteristic, ROC)**, 根据学习器的预测结果对样例进行排序, 顺序逐个把样本作为正例进行预测(选择不同的截断点),计算 **真正例率(True Positive Rate, TPR)**, **假正例率(False Positive Rate, FPR)** 作为纵横轴.\n\n$$\\begin{equation}\nTPR = \\frac{TP}{TP + FN}\n\\tag{2.18}\n\\end{equation}$$\n\n$$\\begin{equation}\nFPR = \\frac{FP}{TN + FP}\n\\tag{2.19}\n\\end{equation}$$\n\n![pic2-4](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png)\n\n对角线对应随即猜测模型, 点(0, 1)对应所有正例在负例前的理想模型.\n\n- **AUC(Area Under ROC Curve):** ROC曲线下面积. 为依据两个模型绘制的ROC曲线比较两个模型的优劣而引入.\n\n对于离散样本, 计算AUC:\n\n$$\\begin{equation}\nAUC = \\frac{1}{2} \\sum^{m - 1}_{i=1}(x_{i+1} - x_i)\\cdot(y_i + y_{i + 1} )\n\\tag{2.19}\n\\end{equation}$$\n\n形式化上AUC度量排序质量, 记有$m^+$个正例, $m^-$个反例, 令$D^+$为正例集合, $D^-$为负例集合, 定义排序**损失(loss):**\n\n$$\\begin{equation}\n\\mathscr{l}_{rank} = \\frac{1}{m^+ m^-}\\sum_{x^+ \\in D^+} \\sum_{m^- \\in D^-}\\left(\\mathbb{I}(f(x^+)<f(x^-)) + \\frac{1}{2} \\mathbb{I}(f(x^+)= f(x^-))\\right)\n\\tag{2.21}\n\\end{equation}$$\n\n如何理解这个式子? 考虑每一对正反例, 若正例小于反例记一个\"罚分\", 相等则记半个. 不难看出, 对于每个正例/负例, 可能造成的\"罚分\"与其\"位置\", 越\"错误\"的位置会引起越多的\"罚分\", 这与AUC计算过程及其相似. 实际上, $\\mathscr{l}_{rank}$对应ROC曲线上方的面积, 有\n\n$$\\begin{equation}\nAUC = 1 - \\mathscr{l}_{rank}\n\\tag{2.22}\n\\end{equation}$$\n\n#### $ 2.3.4 代价敏感错误率与代价曲线\n\n为权衡不同类型错误所造成的不同损失, 我们为错误赋予**非均等代价(UnEqual Cost)**.\n\n以二分类为例, **代价矩阵(Cost Matrix)**如下:\n\n![tab2-2](BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png)\n\n若将0类记为正例, 1类记为负例, 定义$D^+, D^-$, **代价敏感(Cost-Sensitive)** 错误率为\n\n$$\\begin{equation}\nE(f;D;cost) = \\frac{1}{m} \\left(\\sum_{\\boldsymbol{x}_i \\in D^+} \\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i) \\times cost_{01} + \\sum_{\\boldsymbol{x}_i \\in D^-} \\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i) \\times cost_{10}\\right)\n\\tag{2.23}\n\\end{equation}$$\n\n非均等情况下, **代价曲线(Cost Curve)**可以解决ROC曲线不能反映出学习器的期望**总体代价(Total Cost)**问题.\n\n其横轴是取值为$[0,1]的$正例概率代价, 其中$p$为样例是正例的概率\n\n$$\\begin{equation}\nP(+)cost=\\frac{p \\times cost_{01}}{p \\times cost_{01} + (1 - p) \\times cost_{10}}\n\\tag{2.24}\n\\end{equation}$$\n\n纵轴是取值为$[0,1]$的归一化代价,FPR为假正例率, FNR为假反例率\n\n$$\\begin{equation}\ncost_{norm} = \\frac{FNR \\times p \\times cost_{01} + FPR \\times (1 - p) \\times cost_{10}}{p \\times cost_{01} + (1 - p) \\times cost_{10}}\n\\tag{2.25}\n\\end{equation}$$\n\n绘制代价曲线时, ROC曲线上每个点对应代价平面上的一条线段, 设ROC点坐标为$(FPR, TPR)$, 然后在代价平面上绘制一条从$(0, FPR)$到$(1, FNR)$的线段, 线段下面积代表了该条件下的期望总体代价.如此为每个点绘制线段, 取线段下界, 围成面积即为在所有条件下学习器的总体期望代价.\n\n![pic2-5](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png)\n\n> **Addtional:** 如何理解代价曲线?\n>\n> 笔者在此给出一篇参考[**[知乎|代价曲线的理解]**](https://www.zhihu.com/question/63492375).这篇参考中对大部分问题给到了解释.\n>\n> 在此额外补充一点困惑笔者许久的问题, 每一条线段代表什么?\n>\n> 每一条线段代表当前**阈值**条件下, 对不同样本集的期望代价. 具体来说, 是以FPR和FNR为预测值对不同样本集的预测.\n\n### $ 2.4 比较检验\n\n**统计假设检验(Hypothesis Test)** 为比较学习器性能提供了重要依据. 本节默认以错误率为性能度量, 用$\\epsilon$表示.\n\n#### $ 2.4.1 假设检验\n\n现实中我们无法知道学习器的泛化错误率 $\\epsilon$, 只能获知其测试错误率 $\\hat{\\epsilon}$. 常用测试错误率估推出泛化错误率.\n\n对于 $m$ 个测试样本, 如果测试错误率为 $\\hat{\\epsilon}$, 则被误分类的样本数量 $m'=\\hat{\\epsilon} \\times m$, 假定测试样本从样本总体分布中独立采样获得, 由**二项(Binomial)分布**, 泛化错误率为 $\\hat{\\epsilon}$ 的学习器恰有 $m'$ 个样本被误分类的概率是 $\\binom{m}{m'}\\epsilon^{m'}(1-\\epsilon)^{m-m'}$ . 同时, 这也表示泛化错误率为 $\\epsilon$ 的学习器在$m$个样本上测试得到测试错误率为 $\\hat{\\epsilon}$ 的概率:\n\n$$\\begin{equation}\nP(\\hat{\\epsilon};\\epsilon)=\\binom{m}{\\hat{\\epsilon} \\times m} \\epsilon^{\\hat{\\epsilon} \\times m} (1 - \\epsilon)^{m - \\hat{\\epsilon} \\times m}\n\\tag{2.26}\n\\end{equation}$$\n\n由二项分布性质, 或者计算 $P(\\hat{\\epsilon};\\epsilon)$ 对 $\\epsilon$ 的偏导, 可以知道 $P(\\hat{\\epsilon};\\epsilon)$ 在 $\\epsilon = \\hat{\\epsilon}$ 时最大, $|\\epsilon - \\hat{\\epsilon}|$ 增大时 $P(\\hat{\\epsilon};\\epsilon)$ 减小.\n\n若取 $m=10, \\epsilon = 0.3$, 示意图如2.6所示.\n\n![pic2-6](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png)\n\n> **Tips:** ~~死去的《概率论与数理统计》突然复活起来攻击我~~, 推荐复习笔记[**[知乎|概率论与数理统计复习整理]**](https://zhuanlan.zhihu.com/p/243215469).\n\n由**二项检验(Binomial Test)**, 考虑假设$\\epsilon \\leq \\epsilon_0$, 在 $1 - \\alpha$ 的概率内能观测到的最大错误率为\n\n$$\\begin{equation}\n\\bar{\\epsilon} = \\min \\epsilon \\ \\ \\text{s.t.} \\ \\ \\sum_{i = \\epsilon \\times m + 1}^{m} \\binom{m}{i}\\epsilon_0^i (1 - \\epsilon_0)^{m - i} < \\alpha\n\\tag{2.27}\n\\end{equation}$$\n\n其中 $1-\\alpha$ 为**置信度(Confidence)**, 直观上对应图2.6的非阴影部分; \"s.t.\"是\"subject to\", 使左边式子在右边式子条件满足时成立.\n\n若测试错误率 $\\hat{\\epsilon}$ 大于临界值 $\\bar{\\epsilon}$, 由二项检验, 我们可以认为在 $\\alpha$ 的显著度下, 假设 $\\epsilon \\leq \\hat{\\epsilon}$ 不能被拒绝, 即能以 $1-\\alpha$ 的置信度认为, 学习器的泛化错误率不高于 $\\epsilon_0$; 否则可以拒绝假设, 在 $\\alpha$ 的显著度下可认为学习器的泛化错误率大于 $\\epsilon_0$.\n\n在通过多次测试中中我们会获得多个测试错误率, 此时可使用**t检验(t-test)**.\n\n设$k$个错误率 $\\hat{\\epsilon_1}, \\hat{\\epsilon_2}, ..., \\hat{\\epsilon_k}$, 则平均错误率 $\\mu$, 方差 $\\sigma^2$ 为\n\n$$\\begin{equation}\n\\mu = \\frac{1}{k} \\sum_{i=1}^k \\hat{\\epsilon_i}\n\\tag{2.28}\n\\end{equation}$$\n\n$$\\begin{equation}\n\\sigma^2=\\frac{1}{k-1} \\sum^{k}_{i=1}(\\hat{\\epsilon_i} - \\mu)^2\n\\tag{2.29}\n\\end{equation}$$\n\n$k$ 个测试错误率可看作是泛化错误率 $\\epsilon_0$ 的独立采样, 则变量\n\n$$\\begin{equation}\n\\tau_t=\\frac{\\sqrt{k} (\\mu - \\epsilon_0)}{\\sigma}\n\\tag{2.30}\n\\end{equation}$$\n\n服从自由度为 $k-1$ 的 $t$ 分布.\n\n> **Addtional:** **基础知识补充**\n>\n> $\\chi^2$ 分布: $X_1, X_2, ..., X_n$ 为独立同分布随机变量, 服从 $N(0, 1)$, 则 $\\chi^2_n = \\sum_{i=1}^n X^2_i$ 为服从自由度为 $n$ 的 $\\chi^2$ 分布\n>\n> $t$ 分布: $X \\sim N(0,1), Y \\sim \\chi^2(n)$, $X,Y$ 独立, 称 $T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}$ 为服从自由度为 $n$ 的 $t$ 分布.\n\n> **Tips:** **推导补充**\n>\n>原书中没有关于这个$\\tau_t$服从$t$分布的推导, 笔者在此给出补充.\n>\n>假设$X_1,X_2,...X_n$是来自正态总体$N(\\mu,\\sigma^2)$的样本. 我们有以下重要统计量:\n>\n>$$\n>\\begin{align}\n>\\nonumber\\text{样本均值}& \\ \\bar{X}=\\frac{1}{n}\\sum_{i=1}^n >X_i \\\\\n>\\nonumber\\text{样本方差}& \\ S^2=\\frac{1}{n-1}\\sum_{i-1}^{n}(X_i-\\bar{X})^2\n>\\end{align}\n>$$\n>\n> 我们有几个重要结论:\n>\n> ![spic2-3](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png)\n>\n> 故而有推论:\n>\n> ![spic2-4](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png)\n\n对假设$\\mu=\\epsilon_0$和显著度$\\alpha$, 可以算出临界值——在$1-\\alpha$内能观测到的最大错误率. 考虑**双边假设(Two-Tailed)**, 若$\\tau_t$位于临界区$[t_{-\\alpha/2},t_{\\alpha/2}]$内(如图2.7所示), 则不能拒绝假设$\\mu=\\epsilon_0$. 我们可以认为泛化错误率为$\\epsilon_0$.\n\n![pic2-7](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png)\n\n#### $ 2.4.2 多学习器比较\n\n笔者对这部分不做过多记录, 翻阅原书该部分即可.\n\n对于两个学习器,我们有\n\n- 交叉验证t检验(基于成对t 检验)\n- McNember检验(基于列联表，卡方检验)\n\n对于多个学习器,我们有\n\n- Friedman检验(基于序值，F检验; 判断”是否都相同”)\n- Nemenyi后续检验(基于序值，进一步判断两两差别)\n\n### 2.5 偏差与方差\n\n- **偏差-方差分解(Bias-variance Decomposition)**\n\n对测试样本$\\boldsymbol{x}$, 令$y_D$为$\\boldsymbol{x}$在数据集的集中标记, $y$为$\\boldsymbol{x}$的真实标记, $f(\\boldsymbol{x};D)$为训练集$D$上的学得模型$f$在$\\boldsymbol{x}$上的预测输出.\n\n以回归算法为例, 我们有如下定义(符号定义见[**[Lapluma|读书笔记-机器学习 Ch0-Ch1]**](http://localhost:4000/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/#chapter-0-%E4%B8%BB%E8%A6%81%E7%AC%A6%E5%8F%B7%E8%A1%A8)):\n\n学习算法的期望预测.\n\n$$\\begin{equation}\n\\bar{f}(\\boldsymbol{x})=\\mathbb{E}_D[f(\\boldsymbol{x};D)]\n\\tag{2.37}\n\\end{equation}$$\n\n使用样本数相同的不同训练集产生的方差, 度量了同样大小的训练集变动导致的学习性能变化, 刻画了数据扰动造成的影响.\n\n$$\\begin{equation}\n\\mathcal{var}(\\boldsymbol{x})=\\mathbb{E}_D[(f(\\boldsymbol{x};D)-\\bar{f}(x))^2]\n\\tag{2.38}\n\\end{equation}$$\n\n噪声, 在当前学习任务上任何学习算法所能达到的期望泛化误差下界, 刻画了学习问题本身的难度.\n\n$$\\begin{equation}\n\\varepsilon^2=\\mathbb{E}_D[(y_D-y)^2]\n\\tag{2.39}\n\\end{equation}$$\n\n期望输出与真实标记的差别称为偏差, 度量了学习算法的期望预测与真是结果的偏离程度, 刻画了学习算法本身的拟合能力.\n\n$$\\begin{equation}\n\\mathcal{bias}^2(\\boldsymbol{x})=(\\bar{f}(\\boldsymbol{x})-y)^2\n\\tag{2.40}\n\\end{equation}$$\n\n便于讨论,我们假定噪声期望为0, 即$\\mathbb{E}_D[y_D-y]=0$, 对期望泛化误差进行分解(推导略, 见原书), 有\n\n$$\\begin{equation}\nE(f;D)=bias^2(\\boldsymbol{x})+var(\\boldsymbol{x})+\\varepsilon ^2\n\\tag{2.42}\n\\end{equation}$$\n\n即泛化误差可以分解为偏差, 方差和噪声之和.\n\n一般来说, 偏差和方差存在冲突, 称为**偏差-方差窘境(Bias-Variance Dilemma)**,见图2-9.\n\n![pic2-9](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png)\n\n训练不足时, 学习器拟合能力不足, 训练数据的扰动不足以使学习器产生显著变化, 此时偏差主导了泛化错误率;训练程度加深, 学习器拟合能力增强, 训练数据发生的扰动被学习器学习到, 方差逐渐主导了泛化错误率;训练充足后, 学习器拟合能力非常强. 训练数据发生轻微扰动都会导致学习器发生显著变化, 此时训练数据自身,非全局的性质被学习器学习, 发生过拟合.\n","source":"_posts/BookNote-MachineLearning-by-ZhihuaZhou-2.md","raw":"---\ntitle: 读书笔记-机器学习 Ch2\ndate: 2024-09-24 23:38:02\nhidden: false\ntags:\n- 读书笔记\n- 机器学习\ncategories:\n- 读书笔记\n---\n\n**有多个算法和参数生成的模型, 哪个才是好的模型?**\n\n<!-- more -->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [Chapter 2: 模型评估与选择](#chapter-2-模型评估与选择)\n  - [$ 2.1 经验误差与过拟合](#-21-经验误差与过拟合)\n  - [$ 2.2 评估方法](#-22-评估方法)\n    - [$ 2.2.1 留出法(Hold-Out)](#-221-留出法hold-out)\n    - [$ 2.2.2 交叉验证法(Cross Validation)](#-222-交叉验证法cross-validation)\n    - [$ 2.2.3 自助法(Bootstapping)](#-223-自助法bootstapping)\n    - [$ 2.2.4 调参与最终模型](#-224-调参与最终模型)\n  - [$ 2.3 性能度量](#-23-性能度量)\n    - [$ 2.3.1 错误率与精度](#-231-错误率与精度)\n    - [$ 2.3.2 查准率(Precision), 查全率(Recall), F1](#-232-查准率precision-查全率recall-f1)\n    - [$ 2.3.3 ROC与AUC](#-233-roc与auc)\n    - [$ 2.3.4 代价敏感错误率与代价曲线](#-234-代价敏感错误率与代价曲线)\n  - [$ 2.4 比较检验](#-24-比较检验)\n    - [$ 2.4.1 假设检验](#-241-假设检验)\n    - [$ 2.4.2 多学习器比较](#-242-多学习器比较)\n  - [2.5 偏差与方差](#25-偏差与方差)\n\n---\n\n## Chapter 2: 模型评估与选择\n\n### $ 2.1 经验误差与过拟合\n\n- **错误率(Error Rate):** 分类错误的样本数占样本总数的比例, 记样本数为$m$, $a$个错误分类的样本, 错误率 $E=\\frac{a}{m}$ .\n\n- **精度(Accuracy):** $(1 - \\frac{a}{m}) \\times 100\\%$ 称为精度, 即 \"精度 = 1 - 错误率\".\n\n- **误差(Error):** 更一般地, 我们把**学习器的实际预测输出**与**样本的真实输出**之间的差异称为误差, 学习器在训练集上的误差称为 **训练误差(Training Error)/经验误差(Empirical Error)**, 在新样本上的误差称为**泛化误差(Generalization Error)**.\n\n    > **Tips:** 这里的误差均指**误差期望**.\n\n尽管我们希望得到一个泛化误差小的学习器, 使得其在新样本上表现很好, 但我们并不能预测新样本, 因此我们只能尝试降低经验误差. 但经验误差很小的学习器往往在泛化误差的表现上都很糟糕. 这样的学习器发生了**过拟合**.\n\n- **过拟合(Overfitting):** 学习器可能将训练样本自身的一些特点当作了所有潜在样本都具有的一般性质, 导致泛化能力下降的现象.\n\n- **欠拟合(Underfitting):** 与过拟合相对, 指对训练样本的一般性质尚未学好.\n\n![pic2-1](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png)\n\n> **Tips:** 导致过拟合的原因很多, 最常见的原因是学习能力过强; 欠拟合则相反, 因为学习能力低下. 欠拟合容易克服, 但过拟合很难解决, 且过拟合无法彻底避免.\n\n- **模型选择(Model Selection):** 在实际中, 面对同一个问题, 往往有多种学习算法可以选择, 参数配置也会对模型产生影响.\n\n![spic2-2](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png)\n\n### $ 2.2 评估方法\n\n通常我们可以通过实验测试对学习器的泛化误差进行评估, 使用**测试集(Testing Set)**测试学习器对新样本的判别能力, 以测试集上**测试误差(Testing Error)**作为泛化误差的近似. 但需要注意的是, 测试集应尽可能与训练集互斥.\n\n> 假设我们有且只有一个包含$m$个样例的数据集$D = \\{(x_1,y_1),(x_2,y_2), ..., (x_m,y_m)\\}$, 既要训练, 又要测试, 这样就需要对$D$进行适当处理, 从中产生 **训练集** $S$和 **测试集** $T$.\n\n#### $ 2.2.1 留出法(Hold-Out)\n\n留出法的思路很简单, 直接将数据集$D$划分成两个互斥的集合, 即$D = S \\cup T, S \\cap T = \\emptyset$.\n\n使用留出法时需要注意训练集和测试集的划分需要保持数据分布一致性, 避免因数据划分引入额外偏差对结果产生影响. 同时单次留出法得到的估计往往并不够准确可靠, 一般采用若干次随机划分, 重复进行实验评估取平均值作为留出法评估结果. 关于划分比例, 通常取2/3 ~ 4/5的样本用于训练, 其余用于测试.\n\n#### $ 2.2.2 交叉验证法(Cross Validation)\n\n交叉验证法可以看作是一种具体的留出法, 其方法过程是:\n\n先将数据集$D$划分为$k$个大小相似的互斥子集, $D = D_1 \\cup D_2 \\cup ... \\cup D_k, D_i \\cap D_j = \\emptyset (i \\neq j)$, 子集$D_i$通过保留类别比例的**分层采样(Stratified Sampling)**来尽可能保持数据分布一致性.\n\n接下来每次取$k-1$个子集作为训练集, 余下一个作为测试集, 进行$k$次训练和测试, 最终结果取$k$个结果的均值.\n\n![pic2-2](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png)\n\n显然交叉验证法评估结果的**稳定性(Stability)**和**保真性(Fidelity)**与$k$的取值强相关. 故而交叉验证法又称**k折交叉验证(k-fold Cross Validation)**. 最常见的取值是 $k=10$.\n\n由于$D$的$k$划分不唯一, k折交叉验证通常也要重复多次, 记为$p$, 最终结果取这$p$次k折交叉验证结果的均值.\n\n**留一法(Leave-One-Out, LOO)**, $|D| = m$, 则令$k = m$ 就得到了留一法.\n\n留一法的优势是不受样本划分影响(有且仅有一种划分方式), 训练集仅比$D$少一个样本, 绝大多数情况下留一法中被评估的模型与期望用$D$训练的模型相似. 因此认为留一法评估结果较为准确. 缺点是当$m$较大时, 计算开销过大以致无法接受.\n\n#### $ 2.2.3 自助法(Bootstapping)\n\n留出法和交叉验证法都保留了一部分样本用于测试, 因此实际评估的模型所使用的训练集比$D$小, 必然会引入一些因训练样本规模不同而导致的估计偏差. 留一法的计算复杂度又太高了. 自助法提供了一个较好的解决方案.\n\n自助法直接以 **自助采样法(Bootstrap Sampling)** 为基础. 给定包含$m$个样本的数据集$D$, 对其进行采样产生数据集$D'$. 采样过程每次随即从$D$中挑选一个样本, 将拷贝放入$M'$ **(意味着下次采样该样本仍有可能被采样到)**. 重复该过程$m$次, 得到了包含$m$个样本的数据集$D'$.\n\n  > **Tips:** 此处\"自助\"为意译, 称**可重复采样/有放回采样**更符合其原理.\n\n不难看出, 可能存在部分样本被多次采样到, 部分样本未被采样到. 我们关注某个样本在$m$次中未被采样的概率,有\n\n$$\\begin{equation}\n\\lim_{m \\rightarrow \\infty}(1 - \\frac{1}{m})^m  = \\frac{1}{e} \\approx 0.368 \\tag{2.1}\n\\end{equation}$$\n\n通过自主采样, 初始数据集$D$中约有$36.8\\%$的样本未出现在采样数据集$D'$中, 将$D'$作为训练集, $D \\backslash D'$作为测试集. 这样的测试结果称为**包外估计(Out-Of-Bagestimate)**.\n\n自助法在数据集较小, 难以有效划分训练和测试集的时候具有优势. 但自助法产生的数据集改变了初始数据集的分布, 会引入估计误差. 初始数据集较大时更常用留出法和交叉验证法.\n\n#### $ 2.2.4 调参与最终模型\n\n**参数(Parameter)**和**调参(Parameter Tuning)**释义见名称.\n\n> **Tips:** 机器学习常涉及两类参数: 算法参数和模型参数.\n\n- **验证集(Validation Set):** 模型评估与选择中用于评估测试的数据集常称为验证集.\n\n  > **Additonal:** 关于训练集, 测试集和验证集的区别, 笔者在此参考[**[知乎|训练集、验证集、测试集]**](https://zhuanlan.zhihu.com/p/98532085)\n\n### $ 2.3 性能度量\n\n- **性能度量(Performance Measure):** 衡量模型泛化能力的评价标准. 显然该标准取决于任务需求.\n\n以预测任务为例, 给定样例集$D = \\{(\\boldsymbol{x_1}, y_1), (\\boldsymbol{x_2}, y_2), ..., (\\boldsymbol{x_m}, y_m)\\}$, 其中$y_i$是$\\boldsymbol{x_i}$的真实标记, 评估学习器$f$的性能, 需要比较预测结果$f(x)$与真实标记$y$.\n\n回归任务常用性能度量**均方误差(Mean Squared Error)**\n\n$$\\begin{equation}\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}(f(\\boldsymbol{x_i}) - y_i)^2 \\tag{2.2}\n\\end{equation}$$\n\n更一般地, 对于数据分布$\\mathcal{D}$和概率密度函数$p(\\cdot)$, 均方误差描述为\n\n$$\\begin{equation}\nE(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}(f(\\boldsymbol{x}) - y)^2 p(\\boldsymbol{x}) d\\boldsymbol{x} \\tag{2.3}\n\\end{equation}$$\n\n#### $ 2.3.1 错误率与精度\n\n错误率和精度是分类任务中最常用的两种性能度量.\n\n对于样例集$\\mathcal{D}$, 错误率和精度定义为\n\n$$\\begin{equation}\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) \\neq y_i) \\tag{2.4}\n\\end{equation}$$\n\n$$\\begin{equation}\nacc(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) = y_i) = 1 - E(f;D) \\tag{2.5}\n\\end{equation}$$\n\n对于数据分布$\\mathcal{D}$和概率密度函数$p(\\cdot)$, 错误率和精度定义为\n\n$$\\begin{equation}\nE(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) \\neq y) p(\\boldsymbol{x}) d\\boldsymbol{x} \\tag{2.6}\n\\end{equation}$$\n\n$$\\begin{equation}\nacc(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) = y) p(\\boldsymbol{x}) d\\boldsymbol{x} = 1 - E(f;\\mathcal{D}) \\tag{2.7}\n\\end{equation}$$\n\n#### $ 2.3.2 查准率(Precision), 查全率(Recall), F1\n\n有时我们更关心模型的正确率, 比如说\"挑选出来的瓜有多少是好瓜\",\"有多少好瓜被挑选出来了\", 查准率和查全率更适合用来度量.\n\n对于二分类问题, 我们有**混淆矩阵(Confusion Matrix)**\n\n![tab2-1](BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png)\n\n定义查准率$P$, 查全率$R$\n\n$$\\begin{equation}\nP = \\frac{TP}{TP + FP}\\tag{2.8}\n\\end{equation}$$\n\n$$\\begin{equation}\nP = \\frac{TP}{TP + FN}\\tag{2.9}\n\\end{equation}$$\n\n> **Tips:** 自然语言解释就是, 查准率是在预测正确中实际正确的比率, 查全率是在实际正确中预测正确的比率.\n\n查准率和查全率是一对矛盾的度量, 二者负相关. 是**sound**和**complete**的关系\n\n![spic2-1](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png)\n\n> **Tips:** 该图片截选自NJU软件分析课件, ~~ly和tt老师应该不会在意吧(雾)~~\n>\n> 课程地址链接[**[Static Program Analysis]**](https://tai-e.pascal-lab.net/lectures.html)\n\n查准率和查全率的关系可以用**P-R图**表示\n\n![pic2-3](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png)\n\n- **平衡点(Break-Even Point, BEP):** $P=R$时的取值, 可基于BEP评估两个学习器的优劣, 如图2-3, 可认为$A>B>C$\n\n比BEP更常用的是$F1$度量定义为\n\n$$\\begin{equation}\nF1 = \\frac{2 \\times P \\times R}{P + R} = \\frac{2 \\times TP}{样例总数 + TP - TN}\\tag{2.10}\n\\end{equation}$$\n\n$F_{\\beta}$是$F_1$的一般形式, 定义为\n\n$$\\begin{equation}\nF_{\\beta} = \\frac{(1 + \\beta^2) \\times P \\times R}{(\\beta^2 \\times P) + R}\\tag{2.11}\n\\end{equation}$$\n\n其中$\\beta > 0$度量了查全率对查准率的相对重要性, $\\beta = 1$时退化为$F_1$, $\\beta > 1$时查全率影响更大, $\\beta < 1$时查准率影响更大.\n\n> **Tips:**\n>\n> $F_1$基于调和平均定义, $\\frac{1}{F_1} = \\frac{1}{2} \\cdot (\\frac{1}{P} + \\frac{1}{R})$.\n>\n> $F_\\beta$基于加权调和平均定义, $\\frac{1}{F_\\beta} = \\frac{1}{1 + \\beta^2} \\cdot (\\frac{1}{P} + \\frac{\\beta^2}{R})$\n\n若在n个二分类混淆矩阵上考察准确率和查全率, 我们有**macro**和**micro**两种选择.\n\n对于**宏(macro)**, 在各个混淆矩阵上分别计算$P$和$R$, 再取平均.得到**宏查准率(macro-P)**, **宏查全率(macro-R)**, **宏F1(macro-F1)**\n\n$$\\begin{equation}\nmacro\\text{-}P = \\frac{1}{n} \\sum_{i=1}^{n} P_i\\tag{2.12}\n\\end{equation}$$\n\n$$\\begin{equation}\nmacro\\text{-}R = \\frac{1}{n} \\sum_{i=1}^{n} R_i\\tag{2.13}\n\\end{equation}$$\n\n$$\\begin{equation}\nmacro\\text{-}F1 = \\frac{2 \\times macro\\text{-}P \\times macro\\text{-}R}{macro\\text{-}P + macro\\text{-}R}\\tag{2.14}\n\\end{equation}$$\n\n对于**微(micro)**, 先平均混淆矩阵得到$\\overline{TP}, \\overline{FP}, \\overline{TN}, \\overline{FN} $, 再计算出**微查准率(micro-P)**, **微查全率(micro-R)**, **微F1(micro-F1)**\n\n$$\\begin{equation}\nmicro\\text{-}P = \\frac{\\overline{TP}}{\\overline{TP}+\\overline{FP}}\\tag{2.15}\n\\end{equation}$$\n\n$$\\begin{equation}\nmicro\\text{-}R = \\frac{\\overline{TP}}{\\overline{TP}+\\overline{FN}}\n\\tag{2.16}\n\\end{equation}$$\n\n$$\\begin{equation}\nmicro\\text{-}F1 = \\frac{2 \\times micro\\text{-}P \\times micro\\text{-}R}{micro\\text{-}P + micro\\text{-}R}\\tag{2.17}\n\\end{equation}$$\n\n#### $ 2.3.3 ROC与AUC\n\n现重新考虑查准率和查全率, 首先我们来看看学习器如何给正/反的分类.\n\n很多学习器为测试样本产生一个实值或概率预测, 将预测值与**分类阈值(Threshold)**比较, 大于阈值则为正类, 否则为反类. 根据该实值或概率预测进行排序, 概率高的在前, 概率低的在后, 则这个分类阈值就是**截断点(Cut Point)**, 前一部分为正例, 后一部分为负例.\n\n不难得到以下结论: 截断点越靠前, 查准率增高而查全率降低; 截断点越靠后, 查准率降低而查全率增高. 同时, 排序质量越好的学习器\"在一般情况下\"泛化性能越好, ROC基于此度量模型的泛化能力.\n\n**受试者工作特征(Receiver Operating Characteristic, ROC)**, 根据学习器的预测结果对样例进行排序, 顺序逐个把样本作为正例进行预测(选择不同的截断点),计算 **真正例率(True Positive Rate, TPR)**, **假正例率(False Positive Rate, FPR)** 作为纵横轴.\n\n$$\\begin{equation}\nTPR = \\frac{TP}{TP + FN}\n\\tag{2.18}\n\\end{equation}$$\n\n$$\\begin{equation}\nFPR = \\frac{FP}{TN + FP}\n\\tag{2.19}\n\\end{equation}$$\n\n![pic2-4](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png)\n\n对角线对应随即猜测模型, 点(0, 1)对应所有正例在负例前的理想模型.\n\n- **AUC(Area Under ROC Curve):** ROC曲线下面积. 为依据两个模型绘制的ROC曲线比较两个模型的优劣而引入.\n\n对于离散样本, 计算AUC:\n\n$$\\begin{equation}\nAUC = \\frac{1}{2} \\sum^{m - 1}_{i=1}(x_{i+1} - x_i)\\cdot(y_i + y_{i + 1} )\n\\tag{2.19}\n\\end{equation}$$\n\n形式化上AUC度量排序质量, 记有$m^+$个正例, $m^-$个反例, 令$D^+$为正例集合, $D^-$为负例集合, 定义排序**损失(loss):**\n\n$$\\begin{equation}\n\\mathscr{l}_{rank} = \\frac{1}{m^+ m^-}\\sum_{x^+ \\in D^+} \\sum_{m^- \\in D^-}\\left(\\mathbb{I}(f(x^+)<f(x^-)) + \\frac{1}{2} \\mathbb{I}(f(x^+)= f(x^-))\\right)\n\\tag{2.21}\n\\end{equation}$$\n\n如何理解这个式子? 考虑每一对正反例, 若正例小于反例记一个\"罚分\", 相等则记半个. 不难看出, 对于每个正例/负例, 可能造成的\"罚分\"与其\"位置\", 越\"错误\"的位置会引起越多的\"罚分\", 这与AUC计算过程及其相似. 实际上, $\\mathscr{l}_{rank}$对应ROC曲线上方的面积, 有\n\n$$\\begin{equation}\nAUC = 1 - \\mathscr{l}_{rank}\n\\tag{2.22}\n\\end{equation}$$\n\n#### $ 2.3.4 代价敏感错误率与代价曲线\n\n为权衡不同类型错误所造成的不同损失, 我们为错误赋予**非均等代价(UnEqual Cost)**.\n\n以二分类为例, **代价矩阵(Cost Matrix)**如下:\n\n![tab2-2](BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png)\n\n若将0类记为正例, 1类记为负例, 定义$D^+, D^-$, **代价敏感(Cost-Sensitive)** 错误率为\n\n$$\\begin{equation}\nE(f;D;cost) = \\frac{1}{m} \\left(\\sum_{\\boldsymbol{x}_i \\in D^+} \\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i) \\times cost_{01} + \\sum_{\\boldsymbol{x}_i \\in D^-} \\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i) \\times cost_{10}\\right)\n\\tag{2.23}\n\\end{equation}$$\n\n非均等情况下, **代价曲线(Cost Curve)**可以解决ROC曲线不能反映出学习器的期望**总体代价(Total Cost)**问题.\n\n其横轴是取值为$[0,1]的$正例概率代价, 其中$p$为样例是正例的概率\n\n$$\\begin{equation}\nP(+)cost=\\frac{p \\times cost_{01}}{p \\times cost_{01} + (1 - p) \\times cost_{10}}\n\\tag{2.24}\n\\end{equation}$$\n\n纵轴是取值为$[0,1]$的归一化代价,FPR为假正例率, FNR为假反例率\n\n$$\\begin{equation}\ncost_{norm} = \\frac{FNR \\times p \\times cost_{01} + FPR \\times (1 - p) \\times cost_{10}}{p \\times cost_{01} + (1 - p) \\times cost_{10}}\n\\tag{2.25}\n\\end{equation}$$\n\n绘制代价曲线时, ROC曲线上每个点对应代价平面上的一条线段, 设ROC点坐标为$(FPR, TPR)$, 然后在代价平面上绘制一条从$(0, FPR)$到$(1, FNR)$的线段, 线段下面积代表了该条件下的期望总体代价.如此为每个点绘制线段, 取线段下界, 围成面积即为在所有条件下学习器的总体期望代价.\n\n![pic2-5](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png)\n\n> **Addtional:** 如何理解代价曲线?\n>\n> 笔者在此给出一篇参考[**[知乎|代价曲线的理解]**](https://www.zhihu.com/question/63492375).这篇参考中对大部分问题给到了解释.\n>\n> 在此额外补充一点困惑笔者许久的问题, 每一条线段代表什么?\n>\n> 每一条线段代表当前**阈值**条件下, 对不同样本集的期望代价. 具体来说, 是以FPR和FNR为预测值对不同样本集的预测.\n\n### $ 2.4 比较检验\n\n**统计假设检验(Hypothesis Test)** 为比较学习器性能提供了重要依据. 本节默认以错误率为性能度量, 用$\\epsilon$表示.\n\n#### $ 2.4.1 假设检验\n\n现实中我们无法知道学习器的泛化错误率 $\\epsilon$, 只能获知其测试错误率 $\\hat{\\epsilon}$. 常用测试错误率估推出泛化错误率.\n\n对于 $m$ 个测试样本, 如果测试错误率为 $\\hat{\\epsilon}$, 则被误分类的样本数量 $m'=\\hat{\\epsilon} \\times m$, 假定测试样本从样本总体分布中独立采样获得, 由**二项(Binomial)分布**, 泛化错误率为 $\\hat{\\epsilon}$ 的学习器恰有 $m'$ 个样本被误分类的概率是 $\\binom{m}{m'}\\epsilon^{m'}(1-\\epsilon)^{m-m'}$ . 同时, 这也表示泛化错误率为 $\\epsilon$ 的学习器在$m$个样本上测试得到测试错误率为 $\\hat{\\epsilon}$ 的概率:\n\n$$\\begin{equation}\nP(\\hat{\\epsilon};\\epsilon)=\\binom{m}{\\hat{\\epsilon} \\times m} \\epsilon^{\\hat{\\epsilon} \\times m} (1 - \\epsilon)^{m - \\hat{\\epsilon} \\times m}\n\\tag{2.26}\n\\end{equation}$$\n\n由二项分布性质, 或者计算 $P(\\hat{\\epsilon};\\epsilon)$ 对 $\\epsilon$ 的偏导, 可以知道 $P(\\hat{\\epsilon};\\epsilon)$ 在 $\\epsilon = \\hat{\\epsilon}$ 时最大, $|\\epsilon - \\hat{\\epsilon}|$ 增大时 $P(\\hat{\\epsilon};\\epsilon)$ 减小.\n\n若取 $m=10, \\epsilon = 0.3$, 示意图如2.6所示.\n\n![pic2-6](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png)\n\n> **Tips:** ~~死去的《概率论与数理统计》突然复活起来攻击我~~, 推荐复习笔记[**[知乎|概率论与数理统计复习整理]**](https://zhuanlan.zhihu.com/p/243215469).\n\n由**二项检验(Binomial Test)**, 考虑假设$\\epsilon \\leq \\epsilon_0$, 在 $1 - \\alpha$ 的概率内能观测到的最大错误率为\n\n$$\\begin{equation}\n\\bar{\\epsilon} = \\min \\epsilon \\ \\ \\text{s.t.} \\ \\ \\sum_{i = \\epsilon \\times m + 1}^{m} \\binom{m}{i}\\epsilon_0^i (1 - \\epsilon_0)^{m - i} < \\alpha\n\\tag{2.27}\n\\end{equation}$$\n\n其中 $1-\\alpha$ 为**置信度(Confidence)**, 直观上对应图2.6的非阴影部分; \"s.t.\"是\"subject to\", 使左边式子在右边式子条件满足时成立.\n\n若测试错误率 $\\hat{\\epsilon}$ 大于临界值 $\\bar{\\epsilon}$, 由二项检验, 我们可以认为在 $\\alpha$ 的显著度下, 假设 $\\epsilon \\leq \\hat{\\epsilon}$ 不能被拒绝, 即能以 $1-\\alpha$ 的置信度认为, 学习器的泛化错误率不高于 $\\epsilon_0$; 否则可以拒绝假设, 在 $\\alpha$ 的显著度下可认为学习器的泛化错误率大于 $\\epsilon_0$.\n\n在通过多次测试中中我们会获得多个测试错误率, 此时可使用**t检验(t-test)**.\n\n设$k$个错误率 $\\hat{\\epsilon_1}, \\hat{\\epsilon_2}, ..., \\hat{\\epsilon_k}$, 则平均错误率 $\\mu$, 方差 $\\sigma^2$ 为\n\n$$\\begin{equation}\n\\mu = \\frac{1}{k} \\sum_{i=1}^k \\hat{\\epsilon_i}\n\\tag{2.28}\n\\end{equation}$$\n\n$$\\begin{equation}\n\\sigma^2=\\frac{1}{k-1} \\sum^{k}_{i=1}(\\hat{\\epsilon_i} - \\mu)^2\n\\tag{2.29}\n\\end{equation}$$\n\n$k$ 个测试错误率可看作是泛化错误率 $\\epsilon_0$ 的独立采样, 则变量\n\n$$\\begin{equation}\n\\tau_t=\\frac{\\sqrt{k} (\\mu - \\epsilon_0)}{\\sigma}\n\\tag{2.30}\n\\end{equation}$$\n\n服从自由度为 $k-1$ 的 $t$ 分布.\n\n> **Addtional:** **基础知识补充**\n>\n> $\\chi^2$ 分布: $X_1, X_2, ..., X_n$ 为独立同分布随机变量, 服从 $N(0, 1)$, 则 $\\chi^2_n = \\sum_{i=1}^n X^2_i$ 为服从自由度为 $n$ 的 $\\chi^2$ 分布\n>\n> $t$ 分布: $X \\sim N(0,1), Y \\sim \\chi^2(n)$, $X,Y$ 独立, 称 $T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}$ 为服从自由度为 $n$ 的 $t$ 分布.\n\n> **Tips:** **推导补充**\n>\n>原书中没有关于这个$\\tau_t$服从$t$分布的推导, 笔者在此给出补充.\n>\n>假设$X_1,X_2,...X_n$是来自正态总体$N(\\mu,\\sigma^2)$的样本. 我们有以下重要统计量:\n>\n>$$\n>\\begin{align}\n>\\nonumber\\text{样本均值}& \\ \\bar{X}=\\frac{1}{n}\\sum_{i=1}^n >X_i \\\\\n>\\nonumber\\text{样本方差}& \\ S^2=\\frac{1}{n-1}\\sum_{i-1}^{n}(X_i-\\bar{X})^2\n>\\end{align}\n>$$\n>\n> 我们有几个重要结论:\n>\n> ![spic2-3](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png)\n>\n> 故而有推论:\n>\n> ![spic2-4](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png)\n\n对假设$\\mu=\\epsilon_0$和显著度$\\alpha$, 可以算出临界值——在$1-\\alpha$内能观测到的最大错误率. 考虑**双边假设(Two-Tailed)**, 若$\\tau_t$位于临界区$[t_{-\\alpha/2},t_{\\alpha/2}]$内(如图2.7所示), 则不能拒绝假设$\\mu=\\epsilon_0$. 我们可以认为泛化错误率为$\\epsilon_0$.\n\n![pic2-7](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png)\n\n#### $ 2.4.2 多学习器比较\n\n笔者对这部分不做过多记录, 翻阅原书该部分即可.\n\n对于两个学习器,我们有\n\n- 交叉验证t检验(基于成对t 检验)\n- McNember检验(基于列联表，卡方检验)\n\n对于多个学习器,我们有\n\n- Friedman检验(基于序值，F检验; 判断”是否都相同”)\n- Nemenyi后续检验(基于序值，进一步判断两两差别)\n\n### 2.5 偏差与方差\n\n- **偏差-方差分解(Bias-variance Decomposition)**\n\n对测试样本$\\boldsymbol{x}$, 令$y_D$为$\\boldsymbol{x}$在数据集的集中标记, $y$为$\\boldsymbol{x}$的真实标记, $f(\\boldsymbol{x};D)$为训练集$D$上的学得模型$f$在$\\boldsymbol{x}$上的预测输出.\n\n以回归算法为例, 我们有如下定义(符号定义见[**[Lapluma|读书笔记-机器学习 Ch0-Ch1]**](http://localhost:4000/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/#chapter-0-%E4%B8%BB%E8%A6%81%E7%AC%A6%E5%8F%B7%E8%A1%A8)):\n\n学习算法的期望预测.\n\n$$\\begin{equation}\n\\bar{f}(\\boldsymbol{x})=\\mathbb{E}_D[f(\\boldsymbol{x};D)]\n\\tag{2.37}\n\\end{equation}$$\n\n使用样本数相同的不同训练集产生的方差, 度量了同样大小的训练集变动导致的学习性能变化, 刻画了数据扰动造成的影响.\n\n$$\\begin{equation}\n\\mathcal{var}(\\boldsymbol{x})=\\mathbb{E}_D[(f(\\boldsymbol{x};D)-\\bar{f}(x))^2]\n\\tag{2.38}\n\\end{equation}$$\n\n噪声, 在当前学习任务上任何学习算法所能达到的期望泛化误差下界, 刻画了学习问题本身的难度.\n\n$$\\begin{equation}\n\\varepsilon^2=\\mathbb{E}_D[(y_D-y)^2]\n\\tag{2.39}\n\\end{equation}$$\n\n期望输出与真实标记的差别称为偏差, 度量了学习算法的期望预测与真是结果的偏离程度, 刻画了学习算法本身的拟合能力.\n\n$$\\begin{equation}\n\\mathcal{bias}^2(\\boldsymbol{x})=(\\bar{f}(\\boldsymbol{x})-y)^2\n\\tag{2.40}\n\\end{equation}$$\n\n便于讨论,我们假定噪声期望为0, 即$\\mathbb{E}_D[y_D-y]=0$, 对期望泛化误差进行分解(推导略, 见原书), 有\n\n$$\\begin{equation}\nE(f;D)=bias^2(\\boldsymbol{x})+var(\\boldsymbol{x})+\\varepsilon ^2\n\\tag{2.42}\n\\end{equation}$$\n\n即泛化误差可以分解为偏差, 方差和噪声之和.\n\n一般来说, 偏差和方差存在冲突, 称为**偏差-方差窘境(Bias-Variance Dilemma)**,见图2-9.\n\n![pic2-9](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png)\n\n训练不足时, 学习器拟合能力不足, 训练数据的扰动不足以使学习器产生显著变化, 此时偏差主导了泛化错误率;训练程度加深, 学习器拟合能力增强, 训练数据发生的扰动被学习器学习到, 方差逐渐主导了泛化错误率;训练充足后, 学习器拟合能力非常强. 训练数据发生轻微扰动都会导致学习器发生显著变化, 此时训练数据自身,非全局的性质被学习器学习, 发生过拟合.\n","slug":"BookNote-MachineLearning-by-ZhihuaZhou-2","published":1,"updated":"2024-10-26T15:24:09.543Z","comments":1,"layout":"post","photos":[],"_id":"cm2t94r2w0003gwilfueubj7g","content":"<p><strong>有多个算法和参数生成的模型, 哪个才是好的模型?</strong></p>\r\n<span id=\"more\"></span>\r\n<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#chapter-2-模型评估与选择\">Chapter 2: 模型评估与选择</a>\r\n<ul>\r\n<li><a href=\"#-21-经验误差与过拟合\">$ 2.1 经验误差与过拟合</a></li>\r\n<li><a href=\"#-22-评估方法\">$ 2.2 评估方法</a>\r\n<ul>\r\n<li><a href=\"#-221-留出法hold-out\">$ 2.2.1 留出法(Hold-Out)</a></li>\r\n<li><a href=\"#-222-交叉验证法cross-validation\">$ 2.2.2 交叉验证法(Cross\r\nValidation)</a></li>\r\n<li><a href=\"#-223-自助法bootstapping\">$ 2.2.3\r\n自助法(Bootstapping)</a></li>\r\n<li><a href=\"#-224-调参与最终模型\">$ 2.2.4 调参与最终模型</a></li>\r\n</ul></li>\r\n<li><a href=\"#-23-性能度量\">$ 2.3 性能度量</a>\r\n<ul>\r\n<li><a href=\"#-231-错误率与精度\">$ 2.3.1 错误率与精度</a></li>\r\n<li><a href=\"#-232-查准率precision-查全率recall-f1\">$ 2.3.2\r\n查准率(Precision), 查全率(Recall), F1</a></li>\r\n<li><a href=\"#-233-roc与auc\">$ 2.3.3 ROC与AUC</a></li>\r\n<li><a href=\"#-234-代价敏感错误率与代价曲线\">$ 2.3.4\r\n代价敏感错误率与代价曲线</a></li>\r\n</ul></li>\r\n<li><a href=\"#-24-比较检验\">$ 2.4 比较检验</a>\r\n<ul>\r\n<li><a href=\"#-241-假设检验\">$ 2.4.1 假设检验</a></li>\r\n<li><a href=\"#-242-多学习器比较\">$ 2.4.2 多学习器比较</a></li>\r\n</ul></li>\r\n<li><a href=\"#25-偏差与方差\">2.5 偏差与方差</a></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"chapter-2-模型评估与选择\">Chapter 2: 模型评估与选择</h2>\r\n<h3 id=\"经验误差与过拟合\">$ 2.1 经验误差与过拟合</h3>\r\n<ul>\r\n<li><p><strong>错误率(Error Rate):</strong>\r\n分类错误的样本数占样本总数的比例, 记样本数为<span\r\nclass=\"math inline\">\\(m\\)</span>, <span\r\nclass=\"math inline\">\\(a\\)</span>个错误分类的样本, 错误率 <span\r\nclass=\"math inline\">\\(E=\\frac{a}{m}\\)</span> .</p></li>\r\n<li><p><strong>精度(Accuracy):</strong> <span class=\"math inline\">\\((1 -\r\n\\frac{a}{m}) \\times 100\\%\\)</span> 称为精度, 即 \"精度 = 1 -\r\n错误率\".</p></li>\r\n<li><p><strong>误差(Error):</strong> 更一般地,\r\n我们把<strong>学习器的实际预测输出</strong>与<strong>样本的真实输出</strong>之间的差异称为误差,\r\n学习器在训练集上的误差称为 <strong>训练误差(Training\r\nError)/经验误差(Empirical Error)</strong>,\r\n在新样本上的误差称为<strong>泛化误差(Generalization Error)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 这里的误差均指<strong>误差期望</strong>.</p>\r\n</blockquote></li>\r\n</ul>\r\n<p>尽管我们希望得到一个泛化误差小的学习器, 使得其在新样本上表现很好,\r\n但我们并不能预测新样本, 因此我们只能尝试降低经验误差.\r\n但经验误差很小的学习器往往在泛化误差的表现上都很糟糕.\r\n这样的学习器发生了<strong>过拟合</strong>.</p>\r\n<ul>\r\n<li><p><strong>过拟合(Overfitting):</strong>\r\n学习器可能将训练样本自身的一些特点当作了所有潜在样本都具有的一般性质,\r\n导致泛化能力下降的现象.</p></li>\r\n<li><p><strong>欠拟合(Underfitting):</strong> 与过拟合相对,\r\n指对训练样本的一般性质尚未学好.</p></li>\r\n</ul>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png\" class=\"\" title=\"pic2-1\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 导致过拟合的原因很多,\r\n最常见的原因是学习能力过强; 欠拟合则相反, 因为学习能力低下.\r\n欠拟合容易克服, 但过拟合很难解决, 且过拟合无法彻底避免.</p>\r\n</blockquote>\r\n<ul>\r\n<li><strong>模型选择(Model Selection):</strong> 在实际中,\r\n面对同一个问题, 往往有多种学习算法可以选择,\r\n参数配置也会对模型产生影响.</li>\r\n</ul>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png\" class=\"\" title=\"spic2-2\">\r\n<h3 id=\"评估方法\">$ 2.2 评估方法</h3>\r\n<p>通常我们可以通过实验测试对学习器的泛化误差进行评估,\r\n使用<strong>测试集(Testing Set)</strong>测试学习器对新样本的判别能力,\r\n以测试集上<strong>测试误差(Testing Error)</strong>作为泛化误差的近似.\r\n但需要注意的是, 测试集应尽可能与训练集互斥.</p>\r\n<blockquote>\r\n<p>假设我们有且只有一个包含<span\r\nclass=\"math inline\">\\(m\\)</span>个样例的数据集<span\r\nclass=\"math inline\">\\(D = \\{(x_1,y_1),(x_2,y_2), ...,\r\n(x_m,y_m)\\}\\)</span>, 既要训练, 又要测试, 这样就需要对<span\r\nclass=\"math inline\">\\(D\\)</span>进行适当处理, 从中产生\r\n<strong>训练集</strong> <span class=\"math inline\">\\(S\\)</span>和\r\n<strong>测试集</strong> <span class=\"math inline\">\\(T\\)</span>.</p>\r\n</blockquote>\r\n<h4 id=\"留出法hold-out\">$ 2.2.1 留出法(Hold-Out)</h4>\r\n<p>留出法的思路很简单, 直接将数据集<span\r\nclass=\"math inline\">\\(D\\)</span>划分成两个互斥的集合, 即<span\r\nclass=\"math inline\">\\(D = S \\cup T, S \\cap T = \\emptyset\\)</span>.</p>\r\n<p>使用留出法时需要注意训练集和测试集的划分需要保持数据分布一致性,\r\n避免因数据划分引入额外偏差对结果产生影响.\r\n同时单次留出法得到的估计往往并不够准确可靠, 一般采用若干次随机划分,\r\n重复进行实验评估取平均值作为留出法评估结果. 关于划分比例, 通常取2/3 ~\r\n4/5的样本用于训练, 其余用于测试.</p>\r\n<h4 id=\"交叉验证法cross-validation\">$ 2.2.2 交叉验证法(Cross\r\nValidation)</h4>\r\n<p>交叉验证法可以看作是一种具体的留出法, 其方法过程是:</p>\r\n<p>先将数据集<span class=\"math inline\">\\(D\\)</span>划分为<span\r\nclass=\"math inline\">\\(k\\)</span>个大小相似的互斥子集, <span\r\nclass=\"math inline\">\\(D = D_1 \\cup D_2 \\cup ... \\cup D_k, D_i \\cap D_j =\r\n\\emptyset (i \\neq j)\\)</span>, 子集<span\r\nclass=\"math inline\">\\(D_i\\)</span>通过保留类别比例的<strong>分层采样(Stratified\r\nSampling)</strong>来尽可能保持数据分布一致性.</p>\r\n<p>接下来每次取<span class=\"math inline\">\\(k-1\\)</span>个子集作为训练集,\r\n余下一个作为测试集, 进行<span\r\nclass=\"math inline\">\\(k\\)</span>次训练和测试, 最终结果取<span\r\nclass=\"math inline\">\\(k\\)</span>个结果的均值.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png\" class=\"\" title=\"pic2-2\">\r\n<p>显然交叉验证法评估结果的<strong>稳定性(Stability)</strong>和<strong>保真性(Fidelity)</strong>与<span\r\nclass=\"math inline\">\\(k\\)</span>的取值强相关.\r\n故而交叉验证法又称<strong>k折交叉验证(k-fold Cross Validation)</strong>.\r\n最常见的取值是 <span class=\"math inline\">\\(k=10\\)</span>.</p>\r\n<p>由于<span class=\"math inline\">\\(D\\)</span>的<span\r\nclass=\"math inline\">\\(k\\)</span>划分不唯一, k折交叉验证通常也要重复多次,\r\n记为<span class=\"math inline\">\\(p\\)</span>, 最终结果取这<span\r\nclass=\"math inline\">\\(p\\)</span>次k折交叉验证结果的均值.</p>\r\n<p><strong>留一法(Leave-One-Out, LOO)</strong>, <span\r\nclass=\"math inline\">\\(|D| = m\\)</span>, 则令<span\r\nclass=\"math inline\">\\(k = m\\)</span> 就得到了留一法.</p>\r\n<p>留一法的优势是不受样本划分影响(有且仅有一种划分方式), 训练集仅比<span\r\nclass=\"math inline\">\\(D\\)</span>少一个样本,\r\n绝大多数情况下留一法中被评估的模型与期望用<span\r\nclass=\"math inline\">\\(D\\)</span>训练的模型相似.\r\n因此认为留一法评估结果较为准确. 缺点是当<span\r\nclass=\"math inline\">\\(m\\)</span>较大时, 计算开销过大以致无法接受.</p>\r\n<h4 id=\"自助法bootstapping\">$ 2.2.3 自助法(Bootstapping)</h4>\r\n<p>留出法和交叉验证法都保留了一部分样本用于测试,\r\n因此实际评估的模型所使用的训练集比<span\r\nclass=\"math inline\">\\(D\\)</span>小,\r\n必然会引入一些因训练样本规模不同而导致的估计偏差.\r\n留一法的计算复杂度又太高了. 自助法提供了一个较好的解决方案.</p>\r\n<p>自助法直接以 <strong>自助采样法(Bootstrap Sampling)</strong> 为基础.\r\n给定包含<span class=\"math inline\">\\(m\\)</span>个样本的数据集<span\r\nclass=\"math inline\">\\(D\\)</span>, 对其进行采样产生数据集<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>. 采样过程每次随即从<span\r\nclass=\"math inline\">\\(D\\)</span>中挑选一个样本, 将拷贝放入<span\r\nclass=\"math inline\">\\(M&#39;\\)</span>\r\n<strong>(意味着下次采样该样本仍有可能被采样到)</strong>. 重复该过程<span\r\nclass=\"math inline\">\\(m\\)</span>次, 得到了包含<span\r\nclass=\"math inline\">\\(m\\)</span>个样本的数据集<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处\"自助\"为意译,\r\n称<strong>可重复采样/有放回采样</strong>更符合其原理.</p>\r\n</blockquote>\r\n<p>不难看出, 可能存在部分样本被多次采样到, 部分样本未被采样到.\r\n我们关注某个样本在<span\r\nclass=\"math inline\">\\(m\\)</span>次中未被采样的概率,有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\lim_{m \\rightarrow \\infty}(1 - \\frac{1}{m})^m  = \\frac{1}{e} \\approx\r\n0.368 \\tag{2.1}\r\n\\end{equation}\\]</span></p>\r\n<p>通过自主采样, 初始数据集<span\r\nclass=\"math inline\">\\(D\\)</span>中约有<span\r\nclass=\"math inline\">\\(36.8\\%\\)</span>的样本未出现在采样数据集<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>中, 将<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>作为训练集, <span\r\nclass=\"math inline\">\\(D \\backslash D&#39;\\)</span>作为测试集.\r\n这样的测试结果称为<strong>包外估计(Out-Of-Bagestimate)</strong>.</p>\r\n<p>自助法在数据集较小, 难以有效划分训练和测试集的时候具有优势.\r\n但自助法产生的数据集改变了初始数据集的分布, 会引入估计误差.\r\n初始数据集较大时更常用留出法和交叉验证法.</p>\r\n<h4 id=\"调参与最终模型\">$ 2.2.4 调参与最终模型</h4>\r\n<p><strong>参数(Parameter)</strong>和<strong>调参(Parameter\r\nTuning)</strong>释义见名称.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 机器学习常涉及两类参数:\r\n算法参数和模型参数.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>验证集(Validation Set):</strong>\r\n模型评估与选择中用于评估测试的数据集常称为验证集.</p>\r\n<blockquote>\r\n<p><strong>Additonal:</strong> 关于训练集, 测试集和验证集的区别,\r\n笔者在此参考<a\r\nhref=\"https://zhuanlan.zhihu.com/p/98532085\"><strong>[知乎|训练集、验证集、测试集]</strong></a></p>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"性能度量\">$ 2.3 性能度量</h3>\r\n<ul>\r\n<li><strong>性能度量(Performance Measure):</strong>\r\n衡量模型泛化能力的评价标准. 显然该标准取决于任务需求.</li>\r\n</ul>\r\n<p>以预测任务为例, 给定样例集<span class=\"math inline\">\\(D =\r\n\\{(\\boldsymbol{x_1}, y_1), (\\boldsymbol{x_2}, y_2), ...,\r\n(\\boldsymbol{x_m}, y_m)\\}\\)</span>, 其中<span\r\nclass=\"math inline\">\\(y_i\\)</span>是<span\r\nclass=\"math inline\">\\(\\boldsymbol{x_i}\\)</span>的真实标记,\r\n评估学习器<span class=\"math inline\">\\(f\\)</span>的性能,\r\n需要比较预测结果<span class=\"math inline\">\\(f(x)\\)</span>与真实标记<span\r\nclass=\"math inline\">\\(y\\)</span>.</p>\r\n<p>回归任务常用性能度量<strong>均方误差(Mean Squared Error)</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}(f(\\boldsymbol{x_i}) - y_i)^2\r\n\\tag{2.2}\r\n\\end{equation}\\]</span></p>\r\n<p>更一般地, 对于数据分布<span\r\nclass=\"math inline\">\\(\\mathcal{D}\\)</span>和概率密度函数<span\r\nclass=\"math inline\">\\(p(\\cdot)\\)</span>, 均方误差描述为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}(f(\\boldsymbol{x}) - y)^2\r\np(\\boldsymbol{x}) d\\boldsymbol{x} \\tag{2.3}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"错误率与精度\">$ 2.3.1 错误率与精度</h4>\r\n<p>错误率和精度是分类任务中最常用的两种性能度量.</p>\r\n<p>对于样例集<span class=\"math inline\">\\(\\mathcal{D}\\)</span>,\r\n错误率和精度定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) \\neq\r\ny_i) \\tag{2.4}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nacc(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) =\r\ny_i) = 1 - E(f;D) \\tag{2.5}\r\n\\end{equation}\\]</span></p>\r\n<p>对于数据分布<span\r\nclass=\"math inline\">\\(\\mathcal{D}\\)</span>和概率密度函数<span\r\nclass=\"math inline\">\\(p(\\cdot)\\)</span>, 错误率和精度定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;\\mathcal{D}) = \\int_{x \\sim\r\n\\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) \\neq y) p(\\boldsymbol{x})\r\nd\\boldsymbol{x} \\tag{2.6}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nacc(f;\\mathcal{D}) = \\int_{x \\sim\r\n\\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) = y) p(\\boldsymbol{x})\r\nd\\boldsymbol{x} = 1 - E(f;\\mathcal{D}) \\tag{2.7}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"查准率precision-查全率recall-f1\">$ 2.3.2 查准率(Precision),\r\n查全率(Recall), F1</h4>\r\n<p>有时我们更关心模型的正确率,\r\n比如说\"挑选出来的瓜有多少是好瓜\",\"有多少好瓜被挑选出来了\",\r\n查准率和查全率更适合用来度量.</p>\r\n<p>对于二分类问题, 我们有<strong>混淆矩阵(Confusion Matrix)</strong></p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png\" class=\"\" title=\"tab2-1\">\r\n<p>定义查准率<span class=\"math inline\">\\(P\\)</span>, 查全率<span\r\nclass=\"math inline\">\\(R\\)</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP = \\frac{TP}{TP + FP}\\tag{2.8}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP = \\frac{TP}{TP + FN}\\tag{2.9}\r\n\\end{equation}\\]</span></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 自然语言解释就是,\r\n查准率是在预测正确中实际正确的比率,\r\n查全率是在实际正确中预测正确的比率.</p>\r\n</blockquote>\r\n<p>查准率和查全率是一对矛盾的度量, 二者负相关.\r\n是<strong>sound</strong>和<strong>complete</strong>的关系</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png\" class=\"\" title=\"spic2-1\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 该图片截选自NJU软件分析课件,\r\n<del>ly和tt老师应该不会在意吧(雾)</del></p>\r\n<p>课程地址链接<a\r\nhref=\"https://tai-e.pascal-lab.net/lectures.html\"><strong>[Static\r\nProgram Analysis]</strong></a></p>\r\n</blockquote>\r\n<p>查准率和查全率的关系可以用<strong>P-R图</strong>表示</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png\" class=\"\" title=\"pic2-3\">\r\n<ul>\r\n<li><strong>平衡点(Break-Even Point, BEP):</strong> <span\r\nclass=\"math inline\">\\(P=R\\)</span>时的取值,\r\n可基于BEP评估两个学习器的优劣, 如图2-3, 可认为<span\r\nclass=\"math inline\">\\(A&gt;B&gt;C\\)</span></li>\r\n</ul>\r\n<p>比BEP更常用的是<span class=\"math inline\">\\(F1\\)</span>度量定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nF1 = \\frac{2 \\times P \\times R}{P + R} = \\frac{2 \\times TP}{样例总数 +\r\nTP - TN}\\tag{2.10}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math inline\">\\(F_{\\beta}\\)</span>是<span\r\nclass=\"math inline\">\\(F_1\\)</span>的一般形式, 定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nF_{\\beta} = \\frac{(1 + \\beta^2) \\times P \\times R}{(\\beta^2 \\times P) +\r\nR}\\tag{2.11}\r\n\\end{equation}\\]</span></p>\r\n<p>其中<span class=\"math inline\">\\(\\beta &gt;\r\n0\\)</span>度量了查全率对查准率的相对重要性, <span\r\nclass=\"math inline\">\\(\\beta = 1\\)</span>时退化为<span\r\nclass=\"math inline\">\\(F_1\\)</span>, <span class=\"math inline\">\\(\\beta\r\n&gt; 1\\)</span>时查全率影响更大, <span class=\"math inline\">\\(\\beta &lt;\r\n1\\)</span>时查准率影响更大.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong></p>\r\n<p><span class=\"math inline\">\\(F_1\\)</span>基于调和平均定义, <span\r\nclass=\"math inline\">\\(\\frac{1}{F_1} = \\frac{1}{2} \\cdot (\\frac{1}{P} +\r\n\\frac{1}{R})\\)</span>.</p>\r\n<p><span class=\"math inline\">\\(F_\\beta\\)</span>基于加权调和平均定义,\r\n<span class=\"math inline\">\\(\\frac{1}{F_\\beta} = \\frac{1}{1 + \\beta^2}\r\n\\cdot (\\frac{1}{P} + \\frac{\\beta^2}{R})\\)</span></p>\r\n</blockquote>\r\n<p>若在n个二分类混淆矩阵上考察准确率和查全率,\r\n我们有<strong>macro</strong>和<strong>micro</strong>两种选择.</p>\r\n<p>对于<strong>宏(macro)</strong>, 在各个混淆矩阵上分别计算<span\r\nclass=\"math inline\">\\(P\\)</span>和<span\r\nclass=\"math inline\">\\(R\\)</span>,\r\n再取平均.得到<strong>宏查准率(macro-P)</strong>,\r\n<strong>宏查全率(macro-R)</strong>, <strong>宏F1(macro-F1)</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmacro\\text{-}P = \\frac{1}{n} \\sum_{i=1}^{n} P_i\\tag{2.12}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmacro\\text{-}R = \\frac{1}{n} \\sum_{i=1}^{n} R_i\\tag{2.13}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmacro\\text{-}F1 = \\frac{2 \\times macro\\text{-}P \\times\r\nmacro\\text{-}R}{macro\\text{-}P + macro\\text{-}R}\\tag{2.14}\r\n\\end{equation}\\]</span></p>\r\n<p>对于<strong>微(micro)</strong>, 先平均混淆矩阵得到$, , , $,\r\n再计算出<strong>微查准率(micro-P)</strong>,\r\n<strong>微查全率(micro-R)</strong>, <strong>微F1(micro-F1)</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmicro\\text{-}P =\r\n\\frac{\\overline{TP}}{\\overline{TP}+\\overline{FP}}\\tag{2.15}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmicro\\text{-}R = \\frac{\\overline{TP}}{\\overline{TP}+\\overline{FN}}\r\n\\tag{2.16}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmicro\\text{-}F1 = \\frac{2 \\times micro\\text{-}P \\times\r\nmicro\\text{-}R}{micro\\text{-}P + micro\\text{-}R}\\tag{2.17}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"roc与auc\">$ 2.3.3 ROC与AUC</h4>\r\n<p>现重新考虑查准率和查全率, 首先我们来看看学习器如何给正/反的分类.</p>\r\n<p>很多学习器为测试样本产生一个实值或概率预测,\r\n将预测值与<strong>分类阈值(Threshold)</strong>比较, 大于阈值则为正类,\r\n否则为反类. 根据该实值或概率预测进行排序, 概率高的在前, 概率低的在后,\r\n则这个分类阈值就是<strong>截断点(Cut Point)</strong>, 前一部分为正例,\r\n后一部分为负例.</p>\r\n<p>不难得到以下结论: 截断点越靠前, 查准率增高而查全率降低; 截断点越靠后,\r\n查准率降低而查全率增高. 同时,\r\n排序质量越好的学习器\"在一般情况下\"泛化性能越好,\r\nROC基于此度量模型的泛化能力.</p>\r\n<p><strong>受试者工作特征(Receiver Operating Characteristic,\r\nROC)</strong>, 根据学习器的预测结果对样例进行排序,\r\n顺序逐个把样本作为正例进行预测(选择不同的截断点),计算\r\n<strong>真正例率(True Positive Rate, TPR)</strong>,\r\n<strong>假正例率(False Positive Rate, FPR)</strong> 作为纵横轴.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nTPR = \\frac{TP}{TP + FN}\r\n\\tag{2.18}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nFPR = \\frac{FP}{TN + FP}\r\n\\tag{2.19}\r\n\\end{equation}\\]</span></p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png\" class=\"\" title=\"pic2-4\">\r\n<p>对角线对应随即猜测模型, 点(0, 1)对应所有正例在负例前的理想模型.</p>\r\n<ul>\r\n<li><strong>AUC(Area Under ROC Curve):</strong> ROC曲线下面积.\r\n为依据两个模型绘制的ROC曲线比较两个模型的优劣而引入.</li>\r\n</ul>\r\n<p>对于离散样本, 计算AUC:</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nAUC = \\frac{1}{2} \\sum^{m - 1}_{i=1}(x_{i+1} - x_i)\\cdot(y_i + y_{i + 1}\r\n)\r\n\\tag{2.19}\r\n\\end{equation}\\]</span></p>\r\n<p>形式化上AUC度量排序质量, 记有<span\r\nclass=\"math inline\">\\(m^+\\)</span>个正例, <span\r\nclass=\"math inline\">\\(m^-\\)</span>个反例, 令<span\r\nclass=\"math inline\">\\(D^+\\)</span>为正例集合, <span\r\nclass=\"math inline\">\\(D^-\\)</span>为负例集合,\r\n定义排序<strong>损失(loss):</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mathscr{l}_{rank} = \\frac{1}{m^+ m^-}\\sum_{x^+ \\in D^+} \\sum_{m^- \\in\r\nD^-}\\left(\\mathbb{I}(f(x^+)&lt;f(x^-)) + \\frac{1}{2} \\mathbb{I}(f(x^+)=\r\nf(x^-))\\right)\r\n\\tag{2.21}\r\n\\end{equation}\\]</span></p>\r\n<p>如何理解这个式子? 考虑每一对正反例, 若正例小于反例记一个\"罚分\",\r\n相等则记半个. 不难看出, 对于每个正例/负例, 可能造成的\"罚分\"与其\"位置\",\r\n越\"错误\"的位置会引起越多的\"罚分\", 这与AUC计算过程及其相似. 实际上, <span\r\nclass=\"math inline\">\\(\\mathscr{l}_{rank}\\)</span>对应ROC曲线上方的面积,\r\n有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nAUC = 1 - \\mathscr{l}_{rank}\r\n\\tag{2.22}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"代价敏感错误率与代价曲线\">$ 2.3.4 代价敏感错误率与代价曲线</h4>\r\n<p>为权衡不同类型错误所造成的不同损失,\r\n我们为错误赋予<strong>非均等代价(UnEqual Cost)</strong>.</p>\r\n<p>以二分类为例, <strong>代价矩阵(Cost Matrix)</strong>如下:</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png\" class=\"\" title=\"tab2-2\">\r\n<p>若将0类记为正例, 1类记为负例, 定义<span class=\"math inline\">\\(D^+,\r\nD^-\\)</span>, <strong>代价敏感(Cost-Sensitive)</strong> 错误率为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D;cost) = \\frac{1}{m} \\left(\\sum_{\\boldsymbol{x}_i \\in D^+}\r\n\\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i) \\times cost_{01} +\r\n\\sum_{\\boldsymbol{x}_i \\in D^-} \\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i)\r\n\\times cost_{10}\\right)\r\n\\tag{2.23}\r\n\\end{equation}\\]</span></p>\r\n<p>非均等情况下, <strong>代价曲线(Cost\r\nCurve)</strong>可以解决ROC曲线不能反映出学习器的期望<strong>总体代价(Total\r\nCost)</strong>问题.</p>\r\n<p>其横轴是取值为<span\r\nclass=\"math inline\">\\([0,1]的\\)</span>正例概率代价, 其中<span\r\nclass=\"math inline\">\\(p\\)</span>为样例是正例的概率</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP(+)cost=\\frac{p \\times cost_{01}}{p \\times cost_{01} + (1 - p) \\times\r\ncost_{10}}\r\n\\tag{2.24}\r\n\\end{equation}\\]</span></p>\r\n<p>纵轴是取值为<span\r\nclass=\"math inline\">\\([0,1]\\)</span>的归一化代价,FPR为假正例率,\r\nFNR为假反例率</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\ncost_{norm} = \\frac{FNR \\times p \\times cost_{01} + FPR \\times (1 - p)\r\n\\times cost_{10}}{p \\times cost_{01} + (1 - p) \\times cost_{10}}\r\n\\tag{2.25}\r\n\\end{equation}\\]</span></p>\r\n<p>绘制代价曲线时, ROC曲线上每个点对应代价平面上的一条线段,\r\n设ROC点坐标为<span class=\"math inline\">\\((FPR, TPR)\\)</span>,\r\n然后在代价平面上绘制一条从<span class=\"math inline\">\\((0,\r\nFPR)\\)</span>到<span class=\"math inline\">\\((1, FNR)\\)</span>的线段,\r\n线段下面积代表了该条件下的期望总体代价.如此为每个点绘制线段, 取线段下界,\r\n围成面积即为在所有条件下学习器的总体期望代价.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png\" class=\"\" title=\"pic2-5\">\r\n<blockquote>\r\n<p><strong>Addtional:</strong> 如何理解代价曲线?</p>\r\n<p>笔者在此给出一篇参考<a\r\nhref=\"https://www.zhihu.com/question/63492375\"><strong>[知乎|代价曲线的理解]</strong></a>.这篇参考中对大部分问题给到了解释.</p>\r\n<p>在此额外补充一点困惑笔者许久的问题, 每一条线段代表什么?</p>\r\n<p>每一条线段代表当前<strong>阈值</strong>条件下,\r\n对不同样本集的期望代价. 具体来说,\r\n是以FPR和FNR为预测值对不同样本集的预测.</p>\r\n</blockquote>\r\n<h3 id=\"比较检验\">$ 2.4 比较检验</h3>\r\n<p><strong>统计假设检验(Hypothesis Test)</strong>\r\n为比较学习器性能提供了重要依据. 本节默认以错误率为性能度量, 用<span\r\nclass=\"math inline\">\\(\\epsilon\\)</span>表示.</p>\r\n<h4 id=\"假设检验\">$ 2.4.1 假设检验</h4>\r\n<p>现实中我们无法知道学习器的泛化错误率 <span\r\nclass=\"math inline\">\\(\\epsilon\\)</span>, 只能获知其测试错误率 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon}\\)</span>.\r\n常用测试错误率估推出泛化错误率.</p>\r\n<p>对于 <span class=\"math inline\">\\(m\\)</span> 个测试样本,\r\n如果测试错误率为 <span class=\"math inline\">\\(\\hat{\\epsilon}\\)</span>,\r\n则被误分类的样本数量 <span class=\"math inline\">\\(m&#39;=\\hat{\\epsilon}\r\n\\times m\\)</span>, 假定测试样本从样本总体分布中独立采样获得,\r\n由<strong>二项(Binomial)分布</strong>, 泛化错误率为 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon}\\)</span> 的学习器恰有 <span\r\nclass=\"math inline\">\\(m&#39;\\)</span> 个样本被误分类的概率是 <span\r\nclass=\"math inline\">\\(\\binom{m}{m&#39;}\\epsilon^{m&#39;}(1-\\epsilon)^{m-m&#39;}\\)</span>\r\n. 同时, 这也表示泛化错误率为 <span\r\nclass=\"math inline\">\\(\\epsilon\\)</span> 的学习器在<span\r\nclass=\"math inline\">\\(m\\)</span>个样本上测试得到测试错误率为 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon}\\)</span> 的概率:</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP(\\hat{\\epsilon};\\epsilon)=\\binom{m}{\\hat{\\epsilon} \\times m}\r\n\\epsilon^{\\hat{\\epsilon} \\times m} (1 - \\epsilon)^{m - \\hat{\\epsilon}\r\n\\times m}\r\n\\tag{2.26}\r\n\\end{equation}\\]</span></p>\r\n<p>由二项分布性质, 或者计算 <span\r\nclass=\"math inline\">\\(P(\\hat{\\epsilon};\\epsilon)\\)</span> 对 <span\r\nclass=\"math inline\">\\(\\epsilon\\)</span> 的偏导, 可以知道 <span\r\nclass=\"math inline\">\\(P(\\hat{\\epsilon};\\epsilon)\\)</span> 在 <span\r\nclass=\"math inline\">\\(\\epsilon = \\hat{\\epsilon}\\)</span> 时最大, <span\r\nclass=\"math inline\">\\(|\\epsilon - \\hat{\\epsilon}|\\)</span> 增大时 <span\r\nclass=\"math inline\">\\(P(\\hat{\\epsilon};\\epsilon)\\)</span> 减小.</p>\r\n<p>若取 <span class=\"math inline\">\\(m=10, \\epsilon = 0.3\\)</span>,\r\n示意图如2.6所示.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png\" class=\"\" title=\"pic2-6\">\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n<del>死去的《概率论与数理统计》突然复活起来攻击我</del>, 推荐复习笔记<a\r\nhref=\"https://zhuanlan.zhihu.com/p/243215469\"><strong>[知乎|概率论与数理统计复习整理]</strong></a>.</p>\r\n</blockquote>\r\n<p>由<strong>二项检验(Binomial Test)</strong>, 考虑假设<span\r\nclass=\"math inline\">\\(\\epsilon \\leq \\epsilon_0\\)</span>, 在 <span\r\nclass=\"math inline\">\\(1 - \\alpha\\)</span>\r\n的概率内能观测到的最大错误率为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\bar{\\epsilon} = \\min \\epsilon \\ \\ \\text{s.t.} \\ \\ \\sum_{i = \\epsilon\r\n\\times m + 1}^{m} \\binom{m}{i}\\epsilon_0^i (1 - \\epsilon_0)^{m - i} &lt;\r\n\\alpha\r\n\\tag{2.27}\r\n\\end{equation}\\]</span></p>\r\n<p>其中 <span class=\"math inline\">\\(1-\\alpha\\)</span>\r\n为<strong>置信度(Confidence)</strong>, 直观上对应图2.6的非阴影部分;\r\n\"s.t.\"是\"subject to\", 使左边式子在右边式子条件满足时成立.</p>\r\n<p>若测试错误率 <span class=\"math inline\">\\(\\hat{\\epsilon}\\)</span>\r\n大于临界值 <span class=\"math inline\">\\(\\bar{\\epsilon}\\)</span>,\r\n由二项检验, 我们可以认为在 <span class=\"math inline\">\\(\\alpha\\)</span>\r\n的显著度下, 假设 <span class=\"math inline\">\\(\\epsilon \\leq\r\n\\hat{\\epsilon}\\)</span> 不能被拒绝, 即能以 <span\r\nclass=\"math inline\">\\(1-\\alpha\\)</span> 的置信度认为,\r\n学习器的泛化错误率不高于 <span\r\nclass=\"math inline\">\\(\\epsilon_0\\)</span>; 否则可以拒绝假设, 在 <span\r\nclass=\"math inline\">\\(\\alpha\\)</span>\r\n的显著度下可认为学习器的泛化错误率大于 <span\r\nclass=\"math inline\">\\(\\epsilon_0\\)</span>.</p>\r\n<p>在通过多次测试中中我们会获得多个测试错误率,\r\n此时可使用<strong>t检验(t-test)</strong>.</p>\r\n<p>设<span class=\"math inline\">\\(k\\)</span>个错误率 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon_1}, \\hat{\\epsilon_2}, ...,\r\n\\hat{\\epsilon_k}\\)</span>, 则平均错误率 <span\r\nclass=\"math inline\">\\(\\mu\\)</span>, 方差 <span\r\nclass=\"math inline\">\\(\\sigma^2\\)</span> 为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mu = \\frac{1}{k} \\sum_{i=1}^k \\hat{\\epsilon_i}\r\n\\tag{2.28}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\sigma^2=\\frac{1}{k-1} \\sum^{k}_{i=1}(\\hat{\\epsilon_i} - \\mu)^2\r\n\\tag{2.29}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math inline\">\\(k\\)</span> 个测试错误率可看作是泛化错误率\r\n<span class=\"math inline\">\\(\\epsilon_0\\)</span> 的独立采样, 则变量</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\tau_t=\\frac{\\sqrt{k} (\\mu - \\epsilon_0)}{\\sigma}\r\n\\tag{2.30}\r\n\\end{equation}\\]</span></p>\r\n<p>服从自由度为 <span class=\"math inline\">\\(k-1\\)</span> 的 <span\r\nclass=\"math inline\">\\(t\\)</span> 分布.</p>\r\n<blockquote>\r\n<p><strong>Addtional:</strong> <strong>基础知识补充</strong></p>\r\n<p><span class=\"math inline\">\\(\\chi^2\\)</span> 分布: <span\r\nclass=\"math inline\">\\(X_1, X_2, ..., X_n\\)</span> 为独立同分布随机变量,\r\n服从 <span class=\"math inline\">\\(N(0, 1)\\)</span>, 则 <span\r\nclass=\"math inline\">\\(\\chi^2_n = \\sum_{i=1}^n X^2_i\\)</span>\r\n为服从自由度为 <span class=\"math inline\">\\(n\\)</span> 的 <span\r\nclass=\"math inline\">\\(\\chi^2\\)</span> 分布</p>\r\n<p><span class=\"math inline\">\\(t\\)</span> 分布: <span\r\nclass=\"math inline\">\\(X \\sim N(0,1), Y \\sim \\chi^2(n)\\)</span>, <span\r\nclass=\"math inline\">\\(X,Y\\)</span> 独立, 称 <span\r\nclass=\"math inline\">\\(T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}\\)</span>\r\n为服从自由度为 <span class=\"math inline\">\\(n\\)</span> 的 <span\r\nclass=\"math inline\">\\(t\\)</span> 分布.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>Tips:</strong> <strong>推导补充</strong></p>\r\n<p>原书中没有关于这个<span\r\nclass=\"math inline\">\\(\\tau_t\\)</span>服从<span\r\nclass=\"math inline\">\\(t\\)</span>分布的推导, 笔者在此给出补充.</p>\r\n<p>假设<span\r\nclass=\"math inline\">\\(X_1,X_2,...X_n\\)</span>是来自正态总体<span\r\nclass=\"math inline\">\\(N(\\mu,\\sigma^2)\\)</span>的样本.\r\n我们有以下重要统计量:</p>\r\n<p><span class=\"math display\">\\[\r\n\\begin{align}\r\n\\nonumber\\text{样本均值}&amp; \\ \\bar{X}=\\frac{1}{n}\\sum_{i=1}^n &gt;X_i\r\n\\\\\r\n\\nonumber\\text{样本方差}&amp; \\\r\nS^2=\\frac{1}{n-1}\\sum_{i-1}^{n}(X_i-\\bar{X})^2\r\n\\end{align}\r\n\\]</span></p>\r\n<p>我们有几个重要结论:</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png\" class=\"\" title=\"spic2-3\">\r\n<p>故而有推论:</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png\" class=\"\" title=\"spic2-4\">\r\n</blockquote>\r\n<p>对假设<span\r\nclass=\"math inline\">\\(\\mu=\\epsilon_0\\)</span>和显著度<span\r\nclass=\"math inline\">\\(\\alpha\\)</span>, 可以算出临界值——在<span\r\nclass=\"math inline\">\\(1-\\alpha\\)</span>内能观测到的最大错误率.\r\n考虑<strong>双边假设(Two-Tailed)</strong>, 若<span\r\nclass=\"math inline\">\\(\\tau_t\\)</span>位于临界区<span\r\nclass=\"math inline\">\\([t_{-\\alpha/2},t_{\\alpha/2}]\\)</span>内(如图2.7所示),\r\n则不能拒绝假设<span class=\"math inline\">\\(\\mu=\\epsilon_0\\)</span>.\r\n我们可以认为泛化错误率为<span\r\nclass=\"math inline\">\\(\\epsilon_0\\)</span>.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png\" class=\"\" title=\"pic2-7\">\r\n<h4 id=\"多学习器比较\">$ 2.4.2 多学习器比较</h4>\r\n<p>笔者对这部分不做过多记录, 翻阅原书该部分即可.</p>\r\n<p>对于两个学习器,我们有</p>\r\n<ul>\r\n<li>交叉验证t检验(基于成对t 检验)</li>\r\n<li>McNember检验(基于列联表，卡方检验)</li>\r\n</ul>\r\n<p>对于多个学习器,我们有</p>\r\n<ul>\r\n<li>Friedman检验(基于序值，F检验; 判断”是否都相同”)</li>\r\n<li>Nemenyi后续检验(基于序值，进一步判断两两差别)</li>\r\n</ul>\r\n<h3 id=\"偏差与方差\">2.5 偏差与方差</h3>\r\n<ul>\r\n<li><strong>偏差-方差分解(Bias-variance Decomposition)</strong></li>\r\n</ul>\r\n<p>对测试样本<span class=\"math inline\">\\(\\boldsymbol{x}\\)</span>,\r\n令<span class=\"math inline\">\\(y_D\\)</span>为<span\r\nclass=\"math inline\">\\(\\boldsymbol{x}\\)</span>在数据集的集中标记, <span\r\nclass=\"math inline\">\\(y\\)</span>为<span\r\nclass=\"math inline\">\\(\\boldsymbol{x}\\)</span>的真实标记, <span\r\nclass=\"math inline\">\\(f(\\boldsymbol{x};D)\\)</span>为训练集<span\r\nclass=\"math inline\">\\(D\\)</span>上的学得模型<span\r\nclass=\"math inline\">\\(f\\)</span>在<span\r\nclass=\"math inline\">\\(\\boldsymbol{x}\\)</span>上的预测输出.</p>\r\n<p>以回归算法为例, 我们有如下定义(符号定义见<a\r\nhref=\"http://localhost:4000/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/#chapter-0-%E4%B8%BB%E8%A6%81%E7%AC%A6%E5%8F%B7%E8%A1%A8\"><strong>[Lapluma|读书笔记-机器学习\r\nCh0-Ch1]</strong></a>):</p>\r\n<p>学习算法的期望预测.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\bar{f}(\\boldsymbol{x})=\\mathbb{E}_D[f(\\boldsymbol{x};D)]\r\n\\tag{2.37}\r\n\\end{equation}\\]</span></p>\r\n<p>使用样本数相同的不同训练集产生的方差,\r\n度量了同样大小的训练集变动导致的学习性能变化,\r\n刻画了数据扰动造成的影响.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mathcal{var}(\\boldsymbol{x})=\\mathbb{E}_D[(f(\\boldsymbol{x};D)-\\bar{f}(x))^2]\r\n\\tag{2.38}\r\n\\end{equation}\\]</span></p>\r\n<p>噪声, 在当前学习任务上任何学习算法所能达到的期望泛化误差下界,\r\n刻画了学习问题本身的难度.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\varepsilon^2=\\mathbb{E}_D[(y_D-y)^2]\r\n\\tag{2.39}\r\n\\end{equation}\\]</span></p>\r\n<p>期望输出与真实标记的差别称为偏差,\r\n度量了学习算法的期望预测与真是结果的偏离程度,\r\n刻画了学习算法本身的拟合能力.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mathcal{bias}^2(\\boldsymbol{x})=(\\bar{f}(\\boldsymbol{x})-y)^2\r\n\\tag{2.40}\r\n\\end{equation}\\]</span></p>\r\n<p>便于讨论,我们假定噪声期望为0, 即<span\r\nclass=\"math inline\">\\(\\mathbb{E}_D[y_D-y]=0\\)</span>,\r\n对期望泛化误差进行分解(推导略, 见原书), 有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D)=bias^2(\\boldsymbol{x})+var(\\boldsymbol{x})+\\varepsilon ^2\r\n\\tag{2.42}\r\n\\end{equation}\\]</span></p>\r\n<p>即泛化误差可以分解为偏差, 方差和噪声之和.</p>\r\n<p>一般来说, 偏差和方差存在冲突, 称为<strong>偏差-方差窘境(Bias-Variance\r\nDilemma)</strong>,见图2-9.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png\" class=\"\" title=\"pic2-9\">\r\n<p>训练不足时, 学习器拟合能力不足,\r\n训练数据的扰动不足以使学习器产生显著变化,\r\n此时偏差主导了泛化错误率;训练程度加深, 学习器拟合能力增强,\r\n训练数据发生的扰动被学习器学习到, 方差逐渐主导了泛化错误率;训练充足后,\r\n学习器拟合能力非常强. 训练数据发生轻微扰动都会导致学习器发生显著变化,\r\n此时训练数据自身,非全局的性质被学习器学习, 发生过拟合.</p>\r\n","length":5648,"excerpt":"<p><strong>有多个算法和参数生成的模型, 哪个才是好的模型?</strong></p>","more":"<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#chapter-2-模型评估与选择\">Chapter 2: 模型评估与选择</a>\r\n<ul>\r\n<li><a href=\"#-21-经验误差与过拟合\">$ 2.1 经验误差与过拟合</a></li>\r\n<li><a href=\"#-22-评估方法\">$ 2.2 评估方法</a>\r\n<ul>\r\n<li><a href=\"#-221-留出法hold-out\">$ 2.2.1 留出法(Hold-Out)</a></li>\r\n<li><a href=\"#-222-交叉验证法cross-validation\">$ 2.2.2 交叉验证法(Cross\r\nValidation)</a></li>\r\n<li><a href=\"#-223-自助法bootstapping\">$ 2.2.3\r\n自助法(Bootstapping)</a></li>\r\n<li><a href=\"#-224-调参与最终模型\">$ 2.2.4 调参与最终模型</a></li>\r\n</ul></li>\r\n<li><a href=\"#-23-性能度量\">$ 2.3 性能度量</a>\r\n<ul>\r\n<li><a href=\"#-231-错误率与精度\">$ 2.3.1 错误率与精度</a></li>\r\n<li><a href=\"#-232-查准率precision-查全率recall-f1\">$ 2.3.2\r\n查准率(Precision), 查全率(Recall), F1</a></li>\r\n<li><a href=\"#-233-roc与auc\">$ 2.3.3 ROC与AUC</a></li>\r\n<li><a href=\"#-234-代价敏感错误率与代价曲线\">$ 2.3.4\r\n代价敏感错误率与代价曲线</a></li>\r\n</ul></li>\r\n<li><a href=\"#-24-比较检验\">$ 2.4 比较检验</a>\r\n<ul>\r\n<li><a href=\"#-241-假设检验\">$ 2.4.1 假设检验</a></li>\r\n<li><a href=\"#-242-多学习器比较\">$ 2.4.2 多学习器比较</a></li>\r\n</ul></li>\r\n<li><a href=\"#25-偏差与方差\">2.5 偏差与方差</a></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"chapter-2-模型评估与选择\">Chapter 2: 模型评估与选择</h2>\r\n<h3 id=\"经验误差与过拟合\">$ 2.1 经验误差与过拟合</h3>\r\n<ul>\r\n<li><p><strong>错误率(Error Rate):</strong>\r\n分类错误的样本数占样本总数的比例, 记样本数为<span\r\nclass=\"math inline\">\\(m\\)</span>, <span\r\nclass=\"math inline\">\\(a\\)</span>个错误分类的样本, 错误率 <span\r\nclass=\"math inline\">\\(E=\\frac{a}{m}\\)</span> .</p></li>\r\n<li><p><strong>精度(Accuracy):</strong> <span class=\"math inline\">\\((1 -\r\n\\frac{a}{m}) \\times 100\\%\\)</span> 称为精度, 即 \"精度 = 1 -\r\n错误率\".</p></li>\r\n<li><p><strong>误差(Error):</strong> 更一般地,\r\n我们把<strong>学习器的实际预测输出</strong>与<strong>样本的真实输出</strong>之间的差异称为误差,\r\n学习器在训练集上的误差称为 <strong>训练误差(Training\r\nError)/经验误差(Empirical Error)</strong>,\r\n在新样本上的误差称为<strong>泛化误差(Generalization Error)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 这里的误差均指<strong>误差期望</strong>.</p>\r\n</blockquote></li>\r\n</ul>\r\n<p>尽管我们希望得到一个泛化误差小的学习器, 使得其在新样本上表现很好,\r\n但我们并不能预测新样本, 因此我们只能尝试降低经验误差.\r\n但经验误差很小的学习器往往在泛化误差的表现上都很糟糕.\r\n这样的学习器发生了<strong>过拟合</strong>.</p>\r\n<ul>\r\n<li><p><strong>过拟合(Overfitting):</strong>\r\n学习器可能将训练样本自身的一些特点当作了所有潜在样本都具有的一般性质,\r\n导致泛化能力下降的现象.</p></li>\r\n<li><p><strong>欠拟合(Underfitting):</strong> 与过拟合相对,\r\n指对训练样本的一般性质尚未学好.</p></li>\r\n</ul>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png\" class=\"\" title=\"pic2-1\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 导致过拟合的原因很多,\r\n最常见的原因是学习能力过强; 欠拟合则相反, 因为学习能力低下.\r\n欠拟合容易克服, 但过拟合很难解决, 且过拟合无法彻底避免.</p>\r\n</blockquote>\r\n<ul>\r\n<li><strong>模型选择(Model Selection):</strong> 在实际中,\r\n面对同一个问题, 往往有多种学习算法可以选择,\r\n参数配置也会对模型产生影响.</li>\r\n</ul>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png\" class=\"\" title=\"spic2-2\">\r\n<h3 id=\"评估方法\">$ 2.2 评估方法</h3>\r\n<p>通常我们可以通过实验测试对学习器的泛化误差进行评估,\r\n使用<strong>测试集(Testing Set)</strong>测试学习器对新样本的判别能力,\r\n以测试集上<strong>测试误差(Testing Error)</strong>作为泛化误差的近似.\r\n但需要注意的是, 测试集应尽可能与训练集互斥.</p>\r\n<blockquote>\r\n<p>假设我们有且只有一个包含<span\r\nclass=\"math inline\">\\(m\\)</span>个样例的数据集<span\r\nclass=\"math inline\">\\(D = \\{(x_1,y_1),(x_2,y_2), ...,\r\n(x_m,y_m)\\}\\)</span>, 既要训练, 又要测试, 这样就需要对<span\r\nclass=\"math inline\">\\(D\\)</span>进行适当处理, 从中产生\r\n<strong>训练集</strong> <span class=\"math inline\">\\(S\\)</span>和\r\n<strong>测试集</strong> <span class=\"math inline\">\\(T\\)</span>.</p>\r\n</blockquote>\r\n<h4 id=\"留出法hold-out\">$ 2.2.1 留出法(Hold-Out)</h4>\r\n<p>留出法的思路很简单, 直接将数据集<span\r\nclass=\"math inline\">\\(D\\)</span>划分成两个互斥的集合, 即<span\r\nclass=\"math inline\">\\(D = S \\cup T, S \\cap T = \\emptyset\\)</span>.</p>\r\n<p>使用留出法时需要注意训练集和测试集的划分需要保持数据分布一致性,\r\n避免因数据划分引入额外偏差对结果产生影响.\r\n同时单次留出法得到的估计往往并不够准确可靠, 一般采用若干次随机划分,\r\n重复进行实验评估取平均值作为留出法评估结果. 关于划分比例, 通常取2/3 ~\r\n4/5的样本用于训练, 其余用于测试.</p>\r\n<h4 id=\"交叉验证法cross-validation\">$ 2.2.2 交叉验证法(Cross\r\nValidation)</h4>\r\n<p>交叉验证法可以看作是一种具体的留出法, 其方法过程是:</p>\r\n<p>先将数据集<span class=\"math inline\">\\(D\\)</span>划分为<span\r\nclass=\"math inline\">\\(k\\)</span>个大小相似的互斥子集, <span\r\nclass=\"math inline\">\\(D = D_1 \\cup D_2 \\cup ... \\cup D_k, D_i \\cap D_j =\r\n\\emptyset (i \\neq j)\\)</span>, 子集<span\r\nclass=\"math inline\">\\(D_i\\)</span>通过保留类别比例的<strong>分层采样(Stratified\r\nSampling)</strong>来尽可能保持数据分布一致性.</p>\r\n<p>接下来每次取<span class=\"math inline\">\\(k-1\\)</span>个子集作为训练集,\r\n余下一个作为测试集, 进行<span\r\nclass=\"math inline\">\\(k\\)</span>次训练和测试, 最终结果取<span\r\nclass=\"math inline\">\\(k\\)</span>个结果的均值.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png\" class=\"\" title=\"pic2-2\">\r\n<p>显然交叉验证法评估结果的<strong>稳定性(Stability)</strong>和<strong>保真性(Fidelity)</strong>与<span\r\nclass=\"math inline\">\\(k\\)</span>的取值强相关.\r\n故而交叉验证法又称<strong>k折交叉验证(k-fold Cross Validation)</strong>.\r\n最常见的取值是 <span class=\"math inline\">\\(k=10\\)</span>.</p>\r\n<p>由于<span class=\"math inline\">\\(D\\)</span>的<span\r\nclass=\"math inline\">\\(k\\)</span>划分不唯一, k折交叉验证通常也要重复多次,\r\n记为<span class=\"math inline\">\\(p\\)</span>, 最终结果取这<span\r\nclass=\"math inline\">\\(p\\)</span>次k折交叉验证结果的均值.</p>\r\n<p><strong>留一法(Leave-One-Out, LOO)</strong>, <span\r\nclass=\"math inline\">\\(|D| = m\\)</span>, 则令<span\r\nclass=\"math inline\">\\(k = m\\)</span> 就得到了留一法.</p>\r\n<p>留一法的优势是不受样本划分影响(有且仅有一种划分方式), 训练集仅比<span\r\nclass=\"math inline\">\\(D\\)</span>少一个样本,\r\n绝大多数情况下留一法中被评估的模型与期望用<span\r\nclass=\"math inline\">\\(D\\)</span>训练的模型相似.\r\n因此认为留一法评估结果较为准确. 缺点是当<span\r\nclass=\"math inline\">\\(m\\)</span>较大时, 计算开销过大以致无法接受.</p>\r\n<h4 id=\"自助法bootstapping\">$ 2.2.3 自助法(Bootstapping)</h4>\r\n<p>留出法和交叉验证法都保留了一部分样本用于测试,\r\n因此实际评估的模型所使用的训练集比<span\r\nclass=\"math inline\">\\(D\\)</span>小,\r\n必然会引入一些因训练样本规模不同而导致的估计偏差.\r\n留一法的计算复杂度又太高了. 自助法提供了一个较好的解决方案.</p>\r\n<p>自助法直接以 <strong>自助采样法(Bootstrap Sampling)</strong> 为基础.\r\n给定包含<span class=\"math inline\">\\(m\\)</span>个样本的数据集<span\r\nclass=\"math inline\">\\(D\\)</span>, 对其进行采样产生数据集<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>. 采样过程每次随即从<span\r\nclass=\"math inline\">\\(D\\)</span>中挑选一个样本, 将拷贝放入<span\r\nclass=\"math inline\">\\(M&#39;\\)</span>\r\n<strong>(意味着下次采样该样本仍有可能被采样到)</strong>. 重复该过程<span\r\nclass=\"math inline\">\\(m\\)</span>次, 得到了包含<span\r\nclass=\"math inline\">\\(m\\)</span>个样本的数据集<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处\"自助\"为意译,\r\n称<strong>可重复采样/有放回采样</strong>更符合其原理.</p>\r\n</blockquote>\r\n<p>不难看出, 可能存在部分样本被多次采样到, 部分样本未被采样到.\r\n我们关注某个样本在<span\r\nclass=\"math inline\">\\(m\\)</span>次中未被采样的概率,有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\lim_{m \\rightarrow \\infty}(1 - \\frac{1}{m})^m  = \\frac{1}{e} \\approx\r\n0.368 \\tag{2.1}\r\n\\end{equation}\\]</span></p>\r\n<p>通过自主采样, 初始数据集<span\r\nclass=\"math inline\">\\(D\\)</span>中约有<span\r\nclass=\"math inline\">\\(36.8\\%\\)</span>的样本未出现在采样数据集<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>中, 将<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>作为训练集, <span\r\nclass=\"math inline\">\\(D \\backslash D&#39;\\)</span>作为测试集.\r\n这样的测试结果称为<strong>包外估计(Out-Of-Bagestimate)</strong>.</p>\r\n<p>自助法在数据集较小, 难以有效划分训练和测试集的时候具有优势.\r\n但自助法产生的数据集改变了初始数据集的分布, 会引入估计误差.\r\n初始数据集较大时更常用留出法和交叉验证法.</p>\r\n<h4 id=\"调参与最终模型\">$ 2.2.4 调参与最终模型</h4>\r\n<p><strong>参数(Parameter)</strong>和<strong>调参(Parameter\r\nTuning)</strong>释义见名称.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 机器学习常涉及两类参数:\r\n算法参数和模型参数.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>验证集(Validation Set):</strong>\r\n模型评估与选择中用于评估测试的数据集常称为验证集.</p>\r\n<blockquote>\r\n<p><strong>Additonal:</strong> 关于训练集, 测试集和验证集的区别,\r\n笔者在此参考<a\r\nhref=\"https://zhuanlan.zhihu.com/p/98532085\"><strong>[知乎|训练集、验证集、测试集]</strong></a></p>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"性能度量\">$ 2.3 性能度量</h3>\r\n<ul>\r\n<li><strong>性能度量(Performance Measure):</strong>\r\n衡量模型泛化能力的评价标准. 显然该标准取决于任务需求.</li>\r\n</ul>\r\n<p>以预测任务为例, 给定样例集<span class=\"math inline\">\\(D =\r\n\\{(\\boldsymbol{x_1}, y_1), (\\boldsymbol{x_2}, y_2), ...,\r\n(\\boldsymbol{x_m}, y_m)\\}\\)</span>, 其中<span\r\nclass=\"math inline\">\\(y_i\\)</span>是<span\r\nclass=\"math inline\">\\(\\boldsymbol{x_i}\\)</span>的真实标记,\r\n评估学习器<span class=\"math inline\">\\(f\\)</span>的性能,\r\n需要比较预测结果<span class=\"math inline\">\\(f(x)\\)</span>与真实标记<span\r\nclass=\"math inline\">\\(y\\)</span>.</p>\r\n<p>回归任务常用性能度量<strong>均方误差(Mean Squared Error)</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}(f(\\boldsymbol{x_i}) - y_i)^2\r\n\\tag{2.2}\r\n\\end{equation}\\]</span></p>\r\n<p>更一般地, 对于数据分布<span\r\nclass=\"math inline\">\\(\\mathcal{D}\\)</span>和概率密度函数<span\r\nclass=\"math inline\">\\(p(\\cdot)\\)</span>, 均方误差描述为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}(f(\\boldsymbol{x}) - y)^2\r\np(\\boldsymbol{x}) d\\boldsymbol{x} \\tag{2.3}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"错误率与精度\">$ 2.3.1 错误率与精度</h4>\r\n<p>错误率和精度是分类任务中最常用的两种性能度量.</p>\r\n<p>对于样例集<span class=\"math inline\">\\(\\mathcal{D}\\)</span>,\r\n错误率和精度定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) \\neq\r\ny_i) \\tag{2.4}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nacc(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) =\r\ny_i) = 1 - E(f;D) \\tag{2.5}\r\n\\end{equation}\\]</span></p>\r\n<p>对于数据分布<span\r\nclass=\"math inline\">\\(\\mathcal{D}\\)</span>和概率密度函数<span\r\nclass=\"math inline\">\\(p(\\cdot)\\)</span>, 错误率和精度定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;\\mathcal{D}) = \\int_{x \\sim\r\n\\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) \\neq y) p(\\boldsymbol{x})\r\nd\\boldsymbol{x} \\tag{2.6}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nacc(f;\\mathcal{D}) = \\int_{x \\sim\r\n\\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) = y) p(\\boldsymbol{x})\r\nd\\boldsymbol{x} = 1 - E(f;\\mathcal{D}) \\tag{2.7}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"查准率precision-查全率recall-f1\">$ 2.3.2 查准率(Precision),\r\n查全率(Recall), F1</h4>\r\n<p>有时我们更关心模型的正确率,\r\n比如说\"挑选出来的瓜有多少是好瓜\",\"有多少好瓜被挑选出来了\",\r\n查准率和查全率更适合用来度量.</p>\r\n<p>对于二分类问题, 我们有<strong>混淆矩阵(Confusion Matrix)</strong></p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png\" class=\"\" title=\"tab2-1\">\r\n<p>定义查准率<span class=\"math inline\">\\(P\\)</span>, 查全率<span\r\nclass=\"math inline\">\\(R\\)</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP = \\frac{TP}{TP + FP}\\tag{2.8}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP = \\frac{TP}{TP + FN}\\tag{2.9}\r\n\\end{equation}\\]</span></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 自然语言解释就是,\r\n查准率是在预测正确中实际正确的比率,\r\n查全率是在实际正确中预测正确的比率.</p>\r\n</blockquote>\r\n<p>查准率和查全率是一对矛盾的度量, 二者负相关.\r\n是<strong>sound</strong>和<strong>complete</strong>的关系</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png\" class=\"\" title=\"spic2-1\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 该图片截选自NJU软件分析课件,\r\n<del>ly和tt老师应该不会在意吧(雾)</del></p>\r\n<p>课程地址链接<a\r\nhref=\"https://tai-e.pascal-lab.net/lectures.html\"><strong>[Static\r\nProgram Analysis]</strong></a></p>\r\n</blockquote>\r\n<p>查准率和查全率的关系可以用<strong>P-R图</strong>表示</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png\" class=\"\" title=\"pic2-3\">\r\n<ul>\r\n<li><strong>平衡点(Break-Even Point, BEP):</strong> <span\r\nclass=\"math inline\">\\(P=R\\)</span>时的取值,\r\n可基于BEP评估两个学习器的优劣, 如图2-3, 可认为<span\r\nclass=\"math inline\">\\(A&gt;B&gt;C\\)</span></li>\r\n</ul>\r\n<p>比BEP更常用的是<span class=\"math inline\">\\(F1\\)</span>度量定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nF1 = \\frac{2 \\times P \\times R}{P + R} = \\frac{2 \\times TP}{样例总数 +\r\nTP - TN}\\tag{2.10}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math inline\">\\(F_{\\beta}\\)</span>是<span\r\nclass=\"math inline\">\\(F_1\\)</span>的一般形式, 定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nF_{\\beta} = \\frac{(1 + \\beta^2) \\times P \\times R}{(\\beta^2 \\times P) +\r\nR}\\tag{2.11}\r\n\\end{equation}\\]</span></p>\r\n<p>其中<span class=\"math inline\">\\(\\beta &gt;\r\n0\\)</span>度量了查全率对查准率的相对重要性, <span\r\nclass=\"math inline\">\\(\\beta = 1\\)</span>时退化为<span\r\nclass=\"math inline\">\\(F_1\\)</span>, <span class=\"math inline\">\\(\\beta\r\n&gt; 1\\)</span>时查全率影响更大, <span class=\"math inline\">\\(\\beta &lt;\r\n1\\)</span>时查准率影响更大.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong></p>\r\n<p><span class=\"math inline\">\\(F_1\\)</span>基于调和平均定义, <span\r\nclass=\"math inline\">\\(\\frac{1}{F_1} = \\frac{1}{2} \\cdot (\\frac{1}{P} +\r\n\\frac{1}{R})\\)</span>.</p>\r\n<p><span class=\"math inline\">\\(F_\\beta\\)</span>基于加权调和平均定义,\r\n<span class=\"math inline\">\\(\\frac{1}{F_\\beta} = \\frac{1}{1 + \\beta^2}\r\n\\cdot (\\frac{1}{P} + \\frac{\\beta^2}{R})\\)</span></p>\r\n</blockquote>\r\n<p>若在n个二分类混淆矩阵上考察准确率和查全率,\r\n我们有<strong>macro</strong>和<strong>micro</strong>两种选择.</p>\r\n<p>对于<strong>宏(macro)</strong>, 在各个混淆矩阵上分别计算<span\r\nclass=\"math inline\">\\(P\\)</span>和<span\r\nclass=\"math inline\">\\(R\\)</span>,\r\n再取平均.得到<strong>宏查准率(macro-P)</strong>,\r\n<strong>宏查全率(macro-R)</strong>, <strong>宏F1(macro-F1)</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmacro\\text{-}P = \\frac{1}{n} \\sum_{i=1}^{n} P_i\\tag{2.12}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmacro\\text{-}R = \\frac{1}{n} \\sum_{i=1}^{n} R_i\\tag{2.13}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmacro\\text{-}F1 = \\frac{2 \\times macro\\text{-}P \\times\r\nmacro\\text{-}R}{macro\\text{-}P + macro\\text{-}R}\\tag{2.14}\r\n\\end{equation}\\]</span></p>\r\n<p>对于<strong>微(micro)</strong>, 先平均混淆矩阵得到$, , , $,\r\n再计算出<strong>微查准率(micro-P)</strong>,\r\n<strong>微查全率(micro-R)</strong>, <strong>微F1(micro-F1)</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmicro\\text{-}P =\r\n\\frac{\\overline{TP}}{\\overline{TP}+\\overline{FP}}\\tag{2.15}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmicro\\text{-}R = \\frac{\\overline{TP}}{\\overline{TP}+\\overline{FN}}\r\n\\tag{2.16}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmicro\\text{-}F1 = \\frac{2 \\times micro\\text{-}P \\times\r\nmicro\\text{-}R}{micro\\text{-}P + micro\\text{-}R}\\tag{2.17}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"roc与auc\">$ 2.3.3 ROC与AUC</h4>\r\n<p>现重新考虑查准率和查全率, 首先我们来看看学习器如何给正/反的分类.</p>\r\n<p>很多学习器为测试样本产生一个实值或概率预测,\r\n将预测值与<strong>分类阈值(Threshold)</strong>比较, 大于阈值则为正类,\r\n否则为反类. 根据该实值或概率预测进行排序, 概率高的在前, 概率低的在后,\r\n则这个分类阈值就是<strong>截断点(Cut Point)</strong>, 前一部分为正例,\r\n后一部分为负例.</p>\r\n<p>不难得到以下结论: 截断点越靠前, 查准率增高而查全率降低; 截断点越靠后,\r\n查准率降低而查全率增高. 同时,\r\n排序质量越好的学习器\"在一般情况下\"泛化性能越好,\r\nROC基于此度量模型的泛化能力.</p>\r\n<p><strong>受试者工作特征(Receiver Operating Characteristic,\r\nROC)</strong>, 根据学习器的预测结果对样例进行排序,\r\n顺序逐个把样本作为正例进行预测(选择不同的截断点),计算\r\n<strong>真正例率(True Positive Rate, TPR)</strong>,\r\n<strong>假正例率(False Positive Rate, FPR)</strong> 作为纵横轴.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nTPR = \\frac{TP}{TP + FN}\r\n\\tag{2.18}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nFPR = \\frac{FP}{TN + FP}\r\n\\tag{2.19}\r\n\\end{equation}\\]</span></p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png\" class=\"\" title=\"pic2-4\">\r\n<p>对角线对应随即猜测模型, 点(0, 1)对应所有正例在负例前的理想模型.</p>\r\n<ul>\r\n<li><strong>AUC(Area Under ROC Curve):</strong> ROC曲线下面积.\r\n为依据两个模型绘制的ROC曲线比较两个模型的优劣而引入.</li>\r\n</ul>\r\n<p>对于离散样本, 计算AUC:</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nAUC = \\frac{1}{2} \\sum^{m - 1}_{i=1}(x_{i+1} - x_i)\\cdot(y_i + y_{i + 1}\r\n)\r\n\\tag{2.19}\r\n\\end{equation}\\]</span></p>\r\n<p>形式化上AUC度量排序质量, 记有<span\r\nclass=\"math inline\">\\(m^+\\)</span>个正例, <span\r\nclass=\"math inline\">\\(m^-\\)</span>个反例, 令<span\r\nclass=\"math inline\">\\(D^+\\)</span>为正例集合, <span\r\nclass=\"math inline\">\\(D^-\\)</span>为负例集合,\r\n定义排序<strong>损失(loss):</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mathscr{l}_{rank} = \\frac{1}{m^+ m^-}\\sum_{x^+ \\in D^+} \\sum_{m^- \\in\r\nD^-}\\left(\\mathbb{I}(f(x^+)&lt;f(x^-)) + \\frac{1}{2} \\mathbb{I}(f(x^+)=\r\nf(x^-))\\right)\r\n\\tag{2.21}\r\n\\end{equation}\\]</span></p>\r\n<p>如何理解这个式子? 考虑每一对正反例, 若正例小于反例记一个\"罚分\",\r\n相等则记半个. 不难看出, 对于每个正例/负例, 可能造成的\"罚分\"与其\"位置\",\r\n越\"错误\"的位置会引起越多的\"罚分\", 这与AUC计算过程及其相似. 实际上, <span\r\nclass=\"math inline\">\\(\\mathscr{l}_{rank}\\)</span>对应ROC曲线上方的面积,\r\n有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nAUC = 1 - \\mathscr{l}_{rank}\r\n\\tag{2.22}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"代价敏感错误率与代价曲线\">$ 2.3.4 代价敏感错误率与代价曲线</h4>\r\n<p>为权衡不同类型错误所造成的不同损失,\r\n我们为错误赋予<strong>非均等代价(UnEqual Cost)</strong>.</p>\r\n<p>以二分类为例, <strong>代价矩阵(Cost Matrix)</strong>如下:</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png\" class=\"\" title=\"tab2-2\">\r\n<p>若将0类记为正例, 1类记为负例, 定义<span class=\"math inline\">\\(D^+,\r\nD^-\\)</span>, <strong>代价敏感(Cost-Sensitive)</strong> 错误率为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D;cost) = \\frac{1}{m} \\left(\\sum_{\\boldsymbol{x}_i \\in D^+}\r\n\\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i) \\times cost_{01} +\r\n\\sum_{\\boldsymbol{x}_i \\in D^-} \\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i)\r\n\\times cost_{10}\\right)\r\n\\tag{2.23}\r\n\\end{equation}\\]</span></p>\r\n<p>非均等情况下, <strong>代价曲线(Cost\r\nCurve)</strong>可以解决ROC曲线不能反映出学习器的期望<strong>总体代价(Total\r\nCost)</strong>问题.</p>\r\n<p>其横轴是取值为<span\r\nclass=\"math inline\">\\([0,1]的\\)</span>正例概率代价, 其中<span\r\nclass=\"math inline\">\\(p\\)</span>为样例是正例的概率</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP(+)cost=\\frac{p \\times cost_{01}}{p \\times cost_{01} + (1 - p) \\times\r\ncost_{10}}\r\n\\tag{2.24}\r\n\\end{equation}\\]</span></p>\r\n<p>纵轴是取值为<span\r\nclass=\"math inline\">\\([0,1]\\)</span>的归一化代价,FPR为假正例率,\r\nFNR为假反例率</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\ncost_{norm} = \\frac{FNR \\times p \\times cost_{01} + FPR \\times (1 - p)\r\n\\times cost_{10}}{p \\times cost_{01} + (1 - p) \\times cost_{10}}\r\n\\tag{2.25}\r\n\\end{equation}\\]</span></p>\r\n<p>绘制代价曲线时, ROC曲线上每个点对应代价平面上的一条线段,\r\n设ROC点坐标为<span class=\"math inline\">\\((FPR, TPR)\\)</span>,\r\n然后在代价平面上绘制一条从<span class=\"math inline\">\\((0,\r\nFPR)\\)</span>到<span class=\"math inline\">\\((1, FNR)\\)</span>的线段,\r\n线段下面积代表了该条件下的期望总体代价.如此为每个点绘制线段, 取线段下界,\r\n围成面积即为在所有条件下学习器的总体期望代价.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png\" class=\"\" title=\"pic2-5\">\r\n<blockquote>\r\n<p><strong>Addtional:</strong> 如何理解代价曲线?</p>\r\n<p>笔者在此给出一篇参考<a\r\nhref=\"https://www.zhihu.com/question/63492375\"><strong>[知乎|代价曲线的理解]</strong></a>.这篇参考中对大部分问题给到了解释.</p>\r\n<p>在此额外补充一点困惑笔者许久的问题, 每一条线段代表什么?</p>\r\n<p>每一条线段代表当前<strong>阈值</strong>条件下,\r\n对不同样本集的期望代价. 具体来说,\r\n是以FPR和FNR为预测值对不同样本集的预测.</p>\r\n</blockquote>\r\n<h3 id=\"比较检验\">$ 2.4 比较检验</h3>\r\n<p><strong>统计假设检验(Hypothesis Test)</strong>\r\n为比较学习器性能提供了重要依据. 本节默认以错误率为性能度量, 用<span\r\nclass=\"math inline\">\\(\\epsilon\\)</span>表示.</p>\r\n<h4 id=\"假设检验\">$ 2.4.1 假设检验</h4>\r\n<p>现实中我们无法知道学习器的泛化错误率 <span\r\nclass=\"math inline\">\\(\\epsilon\\)</span>, 只能获知其测试错误率 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon}\\)</span>.\r\n常用测试错误率估推出泛化错误率.</p>\r\n<p>对于 <span class=\"math inline\">\\(m\\)</span> 个测试样本,\r\n如果测试错误率为 <span class=\"math inline\">\\(\\hat{\\epsilon}\\)</span>,\r\n则被误分类的样本数量 <span class=\"math inline\">\\(m&#39;=\\hat{\\epsilon}\r\n\\times m\\)</span>, 假定测试样本从样本总体分布中独立采样获得,\r\n由<strong>二项(Binomial)分布</strong>, 泛化错误率为 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon}\\)</span> 的学习器恰有 <span\r\nclass=\"math inline\">\\(m&#39;\\)</span> 个样本被误分类的概率是 <span\r\nclass=\"math inline\">\\(\\binom{m}{m&#39;}\\epsilon^{m&#39;}(1-\\epsilon)^{m-m&#39;}\\)</span>\r\n. 同时, 这也表示泛化错误率为 <span\r\nclass=\"math inline\">\\(\\epsilon\\)</span> 的学习器在<span\r\nclass=\"math inline\">\\(m\\)</span>个样本上测试得到测试错误率为 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon}\\)</span> 的概率:</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP(\\hat{\\epsilon};\\epsilon)=\\binom{m}{\\hat{\\epsilon} \\times m}\r\n\\epsilon^{\\hat{\\epsilon} \\times m} (1 - \\epsilon)^{m - \\hat{\\epsilon}\r\n\\times m}\r\n\\tag{2.26}\r\n\\end{equation}\\]</span></p>\r\n<p>由二项分布性质, 或者计算 <span\r\nclass=\"math inline\">\\(P(\\hat{\\epsilon};\\epsilon)\\)</span> 对 <span\r\nclass=\"math inline\">\\(\\epsilon\\)</span> 的偏导, 可以知道 <span\r\nclass=\"math inline\">\\(P(\\hat{\\epsilon};\\epsilon)\\)</span> 在 <span\r\nclass=\"math inline\">\\(\\epsilon = \\hat{\\epsilon}\\)</span> 时最大, <span\r\nclass=\"math inline\">\\(|\\epsilon - \\hat{\\epsilon}|\\)</span> 增大时 <span\r\nclass=\"math inline\">\\(P(\\hat{\\epsilon};\\epsilon)\\)</span> 减小.</p>\r\n<p>若取 <span class=\"math inline\">\\(m=10, \\epsilon = 0.3\\)</span>,\r\n示意图如2.6所示.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png\" class=\"\" title=\"pic2-6\">\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n<del>死去的《概率论与数理统计》突然复活起来攻击我</del>, 推荐复习笔记<a\r\nhref=\"https://zhuanlan.zhihu.com/p/243215469\"><strong>[知乎|概率论与数理统计复习整理]</strong></a>.</p>\r\n</blockquote>\r\n<p>由<strong>二项检验(Binomial Test)</strong>, 考虑假设<span\r\nclass=\"math inline\">\\(\\epsilon \\leq \\epsilon_0\\)</span>, 在 <span\r\nclass=\"math inline\">\\(1 - \\alpha\\)</span>\r\n的概率内能观测到的最大错误率为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\bar{\\epsilon} = \\min \\epsilon \\ \\ \\text{s.t.} \\ \\ \\sum_{i = \\epsilon\r\n\\times m + 1}^{m} \\binom{m}{i}\\epsilon_0^i (1 - \\epsilon_0)^{m - i} &lt;\r\n\\alpha\r\n\\tag{2.27}\r\n\\end{equation}\\]</span></p>\r\n<p>其中 <span class=\"math inline\">\\(1-\\alpha\\)</span>\r\n为<strong>置信度(Confidence)</strong>, 直观上对应图2.6的非阴影部分;\r\n\"s.t.\"是\"subject to\", 使左边式子在右边式子条件满足时成立.</p>\r\n<p>若测试错误率 <span class=\"math inline\">\\(\\hat{\\epsilon}\\)</span>\r\n大于临界值 <span class=\"math inline\">\\(\\bar{\\epsilon}\\)</span>,\r\n由二项检验, 我们可以认为在 <span class=\"math inline\">\\(\\alpha\\)</span>\r\n的显著度下, 假设 <span class=\"math inline\">\\(\\epsilon \\leq\r\n\\hat{\\epsilon}\\)</span> 不能被拒绝, 即能以 <span\r\nclass=\"math inline\">\\(1-\\alpha\\)</span> 的置信度认为,\r\n学习器的泛化错误率不高于 <span\r\nclass=\"math inline\">\\(\\epsilon_0\\)</span>; 否则可以拒绝假设, 在 <span\r\nclass=\"math inline\">\\(\\alpha\\)</span>\r\n的显著度下可认为学习器的泛化错误率大于 <span\r\nclass=\"math inline\">\\(\\epsilon_0\\)</span>.</p>\r\n<p>在通过多次测试中中我们会获得多个测试错误率,\r\n此时可使用<strong>t检验(t-test)</strong>.</p>\r\n<p>设<span class=\"math inline\">\\(k\\)</span>个错误率 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon_1}, \\hat{\\epsilon_2}, ...,\r\n\\hat{\\epsilon_k}\\)</span>, 则平均错误率 <span\r\nclass=\"math inline\">\\(\\mu\\)</span>, 方差 <span\r\nclass=\"math inline\">\\(\\sigma^2\\)</span> 为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mu = \\frac{1}{k} \\sum_{i=1}^k \\hat{\\epsilon_i}\r\n\\tag{2.28}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\sigma^2=\\frac{1}{k-1} \\sum^{k}_{i=1}(\\hat{\\epsilon_i} - \\mu)^2\r\n\\tag{2.29}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math inline\">\\(k\\)</span> 个测试错误率可看作是泛化错误率\r\n<span class=\"math inline\">\\(\\epsilon_0\\)</span> 的独立采样, 则变量</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\tau_t=\\frac{\\sqrt{k} (\\mu - \\epsilon_0)}{\\sigma}\r\n\\tag{2.30}\r\n\\end{equation}\\]</span></p>\r\n<p>服从自由度为 <span class=\"math inline\">\\(k-1\\)</span> 的 <span\r\nclass=\"math inline\">\\(t\\)</span> 分布.</p>\r\n<blockquote>\r\n<p><strong>Addtional:</strong> <strong>基础知识补充</strong></p>\r\n<p><span class=\"math inline\">\\(\\chi^2\\)</span> 分布: <span\r\nclass=\"math inline\">\\(X_1, X_2, ..., X_n\\)</span> 为独立同分布随机变量,\r\n服从 <span class=\"math inline\">\\(N(0, 1)\\)</span>, 则 <span\r\nclass=\"math inline\">\\(\\chi^2_n = \\sum_{i=1}^n X^2_i\\)</span>\r\n为服从自由度为 <span class=\"math inline\">\\(n\\)</span> 的 <span\r\nclass=\"math inline\">\\(\\chi^2\\)</span> 分布</p>\r\n<p><span class=\"math inline\">\\(t\\)</span> 分布: <span\r\nclass=\"math inline\">\\(X \\sim N(0,1), Y \\sim \\chi^2(n)\\)</span>, <span\r\nclass=\"math inline\">\\(X,Y\\)</span> 独立, 称 <span\r\nclass=\"math inline\">\\(T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}\\)</span>\r\n为服从自由度为 <span class=\"math inline\">\\(n\\)</span> 的 <span\r\nclass=\"math inline\">\\(t\\)</span> 分布.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>Tips:</strong> <strong>推导补充</strong></p>\r\n<p>原书中没有关于这个<span\r\nclass=\"math inline\">\\(\\tau_t\\)</span>服从<span\r\nclass=\"math inline\">\\(t\\)</span>分布的推导, 笔者在此给出补充.</p>\r\n<p>假设<span\r\nclass=\"math inline\">\\(X_1,X_2,...X_n\\)</span>是来自正态总体<span\r\nclass=\"math inline\">\\(N(\\mu,\\sigma^2)\\)</span>的样本.\r\n我们有以下重要统计量:</p>\r\n<p><span class=\"math display\">\\[\r\n\\begin{align}\r\n\\nonumber\\text{样本均值}&amp; \\ \\bar{X}=\\frac{1}{n}\\sum_{i=1}^n &gt;X_i\r\n\\\\\r\n\\nonumber\\text{样本方差}&amp; \\\r\nS^2=\\frac{1}{n-1}\\sum_{i-1}^{n}(X_i-\\bar{X})^2\r\n\\end{align}\r\n\\]</span></p>\r\n<p>我们有几个重要结论:</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png\" class=\"\" title=\"spic2-3\">\r\n<p>故而有推论:</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png\" class=\"\" title=\"spic2-4\">\r\n</blockquote>\r\n<p>对假设<span\r\nclass=\"math inline\">\\(\\mu=\\epsilon_0\\)</span>和显著度<span\r\nclass=\"math inline\">\\(\\alpha\\)</span>, 可以算出临界值——在<span\r\nclass=\"math inline\">\\(1-\\alpha\\)</span>内能观测到的最大错误率.\r\n考虑<strong>双边假设(Two-Tailed)</strong>, 若<span\r\nclass=\"math inline\">\\(\\tau_t\\)</span>位于临界区<span\r\nclass=\"math inline\">\\([t_{-\\alpha/2},t_{\\alpha/2}]\\)</span>内(如图2.7所示),\r\n则不能拒绝假设<span class=\"math inline\">\\(\\mu=\\epsilon_0\\)</span>.\r\n我们可以认为泛化错误率为<span\r\nclass=\"math inline\">\\(\\epsilon_0\\)</span>.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png\" class=\"\" title=\"pic2-7\">\r\n<h4 id=\"多学习器比较\">$ 2.4.2 多学习器比较</h4>\r\n<p>笔者对这部分不做过多记录, 翻阅原书该部分即可.</p>\r\n<p>对于两个学习器,我们有</p>\r\n<ul>\r\n<li>交叉验证t检验(基于成对t 检验)</li>\r\n<li>McNember检验(基于列联表，卡方检验)</li>\r\n</ul>\r\n<p>对于多个学习器,我们有</p>\r\n<ul>\r\n<li>Friedman检验(基于序值，F检验; 判断”是否都相同”)</li>\r\n<li>Nemenyi后续检验(基于序值，进一步判断两两差别)</li>\r\n</ul>\r\n<h3 id=\"偏差与方差\">2.5 偏差与方差</h3>\r\n<ul>\r\n<li><strong>偏差-方差分解(Bias-variance Decomposition)</strong></li>\r\n</ul>\r\n<p>对测试样本<span class=\"math inline\">\\(\\boldsymbol{x}\\)</span>,\r\n令<span class=\"math inline\">\\(y_D\\)</span>为<span\r\nclass=\"math inline\">\\(\\boldsymbol{x}\\)</span>在数据集的集中标记, <span\r\nclass=\"math inline\">\\(y\\)</span>为<span\r\nclass=\"math inline\">\\(\\boldsymbol{x}\\)</span>的真实标记, <span\r\nclass=\"math inline\">\\(f(\\boldsymbol{x};D)\\)</span>为训练集<span\r\nclass=\"math inline\">\\(D\\)</span>上的学得模型<span\r\nclass=\"math inline\">\\(f\\)</span>在<span\r\nclass=\"math inline\">\\(\\boldsymbol{x}\\)</span>上的预测输出.</p>\r\n<p>以回归算法为例, 我们有如下定义(符号定义见<a\r\nhref=\"http://localhost:4000/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/#chapter-0-%E4%B8%BB%E8%A6%81%E7%AC%A6%E5%8F%B7%E8%A1%A8\"><strong>[Lapluma|读书笔记-机器学习\r\nCh0-Ch1]</strong></a>):</p>\r\n<p>学习算法的期望预测.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\bar{f}(\\boldsymbol{x})=\\mathbb{E}_D[f(\\boldsymbol{x};D)]\r\n\\tag{2.37}\r\n\\end{equation}\\]</span></p>\r\n<p>使用样本数相同的不同训练集产生的方差,\r\n度量了同样大小的训练集变动导致的学习性能变化,\r\n刻画了数据扰动造成的影响.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mathcal{var}(\\boldsymbol{x})=\\mathbb{E}_D[(f(\\boldsymbol{x};D)-\\bar{f}(x))^2]\r\n\\tag{2.38}\r\n\\end{equation}\\]</span></p>\r\n<p>噪声, 在当前学习任务上任何学习算法所能达到的期望泛化误差下界,\r\n刻画了学习问题本身的难度.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\varepsilon^2=\\mathbb{E}_D[(y_D-y)^2]\r\n\\tag{2.39}\r\n\\end{equation}\\]</span></p>\r\n<p>期望输出与真实标记的差别称为偏差,\r\n度量了学习算法的期望预测与真是结果的偏离程度,\r\n刻画了学习算法本身的拟合能力.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mathcal{bias}^2(\\boldsymbol{x})=(\\bar{f}(\\boldsymbol{x})-y)^2\r\n\\tag{2.40}\r\n\\end{equation}\\]</span></p>\r\n<p>便于讨论,我们假定噪声期望为0, 即<span\r\nclass=\"math inline\">\\(\\mathbb{E}_D[y_D-y]=0\\)</span>,\r\n对期望泛化误差进行分解(推导略, 见原书), 有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D)=bias^2(\\boldsymbol{x})+var(\\boldsymbol{x})+\\varepsilon ^2\r\n\\tag{2.42}\r\n\\end{equation}\\]</span></p>\r\n<p>即泛化误差可以分解为偏差, 方差和噪声之和.</p>\r\n<p>一般来说, 偏差和方差存在冲突, 称为<strong>偏差-方差窘境(Bias-Variance\r\nDilemma)</strong>,见图2-9.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png\" class=\"\" title=\"pic2-9\">\r\n<p>训练不足时, 学习器拟合能力不足,\r\n训练数据的扰动不足以使学习器产生显著变化,\r\n此时偏差主导了泛化错误率;训练程度加深, 学习器拟合能力增强,\r\n训练数据发生的扰动被学习器学习到, 方差逐渐主导了泛化错误率;训练充足后,\r\n学习器拟合能力非常强. 训练数据发生轻微扰动都会导致学习器发生显著变化,\r\n此时训练数据自身,非全局的性质被学习器学习, 发生过拟合.</p>"},{"title":"读书笔记-大话设计模式 Ch0","date":"2024-09-10T11:45:47.000Z","hidden":false,"_content":"\n**精彩的代码是如何想出来的, 要比看到精彩的代码更加令人期待.**\n\n<!-- more -->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [书籍基本信息](#书籍基本信息)\n- [Chapter 0: Preview 面向对象基础](#chapter-0-preview-面向对象基础)\n\n---\n\n## 书籍基本信息\n\n《大话设计模式》程杰 2007.\n\n本文***不提供***书籍的电子版文件, 请有需要的读者移步至**Z-library**或其他渠道获得.\n\n本书以情景对话形式, 辅以故事或例子介绍设计模式, 以C#语言书写代码, 适合有面向过程编程基础但面向对象编程能力弱的初学者.\n\n## Chapter 0: Preview 面向对象基础\n\n> 附录A 培训实习生——面向对象基础\n>\n> **Tips:** 本部分不设计具体的语法细节, 特性和原理, 仅作示例, 如有需去可移步至专业书籍文献寻求细节, 如[**微软官方**](https://learn.microsoft.com/en-us/dotnet/csharp/)或书籍[**C#图解教程**](https://book.douban.com/subject/34894447/).\n\n- **对象(Object):** 对象是一个自包含的实体, 用一组可识别的特性和行为来标识.\n\n    > **Tips:** 定义比较拗口, 通俗来说, 对象是对事物的抽象, 一切事物都可以称为对象.\n\n- **面向对象编程(Object-Oriented Programming):** 面向对象的编程.\n\n    > **Tips:** 简称OOP, 区别于面向过程编程, 面向过程需要分析得出步骤, 按序实现程序功能. OOP首先对事物抽象为\"对象\", 用对象的属性和行为解决问题.\n\n- **类(Class):** 具有相同属性和功能对象的抽象集合.\n\n``` C#\nclass Cat {\n    public string shout() {\n        return \"mew\";\n    }\n}\n```\n\n- **实例(Instance) & 实例化:** 实例是真实的对象, new得到实例的过程称为实例化.\n\n    > **Tips:** 类就像是工厂的蓝图, 实例就是生产出来的产品, 一个类只有实例化后才可以调用(可能不严谨, 存疑), 和蓝图与产品一样, 一个类可以实例化出多个不同的实例(**学生类**可以实例化为**学生李华**, **学生张三**等).\n\n``` C#\nCat cat = new Cat();\n```\n\n- **修饰符:**\n  - **public:** 修饰的类成员允许被任何类访问\n  - **protected:** 修饰的类成员仅允许该类和其子类访问\n  - **private:** 修饰的类成员仅允许该类访问\n\n    > **Tips:** 程序设计是一门权衡和妥协的艺术, 对OOP为何如此设计的读者可自行查阅OOP发展的历史.\n\n- **属性:** 属性是一个方法或一对方法, 在调用它的代码看来, 它是一个字段, 即属性适合于以字段的方法使用方法调用的场合.\n\n- **字段:** 储存类设计所需的数据, 形式上是与类相关的变量.\n\n``` C#\nclass Example{\n    private int num; //声明一个私有内部字段, 修饰符private\n    public int Num { //Num公有外部属性, 修饰符public\n        get { //外部读取方法\n            return Num;\n        }\n        set { //外部修改方法, 删去此方法时表示Num是只读的.\n            Num = value; // set含有隐式参数, 由关键字value表示, 用于赋值\n        }\n    }\n}\n```\n\n> **Tips:** 属性和字段的描述比较抽象, 推荐直接结合代码理解. 笔者认为是一种语法糖上的tricky, 在其他语言OOP也有相似的写法. 这种写法的好处是隔离内部与外部, 仅允许类提供的公共方法访问类内成员变量.\n\n- **构造方法/构造函数:** 对类进行初始化的方法. 与类同名, 无返回值, 不需要void, 在new中调用.\n\n    > **Tips:** 以上语法细节适用于C#, 非C#可能会有差别, 类中不显示写明构造函数时由编译器默认构造(更多语法细节和原理请移步至讨论C#的相关文献).\n\n``` C#\nclass Cat {\n    private string name;\n    public Cat(string name){ //这是构造函数\n        this.name = name;\n    }\n}\n```\n\n- **重载(overload):** 提供了创建多个同名方法(Function)的功能, 重载方法的参数类型不同. 重载可以在不改变原方法基础上添加新功能.\n\n    > **Tips:** 这里**参数类型的不同**指的是参数个数不同或参数类型的不同(详见代码示例)\n\n``` C#\nclass Example{\n    //不仅构造函数, 普通函数也可以重载\n    public function(){};\n    public function(int arg_1){};\n    public function(float arg_1){};\n    public function(int arg_1, float arg_2){};\n    public function(float arg_1, int arg_2){};//类型顺序不同也会被认为是重载\n}\n```\n\n- **封装:** 每个对象包含该对象操作所需的所有信息, 不必依赖其他对象来完成自己的操作, 该特性称为封装.\n\n    > **Addtional:** 良好的封装可以减少耦合, 类内部实现可以自由修改, 具有清晰的对外接口\n\n- **继承:** 对象的继承代表了一种\"**is-a**\"关系, 若描述为\"B是A\", 则认为B可以继承A. 又可以理解为B是A的一种特殊化, B拥有A的特性之外, 还拥有自己独特的特性. 即继承代表了一种包含关系, A包含B.\n\n    > **Addtional:**\n    > - 继承的双方称为**子类/派生类&父类/基类**.\n    > - 子类继承父类的成员有方法, 域, 属性, 事件, 索引指示器\n    > - 构造方法**无法**继承, 只能调用, 可以使用**base**关键字(C#语法特性)\n\n``` C#\nclass Animal { //父类\n    protected string name = \"\";\n    public Animal() { //构造函数\n        this.name = \"unamed\";\n    }\n    public Animal(string name) {\n        this.name = name;\n    }\n    protected int shoutNum = 3;\n    public int ShoutNum { //属性\n        get {\n            return shoutNum;\n        }\n        set {\n            shoutNum = value;\n        }\n    }\n}\n\nclass Cat : Animal { //继承父类Animal的子类Cat\n    public Cat() : base() {}\n    public Cat(string name) : base(name) {}\n\n    public string Shout() {\n        string result = \"\";\n        for(int i = 0; i < shoutNum; i++){\n            result += \"mew \";\n        }\n        return result;\n    }\n}\n\nclass Dog : Animal { //继承父类Animal的子类Dog\n    public Dog() : base() {}\n    public Dog(string name) : base(name) {}\n\n    public string Shout() {\n        string result = \"\";\n        for(int i = 0; i < shoutNum; i++){\n            result += \"woof \";\n        }\n        return result;\n    }\n}\n```\n\n> **Tips:** 继承的**优点**是使子类公共部分放在了父类, 代码得到了共享, 减少了代码重复, 修改和扩展都变得相对容易. 但**缺点**也是显而易见的, 继承会破坏封装, 父类实现的细节暴露给子类, 父类和子类间是强耦合的.\n\n- **多态:** 多态表示不同的对象可以执行相同的动作, 但通过自己的代码执行.\n\n    > **Additional:**\n    > - 子类以父类身份出现\n    > - 子类工作时以自己的方式实现\n    > - 子类以父类身份出现时, 无法使用子类特有的属性和方法\n    >\n    > **Tips:** 在父类中, 该动作需要声明为虚拟的, 用关键字**virtual**标识.\n\n- **重写/覆写(override):** 子类使用关键字**override**将父类实现替换为自己的实现.\n\n``` C#\nclass Animal{\n    ......\n    public virtual string Shout(){ //声明为虚方法\n        return \"\";\n    }\n}\nclass Cat : Animal{\n    ......\n    public override string Shout(){ //覆写\n        ....... //略, 代码见上文\n    }\n}\nclass Dog : Animal{\n    ......\n    public override string Shout(){ //覆写\n        ....... //略, 代码见上文\n    }\n}\n\n/*-----------------------------------------------------*/\n/*执行环境*/\n\narrayAnimal = new Animal[5];\narrayAnimal[0] = new Cat();\narrayAnimal[1] = new Dog();\nforeach(Animal item in arrayAnimal){\n    MessageBox.Show(item.Shout()); //Cat为\"mew\", Dog为\"woof\".\n}\n\n```\n\n> **Tips1:** C#的多态性分为静态多态性和动态多态性. 静态多态性即为前文提到的overload重载, 在编译时确定; 动态多态性为override覆写, 在运行时确定, 通过抽象类(见下文)和虚方法实现.\n>\n> **Tips2:** 笔者在翻阅相关资料时, 在C++语言中发现了更为复杂的机制, overwrite重写和override覆写存在区别, 详见[**博客园|C++中的Overload、Override和Overwrite**](https://www.cnblogs.com/kuliuheng/p/4107012.html)\n>\n> **Addtional:** 原书对上述实现Animal Shout的代码进行重构, 具体方法为将Shout()声明为父类公共方法(去掉virtual), 声明新的虚方法getSound(), 在Shout()中调用, 在子类中覆写(override), 从而避免了代码重复, 此处笔者不再浪费篇幅详细赘述.\n\n- **抽象类&抽象方法:** C#允许将类和方法用关键字**abstract**声明, 即抽象类, 抽象方法.\n\n    > **Addtional:**\n    > - 抽象类不能被实例化\n    > - 抽象方法必须被子类覆写(override)\n    > - 含有抽象方法的类必须声明为抽象类, 不论是否具有一般方法\n    > - 使用时考虑让抽象类拥有尽可能多的共同代码, 拥有尽可能少的数据\n    >\n    > **Tips:** 抽象类通常代表一种抽象概念, 提供了一个继承的出发点, 当设计一个新的抽象类时, 一定是用来继承的. 因此在继承结构中, 叶节点应当是具体类, 非叶节点应当是抽象类.\n\n- **接口(Interface):** 接口是把隐式公共方法和属性组合起来, 以封装特定功能的一个集合. 类实现了接口就可以支持接口所指定的所有属性和成员. 接口不允许提供任何成员的执行方法(因此接口不能实例化, 没有构造方法, 字段和修饰符, 不能声明静态或虚拟等).\n\n    > **Addtionnal:**\n    > - 实现接口的类必须实现接口中所有方法和属性.\n    > - 一个类可以支持多个接口, 不同类也可以支持相同接口.\n    >\n    > **Tips:** [菜鸟教程|C# Interface](https://www.runoob.com/csharp/csharp-interface.html)将接口表述为:\n    >\n    >接口定义了所有类继承接口时应遵循的语法合同. 接口定义了语法合同\"是什么\"部分, 派生类定义了语法合同\"怎么做\"部分. 接口定义了属性, 方法和事件, 这些都是接口的成员. 接口只包含了成员的声明. 成员的定义是派生类的责任. 接口提供了派生类应遵循的标准结构.\n    >\n    > **书写规范:** 接口的命名需要在前面加一个大写\"I\".\n\n``` C#\n// 笔者在此化简了书目中提供的例子, 能理解即可.\n// 叮当猫继承自上文出现的Cat类, 内部需要实现变东西的接口\n\ninterface IChange {\n    string ChangeThing(string thing);\n}\n\nclass MachineCat : Cat, IChange {\n    public MachineCat() : base(){}\n    public MachineCat() : base(name){}\n\n    public string ChangeThing(string thing){ //实现接口, 不需要使用override修饰\n        return base.Shout() + \"我有万能口袋, 可以变出: \" + thing;\n    }\n}\n```\n\n> **Additional:**\n> 笔者在此补充一点C#的语法特性, 接口也可以继承接口, 假设IB继承IA, 在IB中不需要声明IA中的声明, 但实现IB的类需要实现IA和IB中的所有声明.\n>\n> **Compare: Class v.s. Interface**\n>\n> - **语法上:** 抽象类可以给出一些成员的实现, 接口不能包含成员的实现, 抽象类的抽象成员可被子类部分实现, 但接口的成员需要类全部实现, 一个类只能继承**一个**抽象类, 但可以实现**多个**接口.\n> - **含义上:** 类是对象的抽象, 抽象类是对类的抽象, 接口是对**行为**的抽象.\n> - **使用上:** 如果行为跨越不同类的对象, 可使用接口; 对于一些相似的类对象, 用继承抽象类. 需要注意的是, 实现接口和继承抽象类并不冲突.\n> - **设计角度上:** 抽象类是从子类中发现了公共的东西, 泛化出父类, 然后子类继承父类, 而接口根本不知道子类的存在, 方法如何实现不明确, 预先定义.\n\n- **泛型(Generic):** 泛型是具有占位符(类型参数)的类, 结构, 接口和方法, 这些占位符是类, 结构, 接口和方法所储存域或使用的一个或多个类型的占位符. 泛型集合类可以将类型参数用作它所存储的对象的类型的占位符: 类型参数作为其字段的类型和其方法的参数类型出现.\n\n    > **Additional:** 通常情况下, 都建议使用泛型集合, 因为这样可以获得类型安全的直接优点而不需要从基集合类型派生并实现类型特定成员. 此外, 如果集合元素为值类型, 泛型集合类型的性能通常优于对应的非泛型集合类型, 因为使用泛型时不必对元素进行装箱.\n    >\n    > **Tips:** [菜鸟教程|C# Generic](https://www.runoob.com/csharp/csharp-generic.html)将泛型表述为:\n    >\n    > 泛型(Generic)允许您延迟编写类或方法中的编程元素的数据类型的规范, 直到实际在程序中使用它的时候. 换句话说, 泛型允许您编写一个可以与任何数据类型一起工作的类或方法.\n    >\n    > 泛型的定义较为晦涩, 建议结合代码理解. 笔者在此强烈建议阅读更多的资料来学习泛型.\n\n``` C#\nusing System.Collections.Generic; //增加泛型集合命名空间\n\npublic partial class Forml : Form{\n    IList<Animal> arrayAnimal; // 声明泛型集合变量, 表示只接受Animal类型\n    //List<Animal> arrayAnimal; 两种写法是等价的\n\n    private Event(){\n        arrayAnimal = new List<Animal>();\n\n        arrayAnimal.Add(new Cat());\n        arrayAnimal.Add(new Dog());\n        arrayAnimal.Add(123); // Error! Invalid Type \n    }\n}\n```\n\n- **委托:** 委托是对函数的封装, 可以当作给方法的特征指定一个名称. 委托对象用关键字**delegate**声明.\n\n- **事件:** 事件时委托的一种特殊形式, 当发生有意义的事情时, 事件对象处理通知过程. 事件对象用关键字**event**声明.\n\n> **Additional:** 委托是一种引用方法的类型, 一旦为委托分配了方法, 委托将与该方法具有完全相同的行为. 事件则是在发生其他类或对象关注的事情时, 类或对象可通过事件通知它们.\n\n``` C#\n//情境: 猫Tom叫的时候两只老鼠Jerry和Jack要跑.\n\nclass Cat{\n    private string name;\n    public Cat(string name){\n        this.name = name;\n    }\n\n    public delegate void CatShoutEventHandler(); // 声明委托\n    public event CatShoutEventHandler CatShout; //声明事件\n\n    public void Shout(){\n        Console.WriteLine(\"喵, 我是{0}.\", name);\n        if (CatShout != null){ // 如果声明了事件CatShout\n            CatShout();\n        }\n    }\n}\n\nclass Mouse{\n    private string name;\n    public Mouse(string name){\n        this.name = name;\n    }\n\n    public void Run(){\n        Console.WriteLine(\"老猫来了, {0}快跑\", name);\n    }\n}\n\nstatic void Main(string[] args){\n    Cat cat = new Cat(\"Tom\");\n    Mouse mouse1 = new Mouse(\"Jerry\");\n    Mouse mouse2 = new Mouse(\"Jack\");\n\n    cat.CatShout += new Cat.CatShoutEventHandler(mouse1.Run);\n    cat.CatShout += new Cat.CatShoutEventHandler(mouse2.Run); \n    // \"+=\" 表示 \"add_CatShout\" 的意思; 与之相反 \"-=\" 表示 \"remove_CatShout()\"\n\n    cat.Shout();\n    Console.Read();\n}\n```\n\n运行结果:\n\n``` Shell\n喵, 我是Tom.\n老猫来了, Jerry快跑!\n老猫来了, Jack快跑!\n```\n\n- **EventArgs:** EventArgs是包含事件数据的类的基类.\n\n``` C#\npublic class CatShoutEventArgs : EventArgs{\n    private string name;\n    public string Name{\n        get {return name; }\n        set {name = value; }\n    }\n}\n\nclass Cat{\n    private string name;\n    public Cat(string name){\n        this.name = name;\n    }\n\n    public delegate void CatShoutEventHandler(object sender, CatShoutEventArgs args);\n    public event CatShoutEventHandler CatShout;\n\n    public void Shout(){\n        Console.WriteLine(\"喵, 我是{0}.\", name);\n        if(CatShout != null){\n            CatShoutEventArgs e = new CatShoutEventArgs();\n            e.Name = this.name;\n            CatShout(this, e);\n        }\n    }\n}\n\nclass Mouse{\n    private string name;\n    public Mouse(string name){\n        this.name = name;\n    }\n\n    public void Run(object sender, CatShoutEventArgs args){\n        Console.WriteLine(\"老猫{0}来了, {1}快跑!\", args.Name, name);\n    }\n}\n```\n\nMain执行结果:\n\n``` Shell\n喵, 我是Tom.\n老猫Tom来了, Jerry快跑!\n老猫Tom来了, Jack快跑!\n```\n","source":"_posts/BookNote-DesignPatterns-by-JieCheng-1.md","raw":"---\ntitle: 读书笔记-大话设计模式 Ch0\ndate: 2024-09-10 19:45:47\nhidden: false\ntags:\n- 读书笔记\n- 设计模式\ncategories:\n- 读书笔记\n---\n\n**精彩的代码是如何想出来的, 要比看到精彩的代码更加令人期待.**\n\n<!-- more -->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [书籍基本信息](#书籍基本信息)\n- [Chapter 0: Preview 面向对象基础](#chapter-0-preview-面向对象基础)\n\n---\n\n## 书籍基本信息\n\n《大话设计模式》程杰 2007.\n\n本文***不提供***书籍的电子版文件, 请有需要的读者移步至**Z-library**或其他渠道获得.\n\n本书以情景对话形式, 辅以故事或例子介绍设计模式, 以C#语言书写代码, 适合有面向过程编程基础但面向对象编程能力弱的初学者.\n\n## Chapter 0: Preview 面向对象基础\n\n> 附录A 培训实习生——面向对象基础\n>\n> **Tips:** 本部分不设计具体的语法细节, 特性和原理, 仅作示例, 如有需去可移步至专业书籍文献寻求细节, 如[**微软官方**](https://learn.microsoft.com/en-us/dotnet/csharp/)或书籍[**C#图解教程**](https://book.douban.com/subject/34894447/).\n\n- **对象(Object):** 对象是一个自包含的实体, 用一组可识别的特性和行为来标识.\n\n    > **Tips:** 定义比较拗口, 通俗来说, 对象是对事物的抽象, 一切事物都可以称为对象.\n\n- **面向对象编程(Object-Oriented Programming):** 面向对象的编程.\n\n    > **Tips:** 简称OOP, 区别于面向过程编程, 面向过程需要分析得出步骤, 按序实现程序功能. OOP首先对事物抽象为\"对象\", 用对象的属性和行为解决问题.\n\n- **类(Class):** 具有相同属性和功能对象的抽象集合.\n\n``` C#\nclass Cat {\n    public string shout() {\n        return \"mew\";\n    }\n}\n```\n\n- **实例(Instance) & 实例化:** 实例是真实的对象, new得到实例的过程称为实例化.\n\n    > **Tips:** 类就像是工厂的蓝图, 实例就是生产出来的产品, 一个类只有实例化后才可以调用(可能不严谨, 存疑), 和蓝图与产品一样, 一个类可以实例化出多个不同的实例(**学生类**可以实例化为**学生李华**, **学生张三**等).\n\n``` C#\nCat cat = new Cat();\n```\n\n- **修饰符:**\n  - **public:** 修饰的类成员允许被任何类访问\n  - **protected:** 修饰的类成员仅允许该类和其子类访问\n  - **private:** 修饰的类成员仅允许该类访问\n\n    > **Tips:** 程序设计是一门权衡和妥协的艺术, 对OOP为何如此设计的读者可自行查阅OOP发展的历史.\n\n- **属性:** 属性是一个方法或一对方法, 在调用它的代码看来, 它是一个字段, 即属性适合于以字段的方法使用方法调用的场合.\n\n- **字段:** 储存类设计所需的数据, 形式上是与类相关的变量.\n\n``` C#\nclass Example{\n    private int num; //声明一个私有内部字段, 修饰符private\n    public int Num { //Num公有外部属性, 修饰符public\n        get { //外部读取方法\n            return Num;\n        }\n        set { //外部修改方法, 删去此方法时表示Num是只读的.\n            Num = value; // set含有隐式参数, 由关键字value表示, 用于赋值\n        }\n    }\n}\n```\n\n> **Tips:** 属性和字段的描述比较抽象, 推荐直接结合代码理解. 笔者认为是一种语法糖上的tricky, 在其他语言OOP也有相似的写法. 这种写法的好处是隔离内部与外部, 仅允许类提供的公共方法访问类内成员变量.\n\n- **构造方法/构造函数:** 对类进行初始化的方法. 与类同名, 无返回值, 不需要void, 在new中调用.\n\n    > **Tips:** 以上语法细节适用于C#, 非C#可能会有差别, 类中不显示写明构造函数时由编译器默认构造(更多语法细节和原理请移步至讨论C#的相关文献).\n\n``` C#\nclass Cat {\n    private string name;\n    public Cat(string name){ //这是构造函数\n        this.name = name;\n    }\n}\n```\n\n- **重载(overload):** 提供了创建多个同名方法(Function)的功能, 重载方法的参数类型不同. 重载可以在不改变原方法基础上添加新功能.\n\n    > **Tips:** 这里**参数类型的不同**指的是参数个数不同或参数类型的不同(详见代码示例)\n\n``` C#\nclass Example{\n    //不仅构造函数, 普通函数也可以重载\n    public function(){};\n    public function(int arg_1){};\n    public function(float arg_1){};\n    public function(int arg_1, float arg_2){};\n    public function(float arg_1, int arg_2){};//类型顺序不同也会被认为是重载\n}\n```\n\n- **封装:** 每个对象包含该对象操作所需的所有信息, 不必依赖其他对象来完成自己的操作, 该特性称为封装.\n\n    > **Addtional:** 良好的封装可以减少耦合, 类内部实现可以自由修改, 具有清晰的对外接口\n\n- **继承:** 对象的继承代表了一种\"**is-a**\"关系, 若描述为\"B是A\", 则认为B可以继承A. 又可以理解为B是A的一种特殊化, B拥有A的特性之外, 还拥有自己独特的特性. 即继承代表了一种包含关系, A包含B.\n\n    > **Addtional:**\n    > - 继承的双方称为**子类/派生类&父类/基类**.\n    > - 子类继承父类的成员有方法, 域, 属性, 事件, 索引指示器\n    > - 构造方法**无法**继承, 只能调用, 可以使用**base**关键字(C#语法特性)\n\n``` C#\nclass Animal { //父类\n    protected string name = \"\";\n    public Animal() { //构造函数\n        this.name = \"unamed\";\n    }\n    public Animal(string name) {\n        this.name = name;\n    }\n    protected int shoutNum = 3;\n    public int ShoutNum { //属性\n        get {\n            return shoutNum;\n        }\n        set {\n            shoutNum = value;\n        }\n    }\n}\n\nclass Cat : Animal { //继承父类Animal的子类Cat\n    public Cat() : base() {}\n    public Cat(string name) : base(name) {}\n\n    public string Shout() {\n        string result = \"\";\n        for(int i = 0; i < shoutNum; i++){\n            result += \"mew \";\n        }\n        return result;\n    }\n}\n\nclass Dog : Animal { //继承父类Animal的子类Dog\n    public Dog() : base() {}\n    public Dog(string name) : base(name) {}\n\n    public string Shout() {\n        string result = \"\";\n        for(int i = 0; i < shoutNum; i++){\n            result += \"woof \";\n        }\n        return result;\n    }\n}\n```\n\n> **Tips:** 继承的**优点**是使子类公共部分放在了父类, 代码得到了共享, 减少了代码重复, 修改和扩展都变得相对容易. 但**缺点**也是显而易见的, 继承会破坏封装, 父类实现的细节暴露给子类, 父类和子类间是强耦合的.\n\n- **多态:** 多态表示不同的对象可以执行相同的动作, 但通过自己的代码执行.\n\n    > **Additional:**\n    > - 子类以父类身份出现\n    > - 子类工作时以自己的方式实现\n    > - 子类以父类身份出现时, 无法使用子类特有的属性和方法\n    >\n    > **Tips:** 在父类中, 该动作需要声明为虚拟的, 用关键字**virtual**标识.\n\n- **重写/覆写(override):** 子类使用关键字**override**将父类实现替换为自己的实现.\n\n``` C#\nclass Animal{\n    ......\n    public virtual string Shout(){ //声明为虚方法\n        return \"\";\n    }\n}\nclass Cat : Animal{\n    ......\n    public override string Shout(){ //覆写\n        ....... //略, 代码见上文\n    }\n}\nclass Dog : Animal{\n    ......\n    public override string Shout(){ //覆写\n        ....... //略, 代码见上文\n    }\n}\n\n/*-----------------------------------------------------*/\n/*执行环境*/\n\narrayAnimal = new Animal[5];\narrayAnimal[0] = new Cat();\narrayAnimal[1] = new Dog();\nforeach(Animal item in arrayAnimal){\n    MessageBox.Show(item.Shout()); //Cat为\"mew\", Dog为\"woof\".\n}\n\n```\n\n> **Tips1:** C#的多态性分为静态多态性和动态多态性. 静态多态性即为前文提到的overload重载, 在编译时确定; 动态多态性为override覆写, 在运行时确定, 通过抽象类(见下文)和虚方法实现.\n>\n> **Tips2:** 笔者在翻阅相关资料时, 在C++语言中发现了更为复杂的机制, overwrite重写和override覆写存在区别, 详见[**博客园|C++中的Overload、Override和Overwrite**](https://www.cnblogs.com/kuliuheng/p/4107012.html)\n>\n> **Addtional:** 原书对上述实现Animal Shout的代码进行重构, 具体方法为将Shout()声明为父类公共方法(去掉virtual), 声明新的虚方法getSound(), 在Shout()中调用, 在子类中覆写(override), 从而避免了代码重复, 此处笔者不再浪费篇幅详细赘述.\n\n- **抽象类&抽象方法:** C#允许将类和方法用关键字**abstract**声明, 即抽象类, 抽象方法.\n\n    > **Addtional:**\n    > - 抽象类不能被实例化\n    > - 抽象方法必须被子类覆写(override)\n    > - 含有抽象方法的类必须声明为抽象类, 不论是否具有一般方法\n    > - 使用时考虑让抽象类拥有尽可能多的共同代码, 拥有尽可能少的数据\n    >\n    > **Tips:** 抽象类通常代表一种抽象概念, 提供了一个继承的出发点, 当设计一个新的抽象类时, 一定是用来继承的. 因此在继承结构中, 叶节点应当是具体类, 非叶节点应当是抽象类.\n\n- **接口(Interface):** 接口是把隐式公共方法和属性组合起来, 以封装特定功能的一个集合. 类实现了接口就可以支持接口所指定的所有属性和成员. 接口不允许提供任何成员的执行方法(因此接口不能实例化, 没有构造方法, 字段和修饰符, 不能声明静态或虚拟等).\n\n    > **Addtionnal:**\n    > - 实现接口的类必须实现接口中所有方法和属性.\n    > - 一个类可以支持多个接口, 不同类也可以支持相同接口.\n    >\n    > **Tips:** [菜鸟教程|C# Interface](https://www.runoob.com/csharp/csharp-interface.html)将接口表述为:\n    >\n    >接口定义了所有类继承接口时应遵循的语法合同. 接口定义了语法合同\"是什么\"部分, 派生类定义了语法合同\"怎么做\"部分. 接口定义了属性, 方法和事件, 这些都是接口的成员. 接口只包含了成员的声明. 成员的定义是派生类的责任. 接口提供了派生类应遵循的标准结构.\n    >\n    > **书写规范:** 接口的命名需要在前面加一个大写\"I\".\n\n``` C#\n// 笔者在此化简了书目中提供的例子, 能理解即可.\n// 叮当猫继承自上文出现的Cat类, 内部需要实现变东西的接口\n\ninterface IChange {\n    string ChangeThing(string thing);\n}\n\nclass MachineCat : Cat, IChange {\n    public MachineCat() : base(){}\n    public MachineCat() : base(name){}\n\n    public string ChangeThing(string thing){ //实现接口, 不需要使用override修饰\n        return base.Shout() + \"我有万能口袋, 可以变出: \" + thing;\n    }\n}\n```\n\n> **Additional:**\n> 笔者在此补充一点C#的语法特性, 接口也可以继承接口, 假设IB继承IA, 在IB中不需要声明IA中的声明, 但实现IB的类需要实现IA和IB中的所有声明.\n>\n> **Compare: Class v.s. Interface**\n>\n> - **语法上:** 抽象类可以给出一些成员的实现, 接口不能包含成员的实现, 抽象类的抽象成员可被子类部分实现, 但接口的成员需要类全部实现, 一个类只能继承**一个**抽象类, 但可以实现**多个**接口.\n> - **含义上:** 类是对象的抽象, 抽象类是对类的抽象, 接口是对**行为**的抽象.\n> - **使用上:** 如果行为跨越不同类的对象, 可使用接口; 对于一些相似的类对象, 用继承抽象类. 需要注意的是, 实现接口和继承抽象类并不冲突.\n> - **设计角度上:** 抽象类是从子类中发现了公共的东西, 泛化出父类, 然后子类继承父类, 而接口根本不知道子类的存在, 方法如何实现不明确, 预先定义.\n\n- **泛型(Generic):** 泛型是具有占位符(类型参数)的类, 结构, 接口和方法, 这些占位符是类, 结构, 接口和方法所储存域或使用的一个或多个类型的占位符. 泛型集合类可以将类型参数用作它所存储的对象的类型的占位符: 类型参数作为其字段的类型和其方法的参数类型出现.\n\n    > **Additional:** 通常情况下, 都建议使用泛型集合, 因为这样可以获得类型安全的直接优点而不需要从基集合类型派生并实现类型特定成员. 此外, 如果集合元素为值类型, 泛型集合类型的性能通常优于对应的非泛型集合类型, 因为使用泛型时不必对元素进行装箱.\n    >\n    > **Tips:** [菜鸟教程|C# Generic](https://www.runoob.com/csharp/csharp-generic.html)将泛型表述为:\n    >\n    > 泛型(Generic)允许您延迟编写类或方法中的编程元素的数据类型的规范, 直到实际在程序中使用它的时候. 换句话说, 泛型允许您编写一个可以与任何数据类型一起工作的类或方法.\n    >\n    > 泛型的定义较为晦涩, 建议结合代码理解. 笔者在此强烈建议阅读更多的资料来学习泛型.\n\n``` C#\nusing System.Collections.Generic; //增加泛型集合命名空间\n\npublic partial class Forml : Form{\n    IList<Animal> arrayAnimal; // 声明泛型集合变量, 表示只接受Animal类型\n    //List<Animal> arrayAnimal; 两种写法是等价的\n\n    private Event(){\n        arrayAnimal = new List<Animal>();\n\n        arrayAnimal.Add(new Cat());\n        arrayAnimal.Add(new Dog());\n        arrayAnimal.Add(123); // Error! Invalid Type \n    }\n}\n```\n\n- **委托:** 委托是对函数的封装, 可以当作给方法的特征指定一个名称. 委托对象用关键字**delegate**声明.\n\n- **事件:** 事件时委托的一种特殊形式, 当发生有意义的事情时, 事件对象处理通知过程. 事件对象用关键字**event**声明.\n\n> **Additional:** 委托是一种引用方法的类型, 一旦为委托分配了方法, 委托将与该方法具有完全相同的行为. 事件则是在发生其他类或对象关注的事情时, 类或对象可通过事件通知它们.\n\n``` C#\n//情境: 猫Tom叫的时候两只老鼠Jerry和Jack要跑.\n\nclass Cat{\n    private string name;\n    public Cat(string name){\n        this.name = name;\n    }\n\n    public delegate void CatShoutEventHandler(); // 声明委托\n    public event CatShoutEventHandler CatShout; //声明事件\n\n    public void Shout(){\n        Console.WriteLine(\"喵, 我是{0}.\", name);\n        if (CatShout != null){ // 如果声明了事件CatShout\n            CatShout();\n        }\n    }\n}\n\nclass Mouse{\n    private string name;\n    public Mouse(string name){\n        this.name = name;\n    }\n\n    public void Run(){\n        Console.WriteLine(\"老猫来了, {0}快跑\", name);\n    }\n}\n\nstatic void Main(string[] args){\n    Cat cat = new Cat(\"Tom\");\n    Mouse mouse1 = new Mouse(\"Jerry\");\n    Mouse mouse2 = new Mouse(\"Jack\");\n\n    cat.CatShout += new Cat.CatShoutEventHandler(mouse1.Run);\n    cat.CatShout += new Cat.CatShoutEventHandler(mouse2.Run); \n    // \"+=\" 表示 \"add_CatShout\" 的意思; 与之相反 \"-=\" 表示 \"remove_CatShout()\"\n\n    cat.Shout();\n    Console.Read();\n}\n```\n\n运行结果:\n\n``` Shell\n喵, 我是Tom.\n老猫来了, Jerry快跑!\n老猫来了, Jack快跑!\n```\n\n- **EventArgs:** EventArgs是包含事件数据的类的基类.\n\n``` C#\npublic class CatShoutEventArgs : EventArgs{\n    private string name;\n    public string Name{\n        get {return name; }\n        set {name = value; }\n    }\n}\n\nclass Cat{\n    private string name;\n    public Cat(string name){\n        this.name = name;\n    }\n\n    public delegate void CatShoutEventHandler(object sender, CatShoutEventArgs args);\n    public event CatShoutEventHandler CatShout;\n\n    public void Shout(){\n        Console.WriteLine(\"喵, 我是{0}.\", name);\n        if(CatShout != null){\n            CatShoutEventArgs e = new CatShoutEventArgs();\n            e.Name = this.name;\n            CatShout(this, e);\n        }\n    }\n}\n\nclass Mouse{\n    private string name;\n    public Mouse(string name){\n        this.name = name;\n    }\n\n    public void Run(object sender, CatShoutEventArgs args){\n        Console.WriteLine(\"老猫{0}来了, {1}快跑!\", args.Name, name);\n    }\n}\n```\n\nMain执行结果:\n\n``` Shell\n喵, 我是Tom.\n老猫Tom来了, Jerry快跑!\n老猫Tom来了, Jack快跑!\n```\n","slug":"BookNote-DesignPatterns-by-JieCheng-1","published":1,"updated":"2024-09-24T15:06:15.318Z","comments":1,"layout":"post","photos":[],"_id":"cm2t94r300007gwilfygjakjr","content":"<p><strong>精彩的代码是如何想出来的,\r\n要比看到精彩的代码更加令人期待.</strong></p>\r\n<span id=\"more\"></span>\r\n<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#书籍基本信息\">书籍基本信息</a></li>\r\n<li><a href=\"#chapter-0-preview-面向对象基础\">Chapter 0: Preview\r\n面向对象基础</a></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"书籍基本信息\">书籍基本信息</h2>\r\n<p>《大话设计模式》程杰 2007.</p>\r\n<p>本文<strong><em>不提供</em></strong>书籍的电子版文件,\r\n请有需要的读者移步至<strong>Z-library</strong>或其他渠道获得.</p>\r\n<p>本书以情景对话形式, 辅以故事或例子介绍设计模式, 以C#语言书写代码,\r\n适合有面向过程编程基础但面向对象编程能力弱的初学者.</p>\r\n<h2 id=\"chapter-0-preview-面向对象基础\">Chapter 0: Preview\r\n面向对象基础</h2>\r\n<blockquote>\r\n<p>附录A 培训实习生——面向对象基础</p>\r\n<p><strong>Tips:</strong> 本部分不设计具体的语法细节, 特性和原理,\r\n仅作示例, 如有需去可移步至专业书籍文献寻求细节, 如<a\r\nhref=\"https://learn.microsoft.com/en-us/dotnet/csharp/\"><strong>微软官方</strong></a>或书籍<a\r\nhref=\"https://book.douban.com/subject/34894447/\"><strong>C#图解教程</strong></a>.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>对象(Object):</strong> 对象是一个自包含的实体,\r\n用一组可识别的特性和行为来标识.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 定义比较拗口, 通俗来说, 对象是对事物的抽象,\r\n一切事物都可以称为对象.</p>\r\n</blockquote></li>\r\n<li><p><strong>面向对象编程(Object-Oriented Programming):</strong>\r\n面向对象的编程.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 简称OOP, 区别于面向过程编程,\r\n面向过程需要分析得出步骤, 按序实现程序功能. OOP首先对事物抽象为\"对象\",\r\n用对象的属性和行为解决问题.</p>\r\n</blockquote></li>\r\n<li><p><strong>类(Class):</strong>\r\n具有相同属性和功能对象的抽象集合.</p></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">shout</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;mew&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>实例(Instance) &amp; 实例化:</strong> 实例是真实的对象,\r\nnew得到实例的过程称为实例化.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 类就像是工厂的蓝图, 实例就是生产出来的产品,\r\n一个类只有实例化后才可以调用(可能不严谨, 存疑), 和蓝图与产品一样,\r\n一个类可以实例化出多个不同的实例(<strong>学生类</strong>可以实例化为<strong>学生李华</strong>,\r\n<strong>学生张三</strong>等).</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat cat = <span class=\"keyword\">new</span> Cat();</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>修饰符:</strong></p>\r\n<ul>\r\n<li><p><strong>public:</strong> 修饰的类成员允许被任何类访问</p></li>\r\n<li><p><strong>protected:</strong>\r\n修饰的类成员仅允许该类和其子类访问</p></li>\r\n<li><p><strong>private:</strong> 修饰的类成员仅允许该类访问</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 程序设计是一门权衡和妥协的艺术,\r\n对OOP为何如此设计的读者可自行查阅OOP发展的历史.</p>\r\n</blockquote></li>\r\n</ul></li>\r\n<li><p><strong>属性:</strong> 属性是一个方法或一对方法,\r\n在调用它的代码看来, 它是一个字段,\r\n即属性适合于以字段的方法使用方法调用的场合.</p></li>\r\n<li><p><strong>字段:</strong> 储存类设计所需的数据,\r\n形式上是与类相关的变量.</p></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> num; <span class=\"comment\">//声明一个私有内部字段, 修饰符private</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Num &#123; <span class=\"comment\">//Num公有外部属性, 修饰符public</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"comment\">//外部读取方法</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123; <span class=\"comment\">//外部修改方法, 删去此方法时表示Num是只读的.</span></span><br><span class=\"line\">            Num = <span class=\"keyword\">value</span>; <span class=\"comment\">// set含有隐式参数, 由关键字value表示, 用于赋值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 属性和字段的描述比较抽象,\r\n推荐直接结合代码理解. 笔者认为是一种语法糖上的tricky,\r\n在其他语言OOP也有相似的写法. 这种写法的好处是隔离内部与外部,\r\n仅允许类提供的公共方法访问类内成员变量.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>构造方法/构造函数:</strong> 对类进行初始化的方法.\r\n与类同名, 无返回值, 不需要void, 在new中调用.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 以上语法细节适用于C#, 非C#可能会有差别,\r\n类中不显示写明构造函数时由编译器默认构造(更多语法细节和原理请移步至讨论C#的相关文献).</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123; <span class=\"comment\">//这是构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>重载(overload):</strong>\r\n提供了创建多个同名方法(Function)的功能, 重载方法的参数类型不同.\r\n重载可以在不改变原方法基础上添加新功能.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n这里<strong>参数类型的不同</strong>指的是参数个数不同或参数类型的不同(详见代码示例)</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不仅构造函数, 普通函数也可以重载</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>()</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">int</span> arg_1</span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">float</span> arg_1</span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">int</span> arg_1, <span class=\"built_in\">float</span> arg_2</span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">float</span> arg_1, <span class=\"built_in\">int</span> arg_2</span>)</span>&#123;&#125;;<span class=\"comment\">//类型顺序不同也会被认为是重载</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>封装:</strong> 每个对象包含该对象操作所需的所有信息,\r\n不必依赖其他对象来完成自己的操作, 该特性称为封装.</p>\r\n<blockquote>\r\n<p><strong>Addtional:</strong> 良好的封装可以减少耦合,\r\n类内部实现可以自由修改, 具有清晰的对外接口</p>\r\n</blockquote></li>\r\n<li><p><strong>继承:</strong>\r\n对象的继承代表了一种\"<strong>is-a</strong>\"关系, 若描述为\"B是A\",\r\n则认为B可以继承A. 又可以理解为B是A的一种特殊化, B拥有A的特性之外,\r\n还拥有自己独特的特性. 即继承代表了一种包含关系, A包含B.</p>\r\n<blockquote>\r\n<strong>Addtional:</strong>\r\n<ul>\r\n<li>继承的双方称为<strong>子类/派生类&amp;父类/基类</strong>.</li>\r\n<li>子类继承父类的成员有方法, 域, 属性, 事件, 索引指示器</li>\r\n<li>构造方法<strong>无法</strong>继承, 只能调用,\r\n可以使用<strong>base</strong>关键字(C#语法特性)</li>\r\n</ul>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> &#123; <span class=\"comment\">//父类</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"built_in\">string</span> name = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span>()</span> &#123; <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">&quot;unamed&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"built_in\">int</span> shoutNum = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ShoutNum &#123; <span class=\"comment\">//属性</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> shoutNum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">            shoutNum = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> : <span class=\"title\">Animal</span> &#123; <span class=\"comment\">//继承父类Animal的子类Cat</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>() : <span class=\"title\">base</span>()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>) : <span class=\"title\">base</span>(<span class=\"params\">name</span>)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; shoutNum; i++)&#123;</span><br><span class=\"line\">            result += <span class=\"string\">&quot;mew &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"title\">Animal</span> &#123; <span class=\"comment\">//继承父类Animal的子类Dog</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span>() : <span class=\"title\">base</span>()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>) : <span class=\"title\">base</span>(<span class=\"params\">name</span>)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; shoutNum; i++)&#123;</span><br><span class=\"line\">            result += <span class=\"string\">&quot;woof &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n继承的<strong>优点</strong>是使子类公共部分放在了父类, 代码得到了共享,\r\n减少了代码重复, 修改和扩展都变得相对容易.\r\n但<strong>缺点</strong>也是显而易见的, 继承会破坏封装,\r\n父类实现的细节暴露给子类, 父类和子类间是强耦合的.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>多态:</strong> 多态表示不同的对象可以执行相同的动作,\r\n但通过自己的代码执行.</p>\r\n<blockquote>\r\n<strong>Additional:</strong>\r\n<ul>\r\n<li>子类以父类身份出现</li>\r\n<li>子类工作时以自己的方式实现</li>\r\n<li>子类以父类身份出现时, 无法使用子类特有的属性和方法</li>\r\n</ul>\r\n<p><strong>Tips:</strong> 在父类中, 该动作需要声明为虚拟的,\r\n用关键字<strong>virtual</strong>标识.</p>\r\n</blockquote></li>\r\n<li><p><strong>重写/覆写(override):</strong>\r\n子类使用关键字<strong>override</strong>将父类实现替换为自己的实现.</p></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span>&#123; <span class=\"comment\">//声明为虚方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> : <span class=\"title\">Animal</span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span>&#123; <span class=\"comment\">//覆写</span></span><br><span class=\"line\">        ....... <span class=\"comment\">//略, 代码见上文</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"title\">Animal</span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span>&#123; <span class=\"comment\">//覆写</span></span><br><span class=\"line\">        ....... <span class=\"comment\">//略, 代码见上文</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*-----------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/*执行环境*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">arrayAnimal = <span class=\"keyword\">new</span> Animal[<span class=\"number\">5</span>];</span><br><span class=\"line\">arrayAnimal[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">arrayAnimal[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(Animal item <span class=\"keyword\">in</span> arrayAnimal)&#123;</span><br><span class=\"line\">    MessageBox.Show(item.Shout()); <span class=\"comment\">//Cat为&quot;mew&quot;, Dog为&quot;woof&quot;.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips1:</strong> C#的多态性分为静态多态性和动态多态性.\r\n静态多态性即为前文提到的overload重载, 在编译时确定;\r\n动态多态性为override覆写, 在运行时确定,\r\n通过抽象类(见下文)和虚方法实现.</p>\r\n<p><strong>Tips2:</strong> 笔者在翻阅相关资料时,\r\n在C++语言中发现了更为复杂的机制, overwrite重写和override覆写存在区别,\r\n详见<a\r\nhref=\"https://www.cnblogs.com/kuliuheng/p/4107012.html\"><strong>博客园|C++中的Overload、Override和Overwrite</strong></a></p>\r\n<p><strong>Addtional:</strong> 原书对上述实现Animal Shout的代码进行重构,\r\n具体方法为将Shout()声明为父类公共方法(去掉virtual),\r\n声明新的虚方法getSound(), 在Shout()中调用, 在子类中覆写(override),\r\n从而避免了代码重复, 此处笔者不再浪费篇幅详细赘述.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>抽象类&amp;抽象方法:</strong>\r\nC#允许将类和方法用关键字<strong>abstract</strong>声明, 即抽象类,\r\n抽象方法.</p>\r\n<blockquote>\r\n<strong>Addtional:</strong>\r\n<ul>\r\n<li>抽象类不能被实例化</li>\r\n<li>抽象方法必须被子类覆写(override)</li>\r\n<li>含有抽象方法的类必须声明为抽象类, 不论是否具有一般方法</li>\r\n<li>使用时考虑让抽象类拥有尽可能多的共同代码, 拥有尽可能少的数据</li>\r\n</ul>\r\n<p><strong>Tips:</strong> 抽象类通常代表一种抽象概念,\r\n提供了一个继承的出发点, 当设计一个新的抽象类时, 一定是用来继承的.\r\n因此在继承结构中, 叶节点应当是具体类, 非叶节点应当是抽象类.</p>\r\n</blockquote></li>\r\n<li><p><strong>接口(Interface):</strong>\r\n接口是把隐式公共方法和属性组合起来, 以封装特定功能的一个集合.\r\n类实现了接口就可以支持接口所指定的所有属性和成员.\r\n接口不允许提供任何成员的执行方法(因此接口不能实例化, 没有构造方法,\r\n字段和修饰符, 不能声明静态或虚拟等).</p>\r\n<blockquote>\r\n<strong>Addtionnal:</strong>\r\n<ul>\r\n<li>实现接口的类必须实现接口中所有方法和属性.</li>\r\n<li>一个类可以支持多个接口, 不同类也可以支持相同接口.</li>\r\n</ul>\r\n<p><strong>Tips:</strong> <a\r\nhref=\"https://www.runoob.com/csharp/csharp-interface.html\">菜鸟教程|C#\r\nInterface</a>将接口表述为:</p>\r\n<p>接口定义了所有类继承接口时应遵循的语法合同.\r\n接口定义了语法合同\"是什么\"部分, 派生类定义了语法合同\"怎么做\"部分.\r\n接口定义了属性, 方法和事件, 这些都是接口的成员. 接口只包含了成员的声明.\r\n成员的定义是派生类的责任. 接口提供了派生类应遵循的标准结构.</p>\r\n<p><strong>书写规范:</strong> 接口的命名需要在前面加一个大写\"I\".</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 笔者在此化简了书目中提供的例子, 能理解即可.</span></span><br><span class=\"line\"><span class=\"comment\">// 叮当猫继承自上文出现的Cat类, 内部需要实现变东西的接口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">IChange</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">ChangeThing</span>(<span class=\"params\"><span class=\"built_in\">string</span> thing</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MachineCat</span> : <span class=\"title\">Cat</span>, <span class=\"title\">IChange</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MachineCat</span>() : <span class=\"title\">base</span>()</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MachineCat</span>() : <span class=\"title\">base</span>(<span class=\"params\">name</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">ChangeThing</span>(<span class=\"params\"><span class=\"built_in\">string</span> thing</span>)</span>&#123; <span class=\"comment\">//实现接口, 不需要使用override修饰</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.Shout() + <span class=\"string\">&quot;我有万能口袋, 可以变出: &quot;</span> + thing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 笔者在此补充一点C#的语法特性,\r\n接口也可以继承接口, 假设IB继承IA, 在IB中不需要声明IA中的声明,\r\n但实现IB的类需要实现IA和IB中的所有声明.</p>\r\n<p><strong>Compare: Class v.s. Interface</strong></p>\r\n<ul>\r\n<li><strong>语法上:</strong> 抽象类可以给出一些成员的实现,\r\n接口不能包含成员的实现, 抽象类的抽象成员可被子类部分实现,\r\n但接口的成员需要类全部实现, 一个类只能继承<strong>一个</strong>抽象类,\r\n但可以实现<strong>多个</strong>接口.</li>\r\n<li><strong>含义上:</strong> 类是对象的抽象, 抽象类是对类的抽象,\r\n接口是对<strong>行为</strong>的抽象.</li>\r\n<li><strong>使用上:</strong> 如果行为跨越不同类的对象, 可使用接口;\r\n对于一些相似的类对象, 用继承抽象类. 需要注意的是,\r\n实现接口和继承抽象类并不冲突.</li>\r\n<li><strong>设计角度上:</strong> 抽象类是从子类中发现了公共的东西,\r\n泛化出父类, 然后子类继承父类, 而接口根本不知道子类的存在,\r\n方法如何实现不明确, 预先定义.</li>\r\n</ul>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>泛型(Generic):</strong> 泛型是具有占位符(类型参数)的类,\r\n结构, 接口和方法, 这些占位符是类, 结构,\r\n接口和方法所储存域或使用的一个或多个类型的占位符.\r\n泛型集合类可以将类型参数用作它所存储的对象的类型的占位符:\r\n类型参数作为其字段的类型和其方法的参数类型出现.</p>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 通常情况下, 都建议使用泛型集合,\r\n因为这样可以获得类型安全的直接优点而不需要从基集合类型派生并实现类型特定成员.\r\n此外, 如果集合元素为值类型,\r\n泛型集合类型的性能通常优于对应的非泛型集合类型,\r\n因为使用泛型时不必对元素进行装箱.</p>\r\n<p><strong>Tips:</strong> <a\r\nhref=\"https://www.runoob.com/csharp/csharp-generic.html\">菜鸟教程|C#\r\nGeneric</a>将泛型表述为:</p>\r\n<p>泛型(Generic)允许您延迟编写类或方法中的编程元素的数据类型的规范,\r\n直到实际在程序中使用它的时候. 换句话说,\r\n泛型允许您编写一个可以与任何数据类型一起工作的类或方法.</p>\r\n<p>泛型的定义较为晦涩, 建议结合代码理解.\r\n笔者在此强烈建议阅读更多的资料来学习泛型.</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic; <span class=\"comment\">//增加泛型集合命名空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">Forml</span> : <span class=\"title\">Form</span>&#123;</span><br><span class=\"line\">    IList&lt;Animal&gt; arrayAnimal; <span class=\"comment\">// 声明泛型集合变量, 表示只接受Animal类型</span></span><br><span class=\"line\">    <span class=\"comment\">//List&lt;Animal&gt; arrayAnimal; 两种写法是等价的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Event</span>()</span>&#123;</span><br><span class=\"line\">        arrayAnimal = <span class=\"keyword\">new</span> List&lt;Animal&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        arrayAnimal.Add(<span class=\"keyword\">new</span> Cat());</span><br><span class=\"line\">        arrayAnimal.Add(<span class=\"keyword\">new</span> Dog());</span><br><span class=\"line\">        arrayAnimal.Add(<span class=\"number\">123</span>); <span class=\"comment\">// Error! Invalid Type </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>委托:</strong> 委托是对函数的封装,\r\n可以当作给方法的特征指定一个名称.\r\n委托对象用关键字<strong>delegate</strong>声明.</p></li>\r\n<li><p><strong>事件:</strong> 事件时委托的一种特殊形式,\r\n当发生有意义的事情时, 事件对象处理通知过程.\r\n事件对象用关键字<strong>event</strong>声明.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 委托是一种引用方法的类型,\r\n一旦为委托分配了方法, 委托将与该方法具有完全相同的行为.\r\n事件则是在发生其他类或对象关注的事情时, 类或对象可通过事件通知它们.</p>\r\n</blockquote>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//情境: 猫Tom叫的时候两只老鼠Jerry和Jack要跑.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">CatShoutEventHandler</span>()</span>; <span class=\"comment\">// 声明委托</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> CatShoutEventHandler CatShout; <span class=\"comment\">//声明事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Shout</span>()</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;喵, 我是&#123;0&#125;.&quot;</span>, name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CatShout != <span class=\"literal\">null</span>)&#123; <span class=\"comment\">// 如果声明了事件CatShout</span></span><br><span class=\"line\">            CatShout();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Mouse</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mouse</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;老猫来了, &#123;0&#125;快跑&quot;</span>, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span>&#123;</span><br><span class=\"line\">    Cat cat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">    Mouse mouse1 = <span class=\"keyword\">new</span> Mouse(<span class=\"string\">&quot;Jerry&quot;</span>);</span><br><span class=\"line\">    Mouse mouse2 = <span class=\"keyword\">new</span> Mouse(<span class=\"string\">&quot;Jack&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    cat.CatShout += <span class=\"keyword\">new</span> Cat.CatShoutEventHandler(mouse1.Run);</span><br><span class=\"line\">    cat.CatShout += <span class=\"keyword\">new</span> Cat.CatShoutEventHandler(mouse2.Run); </span><br><span class=\"line\">    <span class=\"comment\">// &quot;+=&quot; 表示 &quot;add_CatShout&quot; 的意思; 与之相反 &quot;-=&quot; 表示 &quot;remove_CatShout()&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cat.Shout();</span><br><span class=\"line\">    Console.Read();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>运行结果:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">喵, 我是Tom.</span><br><span class=\"line\">老猫来了, Jerry快跑!</span><br><span class=\"line\">老猫来了, Jack快跑!</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><strong>EventArgs:</strong> EventArgs是包含事件数据的类的基类.</li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CatShoutEventArgs</span> : <span class=\"title\">EventArgs</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name&#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;<span class=\"keyword\">return</span> name; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;name = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">CatShoutEventHandler</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, CatShoutEventArgs args</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> CatShoutEventHandler CatShout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Shout</span>()</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;喵, 我是&#123;0&#125;.&quot;</span>, name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(CatShout != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            CatShoutEventArgs e = <span class=\"keyword\">new</span> CatShoutEventArgs();</span><br><span class=\"line\">            e.Name = <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">            CatShout(<span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Mouse</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mouse</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, CatShoutEventArgs args</span>)</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;老猫&#123;0&#125;来了, &#123;1&#125;快跑!&quot;</span>, args.Name, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>Main执行结果:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">喵, 我是Tom.</span><br><span class=\"line\">老猫Tom来了, Jerry快跑!</span><br><span class=\"line\">老猫Tom来了, Jack快跑!</span><br></pre></td></tr></table></figure>\r\n","length":3585,"excerpt":"<p><strong>精彩的代码是如何想出来的,\r\n要比看到精彩的代码更加令人期待.</strong></p>","more":"<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#书籍基本信息\">书籍基本信息</a></li>\r\n<li><a href=\"#chapter-0-preview-面向对象基础\">Chapter 0: Preview\r\n面向对象基础</a></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"书籍基本信息\">书籍基本信息</h2>\r\n<p>《大话设计模式》程杰 2007.</p>\r\n<p>本文<strong><em>不提供</em></strong>书籍的电子版文件,\r\n请有需要的读者移步至<strong>Z-library</strong>或其他渠道获得.</p>\r\n<p>本书以情景对话形式, 辅以故事或例子介绍设计模式, 以C#语言书写代码,\r\n适合有面向过程编程基础但面向对象编程能力弱的初学者.</p>\r\n<h2 id=\"chapter-0-preview-面向对象基础\">Chapter 0: Preview\r\n面向对象基础</h2>\r\n<blockquote>\r\n<p>附录A 培训实习生——面向对象基础</p>\r\n<p><strong>Tips:</strong> 本部分不设计具体的语法细节, 特性和原理,\r\n仅作示例, 如有需去可移步至专业书籍文献寻求细节, 如<a\r\nhref=\"https://learn.microsoft.com/en-us/dotnet/csharp/\"><strong>微软官方</strong></a>或书籍<a\r\nhref=\"https://book.douban.com/subject/34894447/\"><strong>C#图解教程</strong></a>.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>对象(Object):</strong> 对象是一个自包含的实体,\r\n用一组可识别的特性和行为来标识.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 定义比较拗口, 通俗来说, 对象是对事物的抽象,\r\n一切事物都可以称为对象.</p>\r\n</blockquote></li>\r\n<li><p><strong>面向对象编程(Object-Oriented Programming):</strong>\r\n面向对象的编程.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 简称OOP, 区别于面向过程编程,\r\n面向过程需要分析得出步骤, 按序实现程序功能. OOP首先对事物抽象为\"对象\",\r\n用对象的属性和行为解决问题.</p>\r\n</blockquote></li>\r\n<li><p><strong>类(Class):</strong>\r\n具有相同属性和功能对象的抽象集合.</p></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">shout</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;mew&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>实例(Instance) &amp; 实例化:</strong> 实例是真实的对象,\r\nnew得到实例的过程称为实例化.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 类就像是工厂的蓝图, 实例就是生产出来的产品,\r\n一个类只有实例化后才可以调用(可能不严谨, 存疑), 和蓝图与产品一样,\r\n一个类可以实例化出多个不同的实例(<strong>学生类</strong>可以实例化为<strong>学生李华</strong>,\r\n<strong>学生张三</strong>等).</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat cat = <span class=\"keyword\">new</span> Cat();</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>修饰符:</strong></p>\r\n<ul>\r\n<li><p><strong>public:</strong> 修饰的类成员允许被任何类访问</p></li>\r\n<li><p><strong>protected:</strong>\r\n修饰的类成员仅允许该类和其子类访问</p></li>\r\n<li><p><strong>private:</strong> 修饰的类成员仅允许该类访问</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 程序设计是一门权衡和妥协的艺术,\r\n对OOP为何如此设计的读者可自行查阅OOP发展的历史.</p>\r\n</blockquote></li>\r\n</ul></li>\r\n<li><p><strong>属性:</strong> 属性是一个方法或一对方法,\r\n在调用它的代码看来, 它是一个字段,\r\n即属性适合于以字段的方法使用方法调用的场合.</p></li>\r\n<li><p><strong>字段:</strong> 储存类设计所需的数据,\r\n形式上是与类相关的变量.</p></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> num; <span class=\"comment\">//声明一个私有内部字段, 修饰符private</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Num &#123; <span class=\"comment\">//Num公有外部属性, 修饰符public</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"comment\">//外部读取方法</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123; <span class=\"comment\">//外部修改方法, 删去此方法时表示Num是只读的.</span></span><br><span class=\"line\">            Num = <span class=\"keyword\">value</span>; <span class=\"comment\">// set含有隐式参数, 由关键字value表示, 用于赋值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 属性和字段的描述比较抽象,\r\n推荐直接结合代码理解. 笔者认为是一种语法糖上的tricky,\r\n在其他语言OOP也有相似的写法. 这种写法的好处是隔离内部与外部,\r\n仅允许类提供的公共方法访问类内成员变量.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>构造方法/构造函数:</strong> 对类进行初始化的方法.\r\n与类同名, 无返回值, 不需要void, 在new中调用.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 以上语法细节适用于C#, 非C#可能会有差别,\r\n类中不显示写明构造函数时由编译器默认构造(更多语法细节和原理请移步至讨论C#的相关文献).</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123; <span class=\"comment\">//这是构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>重载(overload):</strong>\r\n提供了创建多个同名方法(Function)的功能, 重载方法的参数类型不同.\r\n重载可以在不改变原方法基础上添加新功能.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n这里<strong>参数类型的不同</strong>指的是参数个数不同或参数类型的不同(详见代码示例)</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不仅构造函数, 普通函数也可以重载</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>()</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">int</span> arg_1</span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">float</span> arg_1</span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">int</span> arg_1, <span class=\"built_in\">float</span> arg_2</span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">float</span> arg_1, <span class=\"built_in\">int</span> arg_2</span>)</span>&#123;&#125;;<span class=\"comment\">//类型顺序不同也会被认为是重载</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>封装:</strong> 每个对象包含该对象操作所需的所有信息,\r\n不必依赖其他对象来完成自己的操作, 该特性称为封装.</p>\r\n<blockquote>\r\n<p><strong>Addtional:</strong> 良好的封装可以减少耦合,\r\n类内部实现可以自由修改, 具有清晰的对外接口</p>\r\n</blockquote></li>\r\n<li><p><strong>继承:</strong>\r\n对象的继承代表了一种\"<strong>is-a</strong>\"关系, 若描述为\"B是A\",\r\n则认为B可以继承A. 又可以理解为B是A的一种特殊化, B拥有A的特性之外,\r\n还拥有自己独特的特性. 即继承代表了一种包含关系, A包含B.</p>\r\n<blockquote>\r\n<strong>Addtional:</strong>\r\n<ul>\r\n<li>继承的双方称为<strong>子类/派生类&amp;父类/基类</strong>.</li>\r\n<li>子类继承父类的成员有方法, 域, 属性, 事件, 索引指示器</li>\r\n<li>构造方法<strong>无法</strong>继承, 只能调用,\r\n可以使用<strong>base</strong>关键字(C#语法特性)</li>\r\n</ul>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> &#123; <span class=\"comment\">//父类</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"built_in\">string</span> name = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span>()</span> &#123; <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">&quot;unamed&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"built_in\">int</span> shoutNum = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ShoutNum &#123; <span class=\"comment\">//属性</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> shoutNum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">            shoutNum = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> : <span class=\"title\">Animal</span> &#123; <span class=\"comment\">//继承父类Animal的子类Cat</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>() : <span class=\"title\">base</span>()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>) : <span class=\"title\">base</span>(<span class=\"params\">name</span>)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; shoutNum; i++)&#123;</span><br><span class=\"line\">            result += <span class=\"string\">&quot;mew &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"title\">Animal</span> &#123; <span class=\"comment\">//继承父类Animal的子类Dog</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span>() : <span class=\"title\">base</span>()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>) : <span class=\"title\">base</span>(<span class=\"params\">name</span>)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; shoutNum; i++)&#123;</span><br><span class=\"line\">            result += <span class=\"string\">&quot;woof &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n继承的<strong>优点</strong>是使子类公共部分放在了父类, 代码得到了共享,\r\n减少了代码重复, 修改和扩展都变得相对容易.\r\n但<strong>缺点</strong>也是显而易见的, 继承会破坏封装,\r\n父类实现的细节暴露给子类, 父类和子类间是强耦合的.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>多态:</strong> 多态表示不同的对象可以执行相同的动作,\r\n但通过自己的代码执行.</p>\r\n<blockquote>\r\n<strong>Additional:</strong>\r\n<ul>\r\n<li>子类以父类身份出现</li>\r\n<li>子类工作时以自己的方式实现</li>\r\n<li>子类以父类身份出现时, 无法使用子类特有的属性和方法</li>\r\n</ul>\r\n<p><strong>Tips:</strong> 在父类中, 该动作需要声明为虚拟的,\r\n用关键字<strong>virtual</strong>标识.</p>\r\n</blockquote></li>\r\n<li><p><strong>重写/覆写(override):</strong>\r\n子类使用关键字<strong>override</strong>将父类实现替换为自己的实现.</p></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span>&#123; <span class=\"comment\">//声明为虚方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> : <span class=\"title\">Animal</span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span>&#123; <span class=\"comment\">//覆写</span></span><br><span class=\"line\">        ....... <span class=\"comment\">//略, 代码见上文</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"title\">Animal</span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span>&#123; <span class=\"comment\">//覆写</span></span><br><span class=\"line\">        ....... <span class=\"comment\">//略, 代码见上文</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*-----------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/*执行环境*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">arrayAnimal = <span class=\"keyword\">new</span> Animal[<span class=\"number\">5</span>];</span><br><span class=\"line\">arrayAnimal[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">arrayAnimal[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(Animal item <span class=\"keyword\">in</span> arrayAnimal)&#123;</span><br><span class=\"line\">    MessageBox.Show(item.Shout()); <span class=\"comment\">//Cat为&quot;mew&quot;, Dog为&quot;woof&quot;.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips1:</strong> C#的多态性分为静态多态性和动态多态性.\r\n静态多态性即为前文提到的overload重载, 在编译时确定;\r\n动态多态性为override覆写, 在运行时确定,\r\n通过抽象类(见下文)和虚方法实现.</p>\r\n<p><strong>Tips2:</strong> 笔者在翻阅相关资料时,\r\n在C++语言中发现了更为复杂的机制, overwrite重写和override覆写存在区别,\r\n详见<a\r\nhref=\"https://www.cnblogs.com/kuliuheng/p/4107012.html\"><strong>博客园|C++中的Overload、Override和Overwrite</strong></a></p>\r\n<p><strong>Addtional:</strong> 原书对上述实现Animal Shout的代码进行重构,\r\n具体方法为将Shout()声明为父类公共方法(去掉virtual),\r\n声明新的虚方法getSound(), 在Shout()中调用, 在子类中覆写(override),\r\n从而避免了代码重复, 此处笔者不再浪费篇幅详细赘述.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>抽象类&amp;抽象方法:</strong>\r\nC#允许将类和方法用关键字<strong>abstract</strong>声明, 即抽象类,\r\n抽象方法.</p>\r\n<blockquote>\r\n<strong>Addtional:</strong>\r\n<ul>\r\n<li>抽象类不能被实例化</li>\r\n<li>抽象方法必须被子类覆写(override)</li>\r\n<li>含有抽象方法的类必须声明为抽象类, 不论是否具有一般方法</li>\r\n<li>使用时考虑让抽象类拥有尽可能多的共同代码, 拥有尽可能少的数据</li>\r\n</ul>\r\n<p><strong>Tips:</strong> 抽象类通常代表一种抽象概念,\r\n提供了一个继承的出发点, 当设计一个新的抽象类时, 一定是用来继承的.\r\n因此在继承结构中, 叶节点应当是具体类, 非叶节点应当是抽象类.</p>\r\n</blockquote></li>\r\n<li><p><strong>接口(Interface):</strong>\r\n接口是把隐式公共方法和属性组合起来, 以封装特定功能的一个集合.\r\n类实现了接口就可以支持接口所指定的所有属性和成员.\r\n接口不允许提供任何成员的执行方法(因此接口不能实例化, 没有构造方法,\r\n字段和修饰符, 不能声明静态或虚拟等).</p>\r\n<blockquote>\r\n<strong>Addtionnal:</strong>\r\n<ul>\r\n<li>实现接口的类必须实现接口中所有方法和属性.</li>\r\n<li>一个类可以支持多个接口, 不同类也可以支持相同接口.</li>\r\n</ul>\r\n<p><strong>Tips:</strong> <a\r\nhref=\"https://www.runoob.com/csharp/csharp-interface.html\">菜鸟教程|C#\r\nInterface</a>将接口表述为:</p>\r\n<p>接口定义了所有类继承接口时应遵循的语法合同.\r\n接口定义了语法合同\"是什么\"部分, 派生类定义了语法合同\"怎么做\"部分.\r\n接口定义了属性, 方法和事件, 这些都是接口的成员. 接口只包含了成员的声明.\r\n成员的定义是派生类的责任. 接口提供了派生类应遵循的标准结构.</p>\r\n<p><strong>书写规范:</strong> 接口的命名需要在前面加一个大写\"I\".</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 笔者在此化简了书目中提供的例子, 能理解即可.</span></span><br><span class=\"line\"><span class=\"comment\">// 叮当猫继承自上文出现的Cat类, 内部需要实现变东西的接口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">IChange</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">ChangeThing</span>(<span class=\"params\"><span class=\"built_in\">string</span> thing</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MachineCat</span> : <span class=\"title\">Cat</span>, <span class=\"title\">IChange</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MachineCat</span>() : <span class=\"title\">base</span>()</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MachineCat</span>() : <span class=\"title\">base</span>(<span class=\"params\">name</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">ChangeThing</span>(<span class=\"params\"><span class=\"built_in\">string</span> thing</span>)</span>&#123; <span class=\"comment\">//实现接口, 不需要使用override修饰</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.Shout() + <span class=\"string\">&quot;我有万能口袋, 可以变出: &quot;</span> + thing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 笔者在此补充一点C#的语法特性,\r\n接口也可以继承接口, 假设IB继承IA, 在IB中不需要声明IA中的声明,\r\n但实现IB的类需要实现IA和IB中的所有声明.</p>\r\n<p><strong>Compare: Class v.s. Interface</strong></p>\r\n<ul>\r\n<li><strong>语法上:</strong> 抽象类可以给出一些成员的实现,\r\n接口不能包含成员的实现, 抽象类的抽象成员可被子类部分实现,\r\n但接口的成员需要类全部实现, 一个类只能继承<strong>一个</strong>抽象类,\r\n但可以实现<strong>多个</strong>接口.</li>\r\n<li><strong>含义上:</strong> 类是对象的抽象, 抽象类是对类的抽象,\r\n接口是对<strong>行为</strong>的抽象.</li>\r\n<li><strong>使用上:</strong> 如果行为跨越不同类的对象, 可使用接口;\r\n对于一些相似的类对象, 用继承抽象类. 需要注意的是,\r\n实现接口和继承抽象类并不冲突.</li>\r\n<li><strong>设计角度上:</strong> 抽象类是从子类中发现了公共的东西,\r\n泛化出父类, 然后子类继承父类, 而接口根本不知道子类的存在,\r\n方法如何实现不明确, 预先定义.</li>\r\n</ul>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>泛型(Generic):</strong> 泛型是具有占位符(类型参数)的类,\r\n结构, 接口和方法, 这些占位符是类, 结构,\r\n接口和方法所储存域或使用的一个或多个类型的占位符.\r\n泛型集合类可以将类型参数用作它所存储的对象的类型的占位符:\r\n类型参数作为其字段的类型和其方法的参数类型出现.</p>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 通常情况下, 都建议使用泛型集合,\r\n因为这样可以获得类型安全的直接优点而不需要从基集合类型派生并实现类型特定成员.\r\n此外, 如果集合元素为值类型,\r\n泛型集合类型的性能通常优于对应的非泛型集合类型,\r\n因为使用泛型时不必对元素进行装箱.</p>\r\n<p><strong>Tips:</strong> <a\r\nhref=\"https://www.runoob.com/csharp/csharp-generic.html\">菜鸟教程|C#\r\nGeneric</a>将泛型表述为:</p>\r\n<p>泛型(Generic)允许您延迟编写类或方法中的编程元素的数据类型的规范,\r\n直到实际在程序中使用它的时候. 换句话说,\r\n泛型允许您编写一个可以与任何数据类型一起工作的类或方法.</p>\r\n<p>泛型的定义较为晦涩, 建议结合代码理解.\r\n笔者在此强烈建议阅读更多的资料来学习泛型.</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic; <span class=\"comment\">//增加泛型集合命名空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">Forml</span> : <span class=\"title\">Form</span>&#123;</span><br><span class=\"line\">    IList&lt;Animal&gt; arrayAnimal; <span class=\"comment\">// 声明泛型集合变量, 表示只接受Animal类型</span></span><br><span class=\"line\">    <span class=\"comment\">//List&lt;Animal&gt; arrayAnimal; 两种写法是等价的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Event</span>()</span>&#123;</span><br><span class=\"line\">        arrayAnimal = <span class=\"keyword\">new</span> List&lt;Animal&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        arrayAnimal.Add(<span class=\"keyword\">new</span> Cat());</span><br><span class=\"line\">        arrayAnimal.Add(<span class=\"keyword\">new</span> Dog());</span><br><span class=\"line\">        arrayAnimal.Add(<span class=\"number\">123</span>); <span class=\"comment\">// Error! Invalid Type </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>委托:</strong> 委托是对函数的封装,\r\n可以当作给方法的特征指定一个名称.\r\n委托对象用关键字<strong>delegate</strong>声明.</p></li>\r\n<li><p><strong>事件:</strong> 事件时委托的一种特殊形式,\r\n当发生有意义的事情时, 事件对象处理通知过程.\r\n事件对象用关键字<strong>event</strong>声明.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 委托是一种引用方法的类型,\r\n一旦为委托分配了方法, 委托将与该方法具有完全相同的行为.\r\n事件则是在发生其他类或对象关注的事情时, 类或对象可通过事件通知它们.</p>\r\n</blockquote>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//情境: 猫Tom叫的时候两只老鼠Jerry和Jack要跑.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">CatShoutEventHandler</span>()</span>; <span class=\"comment\">// 声明委托</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> CatShoutEventHandler CatShout; <span class=\"comment\">//声明事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Shout</span>()</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;喵, 我是&#123;0&#125;.&quot;</span>, name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CatShout != <span class=\"literal\">null</span>)&#123; <span class=\"comment\">// 如果声明了事件CatShout</span></span><br><span class=\"line\">            CatShout();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Mouse</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mouse</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;老猫来了, &#123;0&#125;快跑&quot;</span>, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span>&#123;</span><br><span class=\"line\">    Cat cat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">    Mouse mouse1 = <span class=\"keyword\">new</span> Mouse(<span class=\"string\">&quot;Jerry&quot;</span>);</span><br><span class=\"line\">    Mouse mouse2 = <span class=\"keyword\">new</span> Mouse(<span class=\"string\">&quot;Jack&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    cat.CatShout += <span class=\"keyword\">new</span> Cat.CatShoutEventHandler(mouse1.Run);</span><br><span class=\"line\">    cat.CatShout += <span class=\"keyword\">new</span> Cat.CatShoutEventHandler(mouse2.Run); </span><br><span class=\"line\">    <span class=\"comment\">// &quot;+=&quot; 表示 &quot;add_CatShout&quot; 的意思; 与之相反 &quot;-=&quot; 表示 &quot;remove_CatShout()&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cat.Shout();</span><br><span class=\"line\">    Console.Read();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>运行结果:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">喵, 我是Tom.</span><br><span class=\"line\">老猫来了, Jerry快跑!</span><br><span class=\"line\">老猫来了, Jack快跑!</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><strong>EventArgs:</strong> EventArgs是包含事件数据的类的基类.</li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CatShoutEventArgs</span> : <span class=\"title\">EventArgs</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name&#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;<span class=\"keyword\">return</span> name; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;name = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">CatShoutEventHandler</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, CatShoutEventArgs args</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> CatShoutEventHandler CatShout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Shout</span>()</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;喵, 我是&#123;0&#125;.&quot;</span>, name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(CatShout != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            CatShoutEventArgs e = <span class=\"keyword\">new</span> CatShoutEventArgs();</span><br><span class=\"line\">            e.Name = <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">            CatShout(<span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Mouse</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mouse</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, CatShoutEventArgs args</span>)</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;老猫&#123;0&#125;来了, &#123;1&#125;快跑!&quot;</span>, args.Name, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>Main执行结果:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">喵, 我是Tom.</span><br><span class=\"line\">老猫Tom来了, Jerry快跑!</span><br><span class=\"line\">老猫Tom来了, Jack快跑!</span><br></pre></td></tr></table></figure>"},{"title":"读书笔记-机器学习 Ch0-Ch1","date":"2024-09-18T15:04:27.000Z","hidden":false,"_content":"\n**机器学习所研究的主要内容, 是关于在计算机上从数据中产生\"模型\"(model)的算法, 即\"学习算法\"(learning algorithm).**\n\n<!-- more -->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [书籍基本信息](#书籍基本信息)\n- [Chapter 0: 主要符号表](#chapter-0-主要符号表)\n- [Chapter 1: 绪论](#chapter-1-绪论)\n  - [$ 1.1 基本术语](#-11-基本术语)\n  - [$ 1.3 假设空间](#-13-假设空间)\n  - [$ 1.4 归纳偏好](#-14-归纳偏好)\n\n---\n\n## 书籍基本信息\n\n《机器学习》周志华 2016.\n\n大名鼎鼎的西瓜书, 笔者在此略去介绍.\n\n## Chapter 0: 主要符号表\n\n$$\\begin{aligned}\n&\\mathit{x}& &标量\\\\\n&\\boldsymbol{x}& &向量 \\\\\n&\\mathrm{x}& &变量集 \\\\\n&\\mathbf{A}& &矩阵 \\\\\n&\\mathbf{I}& &单位阵 \\\\\n&\\mathcal{X}& &样本空间或状态空间\\\\\n&\\mathcal{D}& &概率分布\\\\\n&\\mathit{D}& &数据样本(数据集)\\\\\n&\\mathcal{H}& &假设空间\\\\\n&\\mathit{H}& &假设集\\\\\n&\\mathfrak{L}& &学习算法\\\\\n&\\left ( \\cdot ,\\cdot ,\\cdot  \\right )& &行向量\\\\\n&\\left ( \\cdot ;\\cdot ;\\cdot \\right )& &列向量\\\\\n&\\left ( \\cdot  \\right )^{T}& &向量或矩阵转置\\\\\n&\\left \\{  \\cdot \\cdot \\cdot \\right \\}& &集合\\\\\n&\\left | \\left \\{ \\cdot \\cdot \\cdot \\right \\} \\right |& &集合中元素个数\\\\\n&\\left \\| \\cdot  \\right \\|_{p}& &L_p范数, p缺省时为L_2范数\\\\\n&\\mathit{P}\\left ( \\cdot  \\right ),\\mathit{P}\\left ( \\cdot |\\cdot  \\right )& &概率质量函数,条件概率质量函数\\\\\n&\\mathit{p}\\left ( \\cdot  \\right ),\\mathit{p}\\left ( \\cdot  | \\cdot \\right )& &概率密度函数, 条件概率密度函数\\\\\n&\\mathbb{E}_{\\cdot \\sim \\mathcal{D}}\\left [ f\\! \\left ( \\cdot \\right ) \\right ]& &函数 f\\! \\left ( \\cdot \\right ) 对 \\cdot 在分布 \\mathcal{D} 下的数学期望:意义明确是将省略 \\mathcal{D} 和(或)\\cdot \\\\\n&sup\\left ( \\cdot \\right )& &上确界\\\\\n&\\mathbb{I} \\left ( \\cdot  \\right )& &指示函数，在 \\cdot  为真和假分别取值为1 , 0 \\\\\n&sign\\left ( \\cdot  \\right )& &符号函数，在 \\cdot < 0, = 0 , >  0 时分别取值为 -1,0,1\n\\end{aligned}$$\n\n## Chapter 1: 绪论\n\n### $ 1.1 基本术语\n\n> 假定我们收集了一批关于西瓜的数据, 例如(色泽 = 浅白; 根蒂 = 蜷缩; 敲声 = 浊响), (色泽 = 乌黑; 根蒂 = 稍蜷; 敲声 = 沉闷), (色泽 = 浅白; 根蒂 = 硬挺; 敲声 = 清脆), ......, 每对括号内是一条记录, 下文关于术语的表述会基于上述假定进行解释.\n\n- **数据集/样本(Data Set):** 这组记录的集合称为一个数据集.\n\n    > **Tips:** 数据集亦称样本, 因为数据集可看作对样本空间的一个采样.\n    >\n    > **Addtional:** \"样本\"的具体指代示例还是数据集, 要看具体的上下文.\n\n- **示例(Instance)/样本(Sample):** 每条记录称为示例/样本, 是关于一个事件或对象的描述(以上例, 该对象为西瓜).\n\n- **属性(Attribute)/特征(Feature):** \"色泽\", \"根蒂\", \"敲声\"称为属性.\n\n- **属性值(Attribute Value):** 属性的取值称为属性值(以上例, \"青绿\"和\"乌黑\"是色泽的属性值).\n\n- **属性空间(Attribute Space)/样本空间(Sample Space)/输入空间:** 属性张成的空间.\n\n    > **Tips:** 此处涉及的是线性代数知识, 即将样本(Instance)依据属性转化为向量, 其中色泽, 根蒂和敲声为坐标轴, 张成了一个用于描述西瓜特征的三维空间, 该空间每个点即是线性代数意义上的一个向量, 也就是**特征向量(Feature Vector)**. 我们可以认为, 示例(Instance)的另一种等价表述是特征向量.\n\n- **数据集的表示:** 令 $\\mathit{D} = \\{x_1, x_2, ..., x_m\\}$ 表示包含$m$个示例的数据集, 每个示例由 $d$ 个属性描述, 则每个示例(Instance) $x_i= (x_{i1}; x_{i2}; ...; x_{id})$ 是 $d$ 维样本空间 $\\mathcal{X}$ 中的一个向量, $x_i \\in \\mathcal{X}$. $d$ 称为样本 $x_i$ 的**维数(Dimensionality)**.\n\n- **学习(Learning)/训练(Training):** 从数据中学得模型的过程称为学习/训练, 该过程通过执行某个学习算法完成.\n\n- **训练数据(Training Data):** 训练过程中所使用的数据.\n\n- **训练样本(Training Sample)/训练示例(Training Instance):** 训练数据中的每个样本/示例.\n\n- **训练集(Training Set):** 训练样本组成的集合称为训练集.\n\n    > **Tips:** 训练集相当于训练数据的子集, 训练数据除去**训练集**外还存在**验证集**.(参考自:[**知乎|训练集(training dataset), 测试集(test dataset)与验证集(validation dataset)**](https://zhuanlan.zhihu.com/p/115344944))\n\n- **假设(Hypothesis)&真相/真实(Ground-Truth):** 学得模型对应了关于数据的某种潜在规律, 因此亦称假设.这种潜在规律称为\"真相\"/\"真实\". 学习的过程就是为了找出或逼近真相.\n\n    > **Tips:** [**WIKIPEDIA|Ground-Truth**](https://en.wikipedia.org/wiki/Ground_truth)又将其表述为**基准真相**.\n    >\n    > \"Ground truth is information that is known to be real or true, provided by direct observation and measurement (i.e. empirical evidence) as opposed to information provided by inference.\"\n\n**Tips:** 本书有时又将**模型**称为**学习器(Learner)**, 模型可看作是学习算法在给定数据和参数空间上的实例化.\n\n- **标记(Label):** 关于示例(Instance)结果的信息, 称为标记(如\"好瓜\"). 一般的, 用 $(x_i, y_i)$ 表示第 $i$ 个样例, 其中 $y_i \\in \\mathcal{Y}$ 是示例 $x_i$ 的标记, $\\mathcal{Y}$ 是所有标记的集合, 又称**标记空间(Label Space)/输出空间**.\n\n- **分类(Classification):** 若**预测(Prediction)**的是离散值(如\"好瓜\", \"坏瓜\"), 则称此类学习任务是分类.\n\n- **回归(Regression):** 若预测的是连续值(如成熟度0.95, 0.7), 则称此类学习任务是回归.\n\n- **二分类(Binary Classification):** 只涉及两个类别的分类任务, 通常称其中一类为**正类(Positive Class)**, 另一类为**反类(Negative Class)**.\n\n- **多分类(Multi-class Classification):** 与之相对的, 涉及多种类别的分类任务称为多分类任务.\n\n- **预测任务:** 预测任务希望通过对训练集$\\{(x_1, y_1), (x_2, y_2), ..., (x_m, y_m)\\}$ 进行学习, 建立一个从输入空间 $\\mathcal{X}$ 到输出空间 $\\mathcal{Y}$ 的映射 $f : \\mathcal{X} \\rightarrow \\mathcal{Y}$. 对二分类, 通常取 $\\mathcal{Y} = \\{-1, 1\\}$ 或 $\\{0, 1\\}$; 对于多分类, $|\\mathcal{Y}| > 2$; 对于回归, $\\mathcal{Y} = \\mathbb{R}$.\n\n- **测试(Testing):** 使用学习得到的模型进行预测的过程称为测试, 预测的样本称为**测试样本(Testing Sample)/测试示例(Testing Instance)**.\n\n- **聚类(Clustering):** 将训练集中的样本分为若干组, 每组称为一个**簇(Cluster)**.\n\n    > **Tips:** 形成的簇可能对应一些潜在的概念划分(如本地瓜, 外地瓜), 但这样的概念我们事先不知道, 否则通过标记(Label)就可以形成簇划分.\n\n- **监督学习(Supervised Learning)/有导师学习:** 训练数据拥有标记信息, 分类和回归为代表.\n\n- **无监督学习(Unsupervised Learning)/无导师学习** 训练数据无标记信息, 聚类为代表.\n\n> **Tips:** 此处仅作最基本的概念了解, 关于上述两概念的具体释义留及之后的学习.\n\n- **泛化(Generalization):** 学得模型适用于新样本的能力,称为泛化能力.\n\n    > **Tips1:** 样本空间通常很大, 训练过程无法涵盖所有的示例, 我们希望模型可以对新样本有较好的目标表现, 这就是泛化的意义.\n    >\n    > **Tips2:** 泛化的数学支撑:\n    >\n    >关于这种泛化, 我们通常假设样本空间中的所有样本都服从一个未知的**分布(Distribution)** $\\mathcal{D}$, 获取的样本是从该分布上采样获得的, 满足**独立同分布(Independent and Identically Distributed, *i.d.d*)**.\n    >\n  > 关于机器学习中为什么使用i.d.d, 可以从[**知乎|为什么机器学习中, 要假设我们的数据是独立同分布的?**](https://www.zhihu.com/question/41222495)获取相关信息.\n\n### $ 1.3 假设空间\n\n**归纳(Induction)**与**演绎(Deduction)**是科学推理的两大基本手段.\n\n> 前者是从特殊到一般的**泛化(Generalization)**过程; 后者是从一般到特殊的**特化(Specialization)**过程.\n\n- **归纳学习(Inductive Learning):** 广义的归纳学习大体相当于从样例中学习, 狭义的归纳学习要求从学习过程中习得**概念(concept)**, 亦称**概念学习/概念形成**.\n\n- **版本空间(Version Space):** 存在一个与训练集一致的\"假设集合\", 称为版本空间, 例如:\n\n![table1-1](BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png)\n\n其假设空间为\n\n![pic1-1](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png)\n\n其版本空间为\n\n![pic1-2](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png)\n\n> **Tips:** 在该数据集中, 好瓜具有的共同特征是蜷缩和浊响. 因此色泽标识为通配符 $*$, 同时, 第一行的两种假设同样是与训练集一致的(可以匹配好瓜).\n\n### $ 1.4 归纳偏好\n\n- **归纳偏好(Inductive bias):** 算法在学习过程中对某种类型假设的偏好称为归纳偏好.\n\n    > **Tips:** **任何**一个有效的机器学习算法必有其归纳偏好, 否则它无法产生确定的学习结果.\n    >\n    > 以图1-2的版本空间为例, 对新瓜(色泽=青绿;根蒂=蜷缩;敲声=沉闷), 若模型告诉我们这种瓜时好时坏则没有意义, 模型必须对给定的样本给予确定的结果.\n    >\n    > **Additional:** 归纳偏好可看作学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或\"价值观\". 常遵循**奥卡姆剃刀(Occam's Razor)**原则(**若有多个假设与观察一致, 则选简单的那个**).\n\n接下来我们来比较不同归纳偏好的优劣\n\n![pic1-3](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png)\n\n从直观上看我们一般会认为, 拟合出平滑的曲线A要优于曲线B, 但很遗憾, 当面临一些极端数据时, 曲线B可能会优于曲线A, 情形如下图所示.\n\n![pic1-4](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png)\n\n接下来我们用数学语言尝试量化模型的优劣.\n\n假设样本空间 $\\mathcal{X}$ 和假设空间 $\\mathcal{H}$ 都是离散的, 令 $P(h|X, \\mathfrak{L})$ 代表学习算法 $\\mathfrak{L}_a$ 基于训练数据 $X$ 产生假设 $h$ 的概率, 令 $f$ 为目标函数.则 $\\mathfrak{L}_a$ 在训练集外的所有样本上的误差为\n\n$$\\begin{equation} \\label{eq1.1}\nE_{ote}(\\mathfrak{L}_a|X, f) = \\sum_h \\sum_{x \\in \\mathcal{X} -X} P(x) \\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\n\\tag{1.1}\n\\end{equation}$$\n\n> **Tips:** 以下是笔者个人对该公式的理解,可能存在疏漏或错误.\n>\n> 首先看乘起来的的三个式子, $\\mathbb{I}$ 为指示函数, 代表的含义是假设 $h$ 与目标函数 $f$ 没有误差时取0, 存在误差时取1. 若取1, 则两个概率乘积表示在给定的$x$和$h$下, 存在误差的概率.\n>\n> 接下来的两个求和就不难理解了, 分别是对$x$的所有取值求和以及对$h$的所有取值求和, 权重为特定$x$和$h$的概率.\n\n为简化问题, 考虑二分类, 真实目标函数$f$可以是任何函数$\\mathcal{X} \\rightarrow \\{0,1\\}$, 函数空间$\\{0,1\\}^{|\\mathcal{X}|}$. 对所有可能的$f$按均匀分布对误差求和,有\n\n$$\n\\begin{align} \\nonumber\n\\sum_f E_{ote}(\\mathfrak{L}_a|x, f) &= \\sum_f \\sum_h \\sum_{x \\in \\mathcal{X} -X} P(x) \\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\\\\ \\nonumber\n&= \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a) \\sum_f \\mathbb{I}(h(x) \\neq f(x))\\\\ \\nonumber\n^*&=  \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a) \\frac{1}{2}2^{|\\mathcal{X}|}\\\\ \\nonumber\n&= \\frac{1}{2}2^{|\\mathcal{X}|} \\sum_{x \\in \\mathcal{X} -X} P(x) \\cdot 1 \\tag{1.2}\n\\end{align}\n$$\n\n> **Tips:** 标识$*$的一步因为若$f$均匀分布, 则有一半的$f$对$x$的预测与$h(x)$不一致.\n\n式(1.2)指出, 误差与学习算法$\\mathfrak{L}$无关! 对于任意学习算法$\\mathfrak{L}_a$和$mathfrak{L}_b$,有\n\n$$\\begin{equation}\n\\sum_f E_{ote}(\\mathfrak{L}_a|X, f) = \\sum_f E_{ote}(\\mathfrak{L}_b|X, f) \\tag{1.3}\n\\end{equation}$$\n\n这简直糟糕透了, 似乎所有的学习算法期望性能居然都相同. 这就是**没有免费午餐定理(No Free Lunch Theorem, NFL)**.\n\n> **Tips:** 原书的证明是多重假设下的简化论述, 对严格数学证明感兴趣的读者可以自行查阅相关资料.\n\n但是, NFL定理有一个重要前提, 它假定了所有问题出现的机会相等, 所有问题同等重要(例如上述证明中假设了$f$均匀分布). 但我们并不要求模型对所有情况都能给出一个好的解决方案, 往往我们希望模型对特定问题表现是好的.\n\n> **Tips:** 原书中举了一个简单的例子, 骑自行车从南京鼓楼到南京新街口显然是好方案(距离约两站地铁), 但骑自行车从南京鼓楼到北京新街口, 显然不是好的方案,但我们不care.\n\n简单来说, NFL定理指出了**没有一种机器学习算法是适用于所有情况的**, 只有针对具体问题, 才能谈论模型的优劣.\n","source":"_posts/BookNote-MachineLearning-by-ZhihuaZhou-1.md","raw":"---\ntitle: 读书笔记-机器学习 Ch0-Ch1\ndate: 2024-09-18 23:04:27\nhidden: false\ntags:\n- 读书笔记\n- 机器学习\ncategories:\n- 读书笔记\n---\n\n**机器学习所研究的主要内容, 是关于在计算机上从数据中产生\"模型\"(model)的算法, 即\"学习算法\"(learning algorithm).**\n\n<!-- more -->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [书籍基本信息](#书籍基本信息)\n- [Chapter 0: 主要符号表](#chapter-0-主要符号表)\n- [Chapter 1: 绪论](#chapter-1-绪论)\n  - [$ 1.1 基本术语](#-11-基本术语)\n  - [$ 1.3 假设空间](#-13-假设空间)\n  - [$ 1.4 归纳偏好](#-14-归纳偏好)\n\n---\n\n## 书籍基本信息\n\n《机器学习》周志华 2016.\n\n大名鼎鼎的西瓜书, 笔者在此略去介绍.\n\n## Chapter 0: 主要符号表\n\n$$\\begin{aligned}\n&\\mathit{x}& &标量\\\\\n&\\boldsymbol{x}& &向量 \\\\\n&\\mathrm{x}& &变量集 \\\\\n&\\mathbf{A}& &矩阵 \\\\\n&\\mathbf{I}& &单位阵 \\\\\n&\\mathcal{X}& &样本空间或状态空间\\\\\n&\\mathcal{D}& &概率分布\\\\\n&\\mathit{D}& &数据样本(数据集)\\\\\n&\\mathcal{H}& &假设空间\\\\\n&\\mathit{H}& &假设集\\\\\n&\\mathfrak{L}& &学习算法\\\\\n&\\left ( \\cdot ,\\cdot ,\\cdot  \\right )& &行向量\\\\\n&\\left ( \\cdot ;\\cdot ;\\cdot \\right )& &列向量\\\\\n&\\left ( \\cdot  \\right )^{T}& &向量或矩阵转置\\\\\n&\\left \\{  \\cdot \\cdot \\cdot \\right \\}& &集合\\\\\n&\\left | \\left \\{ \\cdot \\cdot \\cdot \\right \\} \\right |& &集合中元素个数\\\\\n&\\left \\| \\cdot  \\right \\|_{p}& &L_p范数, p缺省时为L_2范数\\\\\n&\\mathit{P}\\left ( \\cdot  \\right ),\\mathit{P}\\left ( \\cdot |\\cdot  \\right )& &概率质量函数,条件概率质量函数\\\\\n&\\mathit{p}\\left ( \\cdot  \\right ),\\mathit{p}\\left ( \\cdot  | \\cdot \\right )& &概率密度函数, 条件概率密度函数\\\\\n&\\mathbb{E}_{\\cdot \\sim \\mathcal{D}}\\left [ f\\! \\left ( \\cdot \\right ) \\right ]& &函数 f\\! \\left ( \\cdot \\right ) 对 \\cdot 在分布 \\mathcal{D} 下的数学期望:意义明确是将省略 \\mathcal{D} 和(或)\\cdot \\\\\n&sup\\left ( \\cdot \\right )& &上确界\\\\\n&\\mathbb{I} \\left ( \\cdot  \\right )& &指示函数，在 \\cdot  为真和假分别取值为1 , 0 \\\\\n&sign\\left ( \\cdot  \\right )& &符号函数，在 \\cdot < 0, = 0 , >  0 时分别取值为 -1,0,1\n\\end{aligned}$$\n\n## Chapter 1: 绪论\n\n### $ 1.1 基本术语\n\n> 假定我们收集了一批关于西瓜的数据, 例如(色泽 = 浅白; 根蒂 = 蜷缩; 敲声 = 浊响), (色泽 = 乌黑; 根蒂 = 稍蜷; 敲声 = 沉闷), (色泽 = 浅白; 根蒂 = 硬挺; 敲声 = 清脆), ......, 每对括号内是一条记录, 下文关于术语的表述会基于上述假定进行解释.\n\n- **数据集/样本(Data Set):** 这组记录的集合称为一个数据集.\n\n    > **Tips:** 数据集亦称样本, 因为数据集可看作对样本空间的一个采样.\n    >\n    > **Addtional:** \"样本\"的具体指代示例还是数据集, 要看具体的上下文.\n\n- **示例(Instance)/样本(Sample):** 每条记录称为示例/样本, 是关于一个事件或对象的描述(以上例, 该对象为西瓜).\n\n- **属性(Attribute)/特征(Feature):** \"色泽\", \"根蒂\", \"敲声\"称为属性.\n\n- **属性值(Attribute Value):** 属性的取值称为属性值(以上例, \"青绿\"和\"乌黑\"是色泽的属性值).\n\n- **属性空间(Attribute Space)/样本空间(Sample Space)/输入空间:** 属性张成的空间.\n\n    > **Tips:** 此处涉及的是线性代数知识, 即将样本(Instance)依据属性转化为向量, 其中色泽, 根蒂和敲声为坐标轴, 张成了一个用于描述西瓜特征的三维空间, 该空间每个点即是线性代数意义上的一个向量, 也就是**特征向量(Feature Vector)**. 我们可以认为, 示例(Instance)的另一种等价表述是特征向量.\n\n- **数据集的表示:** 令 $\\mathit{D} = \\{x_1, x_2, ..., x_m\\}$ 表示包含$m$个示例的数据集, 每个示例由 $d$ 个属性描述, 则每个示例(Instance) $x_i= (x_{i1}; x_{i2}; ...; x_{id})$ 是 $d$ 维样本空间 $\\mathcal{X}$ 中的一个向量, $x_i \\in \\mathcal{X}$. $d$ 称为样本 $x_i$ 的**维数(Dimensionality)**.\n\n- **学习(Learning)/训练(Training):** 从数据中学得模型的过程称为学习/训练, 该过程通过执行某个学习算法完成.\n\n- **训练数据(Training Data):** 训练过程中所使用的数据.\n\n- **训练样本(Training Sample)/训练示例(Training Instance):** 训练数据中的每个样本/示例.\n\n- **训练集(Training Set):** 训练样本组成的集合称为训练集.\n\n    > **Tips:** 训练集相当于训练数据的子集, 训练数据除去**训练集**外还存在**验证集**.(参考自:[**知乎|训练集(training dataset), 测试集(test dataset)与验证集(validation dataset)**](https://zhuanlan.zhihu.com/p/115344944))\n\n- **假设(Hypothesis)&真相/真实(Ground-Truth):** 学得模型对应了关于数据的某种潜在规律, 因此亦称假设.这种潜在规律称为\"真相\"/\"真实\". 学习的过程就是为了找出或逼近真相.\n\n    > **Tips:** [**WIKIPEDIA|Ground-Truth**](https://en.wikipedia.org/wiki/Ground_truth)又将其表述为**基准真相**.\n    >\n    > \"Ground truth is information that is known to be real or true, provided by direct observation and measurement (i.e. empirical evidence) as opposed to information provided by inference.\"\n\n**Tips:** 本书有时又将**模型**称为**学习器(Learner)**, 模型可看作是学习算法在给定数据和参数空间上的实例化.\n\n- **标记(Label):** 关于示例(Instance)结果的信息, 称为标记(如\"好瓜\"). 一般的, 用 $(x_i, y_i)$ 表示第 $i$ 个样例, 其中 $y_i \\in \\mathcal{Y}$ 是示例 $x_i$ 的标记, $\\mathcal{Y}$ 是所有标记的集合, 又称**标记空间(Label Space)/输出空间**.\n\n- **分类(Classification):** 若**预测(Prediction)**的是离散值(如\"好瓜\", \"坏瓜\"), 则称此类学习任务是分类.\n\n- **回归(Regression):** 若预测的是连续值(如成熟度0.95, 0.7), 则称此类学习任务是回归.\n\n- **二分类(Binary Classification):** 只涉及两个类别的分类任务, 通常称其中一类为**正类(Positive Class)**, 另一类为**反类(Negative Class)**.\n\n- **多分类(Multi-class Classification):** 与之相对的, 涉及多种类别的分类任务称为多分类任务.\n\n- **预测任务:** 预测任务希望通过对训练集$\\{(x_1, y_1), (x_2, y_2), ..., (x_m, y_m)\\}$ 进行学习, 建立一个从输入空间 $\\mathcal{X}$ 到输出空间 $\\mathcal{Y}$ 的映射 $f : \\mathcal{X} \\rightarrow \\mathcal{Y}$. 对二分类, 通常取 $\\mathcal{Y} = \\{-1, 1\\}$ 或 $\\{0, 1\\}$; 对于多分类, $|\\mathcal{Y}| > 2$; 对于回归, $\\mathcal{Y} = \\mathbb{R}$.\n\n- **测试(Testing):** 使用学习得到的模型进行预测的过程称为测试, 预测的样本称为**测试样本(Testing Sample)/测试示例(Testing Instance)**.\n\n- **聚类(Clustering):** 将训练集中的样本分为若干组, 每组称为一个**簇(Cluster)**.\n\n    > **Tips:** 形成的簇可能对应一些潜在的概念划分(如本地瓜, 外地瓜), 但这样的概念我们事先不知道, 否则通过标记(Label)就可以形成簇划分.\n\n- **监督学习(Supervised Learning)/有导师学习:** 训练数据拥有标记信息, 分类和回归为代表.\n\n- **无监督学习(Unsupervised Learning)/无导师学习** 训练数据无标记信息, 聚类为代表.\n\n> **Tips:** 此处仅作最基本的概念了解, 关于上述两概念的具体释义留及之后的学习.\n\n- **泛化(Generalization):** 学得模型适用于新样本的能力,称为泛化能力.\n\n    > **Tips1:** 样本空间通常很大, 训练过程无法涵盖所有的示例, 我们希望模型可以对新样本有较好的目标表现, 这就是泛化的意义.\n    >\n    > **Tips2:** 泛化的数学支撑:\n    >\n    >关于这种泛化, 我们通常假设样本空间中的所有样本都服从一个未知的**分布(Distribution)** $\\mathcal{D}$, 获取的样本是从该分布上采样获得的, 满足**独立同分布(Independent and Identically Distributed, *i.d.d*)**.\n    >\n  > 关于机器学习中为什么使用i.d.d, 可以从[**知乎|为什么机器学习中, 要假设我们的数据是独立同分布的?**](https://www.zhihu.com/question/41222495)获取相关信息.\n\n### $ 1.3 假设空间\n\n**归纳(Induction)**与**演绎(Deduction)**是科学推理的两大基本手段.\n\n> 前者是从特殊到一般的**泛化(Generalization)**过程; 后者是从一般到特殊的**特化(Specialization)**过程.\n\n- **归纳学习(Inductive Learning):** 广义的归纳学习大体相当于从样例中学习, 狭义的归纳学习要求从学习过程中习得**概念(concept)**, 亦称**概念学习/概念形成**.\n\n- **版本空间(Version Space):** 存在一个与训练集一致的\"假设集合\", 称为版本空间, 例如:\n\n![table1-1](BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png)\n\n其假设空间为\n\n![pic1-1](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png)\n\n其版本空间为\n\n![pic1-2](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png)\n\n> **Tips:** 在该数据集中, 好瓜具有的共同特征是蜷缩和浊响. 因此色泽标识为通配符 $*$, 同时, 第一行的两种假设同样是与训练集一致的(可以匹配好瓜).\n\n### $ 1.4 归纳偏好\n\n- **归纳偏好(Inductive bias):** 算法在学习过程中对某种类型假设的偏好称为归纳偏好.\n\n    > **Tips:** **任何**一个有效的机器学习算法必有其归纳偏好, 否则它无法产生确定的学习结果.\n    >\n    > 以图1-2的版本空间为例, 对新瓜(色泽=青绿;根蒂=蜷缩;敲声=沉闷), 若模型告诉我们这种瓜时好时坏则没有意义, 模型必须对给定的样本给予确定的结果.\n    >\n    > **Additional:** 归纳偏好可看作学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或\"价值观\". 常遵循**奥卡姆剃刀(Occam's Razor)**原则(**若有多个假设与观察一致, 则选简单的那个**).\n\n接下来我们来比较不同归纳偏好的优劣\n\n![pic1-3](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png)\n\n从直观上看我们一般会认为, 拟合出平滑的曲线A要优于曲线B, 但很遗憾, 当面临一些极端数据时, 曲线B可能会优于曲线A, 情形如下图所示.\n\n![pic1-4](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png)\n\n接下来我们用数学语言尝试量化模型的优劣.\n\n假设样本空间 $\\mathcal{X}$ 和假设空间 $\\mathcal{H}$ 都是离散的, 令 $P(h|X, \\mathfrak{L})$ 代表学习算法 $\\mathfrak{L}_a$ 基于训练数据 $X$ 产生假设 $h$ 的概率, 令 $f$ 为目标函数.则 $\\mathfrak{L}_a$ 在训练集外的所有样本上的误差为\n\n$$\\begin{equation} \\label{eq1.1}\nE_{ote}(\\mathfrak{L}_a|X, f) = \\sum_h \\sum_{x \\in \\mathcal{X} -X} P(x) \\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\n\\tag{1.1}\n\\end{equation}$$\n\n> **Tips:** 以下是笔者个人对该公式的理解,可能存在疏漏或错误.\n>\n> 首先看乘起来的的三个式子, $\\mathbb{I}$ 为指示函数, 代表的含义是假设 $h$ 与目标函数 $f$ 没有误差时取0, 存在误差时取1. 若取1, 则两个概率乘积表示在给定的$x$和$h$下, 存在误差的概率.\n>\n> 接下来的两个求和就不难理解了, 分别是对$x$的所有取值求和以及对$h$的所有取值求和, 权重为特定$x$和$h$的概率.\n\n为简化问题, 考虑二分类, 真实目标函数$f$可以是任何函数$\\mathcal{X} \\rightarrow \\{0,1\\}$, 函数空间$\\{0,1\\}^{|\\mathcal{X}|}$. 对所有可能的$f$按均匀分布对误差求和,有\n\n$$\n\\begin{align} \\nonumber\n\\sum_f E_{ote}(\\mathfrak{L}_a|x, f) &= \\sum_f \\sum_h \\sum_{x \\in \\mathcal{X} -X} P(x) \\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\\\\ \\nonumber\n&= \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a) \\sum_f \\mathbb{I}(h(x) \\neq f(x))\\\\ \\nonumber\n^*&=  \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a) \\frac{1}{2}2^{|\\mathcal{X}|}\\\\ \\nonumber\n&= \\frac{1}{2}2^{|\\mathcal{X}|} \\sum_{x \\in \\mathcal{X} -X} P(x) \\cdot 1 \\tag{1.2}\n\\end{align}\n$$\n\n> **Tips:** 标识$*$的一步因为若$f$均匀分布, 则有一半的$f$对$x$的预测与$h(x)$不一致.\n\n式(1.2)指出, 误差与学习算法$\\mathfrak{L}$无关! 对于任意学习算法$\\mathfrak{L}_a$和$mathfrak{L}_b$,有\n\n$$\\begin{equation}\n\\sum_f E_{ote}(\\mathfrak{L}_a|X, f) = \\sum_f E_{ote}(\\mathfrak{L}_b|X, f) \\tag{1.3}\n\\end{equation}$$\n\n这简直糟糕透了, 似乎所有的学习算法期望性能居然都相同. 这就是**没有免费午餐定理(No Free Lunch Theorem, NFL)**.\n\n> **Tips:** 原书的证明是多重假设下的简化论述, 对严格数学证明感兴趣的读者可以自行查阅相关资料.\n\n但是, NFL定理有一个重要前提, 它假定了所有问题出现的机会相等, 所有问题同等重要(例如上述证明中假设了$f$均匀分布). 但我们并不要求模型对所有情况都能给出一个好的解决方案, 往往我们希望模型对特定问题表现是好的.\n\n> **Tips:** 原书中举了一个简单的例子, 骑自行车从南京鼓楼到南京新街口显然是好方案(距离约两站地铁), 但骑自行车从南京鼓楼到北京新街口, 显然不是好的方案,但我们不care.\n\n简单来说, NFL定理指出了**没有一种机器学习算法是适用于所有情况的**, 只有针对具体问题, 才能谈论模型的优劣.\n","slug":"BookNote-MachineLearning-by-ZhihuaZhou-1","published":1,"updated":"2024-10-13T14:34:14.784Z","comments":1,"layout":"post","photos":[],"_id":"cm2t94r310009gwil91at5t8n","content":"<p><strong>机器学习所研究的主要内容,\r\n是关于在计算机上从数据中产生\"模型\"(model)的算法, 即\"学习算法\"(learning\r\nalgorithm).</strong></p>\r\n<span id=\"more\"></span>\r\n<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#书籍基本信息\">书籍基本信息</a></li>\r\n<li><a href=\"#chapter-0-主要符号表\">Chapter 0: 主要符号表</a></li>\r\n<li><a href=\"#chapter-1-绪论\">Chapter 1: 绪论</a>\r\n<ul>\r\n<li><a href=\"#-11-基本术语\">$ 1.1 基本术语</a></li>\r\n<li><a href=\"#-13-假设空间\">$ 1.3 假设空间</a></li>\r\n<li><a href=\"#-14-归纳偏好\">$ 1.4 归纳偏好</a></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"书籍基本信息\">书籍基本信息</h2>\r\n<p>《机器学习》周志华 2016.</p>\r\n<p>大名鼎鼎的西瓜书, 笔者在此略去介绍.</p>\r\n<h2 id=\"chapter-0-主要符号表\">Chapter 0: 主要符号表</h2>\r\n<p><span class=\"math display\">\\[\\begin{aligned}\r\n&amp;\\mathit{x}&amp; &amp;标量\\\\\r\n&amp;\\boldsymbol{x}&amp; &amp;向量 \\\\\r\n&amp;\\mathrm{x}&amp; &amp;变量集 \\\\\r\n&amp;\\mathbf{A}&amp; &amp;矩阵 \\\\\r\n&amp;\\mathbf{I}&amp; &amp;单位阵 \\\\\r\n&amp;\\mathcal{X}&amp; &amp;样本空间或状态空间\\\\\r\n&amp;\\mathcal{D}&amp; &amp;概率分布\\\\\r\n&amp;\\mathit{D}&amp; &amp;数据样本(数据集)\\\\\r\n&amp;\\mathcal{H}&amp; &amp;假设空间\\\\\r\n&amp;\\mathit{H}&amp; &amp;假设集\\\\\r\n&amp;\\mathfrak{L}&amp; &amp;学习算法\\\\\r\n&amp;\\left ( \\cdot ,\\cdot ,\\cdot  \\right )&amp; &amp;行向量\\\\\r\n&amp;\\left ( \\cdot ;\\cdot ;\\cdot \\right )&amp; &amp;列向量\\\\\r\n&amp;\\left ( \\cdot  \\right )^{T}&amp; &amp;向量或矩阵转置\\\\\r\n&amp;\\left \\{  \\cdot \\cdot \\cdot \\right \\}&amp; &amp;集合\\\\\r\n&amp;\\left | \\left \\{ \\cdot \\cdot \\cdot \\right \\} \\right |&amp;\r\n&amp;集合中元素个数\\\\\r\n&amp;\\left \\| \\cdot  \\right \\|_{p}&amp; &amp;L_p范数, p缺省时为L_2范数\\\\\r\n&amp;\\mathit{P}\\left ( \\cdot  \\right ),\\mathit{P}\\left ( \\cdot\r\n|\\cdot  \\right )&amp; &amp;概率质量函数,条件概率质量函数\\\\\r\n&amp;\\mathit{p}\\left ( \\cdot  \\right ),\\mathit{p}\\left ( \\cdot  | \\cdot\r\n\\right )&amp; &amp;概率密度函数, 条件概率密度函数\\\\\r\n&amp;\\mathbb{E}_{\\cdot \\sim \\mathcal{D}}\\left [ f\\! \\left ( \\cdot \\right\r\n) \\right ]&amp; &amp;函数 f\\! \\left ( \\cdot \\right ) 对 \\cdot 在分布\r\n\\mathcal{D} 下的数学期望:意义明确是将省略 \\mathcal{D} 和(或)\\cdot \\\\\r\n&amp;sup\\left ( \\cdot \\right )&amp; &amp;上确界\\\\\r\n&amp;\\mathbb{I} \\left ( \\cdot  \\right )&amp; &amp;指示函数，在\r\n\\cdot  为真和假分别取值为1 , 0 \\\\\r\n&amp;sign\\left ( \\cdot  \\right )&amp; &amp;符号函数，在 \\cdot &lt; 0, =\r\n0 , &gt;  0 时分别取值为 -1,0,1\r\n\\end{aligned}\\]</span></p>\r\n<h2 id=\"chapter-1-绪论\">Chapter 1: 绪论</h2>\r\n<h3 id=\"基本术语\">$ 1.1 基本术语</h3>\r\n<blockquote>\r\n<p>假定我们收集了一批关于西瓜的数据, 例如(色泽 = 浅白; 根蒂 = 蜷缩; 敲声\r\n= 浊响), (色泽 = 乌黑; 根蒂 = 稍蜷; 敲声 = 沉闷), (色泽 = 浅白; 根蒂 =\r\n硬挺; 敲声 = 清脆), ......, 每对括号内是一条记录,\r\n下文关于术语的表述会基于上述假定进行解释.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>数据集/样本(Data Set):</strong>\r\n这组记录的集合称为一个数据集.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 数据集亦称样本,\r\n因为数据集可看作对样本空间的一个采样.</p>\r\n<p><strong>Addtional:</strong> \"样本\"的具体指代示例还是数据集,\r\n要看具体的上下文.</p>\r\n</blockquote></li>\r\n<li><p><strong>示例(Instance)/样本(Sample):</strong>\r\n每条记录称为示例/样本, 是关于一个事件或对象的描述(以上例,\r\n该对象为西瓜).</p></li>\r\n<li><p><strong>属性(Attribute)/特征(Feature):</strong> \"色泽\", \"根蒂\",\r\n\"敲声\"称为属性.</p></li>\r\n<li><p><strong>属性值(Attribute Value):</strong>\r\n属性的取值称为属性值(以上例, \"青绿\"和\"乌黑\"是色泽的属性值).</p></li>\r\n<li><p><strong>属性空间(Attribute Space)/样本空间(Sample\r\nSpace)/输入空间:</strong> 属性张成的空间.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处涉及的是线性代数知识,\r\n即将样本(Instance)依据属性转化为向量, 其中色泽, 根蒂和敲声为坐标轴,\r\n张成了一个用于描述西瓜特征的三维空间,\r\n该空间每个点即是线性代数意义上的一个向量, 也就是<strong>特征向量(Feature\r\nVector)</strong>. 我们可以认为,\r\n示例(Instance)的另一种等价表述是特征向量.</p>\r\n</blockquote></li>\r\n<li><p><strong>数据集的表示:</strong> 令 <span\r\nclass=\"math inline\">\\(\\mathit{D} = \\{x_1, x_2, ..., x_m\\}\\)</span>\r\n表示包含<span class=\"math inline\">\\(m\\)</span>个示例的数据集, 每个示例由\r\n<span class=\"math inline\">\\(d\\)</span> 个属性描述, 则每个示例(Instance)\r\n<span class=\"math inline\">\\(x_i= (x_{i1}; x_{i2}; ...; x_{id})\\)</span>\r\n是 <span class=\"math inline\">\\(d\\)</span> 维样本空间 <span\r\nclass=\"math inline\">\\(\\mathcal{X}\\)</span> 中的一个向量, <span\r\nclass=\"math inline\">\\(x_i \\in \\mathcal{X}\\)</span>. <span\r\nclass=\"math inline\">\\(d\\)</span> 称为样本 <span\r\nclass=\"math inline\">\\(x_i\\)</span>\r\n的<strong>维数(Dimensionality)</strong>.</p></li>\r\n<li><p><strong>学习(Learning)/训练(Training):</strong>\r\n从数据中学得模型的过程称为学习/训练,\r\n该过程通过执行某个学习算法完成.</p></li>\r\n<li><p><strong>训练数据(Training Data):</strong>\r\n训练过程中所使用的数据.</p></li>\r\n<li><p><strong>训练样本(Training Sample)/训练示例(Training\r\nInstance):</strong> 训练数据中的每个样本/示例.</p></li>\r\n<li><p><strong>训练集(Training Set):</strong>\r\n训练样本组成的集合称为训练集.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 训练集相当于训练数据的子集,\r\n训练数据除去<strong>训练集</strong>外还存在<strong>验证集</strong>.(参考自:<a\r\nhref=\"https://zhuanlan.zhihu.com/p/115344944\"><strong>知乎|训练集(training\r\ndataset), 测试集(test dataset)与验证集(validation\r\ndataset)</strong></a>)</p>\r\n</blockquote></li>\r\n<li><p><strong>假设(Hypothesis)&amp;真相/真实(Ground-Truth):</strong>\r\n学得模型对应了关于数据的某种潜在规律,\r\n因此亦称假设.这种潜在规律称为\"真相\"/\"真实\".\r\n学习的过程就是为了找出或逼近真相.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> <a\r\nhref=\"https://en.wikipedia.org/wiki/Ground_truth\"><strong>WIKIPEDIA|Ground-Truth</strong></a>又将其表述为<strong>基准真相</strong>.</p>\r\n<p>\"Ground truth is information that is known to be real or true,\r\nprovided by direct observation and measurement (i.e. empirical evidence)\r\nas opposed to information provided by inference.\"</p>\r\n</blockquote></li>\r\n</ul>\r\n<p><strong>Tips:</strong>\r\n本书有时又将<strong>模型</strong>称为<strong>学习器(Learner)</strong>,\r\n模型可看作是学习算法在给定数据和参数空间上的实例化.</p>\r\n<ul>\r\n<li><p><strong>标记(Label):</strong> 关于示例(Instance)结果的信息,\r\n称为标记(如\"好瓜\"). 一般的, 用 <span class=\"math inline\">\\((x_i,\r\ny_i)\\)</span> 表示第 <span class=\"math inline\">\\(i\\)</span> 个样例, 其中\r\n<span class=\"math inline\">\\(y_i \\in \\mathcal{Y}\\)</span> 是示例 <span\r\nclass=\"math inline\">\\(x_i\\)</span> 的标记, <span\r\nclass=\"math inline\">\\(\\mathcal{Y}\\)</span> 是所有标记的集合,\r\n又称<strong>标记空间(Label Space)/输出空间</strong>.</p></li>\r\n<li><p><strong>分类(Classification):</strong>\r\n若<strong>预测(Prediction)</strong>的是离散值(如\"好瓜\", \"坏瓜\"),\r\n则称此类学习任务是分类.</p></li>\r\n<li><p><strong>回归(Regression):</strong> 若预测的是连续值(如成熟度0.95,\r\n0.7), 则称此类学习任务是回归.</p></li>\r\n<li><p><strong>二分类(Binary Classification):</strong>\r\n只涉及两个类别的分类任务, 通常称其中一类为<strong>正类(Positive\r\nClass)</strong>, 另一类为<strong>反类(Negative Class)</strong>.</p></li>\r\n<li><p><strong>多分类(Multi-class Classification):</strong> 与之相对的,\r\n涉及多种类别的分类任务称为多分类任务.</p></li>\r\n<li><p><strong>预测任务:</strong> 预测任务希望通过对训练集<span\r\nclass=\"math inline\">\\(\\{(x_1, y_1), (x_2, y_2), ..., (x_m,\r\ny_m)\\}\\)</span> 进行学习, 建立一个从输入空间 <span\r\nclass=\"math inline\">\\(\\mathcal{X}\\)</span> 到输出空间 <span\r\nclass=\"math inline\">\\(\\mathcal{Y}\\)</span> 的映射 <span\r\nclass=\"math inline\">\\(f : \\mathcal{X} \\rightarrow \\mathcal{Y}\\)</span>.\r\n对二分类, 通常取 <span class=\"math inline\">\\(\\mathcal{Y} = \\{-1,\r\n1\\}\\)</span> 或 <span class=\"math inline\">\\(\\{0, 1\\}\\)</span>;\r\n对于多分类, <span class=\"math inline\">\\(|\\mathcal{Y}| &gt; 2\\)</span>;\r\n对于回归, <span class=\"math inline\">\\(\\mathcal{Y} =\r\n\\mathbb{R}\\)</span>.</p></li>\r\n<li><p><strong>测试(Testing):</strong>\r\n使用学习得到的模型进行预测的过程称为测试,\r\n预测的样本称为<strong>测试样本(Testing Sample)/测试示例(Testing\r\nInstance)</strong>.</p></li>\r\n<li><p><strong>聚类(Clustering):</strong> 将训练集中的样本分为若干组,\r\n每组称为一个<strong>簇(Cluster)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 形成的簇可能对应一些潜在的概念划分(如本地瓜,\r\n外地瓜), 但这样的概念我们事先不知道,\r\n否则通过标记(Label)就可以形成簇划分.</p>\r\n</blockquote></li>\r\n<li><p><strong>监督学习(Supervised Learning)/有导师学习:</strong>\r\n训练数据拥有标记信息, 分类和回归为代表.</p></li>\r\n<li><p><strong>无监督学习(Unsupervised Learning)/无导师学习</strong>\r\n训练数据无标记信息, 聚类为代表.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处仅作最基本的概念了解,\r\n关于上述两概念的具体释义留及之后的学习.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>泛化(Generalization):</strong>\r\n学得模型适用于新样本的能力,称为泛化能力.</p>\r\n<blockquote>\r\n<p><strong>Tips1:</strong> 样本空间通常很大, 训练过程无法涵盖所有的示例,\r\n我们希望模型可以对新样本有较好的目标表现, 这就是泛化的意义.</p>\r\n<p><strong>Tips2:</strong> 泛化的数学支撑:</p>\r\n<p>关于这种泛化,\r\n我们通常假设样本空间中的所有样本都服从一个未知的<strong>分布(Distribution)</strong>\r\n<span class=\"math inline\">\\(\\mathcal{D}\\)</span>,\r\n获取的样本是从该分布上采样获得的, 满足<strong>独立同分布(Independent and\r\nIdentically Distributed, <em>i.d.d</em>)</strong>.</p>\r\n<p>关于机器学习中为什么使用i.d.d, 可以从<a\r\nhref=\"https://www.zhihu.com/question/41222495\"><strong>知乎|为什么机器学习中,\r\n要假设我们的数据是独立同分布的?</strong></a>获取相关信息.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"假设空间\">$ 1.3 假设空间</h3>\r\n<p><strong>归纳(Induction)</strong>与<strong>演绎(Deduction)</strong>是科学推理的两大基本手段.</p>\r\n<blockquote>\r\n<p>前者是从特殊到一般的<strong>泛化(Generalization)</strong>过程;\r\n后者是从一般到特殊的<strong>特化(Specialization)</strong>过程.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>归纳学习(Inductive Learning):</strong>\r\n广义的归纳学习大体相当于从样例中学习,\r\n狭义的归纳学习要求从学习过程中习得<strong>概念(concept)</strong>,\r\n亦称<strong>概念学习/概念形成</strong>.</p></li>\r\n<li><p><strong>版本空间(Version Space):</strong>\r\n存在一个与训练集一致的\"假设集合\", 称为版本空间, 例如:</p></li>\r\n</ul>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png\" class=\"\" title=\"table1-1\">\r\n<p>其假设空间为</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<p>其版本空间为</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 在该数据集中, 好瓜具有的共同特征是蜷缩和浊响.\r\n因此色泽标识为通配符 <span class=\"math inline\">\\(*\\)</span>, 同时,\r\n第一行的两种假设同样是与训练集一致的(可以匹配好瓜).</p>\r\n</blockquote>\r\n<h3 id=\"归纳偏好\">$ 1.4 归纳偏好</h3>\r\n<ul>\r\n<li><p><strong>归纳偏好(Inductive bias):</strong>\r\n算法在学习过程中对某种类型假设的偏好称为归纳偏好.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n<strong>任何</strong>一个有效的机器学习算法必有其归纳偏好,\r\n否则它无法产生确定的学习结果.</p>\r\n<p>以图1-2的版本空间为例, 对新瓜(色泽=青绿;根蒂=蜷缩;敲声=沉闷),\r\n若模型告诉我们这种瓜时好时坏则没有意义,\r\n模型必须对给定的样本给予确定的结果.</p>\r\n<p><strong>Additional:</strong>\r\n归纳偏好可看作学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或\"价值观\".\r\n常遵循<strong>奥卡姆剃刀(Occam's\r\nRazor)</strong>原则(<strong>若有多个假设与观察一致,\r\n则选简单的那个</strong>).</p>\r\n</blockquote></li>\r\n</ul>\r\n<p>接下来我们来比较不同归纳偏好的优劣</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n<p>从直观上看我们一般会认为, 拟合出平滑的曲线A要优于曲线B, 但很遗憾,\r\n当面临一些极端数据时, 曲线B可能会优于曲线A, 情形如下图所示.</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png\" class=\"\" title=\"pic1-4\">\r\n<p>接下来我们用数学语言尝试量化模型的优劣.</p>\r\n<p>假设样本空间 <span class=\"math inline\">\\(\\mathcal{X}\\)</span>\r\n和假设空间 <span class=\"math inline\">\\(\\mathcal{H}\\)</span> 都是离散的,\r\n令 <span class=\"math inline\">\\(P(h|X, \\mathfrak{L})\\)</span>\r\n代表学习算法 <span class=\"math inline\">\\(\\mathfrak{L}_a\\)</span>\r\n基于训练数据 <span class=\"math inline\">\\(X\\)</span> 产生假设 <span\r\nclass=\"math inline\">\\(h\\)</span> 的概率, 令 <span\r\nclass=\"math inline\">\\(f\\)</span> 为目标函数.则 <span\r\nclass=\"math inline\">\\(\\mathfrak{L}_a\\)</span>\r\n在训练集外的所有样本上的误差为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation} \\label{eq1.1}\r\nE_{ote}(\\mathfrak{L}_a|X, f) = \\sum_h \\sum_{x \\in \\mathcal{X} -X} P(x)\r\n\\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\r\n\\tag{1.1}\r\n\\end{equation}\\]</span></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n以下是笔者个人对该公式的理解,可能存在疏漏或错误.</p>\r\n<p>首先看乘起来的的三个式子, <span\r\nclass=\"math inline\">\\(\\mathbb{I}\\)</span> 为指示函数, 代表的含义是假设\r\n<span class=\"math inline\">\\(h\\)</span> 与目标函数 <span\r\nclass=\"math inline\">\\(f\\)</span> 没有误差时取0, 存在误差时取1. 若取1,\r\n则两个概率乘积表示在给定的<span class=\"math inline\">\\(x\\)</span>和<span\r\nclass=\"math inline\">\\(h\\)</span>下, 存在误差的概率.</p>\r\n<p>接下来的两个求和就不难理解了, 分别是对<span\r\nclass=\"math inline\">\\(x\\)</span>的所有取值求和以及对<span\r\nclass=\"math inline\">\\(h\\)</span>的所有取值求和, 权重为特定<span\r\nclass=\"math inline\">\\(x\\)</span>和<span\r\nclass=\"math inline\">\\(h\\)</span>的概率.</p>\r\n</blockquote>\r\n<p>为简化问题, 考虑二分类, 真实目标函数<span\r\nclass=\"math inline\">\\(f\\)</span>可以是任何函数<span\r\nclass=\"math inline\">\\(\\mathcal{X} \\rightarrow \\{0,1\\}\\)</span>,\r\n函数空间<span class=\"math inline\">\\(\\{0,1\\}^{|\\mathcal{X}|}\\)</span>.\r\n对所有可能的<span\r\nclass=\"math inline\">\\(f\\)</span>按均匀分布对误差求和,有</p>\r\n<p><span class=\"math display\">\\[\r\n\\begin{align} \\nonumber\r\n\\sum_f E_{ote}(\\mathfrak{L}_a|x, f) &amp;= \\sum_f \\sum_h \\sum_{x \\in\r\n\\mathcal{X} -X} P(x) \\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\\\\\r\n\\nonumber\r\n&amp;= \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a)\r\n\\sum_f \\mathbb{I}(h(x) \\neq f(x))\\\\ \\nonumber\r\n^*&amp;=  \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a)\r\n\\frac{1}{2}2^{|\\mathcal{X}|}\\\\ \\nonumber\r\n&amp;= \\frac{1}{2}2^{|\\mathcal{X}|} \\sum_{x \\in \\mathcal{X} -X} P(x)\r\n\\cdot 1 \\tag{1.2}\r\n\\end{align}\r\n\\]</span></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 标识<span\r\nclass=\"math inline\">\\(*\\)</span>的一步因为若<span\r\nclass=\"math inline\">\\(f\\)</span>均匀分布, 则有一半的<span\r\nclass=\"math inline\">\\(f\\)</span>对<span\r\nclass=\"math inline\">\\(x\\)</span>的预测与<span\r\nclass=\"math inline\">\\(h(x)\\)</span>不一致.</p>\r\n</blockquote>\r\n<p>式(1.2)指出, 误差与学习算法<span\r\nclass=\"math inline\">\\(\\mathfrak{L}\\)</span>无关! 对于任意学习算法<span\r\nclass=\"math inline\">\\(\\mathfrak{L}_a\\)</span>和<span\r\nclass=\"math inline\">\\(mathfrak{L}_b\\)</span>,有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\sum_f E_{ote}(\\mathfrak{L}_a|X, f) = \\sum_f E_{ote}(\\mathfrak{L}_b|X,\r\nf) \\tag{1.3}\r\n\\end{equation}\\]</span></p>\r\n<p>这简直糟糕透了, 似乎所有的学习算法期望性能居然都相同.\r\n这就是<strong>没有免费午餐定理(No Free Lunch Theorem, NFL)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 原书的证明是多重假设下的简化论述,\r\n对严格数学证明感兴趣的读者可以自行查阅相关资料.</p>\r\n</blockquote>\r\n<p>但是, NFL定理有一个重要前提, 它假定了所有问题出现的机会相等,\r\n所有问题同等重要(例如上述证明中假设了<span\r\nclass=\"math inline\">\\(f\\)</span>均匀分布).\r\n但我们并不要求模型对所有情况都能给出一个好的解决方案,\r\n往往我们希望模型对特定问题表现是好的.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 原书中举了一个简单的例子,\r\n骑自行车从南京鼓楼到南京新街口显然是好方案(距离约两站地铁),\r\n但骑自行车从南京鼓楼到北京新街口, 显然不是好的方案,但我们不care.</p>\r\n</blockquote>\r\n<p>简单来说,\r\nNFL定理指出了<strong>没有一种机器学习算法是适用于所有情况的</strong>,\r\n只有针对具体问题, 才能谈论模型的优劣.</p>\r\n","length":3117,"excerpt":"<p><strong>机器学习所研究的主要内容,\r\n是关于在计算机上从数据中产生\"模型\"(model)的算法, 即\"学习算法\"(learning\r\nalgorithm).</strong></p>","more":"<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#书籍基本信息\">书籍基本信息</a></li>\r\n<li><a href=\"#chapter-0-主要符号表\">Chapter 0: 主要符号表</a></li>\r\n<li><a href=\"#chapter-1-绪论\">Chapter 1: 绪论</a>\r\n<ul>\r\n<li><a href=\"#-11-基本术语\">$ 1.1 基本术语</a></li>\r\n<li><a href=\"#-13-假设空间\">$ 1.3 假设空间</a></li>\r\n<li><a href=\"#-14-归纳偏好\">$ 1.4 归纳偏好</a></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"书籍基本信息\">书籍基本信息</h2>\r\n<p>《机器学习》周志华 2016.</p>\r\n<p>大名鼎鼎的西瓜书, 笔者在此略去介绍.</p>\r\n<h2 id=\"chapter-0-主要符号表\">Chapter 0: 主要符号表</h2>\r\n<p><span class=\"math display\">\\[\\begin{aligned}\r\n&amp;\\mathit{x}&amp; &amp;标量\\\\\r\n&amp;\\boldsymbol{x}&amp; &amp;向量 \\\\\r\n&amp;\\mathrm{x}&amp; &amp;变量集 \\\\\r\n&amp;\\mathbf{A}&amp; &amp;矩阵 \\\\\r\n&amp;\\mathbf{I}&amp; &amp;单位阵 \\\\\r\n&amp;\\mathcal{X}&amp; &amp;样本空间或状态空间\\\\\r\n&amp;\\mathcal{D}&amp; &amp;概率分布\\\\\r\n&amp;\\mathit{D}&amp; &amp;数据样本(数据集)\\\\\r\n&amp;\\mathcal{H}&amp; &amp;假设空间\\\\\r\n&amp;\\mathit{H}&amp; &amp;假设集\\\\\r\n&amp;\\mathfrak{L}&amp; &amp;学习算法\\\\\r\n&amp;\\left ( \\cdot ,\\cdot ,\\cdot  \\right )&amp; &amp;行向量\\\\\r\n&amp;\\left ( \\cdot ;\\cdot ;\\cdot \\right )&amp; &amp;列向量\\\\\r\n&amp;\\left ( \\cdot  \\right )^{T}&amp; &amp;向量或矩阵转置\\\\\r\n&amp;\\left \\{  \\cdot \\cdot \\cdot \\right \\}&amp; &amp;集合\\\\\r\n&amp;\\left | \\left \\{ \\cdot \\cdot \\cdot \\right \\} \\right |&amp;\r\n&amp;集合中元素个数\\\\\r\n&amp;\\left \\| \\cdot  \\right \\|_{p}&amp; &amp;L_p范数, p缺省时为L_2范数\\\\\r\n&amp;\\mathit{P}\\left ( \\cdot  \\right ),\\mathit{P}\\left ( \\cdot\r\n|\\cdot  \\right )&amp; &amp;概率质量函数,条件概率质量函数\\\\\r\n&amp;\\mathit{p}\\left ( \\cdot  \\right ),\\mathit{p}\\left ( \\cdot  | \\cdot\r\n\\right )&amp; &amp;概率密度函数, 条件概率密度函数\\\\\r\n&amp;\\mathbb{E}_{\\cdot \\sim \\mathcal{D}}\\left [ f\\! \\left ( \\cdot \\right\r\n) \\right ]&amp; &amp;函数 f\\! \\left ( \\cdot \\right ) 对 \\cdot 在分布\r\n\\mathcal{D} 下的数学期望:意义明确是将省略 \\mathcal{D} 和(或)\\cdot \\\\\r\n&amp;sup\\left ( \\cdot \\right )&amp; &amp;上确界\\\\\r\n&amp;\\mathbb{I} \\left ( \\cdot  \\right )&amp; &amp;指示函数，在\r\n\\cdot  为真和假分别取值为1 , 0 \\\\\r\n&amp;sign\\left ( \\cdot  \\right )&amp; &amp;符号函数，在 \\cdot &lt; 0, =\r\n0 , &gt;  0 时分别取值为 -1,0,1\r\n\\end{aligned}\\]</span></p>\r\n<h2 id=\"chapter-1-绪论\">Chapter 1: 绪论</h2>\r\n<h3 id=\"基本术语\">$ 1.1 基本术语</h3>\r\n<blockquote>\r\n<p>假定我们收集了一批关于西瓜的数据, 例如(色泽 = 浅白; 根蒂 = 蜷缩; 敲声\r\n= 浊响), (色泽 = 乌黑; 根蒂 = 稍蜷; 敲声 = 沉闷), (色泽 = 浅白; 根蒂 =\r\n硬挺; 敲声 = 清脆), ......, 每对括号内是一条记录,\r\n下文关于术语的表述会基于上述假定进行解释.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>数据集/样本(Data Set):</strong>\r\n这组记录的集合称为一个数据集.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 数据集亦称样本,\r\n因为数据集可看作对样本空间的一个采样.</p>\r\n<p><strong>Addtional:</strong> \"样本\"的具体指代示例还是数据集,\r\n要看具体的上下文.</p>\r\n</blockquote></li>\r\n<li><p><strong>示例(Instance)/样本(Sample):</strong>\r\n每条记录称为示例/样本, 是关于一个事件或对象的描述(以上例,\r\n该对象为西瓜).</p></li>\r\n<li><p><strong>属性(Attribute)/特征(Feature):</strong> \"色泽\", \"根蒂\",\r\n\"敲声\"称为属性.</p></li>\r\n<li><p><strong>属性值(Attribute Value):</strong>\r\n属性的取值称为属性值(以上例, \"青绿\"和\"乌黑\"是色泽的属性值).</p></li>\r\n<li><p><strong>属性空间(Attribute Space)/样本空间(Sample\r\nSpace)/输入空间:</strong> 属性张成的空间.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处涉及的是线性代数知识,\r\n即将样本(Instance)依据属性转化为向量, 其中色泽, 根蒂和敲声为坐标轴,\r\n张成了一个用于描述西瓜特征的三维空间,\r\n该空间每个点即是线性代数意义上的一个向量, 也就是<strong>特征向量(Feature\r\nVector)</strong>. 我们可以认为,\r\n示例(Instance)的另一种等价表述是特征向量.</p>\r\n</blockquote></li>\r\n<li><p><strong>数据集的表示:</strong> 令 <span\r\nclass=\"math inline\">\\(\\mathit{D} = \\{x_1, x_2, ..., x_m\\}\\)</span>\r\n表示包含<span class=\"math inline\">\\(m\\)</span>个示例的数据集, 每个示例由\r\n<span class=\"math inline\">\\(d\\)</span> 个属性描述, 则每个示例(Instance)\r\n<span class=\"math inline\">\\(x_i= (x_{i1}; x_{i2}; ...; x_{id})\\)</span>\r\n是 <span class=\"math inline\">\\(d\\)</span> 维样本空间 <span\r\nclass=\"math inline\">\\(\\mathcal{X}\\)</span> 中的一个向量, <span\r\nclass=\"math inline\">\\(x_i \\in \\mathcal{X}\\)</span>. <span\r\nclass=\"math inline\">\\(d\\)</span> 称为样本 <span\r\nclass=\"math inline\">\\(x_i\\)</span>\r\n的<strong>维数(Dimensionality)</strong>.</p></li>\r\n<li><p><strong>学习(Learning)/训练(Training):</strong>\r\n从数据中学得模型的过程称为学习/训练,\r\n该过程通过执行某个学习算法完成.</p></li>\r\n<li><p><strong>训练数据(Training Data):</strong>\r\n训练过程中所使用的数据.</p></li>\r\n<li><p><strong>训练样本(Training Sample)/训练示例(Training\r\nInstance):</strong> 训练数据中的每个样本/示例.</p></li>\r\n<li><p><strong>训练集(Training Set):</strong>\r\n训练样本组成的集合称为训练集.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 训练集相当于训练数据的子集,\r\n训练数据除去<strong>训练集</strong>外还存在<strong>验证集</strong>.(参考自:<a\r\nhref=\"https://zhuanlan.zhihu.com/p/115344944\"><strong>知乎|训练集(training\r\ndataset), 测试集(test dataset)与验证集(validation\r\ndataset)</strong></a>)</p>\r\n</blockquote></li>\r\n<li><p><strong>假设(Hypothesis)&amp;真相/真实(Ground-Truth):</strong>\r\n学得模型对应了关于数据的某种潜在规律,\r\n因此亦称假设.这种潜在规律称为\"真相\"/\"真实\".\r\n学习的过程就是为了找出或逼近真相.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> <a\r\nhref=\"https://en.wikipedia.org/wiki/Ground_truth\"><strong>WIKIPEDIA|Ground-Truth</strong></a>又将其表述为<strong>基准真相</strong>.</p>\r\n<p>\"Ground truth is information that is known to be real or true,\r\nprovided by direct observation and measurement (i.e. empirical evidence)\r\nas opposed to information provided by inference.\"</p>\r\n</blockquote></li>\r\n</ul>\r\n<p><strong>Tips:</strong>\r\n本书有时又将<strong>模型</strong>称为<strong>学习器(Learner)</strong>,\r\n模型可看作是学习算法在给定数据和参数空间上的实例化.</p>\r\n<ul>\r\n<li><p><strong>标记(Label):</strong> 关于示例(Instance)结果的信息,\r\n称为标记(如\"好瓜\"). 一般的, 用 <span class=\"math inline\">\\((x_i,\r\ny_i)\\)</span> 表示第 <span class=\"math inline\">\\(i\\)</span> 个样例, 其中\r\n<span class=\"math inline\">\\(y_i \\in \\mathcal{Y}\\)</span> 是示例 <span\r\nclass=\"math inline\">\\(x_i\\)</span> 的标记, <span\r\nclass=\"math inline\">\\(\\mathcal{Y}\\)</span> 是所有标记的集合,\r\n又称<strong>标记空间(Label Space)/输出空间</strong>.</p></li>\r\n<li><p><strong>分类(Classification):</strong>\r\n若<strong>预测(Prediction)</strong>的是离散值(如\"好瓜\", \"坏瓜\"),\r\n则称此类学习任务是分类.</p></li>\r\n<li><p><strong>回归(Regression):</strong> 若预测的是连续值(如成熟度0.95,\r\n0.7), 则称此类学习任务是回归.</p></li>\r\n<li><p><strong>二分类(Binary Classification):</strong>\r\n只涉及两个类别的分类任务, 通常称其中一类为<strong>正类(Positive\r\nClass)</strong>, 另一类为<strong>反类(Negative Class)</strong>.</p></li>\r\n<li><p><strong>多分类(Multi-class Classification):</strong> 与之相对的,\r\n涉及多种类别的分类任务称为多分类任务.</p></li>\r\n<li><p><strong>预测任务:</strong> 预测任务希望通过对训练集<span\r\nclass=\"math inline\">\\(\\{(x_1, y_1), (x_2, y_2), ..., (x_m,\r\ny_m)\\}\\)</span> 进行学习, 建立一个从输入空间 <span\r\nclass=\"math inline\">\\(\\mathcal{X}\\)</span> 到输出空间 <span\r\nclass=\"math inline\">\\(\\mathcal{Y}\\)</span> 的映射 <span\r\nclass=\"math inline\">\\(f : \\mathcal{X} \\rightarrow \\mathcal{Y}\\)</span>.\r\n对二分类, 通常取 <span class=\"math inline\">\\(\\mathcal{Y} = \\{-1,\r\n1\\}\\)</span> 或 <span class=\"math inline\">\\(\\{0, 1\\}\\)</span>;\r\n对于多分类, <span class=\"math inline\">\\(|\\mathcal{Y}| &gt; 2\\)</span>;\r\n对于回归, <span class=\"math inline\">\\(\\mathcal{Y} =\r\n\\mathbb{R}\\)</span>.</p></li>\r\n<li><p><strong>测试(Testing):</strong>\r\n使用学习得到的模型进行预测的过程称为测试,\r\n预测的样本称为<strong>测试样本(Testing Sample)/测试示例(Testing\r\nInstance)</strong>.</p></li>\r\n<li><p><strong>聚类(Clustering):</strong> 将训练集中的样本分为若干组,\r\n每组称为一个<strong>簇(Cluster)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 形成的簇可能对应一些潜在的概念划分(如本地瓜,\r\n外地瓜), 但这样的概念我们事先不知道,\r\n否则通过标记(Label)就可以形成簇划分.</p>\r\n</blockquote></li>\r\n<li><p><strong>监督学习(Supervised Learning)/有导师学习:</strong>\r\n训练数据拥有标记信息, 分类和回归为代表.</p></li>\r\n<li><p><strong>无监督学习(Unsupervised Learning)/无导师学习</strong>\r\n训练数据无标记信息, 聚类为代表.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处仅作最基本的概念了解,\r\n关于上述两概念的具体释义留及之后的学习.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>泛化(Generalization):</strong>\r\n学得模型适用于新样本的能力,称为泛化能力.</p>\r\n<blockquote>\r\n<p><strong>Tips1:</strong> 样本空间通常很大, 训练过程无法涵盖所有的示例,\r\n我们希望模型可以对新样本有较好的目标表现, 这就是泛化的意义.</p>\r\n<p><strong>Tips2:</strong> 泛化的数学支撑:</p>\r\n<p>关于这种泛化,\r\n我们通常假设样本空间中的所有样本都服从一个未知的<strong>分布(Distribution)</strong>\r\n<span class=\"math inline\">\\(\\mathcal{D}\\)</span>,\r\n获取的样本是从该分布上采样获得的, 满足<strong>独立同分布(Independent and\r\nIdentically Distributed, <em>i.d.d</em>)</strong>.</p>\r\n<p>关于机器学习中为什么使用i.d.d, 可以从<a\r\nhref=\"https://www.zhihu.com/question/41222495\"><strong>知乎|为什么机器学习中,\r\n要假设我们的数据是独立同分布的?</strong></a>获取相关信息.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"假设空间\">$ 1.3 假设空间</h3>\r\n<p><strong>归纳(Induction)</strong>与<strong>演绎(Deduction)</strong>是科学推理的两大基本手段.</p>\r\n<blockquote>\r\n<p>前者是从特殊到一般的<strong>泛化(Generalization)</strong>过程;\r\n后者是从一般到特殊的<strong>特化(Specialization)</strong>过程.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>归纳学习(Inductive Learning):</strong>\r\n广义的归纳学习大体相当于从样例中学习,\r\n狭义的归纳学习要求从学习过程中习得<strong>概念(concept)</strong>,\r\n亦称<strong>概念学习/概念形成</strong>.</p></li>\r\n<li><p><strong>版本空间(Version Space):</strong>\r\n存在一个与训练集一致的\"假设集合\", 称为版本空间, 例如:</p></li>\r\n</ul>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png\" class=\"\" title=\"table1-1\">\r\n<p>其假设空间为</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<p>其版本空间为</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 在该数据集中, 好瓜具有的共同特征是蜷缩和浊响.\r\n因此色泽标识为通配符 <span class=\"math inline\">\\(*\\)</span>, 同时,\r\n第一行的两种假设同样是与训练集一致的(可以匹配好瓜).</p>\r\n</blockquote>\r\n<h3 id=\"归纳偏好\">$ 1.4 归纳偏好</h3>\r\n<ul>\r\n<li><p><strong>归纳偏好(Inductive bias):</strong>\r\n算法在学习过程中对某种类型假设的偏好称为归纳偏好.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n<strong>任何</strong>一个有效的机器学习算法必有其归纳偏好,\r\n否则它无法产生确定的学习结果.</p>\r\n<p>以图1-2的版本空间为例, 对新瓜(色泽=青绿;根蒂=蜷缩;敲声=沉闷),\r\n若模型告诉我们这种瓜时好时坏则没有意义,\r\n模型必须对给定的样本给予确定的结果.</p>\r\n<p><strong>Additional:</strong>\r\n归纳偏好可看作学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或\"价值观\".\r\n常遵循<strong>奥卡姆剃刀(Occam's\r\nRazor)</strong>原则(<strong>若有多个假设与观察一致,\r\n则选简单的那个</strong>).</p>\r\n</blockquote></li>\r\n</ul>\r\n<p>接下来我们来比较不同归纳偏好的优劣</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n<p>从直观上看我们一般会认为, 拟合出平滑的曲线A要优于曲线B, 但很遗憾,\r\n当面临一些极端数据时, 曲线B可能会优于曲线A, 情形如下图所示.</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png\" class=\"\" title=\"pic1-4\">\r\n<p>接下来我们用数学语言尝试量化模型的优劣.</p>\r\n<p>假设样本空间 <span class=\"math inline\">\\(\\mathcal{X}\\)</span>\r\n和假设空间 <span class=\"math inline\">\\(\\mathcal{H}\\)</span> 都是离散的,\r\n令 <span class=\"math inline\">\\(P(h|X, \\mathfrak{L})\\)</span>\r\n代表学习算法 <span class=\"math inline\">\\(\\mathfrak{L}_a\\)</span>\r\n基于训练数据 <span class=\"math inline\">\\(X\\)</span> 产生假设 <span\r\nclass=\"math inline\">\\(h\\)</span> 的概率, 令 <span\r\nclass=\"math inline\">\\(f\\)</span> 为目标函数.则 <span\r\nclass=\"math inline\">\\(\\mathfrak{L}_a\\)</span>\r\n在训练集外的所有样本上的误差为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation} \\label{eq1.1}\r\nE_{ote}(\\mathfrak{L}_a|X, f) = \\sum_h \\sum_{x \\in \\mathcal{X} -X} P(x)\r\n\\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\r\n\\tag{1.1}\r\n\\end{equation}\\]</span></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n以下是笔者个人对该公式的理解,可能存在疏漏或错误.</p>\r\n<p>首先看乘起来的的三个式子, <span\r\nclass=\"math inline\">\\(\\mathbb{I}\\)</span> 为指示函数, 代表的含义是假设\r\n<span class=\"math inline\">\\(h\\)</span> 与目标函数 <span\r\nclass=\"math inline\">\\(f\\)</span> 没有误差时取0, 存在误差时取1. 若取1,\r\n则两个概率乘积表示在给定的<span class=\"math inline\">\\(x\\)</span>和<span\r\nclass=\"math inline\">\\(h\\)</span>下, 存在误差的概率.</p>\r\n<p>接下来的两个求和就不难理解了, 分别是对<span\r\nclass=\"math inline\">\\(x\\)</span>的所有取值求和以及对<span\r\nclass=\"math inline\">\\(h\\)</span>的所有取值求和, 权重为特定<span\r\nclass=\"math inline\">\\(x\\)</span>和<span\r\nclass=\"math inline\">\\(h\\)</span>的概率.</p>\r\n</blockquote>\r\n<p>为简化问题, 考虑二分类, 真实目标函数<span\r\nclass=\"math inline\">\\(f\\)</span>可以是任何函数<span\r\nclass=\"math inline\">\\(\\mathcal{X} \\rightarrow \\{0,1\\}\\)</span>,\r\n函数空间<span class=\"math inline\">\\(\\{0,1\\}^{|\\mathcal{X}|}\\)</span>.\r\n对所有可能的<span\r\nclass=\"math inline\">\\(f\\)</span>按均匀分布对误差求和,有</p>\r\n<p><span class=\"math display\">\\[\r\n\\begin{align} \\nonumber\r\n\\sum_f E_{ote}(\\mathfrak{L}_a|x, f) &amp;= \\sum_f \\sum_h \\sum_{x \\in\r\n\\mathcal{X} -X} P(x) \\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\\\\\r\n\\nonumber\r\n&amp;= \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a)\r\n\\sum_f \\mathbb{I}(h(x) \\neq f(x))\\\\ \\nonumber\r\n^*&amp;=  \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a)\r\n\\frac{1}{2}2^{|\\mathcal{X}|}\\\\ \\nonumber\r\n&amp;= \\frac{1}{2}2^{|\\mathcal{X}|} \\sum_{x \\in \\mathcal{X} -X} P(x)\r\n\\cdot 1 \\tag{1.2}\r\n\\end{align}\r\n\\]</span></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 标识<span\r\nclass=\"math inline\">\\(*\\)</span>的一步因为若<span\r\nclass=\"math inline\">\\(f\\)</span>均匀分布, 则有一半的<span\r\nclass=\"math inline\">\\(f\\)</span>对<span\r\nclass=\"math inline\">\\(x\\)</span>的预测与<span\r\nclass=\"math inline\">\\(h(x)\\)</span>不一致.</p>\r\n</blockquote>\r\n<p>式(1.2)指出, 误差与学习算法<span\r\nclass=\"math inline\">\\(\\mathfrak{L}\\)</span>无关! 对于任意学习算法<span\r\nclass=\"math inline\">\\(\\mathfrak{L}_a\\)</span>和<span\r\nclass=\"math inline\">\\(mathfrak{L}_b\\)</span>,有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\sum_f E_{ote}(\\mathfrak{L}_a|X, f) = \\sum_f E_{ote}(\\mathfrak{L}_b|X,\r\nf) \\tag{1.3}\r\n\\end{equation}\\]</span></p>\r\n<p>这简直糟糕透了, 似乎所有的学习算法期望性能居然都相同.\r\n这就是<strong>没有免费午餐定理(No Free Lunch Theorem, NFL)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 原书的证明是多重假设下的简化论述,\r\n对严格数学证明感兴趣的读者可以自行查阅相关资料.</p>\r\n</blockquote>\r\n<p>但是, NFL定理有一个重要前提, 它假定了所有问题出现的机会相等,\r\n所有问题同等重要(例如上述证明中假设了<span\r\nclass=\"math inline\">\\(f\\)</span>均匀分布).\r\n但我们并不要求模型对所有情况都能给出一个好的解决方案,\r\n往往我们希望模型对特定问题表现是好的.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 原书中举了一个简单的例子,\r\n骑自行车从南京鼓楼到南京新街口显然是好方案(距离约两站地铁),\r\n但骑自行车从南京鼓楼到北京新街口, 显然不是好的方案,但我们不care.</p>\r\n</blockquote>\r\n<p>简单来说,\r\nNFL定理指出了<strong>没有一种机器学习算法是适用于所有情况的</strong>,\r\n只有针对具体问题, 才能谈论模型的优劣.</p>"},{"title":"BookNote-MachineLearning-by-ZhihuaZhou-3","date":"2024-10-26T15:25:14.000Z","hidden":true,"_content":"\n<!--more-->\n\n","source":"_posts/BookNote-MachineLearning-by-ZhihuaZhou-3.md","raw":"---\ntitle: BookNote-MachineLearning-by-ZhihuaZhou-3\ndate: 2024-10-26 23:25:14\nhidden: true\ntags:\n- 读书笔记\n- 机器学习\ncategories:\n- 读书笔记\n---\n\n<!--more-->\n\n","slug":"BookNote-MachineLearning-by-ZhihuaZhou-3","published":1,"updated":"2024-10-28T15:08:14.930Z","comments":1,"layout":"post","photos":[],"_id":"cm2t94r32000agwil76zoczar","content":"<span id=\"more\"></span>\r\n<!-- flag of hidden posts -->","length":1,"excerpt":"","more":""},{"title":"LeetCode个人题解[C++] P4 寻找两个正序数组的中位数","date":"2024-09-21T12:29:30.000Z","hidden":false,"_content":"\n**题目链接:** [**LeetCode|4.寻找两个正序数组的中位数**](https://leetcode.cn/problems/median-of-two-sorted-arrays/)\n\n<!-- more -->\n\n---\n\n## 题面解释\n\n找出两个有序数组合并后的中位数. 但要求时间复杂度$\\mathit{O}(log(m + n))$.\n\n## 解法一 二分\n\n笔者看到复杂度$\\mathit{O}(log(m + n))$第一想法便是二分, 但怎么二分? 两个数组只是内部有序, 两个数组并不有序, 常规对数组二分的思路肯定是不行的.\n\n那该如何进行二分呢, 对答案进行二分. 令k为所寻找的k阶数, 初始为中位数, 则此时我们取两个数组的前$k/2$部分出来, 比较$nums1[k/2]$和$nums2[k/2]$, 则可以直接排除$k/2$个数. 我们以下图例子来解释.\n\n![p1](LeetCode-P4/p1.png)\n\n$m = n = 4$, 我们有 $k = 4, k/2 = 2$, 于是我们取两个数组的前两位, 比较3和5, 不难看出, 1和3不可能是中位数. 为什么? 因为1和3的阶必定小于$k = 4$, 即便第一个数组的3比第二个数组的5前面所有数都大, 3的阶也只能是3, 1就更不必说了. 而5前面的数可能大于3后面的数(例子中未能体现, 读者可以自行构造一个满足这种情况的简单例子). 因此通过这种操作, 我们可以排掉 $k/2$ 个不可能是中位数的元素, 接着我们令$k = k - k/2$, 将被排除的数去掉, 重新进行上述过程.\n\n![p2](LeetCode-P4/p2.png)\n\n选取两个数组的前1位.比较2 和 4, 可以排除掉2. 此时过程进行到了边界处, 接下来$k = 1$无法继续了. 而此时剩下的4和5正是我们需要的中位数.\n\n> **Tips:** 为什么第二个数组不是选择2, 5, 7?\n>\n> 因为我们在上面的步骤中无法确定2和5是中位数与否, 此时的有效信息不足. 而把2 5 7都放进来与4进行比较会出现bug, 以上例, 4会被错误的排除掉\n\nk为奇数时情况稍有不同, 但大多是一些细节问题, 笔者在此不再赘述. 推荐读者自己构建一个例子去推算上面的过程, 相信不难理解其中要义.\n\n每次排除$k/2$, 而 $k = (m + n + 1) / 2$, 故时间复杂度$\\mathit{O}(log(m + n))$.\n\n参考代码如下:\n\n``` C++\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int m = nums1.size();\n        int n = nums2.size();\n        //cout << m << \" \" << n << endl;\n        //for(int i = 0; i < m; i++){cout << nums1[i] << \" \";} cout << endl;\n        //for(int j = 0; j < n; j++){cout << nums2[j] << \" \";} cout << endl;\n\n        int left1 = 0;\n        int left2 = 0;\n\n        int k = (m + n - 1) >> 1; // 排除掉小于中位数的数\n\n        while (k > 1) {\n            // 一个数组被清空\n            if (left1 == m) {\n                left2 += k;\n                k = 0;\n                break;\n            }\n            if (left2 == n) {\n                left1 += k;\n                k = 0;\n                break;\n            }\n            \n            int mid = k >> 1; // 注意循环条件 k > 1\n\n            int mid1 = left1 + mid - 1;\n            int mid2 = left2 + mid - 1;\n\n            // 边界情况，剩余数组大小不足k\n            if (left1 + mid > m) { // 等价于 left1 + mid - 1 >= m\n                mid1 = m - 1;\n            }\n            if (left2 + mid > n) {\n                mid2 = n - 1;\n            }\n\n            if (nums1[mid1] >= nums2[mid2]) {\n                k -= mid2 - left2 + 1; // 一轮可以排除掉一半\n                left2 = mid2 + 1;\n            } else {\n                k -= mid1 - left1 + 1;\n                left1 = mid1 + 1;\n            }\n        }\n\n        // 处理 k == 1\n        if (k == 1) {\n            if (left1 == m) {\n                left2++;\n            } else if (left2 == n) {\n                left1++;\n            } else {\n                if (nums1[left1] >= nums2[left2]) {\n                    left2++;\n                } else {\n                    left1++;\n                }\n            }\n        }\n\n        // 别忘了处理边界情况\n        if ((m + n) & 1 == 1) { // 奇数\n            if (left1 == m) {\n                return nums2[left2];\n            }\n            if (left2 == n) {\n                return nums1[left1];\n            }\n            return std::min(nums1[left1], nums2[left2]);\n        } else { // 偶数\n            if (left1 == m) {\n                return (nums2[left2] + nums2[left2 + 1]) * 1.0 / 2;\n            }\n            if (left2 == n) {\n                return (nums1[left1] + nums1[left1 + 1]) * 1.0 / 2;\n            }\n\n            int num1;\n            if (nums1[left1] >= nums2[left2]) {\n                num1 = nums2[left2];\n                left2++;\n            } else {\n                num1 = nums1[left1];\n                left1++;\n            }\n            int num2;\n            if (left1 == m) {\n                num2 = nums2[left2];\n            }\n            else if (left2 == n) {\n                num2 = nums1[left1];\n            }\n            else{\n                num2 = min(nums1[left1], nums2[left2]);\n            }\n            return (num1 + num2) * 1.0 / 2;\n        }\n\n        return 0;\n    }\n};\n```\n\n> **Tips:** 本题思路并不难想出或者说并不难理解, 但非常考验代码功底, 对细节和边界情况的考察更像是此题的侧重点. 还望看到此处的读者能静下心来调试代码, 祝早日AC.\n\n## 解法二 分割\n\n> 笔者阅读题解时注意到的巧妙的解法, 原链接在此[**P4|windliang**](https://leetcode.cn/problems/median-of-two-sorted-arrays/solutions/8999/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/)\n\n更详细的数学证明, 思路和代码请阅读原文, 笔者在此只给出自己对其的理解.\n\n本质来说, 两种方法殊途同归, 但分割的方法较为巧妙一些. 中位数, 或者说k阶数, 就是将数组分为两个部分, 其一是比k阶数小的部分, 其二是比k阶数大的部分.\n\n对于有序的一个数组, 其性质本身就已经满足, 我们不妨将两部分简称为左半部分(小)和右半部分(大). 对于两个有序数组, 情况是一样的, 如果存在一种划分, 满足左边最大MaxLeft小于右边最小MinRight, 我们则认为这是关于k阶数的一种有效划分.\n\n因此, 这道题就被转化为寻找数组中满足中位数的有效划分, 关于特定k阶数划分, 还需要满足左半部分和右半部分的数量关系, 若规定将k阶数划在左半部分, 则左半部分有k个元素, 右半部分有 n - k 个元素.\n\n后面的事情就简单了, 固定数组1的划分位置, 根据数量关系找到数组2待判定划分位置, 根据MaxLeft和MinRight的大小关系决定数组1划分位置的左移或右移, 该过程可以通过二分完成.\n","source":"_posts/LeetCode-P4.md","raw":"---\ntitle: LeetCode个人题解[C++] P4 寻找两个正序数组的中位数\ndate: 2024-09-21 20:29:30\nhidden: false\ntags:\n- LeetCode\n- 二分\ncategories:\n- LeetCode刷题记录\n---\n\n**题目链接:** [**LeetCode|4.寻找两个正序数组的中位数**](https://leetcode.cn/problems/median-of-two-sorted-arrays/)\n\n<!-- more -->\n\n---\n\n## 题面解释\n\n找出两个有序数组合并后的中位数. 但要求时间复杂度$\\mathit{O}(log(m + n))$.\n\n## 解法一 二分\n\n笔者看到复杂度$\\mathit{O}(log(m + n))$第一想法便是二分, 但怎么二分? 两个数组只是内部有序, 两个数组并不有序, 常规对数组二分的思路肯定是不行的.\n\n那该如何进行二分呢, 对答案进行二分. 令k为所寻找的k阶数, 初始为中位数, 则此时我们取两个数组的前$k/2$部分出来, 比较$nums1[k/2]$和$nums2[k/2]$, 则可以直接排除$k/2$个数. 我们以下图例子来解释.\n\n![p1](LeetCode-P4/p1.png)\n\n$m = n = 4$, 我们有 $k = 4, k/2 = 2$, 于是我们取两个数组的前两位, 比较3和5, 不难看出, 1和3不可能是中位数. 为什么? 因为1和3的阶必定小于$k = 4$, 即便第一个数组的3比第二个数组的5前面所有数都大, 3的阶也只能是3, 1就更不必说了. 而5前面的数可能大于3后面的数(例子中未能体现, 读者可以自行构造一个满足这种情况的简单例子). 因此通过这种操作, 我们可以排掉 $k/2$ 个不可能是中位数的元素, 接着我们令$k = k - k/2$, 将被排除的数去掉, 重新进行上述过程.\n\n![p2](LeetCode-P4/p2.png)\n\n选取两个数组的前1位.比较2 和 4, 可以排除掉2. 此时过程进行到了边界处, 接下来$k = 1$无法继续了. 而此时剩下的4和5正是我们需要的中位数.\n\n> **Tips:** 为什么第二个数组不是选择2, 5, 7?\n>\n> 因为我们在上面的步骤中无法确定2和5是中位数与否, 此时的有效信息不足. 而把2 5 7都放进来与4进行比较会出现bug, 以上例, 4会被错误的排除掉\n\nk为奇数时情况稍有不同, 但大多是一些细节问题, 笔者在此不再赘述. 推荐读者自己构建一个例子去推算上面的过程, 相信不难理解其中要义.\n\n每次排除$k/2$, 而 $k = (m + n + 1) / 2$, 故时间复杂度$\\mathit{O}(log(m + n))$.\n\n参考代码如下:\n\n``` C++\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int m = nums1.size();\n        int n = nums2.size();\n        //cout << m << \" \" << n << endl;\n        //for(int i = 0; i < m; i++){cout << nums1[i] << \" \";} cout << endl;\n        //for(int j = 0; j < n; j++){cout << nums2[j] << \" \";} cout << endl;\n\n        int left1 = 0;\n        int left2 = 0;\n\n        int k = (m + n - 1) >> 1; // 排除掉小于中位数的数\n\n        while (k > 1) {\n            // 一个数组被清空\n            if (left1 == m) {\n                left2 += k;\n                k = 0;\n                break;\n            }\n            if (left2 == n) {\n                left1 += k;\n                k = 0;\n                break;\n            }\n            \n            int mid = k >> 1; // 注意循环条件 k > 1\n\n            int mid1 = left1 + mid - 1;\n            int mid2 = left2 + mid - 1;\n\n            // 边界情况，剩余数组大小不足k\n            if (left1 + mid > m) { // 等价于 left1 + mid - 1 >= m\n                mid1 = m - 1;\n            }\n            if (left2 + mid > n) {\n                mid2 = n - 1;\n            }\n\n            if (nums1[mid1] >= nums2[mid2]) {\n                k -= mid2 - left2 + 1; // 一轮可以排除掉一半\n                left2 = mid2 + 1;\n            } else {\n                k -= mid1 - left1 + 1;\n                left1 = mid1 + 1;\n            }\n        }\n\n        // 处理 k == 1\n        if (k == 1) {\n            if (left1 == m) {\n                left2++;\n            } else if (left2 == n) {\n                left1++;\n            } else {\n                if (nums1[left1] >= nums2[left2]) {\n                    left2++;\n                } else {\n                    left1++;\n                }\n            }\n        }\n\n        // 别忘了处理边界情况\n        if ((m + n) & 1 == 1) { // 奇数\n            if (left1 == m) {\n                return nums2[left2];\n            }\n            if (left2 == n) {\n                return nums1[left1];\n            }\n            return std::min(nums1[left1], nums2[left2]);\n        } else { // 偶数\n            if (left1 == m) {\n                return (nums2[left2] + nums2[left2 + 1]) * 1.0 / 2;\n            }\n            if (left2 == n) {\n                return (nums1[left1] + nums1[left1 + 1]) * 1.0 / 2;\n            }\n\n            int num1;\n            if (nums1[left1] >= nums2[left2]) {\n                num1 = nums2[left2];\n                left2++;\n            } else {\n                num1 = nums1[left1];\n                left1++;\n            }\n            int num2;\n            if (left1 == m) {\n                num2 = nums2[left2];\n            }\n            else if (left2 == n) {\n                num2 = nums1[left1];\n            }\n            else{\n                num2 = min(nums1[left1], nums2[left2]);\n            }\n            return (num1 + num2) * 1.0 / 2;\n        }\n\n        return 0;\n    }\n};\n```\n\n> **Tips:** 本题思路并不难想出或者说并不难理解, 但非常考验代码功底, 对细节和边界情况的考察更像是此题的侧重点. 还望看到此处的读者能静下心来调试代码, 祝早日AC.\n\n## 解法二 分割\n\n> 笔者阅读题解时注意到的巧妙的解法, 原链接在此[**P4|windliang**](https://leetcode.cn/problems/median-of-two-sorted-arrays/solutions/8999/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/)\n\n更详细的数学证明, 思路和代码请阅读原文, 笔者在此只给出自己对其的理解.\n\n本质来说, 两种方法殊途同归, 但分割的方法较为巧妙一些. 中位数, 或者说k阶数, 就是将数组分为两个部分, 其一是比k阶数小的部分, 其二是比k阶数大的部分.\n\n对于有序的一个数组, 其性质本身就已经满足, 我们不妨将两部分简称为左半部分(小)和右半部分(大). 对于两个有序数组, 情况是一样的, 如果存在一种划分, 满足左边最大MaxLeft小于右边最小MinRight, 我们则认为这是关于k阶数的一种有效划分.\n\n因此, 这道题就被转化为寻找数组中满足中位数的有效划分, 关于特定k阶数划分, 还需要满足左半部分和右半部分的数量关系, 若规定将k阶数划在左半部分, 则左半部分有k个元素, 右半部分有 n - k 个元素.\n\n后面的事情就简单了, 固定数组1的划分位置, 根据数量关系找到数组2待判定划分位置, 根据MaxLeft和MinRight的大小关系决定数组1划分位置的左移或右移, 该过程可以通过二分完成.\n","slug":"LeetCode-P4","published":1,"updated":"2024-09-21T18:20:42.472Z","comments":1,"layout":"post","photos":[],"_id":"cm2t94r39000zgwil1e2w5mv3","content":"<p><strong>题目链接:</strong> <a\r\nhref=\"https://leetcode.cn/problems/median-of-two-sorted-arrays/\"><strong>LeetCode|4.寻找两个正序数组的中位数</strong></a></p>\r\n<span id=\"more\"></span>\r\n<hr />\r\n<h2 id=\"题面解释\">题面解释</h2>\r\n<p>找出两个有序数组合并后的中位数. 但要求时间复杂度<span\r\nclass=\"math inline\">\\(\\mathit{O}(log(m + n))\\)</span>.</p>\r\n<h2 id=\"解法一-二分\">解法一 二分</h2>\r\n<p>笔者看到复杂度<span class=\"math inline\">\\(\\mathit{O}(log(m +\r\nn))\\)</span>第一想法便是二分, 但怎么二分? 两个数组只是内部有序,\r\n两个数组并不有序, 常规对数组二分的思路肯定是不行的.</p>\r\n<p>那该如何进行二分呢, 对答案进行二分. 令k为所寻找的k阶数, 初始为中位数,\r\n则此时我们取两个数组的前<span\r\nclass=\"math inline\">\\(k/2\\)</span>部分出来, 比较<span\r\nclass=\"math inline\">\\(nums1[k/2]\\)</span>和<span\r\nclass=\"math inline\">\\(nums2[k/2]\\)</span>, 则可以直接排除<span\r\nclass=\"math inline\">\\(k/2\\)</span>个数. 我们以下图例子来解释.</p>\r\n<img src=\"/2024/09/21/LeetCode-P4/p1.png\" class=\"\" title=\"p1\">\r\n<p><span class=\"math inline\">\\(m = n = 4\\)</span>, 我们有 <span\r\nclass=\"math inline\">\\(k = 4, k/2 = 2\\)</span>,\r\n于是我们取两个数组的前两位, 比较3和5, 不难看出, 1和3不可能是中位数.\r\n为什么? 因为1和3的阶必定小于<span class=\"math inline\">\\(k = 4\\)</span>,\r\n即便第一个数组的3比第二个数组的5前面所有数都大, 3的阶也只能是3,\r\n1就更不必说了. 而5前面的数可能大于3后面的数(例子中未能体现,\r\n读者可以自行构造一个满足这种情况的简单例子). 因此通过这种操作,\r\n我们可以排掉 <span class=\"math inline\">\\(k/2\\)</span>\r\n个不可能是中位数的元素, 接着我们令<span class=\"math inline\">\\(k = k -\r\nk/2\\)</span>, 将被排除的数去掉, 重新进行上述过程.</p>\r\n<img src=\"/2024/09/21/LeetCode-P4/p2.png\" class=\"\" title=\"p2\">\r\n<p>选取两个数组的前1位.比较2 和 4, 可以排除掉2. 此时过程进行到了边界处,\r\n接下来<span class=\"math inline\">\\(k = 1\\)</span>无法继续了.\r\n而此时剩下的4和5正是我们需要的中位数.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 为什么第二个数组不是选择2, 5, 7?</p>\r\n<p>因为我们在上面的步骤中无法确定2和5是中位数与否, 此时的有效信息不足.\r\n而把2 5 7都放进来与4进行比较会出现bug, 以上例, 4会被错误的排除掉</p>\r\n</blockquote>\r\n<p>k为奇数时情况稍有不同, 但大多是一些细节问题, 笔者在此不再赘述.\r\n推荐读者自己构建一个例子去推算上面的过程, 相信不难理解其中要义.</p>\r\n<p>每次排除<span class=\"math inline\">\\(k/2\\)</span>, 而 <span\r\nclass=\"math inline\">\\(k = (m + n + 1) / 2\\)</span>, 故时间复杂度<span\r\nclass=\"math inline\">\\(\\mathit{O}(log(m + n))\\)</span>.</p>\r\n<p>参考代码如下:</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = nums<span class=\"number\">1.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; m &lt;&lt; &quot; &quot; &lt;&lt; n &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"comment\">//for(int i = 0; i &lt; m; i++)&#123;cout &lt;&lt; nums1[i] &lt;&lt; &quot; &quot;;&#125; cout &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"comment\">//for(int j = 0; j &lt; n; j++)&#123;cout &lt;&lt; nums2[j] &lt;&lt; &quot; &quot;;&#125; cout &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> left1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> left2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> k = (m + n - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 排除掉小于中位数的数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 一个数组被清空</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                left2 += k;</span><br><span class=\"line\">                k = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                left1 += k;</span><br><span class=\"line\">                k = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">int</span> mid = k &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 注意循环条件 k &gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> mid1 = left1 + mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid2 = left2 + mid - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 边界情况，剩余数组大小不足k</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 + mid &gt; m) &#123; <span class=\"comment\">// 等价于 left1 + mid - 1 &gt;= m</span></span><br><span class=\"line\">                mid1 = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 + mid &gt; n) &#123;</span><br><span class=\"line\">                mid2 = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[mid1] &gt;= nums2[mid2]) &#123;</span><br><span class=\"line\">                k -= mid2 - left2 + <span class=\"number\">1</span>; <span class=\"comment\">// 一轮可以排除掉一半</span></span><br><span class=\"line\">                left2 = mid2 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                k -= mid1 - left1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">                left1 = mid1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理 k == 1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                left2++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                left1++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums1[left1] &gt;= nums2[left2]) &#123;</span><br><span class=\"line\">                    left2++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    left1++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 别忘了处理边界情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((m + n) &amp; <span class=\"number\">1</span> == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 奇数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums2[left2];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums1[left1];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> std::<span class=\"built_in\">min</span>(nums1[left1], nums2[left2]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 偶数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> (nums2[left2] + nums2[left2 + <span class=\"number\">1</span>]) * <span class=\"number\">1.0</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (nums1[left1] + nums1[left1 + <span class=\"number\">1</span>]) * <span class=\"number\">1.0</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> num1;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[left1] &gt;= nums2[left2]) &#123;</span><br><span class=\"line\">                num1 = nums2[left2];</span><br><span class=\"line\">                left2++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                num1 = nums1[left1];</span><br><span class=\"line\">                left1++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> num2;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                num2 = nums2[left2];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                num2 = nums1[left1];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                num2 = <span class=\"built_in\">min</span>(nums1[left1], nums2[left2]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (num1 + num2) * <span class=\"number\">1.0</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 本题思路并不难想出或者说并不难理解,\r\n但非常考验代码功底, 对细节和边界情况的考察更像是此题的侧重点.\r\n还望看到此处的读者能静下心来调试代码, 祝早日AC.</p>\r\n</blockquote>\r\n<h2 id=\"解法二-分割\">解法二 分割</h2>\r\n<blockquote>\r\n<p>笔者阅读题解时注意到的巧妙的解法, 原链接在此<a\r\nhref=\"https://leetcode.cn/problems/median-of-two-sorted-arrays/solutions/8999/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/\"><strong>P4|windliang</strong></a></p>\r\n</blockquote>\r\n<p>更详细的数学证明, 思路和代码请阅读原文,\r\n笔者在此只给出自己对其的理解.</p>\r\n<p>本质来说, 两种方法殊途同归, 但分割的方法较为巧妙一些. 中位数,\r\n或者说k阶数, 就是将数组分为两个部分, 其一是比k阶数小的部分,\r\n其二是比k阶数大的部分.</p>\r\n<p>对于有序的一个数组, 其性质本身就已经满足,\r\n我们不妨将两部分简称为左半部分(小)和右半部分(大). 对于两个有序数组,\r\n情况是一样的, 如果存在一种划分, 满足左边最大MaxLeft小于右边最小MinRight,\r\n我们则认为这是关于k阶数的一种有效划分.</p>\r\n<p>因此, 这道题就被转化为寻找数组中满足中位数的有效划分,\r\n关于特定k阶数划分, 还需要满足左半部分和右半部分的数量关系,\r\n若规定将k阶数划在左半部分, 则左半部分有k个元素, 右半部分有 n - k\r\n个元素.</p>\r\n<p>后面的事情就简单了, 固定数组1的划分位置,\r\n根据数量关系找到数组2待判定划分位置,\r\n根据MaxLeft和MinRight的大小关系决定数组1划分位置的左移或右移,\r\n该过程可以通过二分完成.</p>\r\n","length":1380,"excerpt":"<p><strong>题目链接:</strong> <a\r\nhref=\"https://leetcode.cn/problems/median-of-two-sorted-arrays/\"><strong>LeetCode|4.寻找两个正序数组的中位数</strong></a></p>","more":"<hr />\r\n<h2 id=\"题面解释\">题面解释</h2>\r\n<p>找出两个有序数组合并后的中位数. 但要求时间复杂度<span\r\nclass=\"math inline\">\\(\\mathit{O}(log(m + n))\\)</span>.</p>\r\n<h2 id=\"解法一-二分\">解法一 二分</h2>\r\n<p>笔者看到复杂度<span class=\"math inline\">\\(\\mathit{O}(log(m +\r\nn))\\)</span>第一想法便是二分, 但怎么二分? 两个数组只是内部有序,\r\n两个数组并不有序, 常规对数组二分的思路肯定是不行的.</p>\r\n<p>那该如何进行二分呢, 对答案进行二分. 令k为所寻找的k阶数, 初始为中位数,\r\n则此时我们取两个数组的前<span\r\nclass=\"math inline\">\\(k/2\\)</span>部分出来, 比较<span\r\nclass=\"math inline\">\\(nums1[k/2]\\)</span>和<span\r\nclass=\"math inline\">\\(nums2[k/2]\\)</span>, 则可以直接排除<span\r\nclass=\"math inline\">\\(k/2\\)</span>个数. 我们以下图例子来解释.</p>\r\n<img src=\"/2024/09/21/LeetCode-P4/p1.png\" class=\"\" title=\"p1\">\r\n<p><span class=\"math inline\">\\(m = n = 4\\)</span>, 我们有 <span\r\nclass=\"math inline\">\\(k = 4, k/2 = 2\\)</span>,\r\n于是我们取两个数组的前两位, 比较3和5, 不难看出, 1和3不可能是中位数.\r\n为什么? 因为1和3的阶必定小于<span class=\"math inline\">\\(k = 4\\)</span>,\r\n即便第一个数组的3比第二个数组的5前面所有数都大, 3的阶也只能是3,\r\n1就更不必说了. 而5前面的数可能大于3后面的数(例子中未能体现,\r\n读者可以自行构造一个满足这种情况的简单例子). 因此通过这种操作,\r\n我们可以排掉 <span class=\"math inline\">\\(k/2\\)</span>\r\n个不可能是中位数的元素, 接着我们令<span class=\"math inline\">\\(k = k -\r\nk/2\\)</span>, 将被排除的数去掉, 重新进行上述过程.</p>\r\n<img src=\"/2024/09/21/LeetCode-P4/p2.png\" class=\"\" title=\"p2\">\r\n<p>选取两个数组的前1位.比较2 和 4, 可以排除掉2. 此时过程进行到了边界处,\r\n接下来<span class=\"math inline\">\\(k = 1\\)</span>无法继续了.\r\n而此时剩下的4和5正是我们需要的中位数.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 为什么第二个数组不是选择2, 5, 7?</p>\r\n<p>因为我们在上面的步骤中无法确定2和5是中位数与否, 此时的有效信息不足.\r\n而把2 5 7都放进来与4进行比较会出现bug, 以上例, 4会被错误的排除掉</p>\r\n</blockquote>\r\n<p>k为奇数时情况稍有不同, 但大多是一些细节问题, 笔者在此不再赘述.\r\n推荐读者自己构建一个例子去推算上面的过程, 相信不难理解其中要义.</p>\r\n<p>每次排除<span class=\"math inline\">\\(k/2\\)</span>, 而 <span\r\nclass=\"math inline\">\\(k = (m + n + 1) / 2\\)</span>, 故时间复杂度<span\r\nclass=\"math inline\">\\(\\mathit{O}(log(m + n))\\)</span>.</p>\r\n<p>参考代码如下:</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = nums<span class=\"number\">1.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; m &lt;&lt; &quot; &quot; &lt;&lt; n &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"comment\">//for(int i = 0; i &lt; m; i++)&#123;cout &lt;&lt; nums1[i] &lt;&lt; &quot; &quot;;&#125; cout &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"comment\">//for(int j = 0; j &lt; n; j++)&#123;cout &lt;&lt; nums2[j] &lt;&lt; &quot; &quot;;&#125; cout &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> left1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> left2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> k = (m + n - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 排除掉小于中位数的数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 一个数组被清空</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                left2 += k;</span><br><span class=\"line\">                k = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                left1 += k;</span><br><span class=\"line\">                k = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">int</span> mid = k &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 注意循环条件 k &gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> mid1 = left1 + mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid2 = left2 + mid - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 边界情况，剩余数组大小不足k</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 + mid &gt; m) &#123; <span class=\"comment\">// 等价于 left1 + mid - 1 &gt;= m</span></span><br><span class=\"line\">                mid1 = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 + mid &gt; n) &#123;</span><br><span class=\"line\">                mid2 = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[mid1] &gt;= nums2[mid2]) &#123;</span><br><span class=\"line\">                k -= mid2 - left2 + <span class=\"number\">1</span>; <span class=\"comment\">// 一轮可以排除掉一半</span></span><br><span class=\"line\">                left2 = mid2 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                k -= mid1 - left1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">                left1 = mid1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理 k == 1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                left2++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                left1++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums1[left1] &gt;= nums2[left2]) &#123;</span><br><span class=\"line\">                    left2++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    left1++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 别忘了处理边界情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((m + n) &amp; <span class=\"number\">1</span> == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 奇数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums2[left2];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums1[left1];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> std::<span class=\"built_in\">min</span>(nums1[left1], nums2[left2]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 偶数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> (nums2[left2] + nums2[left2 + <span class=\"number\">1</span>]) * <span class=\"number\">1.0</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (nums1[left1] + nums1[left1 + <span class=\"number\">1</span>]) * <span class=\"number\">1.0</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> num1;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[left1] &gt;= nums2[left2]) &#123;</span><br><span class=\"line\">                num1 = nums2[left2];</span><br><span class=\"line\">                left2++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                num1 = nums1[left1];</span><br><span class=\"line\">                left1++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> num2;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                num2 = nums2[left2];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                num2 = nums1[left1];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                num2 = <span class=\"built_in\">min</span>(nums1[left1], nums2[left2]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (num1 + num2) * <span class=\"number\">1.0</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 本题思路并不难想出或者说并不难理解,\r\n但非常考验代码功底, 对细节和边界情况的考察更像是此题的侧重点.\r\n还望看到此处的读者能静下心来调试代码, 祝早日AC.</p>\r\n</blockquote>\r\n<h2 id=\"解法二-分割\">解法二 分割</h2>\r\n<blockquote>\r\n<p>笔者阅读题解时注意到的巧妙的解法, 原链接在此<a\r\nhref=\"https://leetcode.cn/problems/median-of-two-sorted-arrays/solutions/8999/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/\"><strong>P4|windliang</strong></a></p>\r\n</blockquote>\r\n<p>更详细的数学证明, 思路和代码请阅读原文,\r\n笔者在此只给出自己对其的理解.</p>\r\n<p>本质来说, 两种方法殊途同归, 但分割的方法较为巧妙一些. 中位数,\r\n或者说k阶数, 就是将数组分为两个部分, 其一是比k阶数小的部分,\r\n其二是比k阶数大的部分.</p>\r\n<p>对于有序的一个数组, 其性质本身就已经满足,\r\n我们不妨将两部分简称为左半部分(小)和右半部分(大). 对于两个有序数组,\r\n情况是一样的, 如果存在一种划分, 满足左边最大MaxLeft小于右边最小MinRight,\r\n我们则认为这是关于k阶数的一种有效划分.</p>\r\n<p>因此, 这道题就被转化为寻找数组中满足中位数的有效划分,\r\n关于特定k阶数划分, 还需要满足左半部分和右半部分的数量关系,\r\n若规定将k阶数划在左半部分, 则左半部分有k个元素, 右半部分有 n - k\r\n个元素.</p>\r\n<p>后面的事情就简单了, 固定数组1的划分位置,\r\n根据数量关系找到数组2待判定划分位置,\r\n根据MaxLeft和MinRight的大小关系决定数组1划分位置的左移或右移,\r\n该过程可以通过二分完成.</p>"},{"title":"NJU静态分析|A1-Live Variable Analysis","date":"2024-10-19T16:04:07.000Z","hidden":false,"_content":"\n**NJU Static Program Analysis | Assignment-1 Live Variable Analysis & IterativeSolver.**\n\n<!--more-->\n\n## 实验信息\n\nNJU软件分析, 实际上是静态分析(Static Program Analysis), 是由李樾和谭添老师开设的面向本科生和研究生的一门课程, 因为是本研共修选修课, 因此本课程内容较为基础, 比较适合对静态分析感兴趣的初学者快速入门. 课程网站[**[Static Program Analysis]**](https://tai-e.pascal-lab.net/lectures.html), 配套课程[**[Bilibili|南京大学《软件分析》]**](https://www.bilibili.com/video/BV1b7411K7P4).\n\n本课程实验(Assignments)基于Tai-e教学版框架, 框架代码的获取和实验环境配置见课程网站, 笔者在约一年前曾自学过本课程, 现今跟随2024Fall课程进度再次学习, 由于上次学习中受到了多位前辈留下的实验记录帮助, 遂于此记录笔者对各个实验的理解和记录. 限于笔者个人能力水平, 恐难完整覆盖实验中的所有要点, 记录内容仅供参考, 如能帮助到您, 乃笔者荣幸.\n\n鉴于 **学术诚信(Academic Integrity)** 要求, 笔者暂且 ***不*** 公开源代码.\n\n## 食用指南\n\n本试验记录 ***不会*** 从零开始讨论完成实验的知识点, 框架理解和注意事项. 食用前请确保观看并理解了课程的P1-4内容, 尤其是对活跃变量分析(Live Variable Analysis)的算法和原理的基本掌握; 完整阅读过[**实验指南**](https://tai-e.pascal-lab.net/pa1.html)和框架代码后, 再来参考本实验记录, 效果最佳.\n\n## 任务目标\n\n基于已有框架为java实现一个**活跃变量分析**, 使用**迭代求解器(Iterative Solver)**.\n\n具体来说, 实现Your Task中涉及的三份文件中的6个`TODO API`.\n\n涉及的主要算法如下图所示:\n\n![pic1](SPA-A1/pic1.png)\n\n作为第一个实验, 总体难度不高, 关键在于熟悉Tai-e框架, 还望读者耐心阅读框架代码. 不妨善用Github Copilot或者ChatGPT帮助理解框架代码.\n\n## LiveVariableAnalysis\n\n活跃变量分析算法中需要用到的具体方法, 实验指南中已有较为详细的说明, 笔者在此不再赘述.\n\n![pic2](SPA-A1/pic2.png)\n\n关于实现该部分所需的`API`, 请阅读`Class SetFact`源码.\n\n笔者在此补充一些本实验所需java语法性质或语法糖.\n\n### Class Optional\n\nJava 8引入的性质, 详细信息可查询文档或教程, 笔者在此给出其一[**[菜鸟教程|Java Optional]**](https://www.runoob.com/java/java8-optional-class.html).\n\n与之类似的还有`java.util.List`, 学习java语法来获得`Optional`和`List`中的内容.\n\n使用示例:\n\n``` java\nLValue def = stmt.getDef().orElse(null);\n```\n\n### instanceof操作符\n\njava中用于判断类型的操作符, 详细信息可参考[**[Baeldung|Java instanceof Operator]**](https://www.baeldung.com/java-instanceof).\n\n使用示例:\n\n```java\nif(def instanceof Var)\n```\n\n需要注意的是, 如指南所示\n\n![pic3](SPA-A1/pic3.png)\n\n`Exp`下的`LValue` `RValue`包括多种类型, 我们只需要关注`Var`类型的使用.\n\n> **Tips:** 为什么不需要考虑别的类型?\n>\n> `LValue`只需要关注`Var`, 这是手册告诉我们的. `RValue`尽管有多种类型, 但可以通过`getUses()`方法将Exp中涉及的变量等信息全部获取, 此时右式是`UnaryExp`or`BinaryExp`对我们来说都不重要了, 只需要将`getUses()`中的`Var`筛选出来处理即可.\n\n> **Additional:** `getUses()`究竟返回什么?\n> \n> 笔者在此引用[RicoloveFeng](https://github.com/RicoloveFeng)在[SPA-Freestyle-Guidance](https://github.com/RicoloveFeng/SPA-Freestyle-Guidance)中的解释\n>\n> 你可能想知道 `getUses()` 除了 `x = y` 这条语句之外还返回些什么东西.我们举点例子吧:\n>\n> - `x = y op z`: `[y, z, y op z]`\n> \n> - `x = m(n)`: `[mClass, n, invokevirtual mClass.m(n)]`\n\n### java引用机制\n\n```java\npublic boolean transferNode(Stmt stmt, SetFact<Var> in, SetFact<Var> out) {\n        ...\n        //in = out.copy();\n        in.set(out);\n        ...\n}\n```\n\n尽管两行代码\"看起来\"是一致的, 但注释掉的代码只会改变形参`in`的取值, 不会改变实际的`Fact in`. 详细原理可以参考[**[知乎|java引用详解]**](https://zhuanlan.zhihu.com/p/453857961).\n\n## Solver & IterativeSolver\n\n本部分对应具体的算法流程.\n\n实际上指南写的已足够详细, 包括如何从`cfg`中获取信息的方法和两处`TODO`对应的具体部分, 使得即便对框架不甚理解, 仍然能完成该部分.\n\n唯一需要阅读代码知道的是可以通过`analysis.xx`的方式调用我们在上一节中实现的`API`.\n\n`Solver`的`Init`需要注意的是由于我们`analysis.meetInto()`与算法中不完全相同, 在初始化阶段我们同样要对`out Fact`进行赋空初始化.\n\n`IterativeSovlver`部分是算法的循环部分, 由于我们的分析器`BB`是`stmt`, 因此不需要考虑Block内部的执行顺序, 直接使用`analysis.transferNode`即可.\n\n另外, 上课时遍历迭代顺序取的是较优结果, 我们不需要过多考虑性能问题, 因此以任意节点顺序迭代仍然可以得到结果, 这大大降低了代码实现的复杂性, 只需要使用简单的`for(Node node : cfg)`即可.\n\n笔者同样补充一些可能对本实验理解有帮助的细节部分.\n\n### DataflowResult\n\n其本质是两个`Nodes`对应的`inFacts` `outFacts`的集合, 通过给定的API获取和设置其中的值, 其中`inFacts`和`outFacts`不过是`set`的封装, 在抽象层面上意义和课程中的那个代表变量的二进制串相同.\n\n### `CFG<Node> cfg` 中的 `Node`具体指什么?\n\n在本次实验中, `Node node`指的是`stmt`, 从指南中可以推测出这点. 通过阅读源代码, 也可以得知\n\n```java\npublic class LiveVariableAnalysis extends\n        AbstractDataflowAnalysis<Stmt, SetFact<Var>>\n```\n\n所以我们可以直接使用以下代码\n\n```java\nfor(Node node : cfg){\n    ...\n    analysis.transferNode(node, in, out);\n    ...\n}    \n```\n\n## 总结\n\n总的来说这次实验的难点在于框架代码的理解, 笔者在记录中提及了部分关键定义和代码理解, 只要耐心阅读框架代码, 相信一定会AC.\n","source":"_posts/SPA-A1.md","raw":"---\ntitle: NJU静态分析|A1-Live Variable Analysis\ndate: 2024-10-20 00:04:07\nhidden: false\ntags:\n- NJU\n- 静态分析\ncategories:\n- NJU静态分析实验记录\n---\n\n**NJU Static Program Analysis | Assignment-1 Live Variable Analysis & IterativeSolver.**\n\n<!--more-->\n\n## 实验信息\n\nNJU软件分析, 实际上是静态分析(Static Program Analysis), 是由李樾和谭添老师开设的面向本科生和研究生的一门课程, 因为是本研共修选修课, 因此本课程内容较为基础, 比较适合对静态分析感兴趣的初学者快速入门. 课程网站[**[Static Program Analysis]**](https://tai-e.pascal-lab.net/lectures.html), 配套课程[**[Bilibili|南京大学《软件分析》]**](https://www.bilibili.com/video/BV1b7411K7P4).\n\n本课程实验(Assignments)基于Tai-e教学版框架, 框架代码的获取和实验环境配置见课程网站, 笔者在约一年前曾自学过本课程, 现今跟随2024Fall课程进度再次学习, 由于上次学习中受到了多位前辈留下的实验记录帮助, 遂于此记录笔者对各个实验的理解和记录. 限于笔者个人能力水平, 恐难完整覆盖实验中的所有要点, 记录内容仅供参考, 如能帮助到您, 乃笔者荣幸.\n\n鉴于 **学术诚信(Academic Integrity)** 要求, 笔者暂且 ***不*** 公开源代码.\n\n## 食用指南\n\n本试验记录 ***不会*** 从零开始讨论完成实验的知识点, 框架理解和注意事项. 食用前请确保观看并理解了课程的P1-4内容, 尤其是对活跃变量分析(Live Variable Analysis)的算法和原理的基本掌握; 完整阅读过[**实验指南**](https://tai-e.pascal-lab.net/pa1.html)和框架代码后, 再来参考本实验记录, 效果最佳.\n\n## 任务目标\n\n基于已有框架为java实现一个**活跃变量分析**, 使用**迭代求解器(Iterative Solver)**.\n\n具体来说, 实现Your Task中涉及的三份文件中的6个`TODO API`.\n\n涉及的主要算法如下图所示:\n\n![pic1](SPA-A1/pic1.png)\n\n作为第一个实验, 总体难度不高, 关键在于熟悉Tai-e框架, 还望读者耐心阅读框架代码. 不妨善用Github Copilot或者ChatGPT帮助理解框架代码.\n\n## LiveVariableAnalysis\n\n活跃变量分析算法中需要用到的具体方法, 实验指南中已有较为详细的说明, 笔者在此不再赘述.\n\n![pic2](SPA-A1/pic2.png)\n\n关于实现该部分所需的`API`, 请阅读`Class SetFact`源码.\n\n笔者在此补充一些本实验所需java语法性质或语法糖.\n\n### Class Optional\n\nJava 8引入的性质, 详细信息可查询文档或教程, 笔者在此给出其一[**[菜鸟教程|Java Optional]**](https://www.runoob.com/java/java8-optional-class.html).\n\n与之类似的还有`java.util.List`, 学习java语法来获得`Optional`和`List`中的内容.\n\n使用示例:\n\n``` java\nLValue def = stmt.getDef().orElse(null);\n```\n\n### instanceof操作符\n\njava中用于判断类型的操作符, 详细信息可参考[**[Baeldung|Java instanceof Operator]**](https://www.baeldung.com/java-instanceof).\n\n使用示例:\n\n```java\nif(def instanceof Var)\n```\n\n需要注意的是, 如指南所示\n\n![pic3](SPA-A1/pic3.png)\n\n`Exp`下的`LValue` `RValue`包括多种类型, 我们只需要关注`Var`类型的使用.\n\n> **Tips:** 为什么不需要考虑别的类型?\n>\n> `LValue`只需要关注`Var`, 这是手册告诉我们的. `RValue`尽管有多种类型, 但可以通过`getUses()`方法将Exp中涉及的变量等信息全部获取, 此时右式是`UnaryExp`or`BinaryExp`对我们来说都不重要了, 只需要将`getUses()`中的`Var`筛选出来处理即可.\n\n> **Additional:** `getUses()`究竟返回什么?\n> \n> 笔者在此引用[RicoloveFeng](https://github.com/RicoloveFeng)在[SPA-Freestyle-Guidance](https://github.com/RicoloveFeng/SPA-Freestyle-Guidance)中的解释\n>\n> 你可能想知道 `getUses()` 除了 `x = y` 这条语句之外还返回些什么东西.我们举点例子吧:\n>\n> - `x = y op z`: `[y, z, y op z]`\n> \n> - `x = m(n)`: `[mClass, n, invokevirtual mClass.m(n)]`\n\n### java引用机制\n\n```java\npublic boolean transferNode(Stmt stmt, SetFact<Var> in, SetFact<Var> out) {\n        ...\n        //in = out.copy();\n        in.set(out);\n        ...\n}\n```\n\n尽管两行代码\"看起来\"是一致的, 但注释掉的代码只会改变形参`in`的取值, 不会改变实际的`Fact in`. 详细原理可以参考[**[知乎|java引用详解]**](https://zhuanlan.zhihu.com/p/453857961).\n\n## Solver & IterativeSolver\n\n本部分对应具体的算法流程.\n\n实际上指南写的已足够详细, 包括如何从`cfg`中获取信息的方法和两处`TODO`对应的具体部分, 使得即便对框架不甚理解, 仍然能完成该部分.\n\n唯一需要阅读代码知道的是可以通过`analysis.xx`的方式调用我们在上一节中实现的`API`.\n\n`Solver`的`Init`需要注意的是由于我们`analysis.meetInto()`与算法中不完全相同, 在初始化阶段我们同样要对`out Fact`进行赋空初始化.\n\n`IterativeSovlver`部分是算法的循环部分, 由于我们的分析器`BB`是`stmt`, 因此不需要考虑Block内部的执行顺序, 直接使用`analysis.transferNode`即可.\n\n另外, 上课时遍历迭代顺序取的是较优结果, 我们不需要过多考虑性能问题, 因此以任意节点顺序迭代仍然可以得到结果, 这大大降低了代码实现的复杂性, 只需要使用简单的`for(Node node : cfg)`即可.\n\n笔者同样补充一些可能对本实验理解有帮助的细节部分.\n\n### DataflowResult\n\n其本质是两个`Nodes`对应的`inFacts` `outFacts`的集合, 通过给定的API获取和设置其中的值, 其中`inFacts`和`outFacts`不过是`set`的封装, 在抽象层面上意义和课程中的那个代表变量的二进制串相同.\n\n### `CFG<Node> cfg` 中的 `Node`具体指什么?\n\n在本次实验中, `Node node`指的是`stmt`, 从指南中可以推测出这点. 通过阅读源代码, 也可以得知\n\n```java\npublic class LiveVariableAnalysis extends\n        AbstractDataflowAnalysis<Stmt, SetFact<Var>>\n```\n\n所以我们可以直接使用以下代码\n\n```java\nfor(Node node : cfg){\n    ...\n    analysis.transferNode(node, in, out);\n    ...\n}    \n```\n\n## 总结\n\n总的来说这次实验的难点在于框架代码的理解, 笔者在记录中提及了部分关键定义和代码理解, 只要耐心阅读框架代码, 相信一定会AC.\n","slug":"SPA-A1","published":1,"updated":"2024-10-28T16:47:00.283Z","comments":1,"layout":"post","photos":[],"_id":"cm2t94r390010gwilfe0u00ts","content":"<p><strong>NJU Static Program Analysis | Assignment-1 Live Variable\r\nAnalysis &amp; IterativeSolver.</strong></p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"实验信息\">实验信息</h2>\r\n<p>NJU软件分析, 实际上是静态分析(Static Program Analysis),\r\n是由李樾和谭添老师开设的面向本科生和研究生的一门课程,\r\n因为是本研共修选修课, 因此本课程内容较为基础,\r\n比较适合对静态分析感兴趣的初学者快速入门. 课程网站<a\r\nhref=\"https://tai-e.pascal-lab.net/lectures.html\"><strong>[Static\r\nProgram Analysis]</strong></a>, 配套课程<a\r\nhref=\"https://www.bilibili.com/video/BV1b7411K7P4\"><strong>[Bilibili|南京大学《软件分析》]</strong></a>.</p>\r\n<p>本课程实验(Assignments)基于Tai-e教学版框架,\r\n框架代码的获取和实验环境配置见课程网站, 笔者在约一年前曾自学过本课程,\r\n现今跟随2024Fall课程进度再次学习,\r\n由于上次学习中受到了多位前辈留下的实验记录帮助,\r\n遂于此记录笔者对各个实验的理解和记录. 限于笔者个人能力水平,\r\n恐难完整覆盖实验中的所有要点, 记录内容仅供参考, 如能帮助到您,\r\n乃笔者荣幸.</p>\r\n<p>鉴于 <strong>学术诚信(Academic Integrity)</strong> 要求, 笔者暂且\r\n<strong><em>不</em></strong> 公开源代码.</p>\r\n<h2 id=\"食用指南\">食用指南</h2>\r\n<p>本试验记录 <strong><em>不会</em></strong>\r\n从零开始讨论完成实验的知识点, 框架理解和注意事项.\r\n食用前请确保观看并理解了课程的P1-4内容, 尤其是对活跃变量分析(Live\r\nVariable Analysis)的算法和原理的基本掌握; 完整阅读过<a\r\nhref=\"https://tai-e.pascal-lab.net/pa1.html\"><strong>实验指南</strong></a>和框架代码后,\r\n再来参考本实验记录, 效果最佳.</p>\r\n<h2 id=\"任务目标\">任务目标</h2>\r\n<p>基于已有框架为java实现一个<strong>活跃变量分析</strong>,\r\n使用<strong>迭代求解器(Iterative Solver)</strong>.</p>\r\n<p>具体来说, 实现Your\r\nTask中涉及的三份文件中的6个<code>TODO API</code>.</p>\r\n<p>涉及的主要算法如下图所示:</p>\r\n<img src=\"/2024/10/20/SPA-A1/pic1.png\" class=\"\" title=\"pic1\">\r\n<p>作为第一个实验, 总体难度不高, 关键在于熟悉Tai-e框架,\r\n还望读者耐心阅读框架代码. 不妨善用Github\r\nCopilot或者ChatGPT帮助理解框架代码.</p>\r\n<h2 id=\"livevariableanalysis\">LiveVariableAnalysis</h2>\r\n<p>活跃变量分析算法中需要用到的具体方法, 实验指南中已有较为详细的说明,\r\n笔者在此不再赘述.</p>\r\n<img src=\"/2024/10/20/SPA-A1/pic2.png\" class=\"\" title=\"pic2\">\r\n<p>关于实现该部分所需的<code>API</code>,\r\n请阅读<code>Class SetFact</code>源码.</p>\r\n<p>笔者在此补充一些本实验所需java语法性质或语法糖.</p>\r\n<h3 id=\"class-optional\">Class Optional</h3>\r\n<p>Java 8引入的性质, 详细信息可查询文档或教程, 笔者在此给出其一<a\r\nhref=\"https://www.runoob.com/java/java8-optional-class.html\"><strong>[菜鸟教程|Java\r\nOptional]</strong></a>.</p>\r\n<p>与之类似的还有<code>java.util.List</code>,\r\n学习java语法来获得<code>Optional</code>和<code>List</code>中的内容.</p>\r\n<p>使用示例:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LValue</span> <span class=\"variable\">def</span> <span class=\"operator\">=</span> stmt.getDef().orElse(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"instanceof操作符\">instanceof操作符</h3>\r\n<p>java中用于判断类型的操作符, 详细信息可参考<a\r\nhref=\"https://www.baeldung.com/java-instanceof\"><strong>[Baeldung|Java\r\ninstanceof Operator]</strong></a>.</p>\r\n<p>使用示例:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(def <span class=\"keyword\">instanceof</span> Var)</span><br></pre></td></tr></table></figure>\r\n<p>需要注意的是, 如指南所示</p>\r\n<img src=\"/2024/10/20/SPA-A1/pic3.png\" class=\"\" title=\"pic3\">\r\n<p><code>Exp</code>下的<code>LValue</code>\r\n<code>RValue</code>包括多种类型,\r\n我们只需要关注<code>Var</code>类型的使用.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 为什么不需要考虑别的类型?</p>\r\n<p><code>LValue</code>只需要关注<code>Var</code>, 这是手册告诉我们的.\r\n<code>RValue</code>尽管有多种类型,\r\n但可以通过<code>getUses()</code>方法将Exp中涉及的变量等信息全部获取,\r\n此时右式是<code>UnaryExp</code>or<code>BinaryExp</code>对我们来说都不重要了,\r\n只需要将<code>getUses()</code>中的<code>Var</code>筛选出来处理即可.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>Additional:</strong> <code>getUses()</code>究竟返回什么?</p>\r\n<p>笔者在此引用<a\r\nhref=\"https://github.com/RicoloveFeng\">RicoloveFeng</a>在<a\r\nhref=\"https://github.com/RicoloveFeng/SPA-Freestyle-Guidance\">SPA-Freestyle-Guidance</a>中的解释</p>\r\n<p>你可能想知道 <code>getUses()</code> 除了 <code>x = y</code>\r\n这条语句之外还返回些什么东西.我们举点例子吧:</p>\r\n<ul>\r\n<li><p><code>x = y op z</code>: <code>[y, z, y op z]</code></p></li>\r\n<li><p><code>x = m(n)</code>:\r\n<code>[mClass, n, invokevirtual mClass.m(n)]</code></p></li>\r\n</ul>\r\n</blockquote>\r\n<h3 id=\"java引用机制\">java引用机制</h3>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">transferNode</span><span class=\"params\">(Stmt stmt, SetFact&lt;Var&gt; in, SetFact&lt;Var&gt; out)</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">//in = out.copy();</span></span><br><span class=\"line\">        in.set(out);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>尽管两行代码\"看起来\"是一致的,\r\n但注释掉的代码只会改变形参<code>in</code>的取值,\r\n不会改变实际的<code>Fact in</code>. 详细原理可以参考<a\r\nhref=\"https://zhuanlan.zhihu.com/p/453857961\"><strong>[知乎|java引用详解]</strong></a>.</p>\r\n<h2 id=\"solver-iterativesolver\">Solver &amp; IterativeSolver</h2>\r\n<p>本部分对应具体的算法流程.</p>\r\n<p>实际上指南写的已足够详细,\r\n包括如何从<code>cfg</code>中获取信息的方法和两处<code>TODO</code>对应的具体部分,\r\n使得即便对框架不甚理解, 仍然能完成该部分.</p>\r\n<p>唯一需要阅读代码知道的是可以通过<code>analysis.xx</code>的方式调用我们在上一节中实现的<code>API</code>.</p>\r\n<p><code>Solver</code>的<code>Init</code>需要注意的是由于我们<code>analysis.meetInto()</code>与算法中不完全相同,\r\n在初始化阶段我们同样要对<code>out Fact</code>进行赋空初始化.</p>\r\n<p><code>IterativeSovlver</code>部分是算法的循环部分,\r\n由于我们的分析器<code>BB</code>是<code>stmt</code>,\r\n因此不需要考虑Block内部的执行顺序,\r\n直接使用<code>analysis.transferNode</code>即可.</p>\r\n<p>另外, 上课时遍历迭代顺序取的是较优结果, 我们不需要过多考虑性能问题,\r\n因此以任意节点顺序迭代仍然可以得到结果, 这大大降低了代码实现的复杂性,\r\n只需要使用简单的<code>for(Node node : cfg)</code>即可.</p>\r\n<p>笔者同样补充一些可能对本实验理解有帮助的细节部分.</p>\r\n<h3 id=\"dataflowresult\">DataflowResult</h3>\r\n<p>其本质是两个<code>Nodes</code>对应的<code>inFacts</code>\r\n<code>outFacts</code>的集合, 通过给定的API获取和设置其中的值,\r\n其中<code>inFacts</code>和<code>outFacts</code>不过是<code>set</code>的封装,\r\n在抽象层面上意义和课程中的那个代表变量的二进制串相同.</p>\r\n<h3\r\nid=\"cfgnode-cfg-中的-node具体指什么\"><code>CFG&lt;Node&gt; cfg</code>\r\n中的 <code>Node</code>具体指什么?</h3>\r\n<p>在本次实验中, <code>Node node</code>指的是<code>stmt</code>,\r\n从指南中可以推测出这点. 通过阅读源代码, 也可以得知</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LiveVariableAnalysis</span> <span class=\"keyword\">extends</span></span><br><span class=\"line\">        <span class=\"title class_\">AbstractDataflowAnalysis</span>&lt;Stmt, SetFact&lt;Var&gt;&gt;</span><br></pre></td></tr></table></figure>\r\n<p>所以我们可以直接使用以下代码</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(Node node : cfg)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    analysis.transferNode(node, in, out);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>总的来说这次实验的难点在于框架代码的理解,\r\n笔者在记录中提及了部分关键定义和代码理解, 只要耐心阅读框架代码,\r\n相信一定会AC.</p>\r\n","length":1467,"excerpt":"<p><strong>NJU Static Program Analysis | Assignment-1 Live Variable\r\nAnalysis &amp; IterativeSolver.</strong></p>","more":"<h2 id=\"实验信息\">实验信息</h2>\r\n<p>NJU软件分析, 实际上是静态分析(Static Program Analysis),\r\n是由李樾和谭添老师开设的面向本科生和研究生的一门课程,\r\n因为是本研共修选修课, 因此本课程内容较为基础,\r\n比较适合对静态分析感兴趣的初学者快速入门. 课程网站<a\r\nhref=\"https://tai-e.pascal-lab.net/lectures.html\"><strong>[Static\r\nProgram Analysis]</strong></a>, 配套课程<a\r\nhref=\"https://www.bilibili.com/video/BV1b7411K7P4\"><strong>[Bilibili|南京大学《软件分析》]</strong></a>.</p>\r\n<p>本课程实验(Assignments)基于Tai-e教学版框架,\r\n框架代码的获取和实验环境配置见课程网站, 笔者在约一年前曾自学过本课程,\r\n现今跟随2024Fall课程进度再次学习,\r\n由于上次学习中受到了多位前辈留下的实验记录帮助,\r\n遂于此记录笔者对各个实验的理解和记录. 限于笔者个人能力水平,\r\n恐难完整覆盖实验中的所有要点, 记录内容仅供参考, 如能帮助到您,\r\n乃笔者荣幸.</p>\r\n<p>鉴于 <strong>学术诚信(Academic Integrity)</strong> 要求, 笔者暂且\r\n<strong><em>不</em></strong> 公开源代码.</p>\r\n<h2 id=\"食用指南\">食用指南</h2>\r\n<p>本试验记录 <strong><em>不会</em></strong>\r\n从零开始讨论完成实验的知识点, 框架理解和注意事项.\r\n食用前请确保观看并理解了课程的P1-4内容, 尤其是对活跃变量分析(Live\r\nVariable Analysis)的算法和原理的基本掌握; 完整阅读过<a\r\nhref=\"https://tai-e.pascal-lab.net/pa1.html\"><strong>实验指南</strong></a>和框架代码后,\r\n再来参考本实验记录, 效果最佳.</p>\r\n<h2 id=\"任务目标\">任务目标</h2>\r\n<p>基于已有框架为java实现一个<strong>活跃变量分析</strong>,\r\n使用<strong>迭代求解器(Iterative Solver)</strong>.</p>\r\n<p>具体来说, 实现Your\r\nTask中涉及的三份文件中的6个<code>TODO API</code>.</p>\r\n<p>涉及的主要算法如下图所示:</p>\r\n<img src=\"/2024/10/20/SPA-A1/pic1.png\" class=\"\" title=\"pic1\">\r\n<p>作为第一个实验, 总体难度不高, 关键在于熟悉Tai-e框架,\r\n还望读者耐心阅读框架代码. 不妨善用Github\r\nCopilot或者ChatGPT帮助理解框架代码.</p>\r\n<h2 id=\"livevariableanalysis\">LiveVariableAnalysis</h2>\r\n<p>活跃变量分析算法中需要用到的具体方法, 实验指南中已有较为详细的说明,\r\n笔者在此不再赘述.</p>\r\n<img src=\"/2024/10/20/SPA-A1/pic2.png\" class=\"\" title=\"pic2\">\r\n<p>关于实现该部分所需的<code>API</code>,\r\n请阅读<code>Class SetFact</code>源码.</p>\r\n<p>笔者在此补充一些本实验所需java语法性质或语法糖.</p>\r\n<h3 id=\"class-optional\">Class Optional</h3>\r\n<p>Java 8引入的性质, 详细信息可查询文档或教程, 笔者在此给出其一<a\r\nhref=\"https://www.runoob.com/java/java8-optional-class.html\"><strong>[菜鸟教程|Java\r\nOptional]</strong></a>.</p>\r\n<p>与之类似的还有<code>java.util.List</code>,\r\n学习java语法来获得<code>Optional</code>和<code>List</code>中的内容.</p>\r\n<p>使用示例:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LValue</span> <span class=\"variable\">def</span> <span class=\"operator\">=</span> stmt.getDef().orElse(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"instanceof操作符\">instanceof操作符</h3>\r\n<p>java中用于判断类型的操作符, 详细信息可参考<a\r\nhref=\"https://www.baeldung.com/java-instanceof\"><strong>[Baeldung|Java\r\ninstanceof Operator]</strong></a>.</p>\r\n<p>使用示例:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(def <span class=\"keyword\">instanceof</span> Var)</span><br></pre></td></tr></table></figure>\r\n<p>需要注意的是, 如指南所示</p>\r\n<img src=\"/2024/10/20/SPA-A1/pic3.png\" class=\"\" title=\"pic3\">\r\n<p><code>Exp</code>下的<code>LValue</code>\r\n<code>RValue</code>包括多种类型,\r\n我们只需要关注<code>Var</code>类型的使用.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 为什么不需要考虑别的类型?</p>\r\n<p><code>LValue</code>只需要关注<code>Var</code>, 这是手册告诉我们的.\r\n<code>RValue</code>尽管有多种类型,\r\n但可以通过<code>getUses()</code>方法将Exp中涉及的变量等信息全部获取,\r\n此时右式是<code>UnaryExp</code>or<code>BinaryExp</code>对我们来说都不重要了,\r\n只需要将<code>getUses()</code>中的<code>Var</code>筛选出来处理即可.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>Additional:</strong> <code>getUses()</code>究竟返回什么?</p>\r\n<p>笔者在此引用<a\r\nhref=\"https://github.com/RicoloveFeng\">RicoloveFeng</a>在<a\r\nhref=\"https://github.com/RicoloveFeng/SPA-Freestyle-Guidance\">SPA-Freestyle-Guidance</a>中的解释</p>\r\n<p>你可能想知道 <code>getUses()</code> 除了 <code>x = y</code>\r\n这条语句之外还返回些什么东西.我们举点例子吧:</p>\r\n<ul>\r\n<li><p><code>x = y op z</code>: <code>[y, z, y op z]</code></p></li>\r\n<li><p><code>x = m(n)</code>:\r\n<code>[mClass, n, invokevirtual mClass.m(n)]</code></p></li>\r\n</ul>\r\n</blockquote>\r\n<h3 id=\"java引用机制\">java引用机制</h3>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">transferNode</span><span class=\"params\">(Stmt stmt, SetFact&lt;Var&gt; in, SetFact&lt;Var&gt; out)</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">//in = out.copy();</span></span><br><span class=\"line\">        in.set(out);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>尽管两行代码\"看起来\"是一致的,\r\n但注释掉的代码只会改变形参<code>in</code>的取值,\r\n不会改变实际的<code>Fact in</code>. 详细原理可以参考<a\r\nhref=\"https://zhuanlan.zhihu.com/p/453857961\"><strong>[知乎|java引用详解]</strong></a>.</p>\r\n<h2 id=\"solver-iterativesolver\">Solver &amp; IterativeSolver</h2>\r\n<p>本部分对应具体的算法流程.</p>\r\n<p>实际上指南写的已足够详细,\r\n包括如何从<code>cfg</code>中获取信息的方法和两处<code>TODO</code>对应的具体部分,\r\n使得即便对框架不甚理解, 仍然能完成该部分.</p>\r\n<p>唯一需要阅读代码知道的是可以通过<code>analysis.xx</code>的方式调用我们在上一节中实现的<code>API</code>.</p>\r\n<p><code>Solver</code>的<code>Init</code>需要注意的是由于我们<code>analysis.meetInto()</code>与算法中不完全相同,\r\n在初始化阶段我们同样要对<code>out Fact</code>进行赋空初始化.</p>\r\n<p><code>IterativeSovlver</code>部分是算法的循环部分,\r\n由于我们的分析器<code>BB</code>是<code>stmt</code>,\r\n因此不需要考虑Block内部的执行顺序,\r\n直接使用<code>analysis.transferNode</code>即可.</p>\r\n<p>另外, 上课时遍历迭代顺序取的是较优结果, 我们不需要过多考虑性能问题,\r\n因此以任意节点顺序迭代仍然可以得到结果, 这大大降低了代码实现的复杂性,\r\n只需要使用简单的<code>for(Node node : cfg)</code>即可.</p>\r\n<p>笔者同样补充一些可能对本实验理解有帮助的细节部分.</p>\r\n<h3 id=\"dataflowresult\">DataflowResult</h3>\r\n<p>其本质是两个<code>Nodes</code>对应的<code>inFacts</code>\r\n<code>outFacts</code>的集合, 通过给定的API获取和设置其中的值,\r\n其中<code>inFacts</code>和<code>outFacts</code>不过是<code>set</code>的封装,\r\n在抽象层面上意义和课程中的那个代表变量的二进制串相同.</p>\r\n<h3\r\nid=\"cfgnode-cfg-中的-node具体指什么\"><code>CFG&lt;Node&gt; cfg</code>\r\n中的 <code>Node</code>具体指什么?</h3>\r\n<p>在本次实验中, <code>Node node</code>指的是<code>stmt</code>,\r\n从指南中可以推测出这点. 通过阅读源代码, 也可以得知</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LiveVariableAnalysis</span> <span class=\"keyword\">extends</span></span><br><span class=\"line\">        <span class=\"title class_\">AbstractDataflowAnalysis</span>&lt;Stmt, SetFact&lt;Var&gt;&gt;</span><br></pre></td></tr></table></figure>\r\n<p>所以我们可以直接使用以下代码</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(Node node : cfg)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    analysis.transferNode(node, in, out);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>总的来说这次实验的难点在于框架代码的理解,\r\n笔者在记录中提及了部分关键定义和代码理解, 只要耐心阅读框架代码,\r\n相信一定会AC.</p>"},{"title":"NJU静态分析|A2-Constant Propagation","date":"2024-10-28T12:59:35.000Z","hidden":false,"_content":"\n**NJU Static Program Analysis | Assignment-2 Constant Propagation & WorlistSolver.**\n\n<!--more-->\n\n## 实验信息与食用指南\n\n请翻阅[**[NJU静态分析|A1-Live Variable Analysis]**](https://la-pluma.github.io/2024/10/20/SPA-A1/#more).\n\n在此进行一点补充, 笔者的这份实验记录更像是Free Style版的**FAQ**. 因此请 ***确保*** 在理解了**理论知识**, **实验指南** 和 **框架代码** 后再参考本记录, 与A1相同, 本记录 ***不提供*** 源代码(~~或者说暂时没有~~).\n\n~~如果您对本实验记录中的内容感到困惑, 可能是因为笔者能力不足或您未能理解实验指南和框架代码, 同时本试验记录难以涵盖所有的坑, 还望海涵.~~\n\n## 实验目标\n\n基于**Tai-e**框架实现**常量传播算法**和**worklist求解器**.\n\n大致的框架代码如下:\n\n![pic1](SPA-A2/pic1.png)\n\n注意常量传播算法是**Forward & Must analysis**.\n\n## 部分重要框架代码带读\n\n~~我知道你们有些人肯定是不看框架代码的, 除非不得不用或者报错的时候.~~\n\n### IR & IRBuilder\n\nTai-e框架中的`IR`与课上教授的IR稍有不同, 以A2 test中的**Assign.java**为例,\n\n```java\n/*   From A2 test/Assign.java   */\nclass Assign {\n    void assign() {\n        int x = 1, y;\n        x = 2;\n        x = 3;\n        x = 4;\n        y = x;\n    }\n}\n```\n\n经过tai-e框架的分析后会得到\n\n```java\n-------------------- <Assign: void <init>()> (constprop) --------------------\n[0@L1] invokespecial %this.<java.lang.Object: void <init>()>(); {}\n[1@L1] return; {}\n\n-------------------- <Assign: void assign()> (constprop) --------------------\n[0@L4] x = 1;   {x=1}\n[1@L5] x = 2;   {x=2}\n[2@L6] x = 3;   {x=3}\n[3@L7] x = 4;   {x=4}\n[4@L8] y = x;   {x=4, y=4}\n[5@L8] return;  {x=4, y=4}\n\n```\n\n结合**IR** & **IRBuilder**(可翻阅[**[官方手册]**](https://tai-e.pascal-lab.net/docs/index.html)),\n\n![pic2](SPA-A2/pic2.png)\n\n~~IR我懒得贴了~~\n\n`IR`的基本单元是**method** (请意识到java是oop语言), `IRBuilder`提供了分析单个方法的API`buildIR(JMethod method)`和分析整个`class hierarchy`(不明白, 等到A4就明白了, 笑)中的所有方法的API`buildAll()`\n\n结合`Stmt` `Exp` 和 `CFG`, 我们可以得到这样的一个示意图(由于笔者未阅读全部的源码实现, 可能会有所出入, 但大致如此).\n\n![pic3](SPA-A2/pic3.png)\n\n> **Tips:** 严格来说`CFG`并不存储`Node`(本实验中指`Stmt`, 见A1试验记录说明), 只存储`Stmt`的关联信息, 但为了方便图示遂如此展示. 至于为何左值和右值都是`Exp`, 请翻阅A1官方实验指南中对`Exp`的图示表示部分.\n\n### DefinitionStmt\n\n尽管理论上不需要这个类也可以完成实验(`Stmt`中的顶层方法足以实现), 但既然框架提供了这么好用的API, 方便我们写出更优雅的代码, 为什么不用呢?\n\n![pic4.png](SPA-A2/pic4.png)\n\n`DefinitionStmt`为我们提供了两个非常好用的API, `getLValue()`和`getRValue`可以直接获取到左右式的`Exp`(希望你还记得`LValue`&`RValue` extends `Exp`), 而不需要像`Stmt`中的`getDef()` & `getUses()` 做较为繁琐的判断和筛选(如果对`getUses()`感到困惑, 也还请翻阅A1实验记录, 里面有解释和参考来源).\n\n需要注意的是, `getLValue()`可能会返回`null`.\n\n## ConstantPropagation\n\n与活跃变量分析类似, 我们需要完成5个API的功能.\n\n### newBoundaryFact() & newInitialFact()\n\n需要注意的是, 本次存储分析结果的数据结构是`CPFact`, 与A1相同, 在完成本次实验代码之前需要了解相关API的用法.\n\n既然是**Must Analysis**, 我们需要将初值赋为空, 但需要注意的是, 我们的**Analysis**仅分析语句, 在进入第一条语句之前, 是否有什么东西需要初始化?\n\n这个问题就对应了指南中为什么`BoundaryInit` 要通过 `getIR().getParas()`获取参数并赋值`NAC`的提示.\n\n在对`IR`的解释中我们提到过, `IR`的基本分析单元是**method**, 即函数, 函数就可能有传入的参数, 这些参数易见**不是Constant**, 因此要赋值为`NAC`\n\n> **Tips:** 如果是Constant干嘛还要传参, 即便真的这么做了, 我们的分析也可以满足**safe-approximation**.\n\n这部分是在方法体(函数语句)执行前就完成的初始化, 因此我们需要赋值给`Entry`的`outFact`.\n\n### meetValue() & meetInto()\n\n`meetValue()`的完成没有任何难点, 只需要照抄ppt中的规则即可.\n\n![pic5](SPA-A2/pic5.png)\n\n同样的, 完成这部分代码需要阅读`Class Value`的源码API和注释.\n\n关于`meetInto()`, 如果没有阅读`CPFact`中的`update()`方法注释, 就不知道可以写出如此优雅的代码来合并`Var`的`Value`值:\n\n```java\ntarget.update(var, meetValue(fact.get(var), target.get(var)));\n```\n\n![pic6](SPA-A2/pic6.png)\n\n### transferNode() & evaluate()\n\n毫无疑问, 这是本次实验中最难最核心的一部分, 细节非常多, 当被卡hidden test的时候, 大概率寄在这里.\n\n笔者建议在`transferNode()`中处理`Stmt`的左值def部分, 在`evaluate()`中处理右值exp部分. 这是比较符合功能分离的写法, 当然, 也可以选择在 `transferNode()`中处理`Var`和`IntLiteral`, `evaluate()`只负责处理`BinaryExp`的计算值. 笔者在此按第一种写法进行说明.\n\n#### transferNode()\n\n这个函数中你需要依次做(次流程可能存在可以优化的部分, 不必完全照做):\n\n- 保存`outFact`原值, 将`inFact`赋值给`outFact`.\n\n- 判断`Node`(`Stmt`)是否为`DefinitionStmt`\n\n- 判断是否拥有**合法**左值, 包括`def`的类型`Var`和`Var`中的`ValueType`是否为`Int`, 如果不是, 本次实验中可以认为是`nop`空操作. 不需要为这个`Stmt`做任何分析, 直接将`inFact` copy给 `outFact`即可.\n\n    > **Tips:** IDEA教给我一个很有意思的语法糖\n    >\n    ```java\n    if(stmt instanceof DefinitionStmt def_stmt){\n        LValue def = def_stmt.getLValue();\n        ...\n    }\n    ```\n    >\n    > 这个用法可以避开繁琐的类型转化, 在判断类型时便做了类型转化.\n\n- 计算`Stmt`的右值(通过`evaluate()`获得), 并更新`outFact`中的相应`Var def`(笔者在此并未使用`update`方法的返回值, 或许可从此处入手优化效率, 但笔者不能保证其正确性)\n\n- 比较`outFact`是否更新返回布尔值.\n\n#### evaluate()\n\n为了完成这个方法, 代码的大致框架应该是这个样子:\n\n```java\npublic static Value evaluate(Exp exp, CPFact in) {\n    if(exp instanceof Var){\n        ...\n        return /*Value*/\n    }\n    if(exp instanceof IntLiteral){\n        ...\n        return /*Value*/\n    }\n    if(exp instanceof BinaryExp binary_exp){\n        Value left = ...;\n        Value right = ...;\n        // Operand may not Int or may not Constant\n        // you'd better do it first\n        if(/*left HoldInt && right HoldInt*/){\n            //you can get Condition Info form ppt\n            if(/*left is Constant && right is constant*/){\n                if (binary_exp instanceof ArithmeticExp arithmetic_exp){\n                    ...\n                    switch(op){\n                        //also should attention to DIV 0 return Undef\n                        case ADD: ...\n                        ...\n                    }\n                }\n                if (binary_exp instanceof BitwiseExp bitwise_exp){\n                    ...\n                    switch(op){\n                        case AND: ...\n                        ...\n                    }\n                }\n                if(...)\n                ...\n            }\n            else if(/*left is NAC || right is NAC*/){\n                //you should do DIV & REM for 0 judgement there\n                ...\n            }\n            else if(/*other condition*/){\n                ...\n            }\n            else if(/*other condition*/){\n                ...\n            }\n            ...\n        }\n        //for over-approximation\n        return Value.getNAC();\n    }\n    //such as x = o.f()\n    //for over-approximation\n    return Value.getNAC(); \n}\n```\n\n其中二元表达式计算规则见ppt所示,\n\n![pic7](SPA-A2/pic7.png)\n\n笔者在此给出一些细节和边界条件, 也可以通过阅读上述代码框架获得细节提示:\n\n- `exp`中的操作数可能不是`IntType`, 所以你需要做一个`canHoldInt()`判断, 非法`exp`为了安全性应赋值为`NAC`\n\n- 实验指南中提到, 对于`/`和`%`的除零错误, 应当给出`Undef`, **即使**被除数是`NAC`.\n\n## Sovler & WorkListSolver\n\n### Sovler Init\n\n照着算法流程前三行写便是, 但这里要提到框架代码的\"**robustness**\".\n\n尽管从分析流程上来看, 我们不应该分析`Node Entry`, 但是框架代码允许我们这样做. 这时框架代码会认为`Node Entry`是一条`nop Stmt`, 不会做constant update, 因此只要在`Init`部分对`Entry`的`inFact`和`outFact`都赋上初值, 就不需要在worklist中考虑`Entry`的处理了.\n\n### WorkListSolver doSolveForward\n\n**worklist**是一种非常简单的算法, 笔者在此不对算法实现过多赘述. 注意在实现worklist的时候可以使用java自带的容器`Queue` & `ArrayList`.\n\n关于**worklist**的初始化问题, 需要注意的是应当为其加入所有的`Node`, 如果只加入`Entry`的后继, 会产生问题, 笔者在此给出一个例子. (感谢课程群中[**日居月诸**](https://github.com/rijuyuezhu)大佬和另一位不知道github链接的大佬构造的反例)\n\n```java\n-------------------- <Assign: void assign()> (constprop) --------------------\n[0@L4] nop;     {}\n[0@L4] x = 1;   {x=1}\n[1@L5] x = 2;   {x=2}\n[2@L6] x = 3;   {x=3}\n[3@L7] x = 4;   {x=4}\n[4@L8] y = x;   {x=4, y=4}\n[5@L8] return;  {x=4, y=4}\n\n```\n\n在这个例子中, `Entry outFact`初始化为`{}`(没有参数), 然而`Stmt0` 的 `outFact` 同样初始化为`{}`, 如果只添加`Entry`的后继`{Stmt0}`, 会导致worklist在分析完`Stmt0`后错误终止.\n\n## 总结\n\n本次实验应该是所有Assignment中代码量最多的一次, 细节也是让人头皮发麻, 还望能静下心来看代码和debug, 祝早日AC!\n","source":"_posts/SPA-A2.md","raw":"---\ntitle: NJU静态分析|A2-Constant Propagation\ndate: 2024-10-28 20:59:35\nhidden: false\ntags:\n- NJU\n- 静态分析\ncategories:\n- NJU静态分析实验记录\n---\n\n**NJU Static Program Analysis | Assignment-2 Constant Propagation & WorlistSolver.**\n\n<!--more-->\n\n## 实验信息与食用指南\n\n请翻阅[**[NJU静态分析|A1-Live Variable Analysis]**](https://la-pluma.github.io/2024/10/20/SPA-A1/#more).\n\n在此进行一点补充, 笔者的这份实验记录更像是Free Style版的**FAQ**. 因此请 ***确保*** 在理解了**理论知识**, **实验指南** 和 **框架代码** 后再参考本记录, 与A1相同, 本记录 ***不提供*** 源代码(~~或者说暂时没有~~).\n\n~~如果您对本实验记录中的内容感到困惑, 可能是因为笔者能力不足或您未能理解实验指南和框架代码, 同时本试验记录难以涵盖所有的坑, 还望海涵.~~\n\n## 实验目标\n\n基于**Tai-e**框架实现**常量传播算法**和**worklist求解器**.\n\n大致的框架代码如下:\n\n![pic1](SPA-A2/pic1.png)\n\n注意常量传播算法是**Forward & Must analysis**.\n\n## 部分重要框架代码带读\n\n~~我知道你们有些人肯定是不看框架代码的, 除非不得不用或者报错的时候.~~\n\n### IR & IRBuilder\n\nTai-e框架中的`IR`与课上教授的IR稍有不同, 以A2 test中的**Assign.java**为例,\n\n```java\n/*   From A2 test/Assign.java   */\nclass Assign {\n    void assign() {\n        int x = 1, y;\n        x = 2;\n        x = 3;\n        x = 4;\n        y = x;\n    }\n}\n```\n\n经过tai-e框架的分析后会得到\n\n```java\n-------------------- <Assign: void <init>()> (constprop) --------------------\n[0@L1] invokespecial %this.<java.lang.Object: void <init>()>(); {}\n[1@L1] return; {}\n\n-------------------- <Assign: void assign()> (constprop) --------------------\n[0@L4] x = 1;   {x=1}\n[1@L5] x = 2;   {x=2}\n[2@L6] x = 3;   {x=3}\n[3@L7] x = 4;   {x=4}\n[4@L8] y = x;   {x=4, y=4}\n[5@L8] return;  {x=4, y=4}\n\n```\n\n结合**IR** & **IRBuilder**(可翻阅[**[官方手册]**](https://tai-e.pascal-lab.net/docs/index.html)),\n\n![pic2](SPA-A2/pic2.png)\n\n~~IR我懒得贴了~~\n\n`IR`的基本单元是**method** (请意识到java是oop语言), `IRBuilder`提供了分析单个方法的API`buildIR(JMethod method)`和分析整个`class hierarchy`(不明白, 等到A4就明白了, 笑)中的所有方法的API`buildAll()`\n\n结合`Stmt` `Exp` 和 `CFG`, 我们可以得到这样的一个示意图(由于笔者未阅读全部的源码实现, 可能会有所出入, 但大致如此).\n\n![pic3](SPA-A2/pic3.png)\n\n> **Tips:** 严格来说`CFG`并不存储`Node`(本实验中指`Stmt`, 见A1试验记录说明), 只存储`Stmt`的关联信息, 但为了方便图示遂如此展示. 至于为何左值和右值都是`Exp`, 请翻阅A1官方实验指南中对`Exp`的图示表示部分.\n\n### DefinitionStmt\n\n尽管理论上不需要这个类也可以完成实验(`Stmt`中的顶层方法足以实现), 但既然框架提供了这么好用的API, 方便我们写出更优雅的代码, 为什么不用呢?\n\n![pic4.png](SPA-A2/pic4.png)\n\n`DefinitionStmt`为我们提供了两个非常好用的API, `getLValue()`和`getRValue`可以直接获取到左右式的`Exp`(希望你还记得`LValue`&`RValue` extends `Exp`), 而不需要像`Stmt`中的`getDef()` & `getUses()` 做较为繁琐的判断和筛选(如果对`getUses()`感到困惑, 也还请翻阅A1实验记录, 里面有解释和参考来源).\n\n需要注意的是, `getLValue()`可能会返回`null`.\n\n## ConstantPropagation\n\n与活跃变量分析类似, 我们需要完成5个API的功能.\n\n### newBoundaryFact() & newInitialFact()\n\n需要注意的是, 本次存储分析结果的数据结构是`CPFact`, 与A1相同, 在完成本次实验代码之前需要了解相关API的用法.\n\n既然是**Must Analysis**, 我们需要将初值赋为空, 但需要注意的是, 我们的**Analysis**仅分析语句, 在进入第一条语句之前, 是否有什么东西需要初始化?\n\n这个问题就对应了指南中为什么`BoundaryInit` 要通过 `getIR().getParas()`获取参数并赋值`NAC`的提示.\n\n在对`IR`的解释中我们提到过, `IR`的基本分析单元是**method**, 即函数, 函数就可能有传入的参数, 这些参数易见**不是Constant**, 因此要赋值为`NAC`\n\n> **Tips:** 如果是Constant干嘛还要传参, 即便真的这么做了, 我们的分析也可以满足**safe-approximation**.\n\n这部分是在方法体(函数语句)执行前就完成的初始化, 因此我们需要赋值给`Entry`的`outFact`.\n\n### meetValue() & meetInto()\n\n`meetValue()`的完成没有任何难点, 只需要照抄ppt中的规则即可.\n\n![pic5](SPA-A2/pic5.png)\n\n同样的, 完成这部分代码需要阅读`Class Value`的源码API和注释.\n\n关于`meetInto()`, 如果没有阅读`CPFact`中的`update()`方法注释, 就不知道可以写出如此优雅的代码来合并`Var`的`Value`值:\n\n```java\ntarget.update(var, meetValue(fact.get(var), target.get(var)));\n```\n\n![pic6](SPA-A2/pic6.png)\n\n### transferNode() & evaluate()\n\n毫无疑问, 这是本次实验中最难最核心的一部分, 细节非常多, 当被卡hidden test的时候, 大概率寄在这里.\n\n笔者建议在`transferNode()`中处理`Stmt`的左值def部分, 在`evaluate()`中处理右值exp部分. 这是比较符合功能分离的写法, 当然, 也可以选择在 `transferNode()`中处理`Var`和`IntLiteral`, `evaluate()`只负责处理`BinaryExp`的计算值. 笔者在此按第一种写法进行说明.\n\n#### transferNode()\n\n这个函数中你需要依次做(次流程可能存在可以优化的部分, 不必完全照做):\n\n- 保存`outFact`原值, 将`inFact`赋值给`outFact`.\n\n- 判断`Node`(`Stmt`)是否为`DefinitionStmt`\n\n- 判断是否拥有**合法**左值, 包括`def`的类型`Var`和`Var`中的`ValueType`是否为`Int`, 如果不是, 本次实验中可以认为是`nop`空操作. 不需要为这个`Stmt`做任何分析, 直接将`inFact` copy给 `outFact`即可.\n\n    > **Tips:** IDEA教给我一个很有意思的语法糖\n    >\n    ```java\n    if(stmt instanceof DefinitionStmt def_stmt){\n        LValue def = def_stmt.getLValue();\n        ...\n    }\n    ```\n    >\n    > 这个用法可以避开繁琐的类型转化, 在判断类型时便做了类型转化.\n\n- 计算`Stmt`的右值(通过`evaluate()`获得), 并更新`outFact`中的相应`Var def`(笔者在此并未使用`update`方法的返回值, 或许可从此处入手优化效率, 但笔者不能保证其正确性)\n\n- 比较`outFact`是否更新返回布尔值.\n\n#### evaluate()\n\n为了完成这个方法, 代码的大致框架应该是这个样子:\n\n```java\npublic static Value evaluate(Exp exp, CPFact in) {\n    if(exp instanceof Var){\n        ...\n        return /*Value*/\n    }\n    if(exp instanceof IntLiteral){\n        ...\n        return /*Value*/\n    }\n    if(exp instanceof BinaryExp binary_exp){\n        Value left = ...;\n        Value right = ...;\n        // Operand may not Int or may not Constant\n        // you'd better do it first\n        if(/*left HoldInt && right HoldInt*/){\n            //you can get Condition Info form ppt\n            if(/*left is Constant && right is constant*/){\n                if (binary_exp instanceof ArithmeticExp arithmetic_exp){\n                    ...\n                    switch(op){\n                        //also should attention to DIV 0 return Undef\n                        case ADD: ...\n                        ...\n                    }\n                }\n                if (binary_exp instanceof BitwiseExp bitwise_exp){\n                    ...\n                    switch(op){\n                        case AND: ...\n                        ...\n                    }\n                }\n                if(...)\n                ...\n            }\n            else if(/*left is NAC || right is NAC*/){\n                //you should do DIV & REM for 0 judgement there\n                ...\n            }\n            else if(/*other condition*/){\n                ...\n            }\n            else if(/*other condition*/){\n                ...\n            }\n            ...\n        }\n        //for over-approximation\n        return Value.getNAC();\n    }\n    //such as x = o.f()\n    //for over-approximation\n    return Value.getNAC(); \n}\n```\n\n其中二元表达式计算规则见ppt所示,\n\n![pic7](SPA-A2/pic7.png)\n\n笔者在此给出一些细节和边界条件, 也可以通过阅读上述代码框架获得细节提示:\n\n- `exp`中的操作数可能不是`IntType`, 所以你需要做一个`canHoldInt()`判断, 非法`exp`为了安全性应赋值为`NAC`\n\n- 实验指南中提到, 对于`/`和`%`的除零错误, 应当给出`Undef`, **即使**被除数是`NAC`.\n\n## Sovler & WorkListSolver\n\n### Sovler Init\n\n照着算法流程前三行写便是, 但这里要提到框架代码的\"**robustness**\".\n\n尽管从分析流程上来看, 我们不应该分析`Node Entry`, 但是框架代码允许我们这样做. 这时框架代码会认为`Node Entry`是一条`nop Stmt`, 不会做constant update, 因此只要在`Init`部分对`Entry`的`inFact`和`outFact`都赋上初值, 就不需要在worklist中考虑`Entry`的处理了.\n\n### WorkListSolver doSolveForward\n\n**worklist**是一种非常简单的算法, 笔者在此不对算法实现过多赘述. 注意在实现worklist的时候可以使用java自带的容器`Queue` & `ArrayList`.\n\n关于**worklist**的初始化问题, 需要注意的是应当为其加入所有的`Node`, 如果只加入`Entry`的后继, 会产生问题, 笔者在此给出一个例子. (感谢课程群中[**日居月诸**](https://github.com/rijuyuezhu)大佬和另一位不知道github链接的大佬构造的反例)\n\n```java\n-------------------- <Assign: void assign()> (constprop) --------------------\n[0@L4] nop;     {}\n[0@L4] x = 1;   {x=1}\n[1@L5] x = 2;   {x=2}\n[2@L6] x = 3;   {x=3}\n[3@L7] x = 4;   {x=4}\n[4@L8] y = x;   {x=4, y=4}\n[5@L8] return;  {x=4, y=4}\n\n```\n\n在这个例子中, `Entry outFact`初始化为`{}`(没有参数), 然而`Stmt0` 的 `outFact` 同样初始化为`{}`, 如果只添加`Entry`的后继`{Stmt0}`, 会导致worklist在分析完`Stmt0`后错误终止.\n\n## 总结\n\n本次实验应该是所有Assignment中代码量最多的一次, 细节也是让人头皮发麻, 还望能静下心来看代码和debug, 祝早日AC!\n","slug":"SPA-A2","published":1,"updated":"2024-10-28T16:46:51.367Z","comments":1,"layout":"post","photos":[],"_id":"cm2t94r3a0013gwil1h25e0c8","content":"<p><strong>NJU Static Program Analysis | Assignment-2 Constant\r\nPropagation &amp; WorlistSolver.</strong></p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"实验信息与食用指南\">实验信息与食用指南</h2>\r\n<p>请翻阅<a\r\nhref=\"https://la-pluma.github.io/2024/10/20/SPA-A1/#more\"><strong>[NJU静态分析|A1-Live\r\nVariable Analysis]</strong></a>.</p>\r\n<p>在此进行一点补充, 笔者的这份实验记录更像是Free\r\nStyle版的<strong>FAQ</strong>. 因此请 <strong><em>确保</em></strong>\r\n在理解了<strong>理论知识</strong>, <strong>实验指南</strong> 和\r\n<strong>框架代码</strong> 后再参考本记录, 与A1相同, 本记录\r\n<strong><em>不提供</em></strong> 源代码(<del>或者说暂时没有</del>).</p>\r\n<p><del>如果您对本实验记录中的内容感到困惑,\r\n可能是因为笔者能力不足或您未能理解实验指南和框架代码,\r\n同时本试验记录难以涵盖所有的坑, 还望海涵.</del></p>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>Tai-e</strong>框架实现<strong>常量传播算法</strong>和<strong>worklist求解器</strong>.</p>\r\n<p>大致的框架代码如下:</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic1.png\" class=\"\" title=\"pic1\">\r\n<p>注意常量传播算法是<strong>Forward &amp; Must analysis</strong>.</p>\r\n<h2 id=\"部分重要框架代码带读\">部分重要框架代码带读</h2>\r\n<p><del>我知道你们有些人肯定是不看框架代码的,\r\n除非不得不用或者报错的时候.</del></p>\r\n<h3 id=\"ir-irbuilder\">IR &amp; IRBuilder</h3>\r\n<p>Tai-e框架中的<code>IR</code>与课上教授的IR稍有不同, 以A2\r\ntest中的<strong>Assign.java</strong>为例,</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*   From A2 test/Assign.java   */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Assign</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, y;</span><br><span class=\"line\">        x = <span class=\"number\">2</span>;</span><br><span class=\"line\">        x = <span class=\"number\">3</span>;</span><br><span class=\"line\">        x = <span class=\"number\">4</span>;</span><br><span class=\"line\">        y = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>经过tai-e框架的分析后会得到</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;Assign: <span class=\"keyword\">void</span> &lt;init&gt;()&gt; (constprop) --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L1</span>] invokespecial %<span class=\"built_in\">this</span>.&lt;java.lang.Object: <span class=\"keyword\">void</span> &lt;init&gt;()&gt;(); &#123;&#125;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L1</span>] <span class=\"keyword\">return</span>; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------- &lt;Assign: <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span>&gt; (constprop) --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;   &#123;x=<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] x = <span class=\"number\">2</span>;   &#123;x=<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L6</span>] x = <span class=\"number\">3</span>;   &#123;x=<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] x = <span class=\"number\">4</span>;   &#123;x=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L8</span>] y = x;   &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] <span class=\"keyword\">return</span>;  &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>结合<strong>IR</strong> &amp; <strong>IRBuilder</strong>(可翻阅<a\r\nhref=\"https://tai-e.pascal-lab.net/docs/index.html\"><strong>[官方手册]</strong></a>),</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic2.png\" class=\"\" title=\"pic2\">\r\n<p><del>IR我懒得贴了</del></p>\r\n<p><code>IR</code>的基本单元是<strong>method</strong>\r\n(请意识到java是oop语言),\r\n<code>IRBuilder</code>提供了分析单个方法的API<code>buildIR(JMethod method)</code>和分析整个<code>class hierarchy</code>(不明白,\r\n等到A4就明白了, 笑)中的所有方法的API<code>buildAll()</code></p>\r\n<p>结合<code>Stmt</code> <code>Exp</code> 和 <code>CFG</code>,\r\n我们可以得到这样的一个示意图(由于笔者未阅读全部的源码实现,\r\n可能会有所出入, 但大致如此).</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic3.png\" class=\"\" title=\"pic3\">\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n严格来说<code>CFG</code>并不存储<code>Node</code>(本实验中指<code>Stmt</code>,\r\n见A1试验记录说明), 只存储<code>Stmt</code>的关联信息,\r\n但为了方便图示遂如此展示. 至于为何左值和右值都是<code>Exp</code>,\r\n请翻阅A1官方实验指南中对<code>Exp</code>的图示表示部分.</p>\r\n</blockquote>\r\n<h3 id=\"definitionstmt\">DefinitionStmt</h3>\r\n<p>尽管理论上不需要这个类也可以完成实验(<code>Stmt</code>中的顶层方法足以实现),\r\n但既然框架提供了这么好用的API, 方便我们写出更优雅的代码,\r\n为什么不用呢?</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic4.png\" class=\"\" title=\"pic4.png\">\r\n<p><code>DefinitionStmt</code>为我们提供了两个非常好用的API,\r\n<code>getLValue()</code>和<code>getRValue</code>可以直接获取到左右式的<code>Exp</code>(希望你还记得<code>LValue</code>&amp;<code>RValue</code>\r\nextends <code>Exp</code>),\r\n而不需要像<code>Stmt</code>中的<code>getDef()</code> &amp;\r\n<code>getUses()</code>\r\n做较为繁琐的判断和筛选(如果对<code>getUses()</code>感到困惑,\r\n也还请翻阅A1实验记录, 里面有解释和参考来源).</p>\r\n<p>需要注意的是,\r\n<code>getLValue()</code>可能会返回<code>null</code>.</p>\r\n<h2 id=\"constantpropagation\">ConstantPropagation</h2>\r\n<p>与活跃变量分析类似, 我们需要完成5个API的功能.</p>\r\n<h3 id=\"newboundaryfact-newinitialfact\">newBoundaryFact() &amp;\r\nnewInitialFact()</h3>\r\n<p>需要注意的是, 本次存储分析结果的数据结构是<code>CPFact</code>,\r\n与A1相同, 在完成本次实验代码之前需要了解相关API的用法.</p>\r\n<p>既然是<strong>Must Analysis</strong>, 我们需要将初值赋为空,\r\n但需要注意的是, 我们的<strong>Analysis</strong>仅分析语句,\r\n在进入第一条语句之前, 是否有什么东西需要初始化?</p>\r\n<p>这个问题就对应了指南中为什么<code>BoundaryInit</code> 要通过\r\n<code>getIR().getParas()</code>获取参数并赋值<code>NAC</code>的提示.</p>\r\n<p>在对<code>IR</code>的解释中我们提到过,\r\n<code>IR</code>的基本分析单元是<strong>method</strong>, 即函数,\r\n函数就可能有传入的参数, 这些参数易见<strong>不是Constant</strong>,\r\n因此要赋值为<code>NAC</code></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 如果是Constant干嘛还要传参, 即便真的这么做了,\r\n我们的分析也可以满足<strong>safe-approximation</strong>.</p>\r\n</blockquote>\r\n<p>这部分是在方法体(函数语句)执行前就完成的初始化,\r\n因此我们需要赋值给<code>Entry</code>的<code>outFact</code>.</p>\r\n<h3 id=\"meetvalue-meetinto\">meetValue() &amp; meetInto()</h3>\r\n<p><code>meetValue()</code>的完成没有任何难点,\r\n只需要照抄ppt中的规则即可.</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic5.png\" class=\"\" title=\"pic5\">\r\n<p>同样的,\r\n完成这部分代码需要阅读<code>Class Value</code>的源码API和注释.</p>\r\n<p>关于<code>meetInto()</code>,\r\n如果没有阅读<code>CPFact</code>中的<code>update()</code>方法注释,\r\n就不知道可以写出如此优雅的代码来合并<code>Var</code>的<code>Value</code>值:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.update(<span class=\"keyword\">var</span>, meetValue(fact.get(<span class=\"keyword\">var</span>), target.get(<span class=\"keyword\">var</span>)));</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/10/28/SPA-A2/pic6.png\" class=\"\" title=\"pic6\">\r\n<h3 id=\"transfernode-evaluate\">transferNode() &amp; evaluate()</h3>\r\n<p>毫无疑问, 这是本次实验中最难最核心的一部分, 细节非常多, 当被卡hidden\r\ntest的时候, 大概率寄在这里.</p>\r\n<p>笔者建议在<code>transferNode()</code>中处理<code>Stmt</code>的左值def部分,\r\n在<code>evaluate()</code>中处理右值exp部分. 这是比较符合功能分离的写法,\r\n当然, 也可以选择在\r\n<code>transferNode()</code>中处理<code>Var</code>和<code>IntLiteral</code>,\r\n<code>evaluate()</code>只负责处理<code>BinaryExp</code>的计算值.\r\n笔者在此按第一种写法进行说明.</p>\r\n<h4 id=\"transfernode\">transferNode()</h4>\r\n<p>这个函数中你需要依次做(次流程可能存在可以优化的部分,\r\n不必完全照做):</p>\r\n<ul>\r\n<li><p>保存<code>outFact</code>原值,\r\n将<code>inFact</code>赋值给<code>outFact</code>.</p></li>\r\n<li><p>判断<code>Node</code>(<code>Stmt</code>)是否为<code>DefinitionStmt</code></p></li>\r\n<li><p>判断是否拥有<strong>合法</strong>左值,\r\n包括<code>def</code>的类型<code>Var</code>和<code>Var</code>中的<code>ValueType</code>是否为<code>Int</code>,\r\n如果不是, 本次实验中可以认为是<code>nop</code>空操作.\r\n不需要为这个<code>Stmt</code>做任何分析, 直接将<code>inFact</code>\r\ncopy给 <code>outFact</code>即可.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> IDEA教给我一个很有意思的语法糖</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> DefinitionStmt def_stmt)&#123;</span><br><span class=\"line\">    <span class=\"type\">LValue</span> <span class=\"variable\">def</span> <span class=\"operator\">=</span> def_stmt.getLValue();</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>这个用法可以避开繁琐的类型转化, 在判断类型时便做了类型转化.</p>\r\n</blockquote></li>\r\n<li><p>计算<code>Stmt</code>的右值(通过<code>evaluate()</code>获得),\r\n并更新<code>outFact</code>中的相应<code>Var def</code>(笔者在此并未使用<code>update</code>方法的返回值,\r\n或许可从此处入手优化效率, 但笔者不能保证其正确性)</p></li>\r\n<li><p>比较<code>outFact</code>是否更新返回布尔值.</p></li>\r\n</ul>\r\n<h4 id=\"evaluate\">evaluate()</h4>\r\n<p>为了完成这个方法, 代码的大致框架应该是这个样子:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Value <span class=\"title function_\">evaluate</span><span class=\"params\">(Exp exp, CPFact in)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exp <span class=\"keyword\">instanceof</span> Var)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">/*Value*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exp <span class=\"keyword\">instanceof</span> IntLiteral)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">/*Value*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exp <span class=\"keyword\">instanceof</span> BinaryExp binary_exp)&#123;</span><br><span class=\"line\">        <span class=\"type\">Value</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> ...;</span><br><span class=\"line\">        <span class=\"type\">Value</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> ...;</span><br><span class=\"line\">        <span class=\"comment\">// Operand may not Int or may not Constant</span></span><br><span class=\"line\">        <span class=\"comment\">// you&#x27;d better do it first</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"comment\">/*left HoldInt &amp;&amp; right HoldInt*/</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//you can get Condition Info form ppt</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"comment\">/*left is Constant &amp;&amp; right is constant*/</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binary_exp <span class=\"keyword\">instanceof</span> ArithmeticExp arithmetic_exp)&#123;</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span>(op)&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//also should attention to DIV 0 return Undef</span></span><br><span class=\"line\">                        <span class=\"keyword\">case</span> ADD: ...</span><br><span class=\"line\">                        ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binary_exp <span class=\"keyword\">instanceof</span> BitwiseExp bitwise_exp)&#123;</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span>(op)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> AND: ...</span><br><span class=\"line\">                        ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(...)</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"comment\">/*left is NAC || right is NAC*/</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//you should do DIV &amp; REM for 0 judgement there</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"comment\">/*other condition*/</span>)&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"comment\">/*other condition*/</span>)&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//for over-approximation</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Value.getNAC();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//such as x = o.f()</span></span><br><span class=\"line\">    <span class=\"comment\">//for over-approximation</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Value.getNAC(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>其中二元表达式计算规则见ppt所示,</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic7.png\" class=\"\" title=\"pic7\">\r\n<p>笔者在此给出一些细节和边界条件,\r\n也可以通过阅读上述代码框架获得细节提示:</p>\r\n<ul>\r\n<li><p><code>exp</code>中的操作数可能不是<code>IntType</code>,\r\n所以你需要做一个<code>canHoldInt()</code>判断,\r\n非法<code>exp</code>为了安全性应赋值为<code>NAC</code></p></li>\r\n<li><p>实验指南中提到, 对于<code>/</code>和<code>%</code>的除零错误,\r\n应当给出<code>Undef</code>,\r\n<strong>即使</strong>被除数是<code>NAC</code>.</p></li>\r\n</ul>\r\n<h2 id=\"sovler-worklistsolver\">Sovler &amp; WorkListSolver</h2>\r\n<h3 id=\"sovler-init\">Sovler Init</h3>\r\n<p>照着算法流程前三行写便是,\r\n但这里要提到框架代码的\"<strong>robustness</strong>\".</p>\r\n<p>尽管从分析流程上来看, 我们不应该分析<code>Node Entry</code>,\r\n但是框架代码允许我们这样做.\r\n这时框架代码会认为<code>Node Entry</code>是一条<code>nop Stmt</code>,\r\n不会做constant update,\r\n因此只要在<code>Init</code>部分对<code>Entry</code>的<code>inFact</code>和<code>outFact</code>都赋上初值,\r\n就不需要在worklist中考虑<code>Entry</code>的处理了.</p>\r\n<h3 id=\"worklistsolver-dosolveforward\">WorkListSolver\r\ndoSolveForward</h3>\r\n<p><strong>worklist</strong>是一种非常简单的算法,\r\n笔者在此不对算法实现过多赘述.\r\n注意在实现worklist的时候可以使用java自带的容器<code>Queue</code> &amp;\r\n<code>ArrayList</code>.</p>\r\n<p>关于<strong>worklist</strong>的初始化问题,\r\n需要注意的是应当为其加入所有的<code>Node</code>,\r\n如果只加入<code>Entry</code>的后继, 会产生问题, 笔者在此给出一个例子.\r\n(感谢课程群中<a\r\nhref=\"https://github.com/rijuyuezhu\"><strong>日居月诸</strong></a>大佬和另一位不知道github链接的大佬构造的反例)</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;Assign: <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span>&gt; (constprop) --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] nop;     &#123;&#125;</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;   &#123;x=<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] x = <span class=\"number\">2</span>;   &#123;x=<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L6</span>] x = <span class=\"number\">3</span>;   &#123;x=<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] x = <span class=\"number\">4</span>;   &#123;x=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L8</span>] y = x;   &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] <span class=\"keyword\">return</span>;  &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>在这个例子中,\r\n<code>Entry outFact</code>初始化为<code>&#123;&#125;</code>(没有参数),\r\n然而<code>Stmt0</code> 的 <code>outFact</code>\r\n同样初始化为<code>&#123;&#125;</code>,\r\n如果只添加<code>Entry</code>的后继<code>&#123;Stmt0&#125;</code>,\r\n会导致worklist在分析完<code>Stmt0</code>后错误终止.</p>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>本次实验应该是所有Assignment中代码量最多的一次, 细节也是让人头皮发麻,\r\n还望能静下心来看代码和debug, 祝早日AC!</p>\r\n","length":2117,"excerpt":"<p><strong>NJU Static Program Analysis | Assignment-2 Constant\r\nPropagation &amp; WorlistSolver.</strong></p>","more":"<h2 id=\"实验信息与食用指南\">实验信息与食用指南</h2>\r\n<p>请翻阅<a\r\nhref=\"https://la-pluma.github.io/2024/10/20/SPA-A1/#more\"><strong>[NJU静态分析|A1-Live\r\nVariable Analysis]</strong></a>.</p>\r\n<p>在此进行一点补充, 笔者的这份实验记录更像是Free\r\nStyle版的<strong>FAQ</strong>. 因此请 <strong><em>确保</em></strong>\r\n在理解了<strong>理论知识</strong>, <strong>实验指南</strong> 和\r\n<strong>框架代码</strong> 后再参考本记录, 与A1相同, 本记录\r\n<strong><em>不提供</em></strong> 源代码(<del>或者说暂时没有</del>).</p>\r\n<p><del>如果您对本实验记录中的内容感到困惑,\r\n可能是因为笔者能力不足或您未能理解实验指南和框架代码,\r\n同时本试验记录难以涵盖所有的坑, 还望海涵.</del></p>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>Tai-e</strong>框架实现<strong>常量传播算法</strong>和<strong>worklist求解器</strong>.</p>\r\n<p>大致的框架代码如下:</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic1.png\" class=\"\" title=\"pic1\">\r\n<p>注意常量传播算法是<strong>Forward &amp; Must analysis</strong>.</p>\r\n<h2 id=\"部分重要框架代码带读\">部分重要框架代码带读</h2>\r\n<p><del>我知道你们有些人肯定是不看框架代码的,\r\n除非不得不用或者报错的时候.</del></p>\r\n<h3 id=\"ir-irbuilder\">IR &amp; IRBuilder</h3>\r\n<p>Tai-e框架中的<code>IR</code>与课上教授的IR稍有不同, 以A2\r\ntest中的<strong>Assign.java</strong>为例,</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*   From A2 test/Assign.java   */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Assign</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, y;</span><br><span class=\"line\">        x = <span class=\"number\">2</span>;</span><br><span class=\"line\">        x = <span class=\"number\">3</span>;</span><br><span class=\"line\">        x = <span class=\"number\">4</span>;</span><br><span class=\"line\">        y = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>经过tai-e框架的分析后会得到</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;Assign: <span class=\"keyword\">void</span> &lt;init&gt;()&gt; (constprop) --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L1</span>] invokespecial %<span class=\"built_in\">this</span>.&lt;java.lang.Object: <span class=\"keyword\">void</span> &lt;init&gt;()&gt;(); &#123;&#125;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L1</span>] <span class=\"keyword\">return</span>; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------- &lt;Assign: <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span>&gt; (constprop) --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;   &#123;x=<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] x = <span class=\"number\">2</span>;   &#123;x=<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L6</span>] x = <span class=\"number\">3</span>;   &#123;x=<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] x = <span class=\"number\">4</span>;   &#123;x=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L8</span>] y = x;   &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] <span class=\"keyword\">return</span>;  &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>结合<strong>IR</strong> &amp; <strong>IRBuilder</strong>(可翻阅<a\r\nhref=\"https://tai-e.pascal-lab.net/docs/index.html\"><strong>[官方手册]</strong></a>),</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic2.png\" class=\"\" title=\"pic2\">\r\n<p><del>IR我懒得贴了</del></p>\r\n<p><code>IR</code>的基本单元是<strong>method</strong>\r\n(请意识到java是oop语言),\r\n<code>IRBuilder</code>提供了分析单个方法的API<code>buildIR(JMethod method)</code>和分析整个<code>class hierarchy</code>(不明白,\r\n等到A4就明白了, 笑)中的所有方法的API<code>buildAll()</code></p>\r\n<p>结合<code>Stmt</code> <code>Exp</code> 和 <code>CFG</code>,\r\n我们可以得到这样的一个示意图(由于笔者未阅读全部的源码实现,\r\n可能会有所出入, 但大致如此).</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic3.png\" class=\"\" title=\"pic3\">\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n严格来说<code>CFG</code>并不存储<code>Node</code>(本实验中指<code>Stmt</code>,\r\n见A1试验记录说明), 只存储<code>Stmt</code>的关联信息,\r\n但为了方便图示遂如此展示. 至于为何左值和右值都是<code>Exp</code>,\r\n请翻阅A1官方实验指南中对<code>Exp</code>的图示表示部分.</p>\r\n</blockquote>\r\n<h3 id=\"definitionstmt\">DefinitionStmt</h3>\r\n<p>尽管理论上不需要这个类也可以完成实验(<code>Stmt</code>中的顶层方法足以实现),\r\n但既然框架提供了这么好用的API, 方便我们写出更优雅的代码,\r\n为什么不用呢?</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic4.png\" class=\"\" title=\"pic4.png\">\r\n<p><code>DefinitionStmt</code>为我们提供了两个非常好用的API,\r\n<code>getLValue()</code>和<code>getRValue</code>可以直接获取到左右式的<code>Exp</code>(希望你还记得<code>LValue</code>&amp;<code>RValue</code>\r\nextends <code>Exp</code>),\r\n而不需要像<code>Stmt</code>中的<code>getDef()</code> &amp;\r\n<code>getUses()</code>\r\n做较为繁琐的判断和筛选(如果对<code>getUses()</code>感到困惑,\r\n也还请翻阅A1实验记录, 里面有解释和参考来源).</p>\r\n<p>需要注意的是,\r\n<code>getLValue()</code>可能会返回<code>null</code>.</p>\r\n<h2 id=\"constantpropagation\">ConstantPropagation</h2>\r\n<p>与活跃变量分析类似, 我们需要完成5个API的功能.</p>\r\n<h3 id=\"newboundaryfact-newinitialfact\">newBoundaryFact() &amp;\r\nnewInitialFact()</h3>\r\n<p>需要注意的是, 本次存储分析结果的数据结构是<code>CPFact</code>,\r\n与A1相同, 在完成本次实验代码之前需要了解相关API的用法.</p>\r\n<p>既然是<strong>Must Analysis</strong>, 我们需要将初值赋为空,\r\n但需要注意的是, 我们的<strong>Analysis</strong>仅分析语句,\r\n在进入第一条语句之前, 是否有什么东西需要初始化?</p>\r\n<p>这个问题就对应了指南中为什么<code>BoundaryInit</code> 要通过\r\n<code>getIR().getParas()</code>获取参数并赋值<code>NAC</code>的提示.</p>\r\n<p>在对<code>IR</code>的解释中我们提到过,\r\n<code>IR</code>的基本分析单元是<strong>method</strong>, 即函数,\r\n函数就可能有传入的参数, 这些参数易见<strong>不是Constant</strong>,\r\n因此要赋值为<code>NAC</code></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 如果是Constant干嘛还要传参, 即便真的这么做了,\r\n我们的分析也可以满足<strong>safe-approximation</strong>.</p>\r\n</blockquote>\r\n<p>这部分是在方法体(函数语句)执行前就完成的初始化,\r\n因此我们需要赋值给<code>Entry</code>的<code>outFact</code>.</p>\r\n<h3 id=\"meetvalue-meetinto\">meetValue() &amp; meetInto()</h3>\r\n<p><code>meetValue()</code>的完成没有任何难点,\r\n只需要照抄ppt中的规则即可.</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic5.png\" class=\"\" title=\"pic5\">\r\n<p>同样的,\r\n完成这部分代码需要阅读<code>Class Value</code>的源码API和注释.</p>\r\n<p>关于<code>meetInto()</code>,\r\n如果没有阅读<code>CPFact</code>中的<code>update()</code>方法注释,\r\n就不知道可以写出如此优雅的代码来合并<code>Var</code>的<code>Value</code>值:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.update(<span class=\"keyword\">var</span>, meetValue(fact.get(<span class=\"keyword\">var</span>), target.get(<span class=\"keyword\">var</span>)));</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/10/28/SPA-A2/pic6.png\" class=\"\" title=\"pic6\">\r\n<h3 id=\"transfernode-evaluate\">transferNode() &amp; evaluate()</h3>\r\n<p>毫无疑问, 这是本次实验中最难最核心的一部分, 细节非常多, 当被卡hidden\r\ntest的时候, 大概率寄在这里.</p>\r\n<p>笔者建议在<code>transferNode()</code>中处理<code>Stmt</code>的左值def部分,\r\n在<code>evaluate()</code>中处理右值exp部分. 这是比较符合功能分离的写法,\r\n当然, 也可以选择在\r\n<code>transferNode()</code>中处理<code>Var</code>和<code>IntLiteral</code>,\r\n<code>evaluate()</code>只负责处理<code>BinaryExp</code>的计算值.\r\n笔者在此按第一种写法进行说明.</p>\r\n<h4 id=\"transfernode\">transferNode()</h4>\r\n<p>这个函数中你需要依次做(次流程可能存在可以优化的部分,\r\n不必完全照做):</p>\r\n<ul>\r\n<li><p>保存<code>outFact</code>原值,\r\n将<code>inFact</code>赋值给<code>outFact</code>.</p></li>\r\n<li><p>判断<code>Node</code>(<code>Stmt</code>)是否为<code>DefinitionStmt</code></p></li>\r\n<li><p>判断是否拥有<strong>合法</strong>左值,\r\n包括<code>def</code>的类型<code>Var</code>和<code>Var</code>中的<code>ValueType</code>是否为<code>Int</code>,\r\n如果不是, 本次实验中可以认为是<code>nop</code>空操作.\r\n不需要为这个<code>Stmt</code>做任何分析, 直接将<code>inFact</code>\r\ncopy给 <code>outFact</code>即可.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> IDEA教给我一个很有意思的语法糖</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> DefinitionStmt def_stmt)&#123;</span><br><span class=\"line\">    <span class=\"type\">LValue</span> <span class=\"variable\">def</span> <span class=\"operator\">=</span> def_stmt.getLValue();</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>这个用法可以避开繁琐的类型转化, 在判断类型时便做了类型转化.</p>\r\n</blockquote></li>\r\n<li><p>计算<code>Stmt</code>的右值(通过<code>evaluate()</code>获得),\r\n并更新<code>outFact</code>中的相应<code>Var def</code>(笔者在此并未使用<code>update</code>方法的返回值,\r\n或许可从此处入手优化效率, 但笔者不能保证其正确性)</p></li>\r\n<li><p>比较<code>outFact</code>是否更新返回布尔值.</p></li>\r\n</ul>\r\n<h4 id=\"evaluate\">evaluate()</h4>\r\n<p>为了完成这个方法, 代码的大致框架应该是这个样子:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Value <span class=\"title function_\">evaluate</span><span class=\"params\">(Exp exp, CPFact in)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exp <span class=\"keyword\">instanceof</span> Var)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">/*Value*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exp <span class=\"keyword\">instanceof</span> IntLiteral)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">/*Value*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exp <span class=\"keyword\">instanceof</span> BinaryExp binary_exp)&#123;</span><br><span class=\"line\">        <span class=\"type\">Value</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> ...;</span><br><span class=\"line\">        <span class=\"type\">Value</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> ...;</span><br><span class=\"line\">        <span class=\"comment\">// Operand may not Int or may not Constant</span></span><br><span class=\"line\">        <span class=\"comment\">// you&#x27;d better do it first</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"comment\">/*left HoldInt &amp;&amp; right HoldInt*/</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//you can get Condition Info form ppt</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"comment\">/*left is Constant &amp;&amp; right is constant*/</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binary_exp <span class=\"keyword\">instanceof</span> ArithmeticExp arithmetic_exp)&#123;</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span>(op)&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//also should attention to DIV 0 return Undef</span></span><br><span class=\"line\">                        <span class=\"keyword\">case</span> ADD: ...</span><br><span class=\"line\">                        ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binary_exp <span class=\"keyword\">instanceof</span> BitwiseExp bitwise_exp)&#123;</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span>(op)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> AND: ...</span><br><span class=\"line\">                        ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(...)</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"comment\">/*left is NAC || right is NAC*/</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//you should do DIV &amp; REM for 0 judgement there</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"comment\">/*other condition*/</span>)&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"comment\">/*other condition*/</span>)&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//for over-approximation</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Value.getNAC();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//such as x = o.f()</span></span><br><span class=\"line\">    <span class=\"comment\">//for over-approximation</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Value.getNAC(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>其中二元表达式计算规则见ppt所示,</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic7.png\" class=\"\" title=\"pic7\">\r\n<p>笔者在此给出一些细节和边界条件,\r\n也可以通过阅读上述代码框架获得细节提示:</p>\r\n<ul>\r\n<li><p><code>exp</code>中的操作数可能不是<code>IntType</code>,\r\n所以你需要做一个<code>canHoldInt()</code>判断,\r\n非法<code>exp</code>为了安全性应赋值为<code>NAC</code></p></li>\r\n<li><p>实验指南中提到, 对于<code>/</code>和<code>%</code>的除零错误,\r\n应当给出<code>Undef</code>,\r\n<strong>即使</strong>被除数是<code>NAC</code>.</p></li>\r\n</ul>\r\n<h2 id=\"sovler-worklistsolver\">Sovler &amp; WorkListSolver</h2>\r\n<h3 id=\"sovler-init\">Sovler Init</h3>\r\n<p>照着算法流程前三行写便是,\r\n但这里要提到框架代码的\"<strong>robustness</strong>\".</p>\r\n<p>尽管从分析流程上来看, 我们不应该分析<code>Node Entry</code>,\r\n但是框架代码允许我们这样做.\r\n这时框架代码会认为<code>Node Entry</code>是一条<code>nop Stmt</code>,\r\n不会做constant update,\r\n因此只要在<code>Init</code>部分对<code>Entry</code>的<code>inFact</code>和<code>outFact</code>都赋上初值,\r\n就不需要在worklist中考虑<code>Entry</code>的处理了.</p>\r\n<h3 id=\"worklistsolver-dosolveforward\">WorkListSolver\r\ndoSolveForward</h3>\r\n<p><strong>worklist</strong>是一种非常简单的算法,\r\n笔者在此不对算法实现过多赘述.\r\n注意在实现worklist的时候可以使用java自带的容器<code>Queue</code> &amp;\r\n<code>ArrayList</code>.</p>\r\n<p>关于<strong>worklist</strong>的初始化问题,\r\n需要注意的是应当为其加入所有的<code>Node</code>,\r\n如果只加入<code>Entry</code>的后继, 会产生问题, 笔者在此给出一个例子.\r\n(感谢课程群中<a\r\nhref=\"https://github.com/rijuyuezhu\"><strong>日居月诸</strong></a>大佬和另一位不知道github链接的大佬构造的反例)</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;Assign: <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span>&gt; (constprop) --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] nop;     &#123;&#125;</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;   &#123;x=<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] x = <span class=\"number\">2</span>;   &#123;x=<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L6</span>] x = <span class=\"number\">3</span>;   &#123;x=<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] x = <span class=\"number\">4</span>;   &#123;x=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L8</span>] y = x;   &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] <span class=\"keyword\">return</span>;  &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>在这个例子中,\r\n<code>Entry outFact</code>初始化为<code>&#123;&#125;</code>(没有参数),\r\n然而<code>Stmt0</code> 的 <code>outFact</code>\r\n同样初始化为<code>&#123;&#125;</code>,\r\n如果只添加<code>Entry</code>的后继<code>&#123;Stmt0&#125;</code>,\r\n会导致worklist在分析完<code>Stmt0</code>后错误终止.</p>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>本次实验应该是所有Assignment中代码量最多的一次, 细节也是让人头皮发麻,\r\n还望能静下心来看代码和debug, 祝早日AC!</p>"},{"title":"千里之行，始于足下","date":"2024-09-08T12:56:57.000Z","comments":1,"_content":"\n**A journey of a thousand miles begins with a single step.**\n\n<!-- more -->\n\n![picture](hello-world/picture.png)\n","source":"_posts/hello-world.md","raw":"---\ntitle: 千里之行，始于足下\ndate: 2024-09-08 20:56:57\ncomments: true\ntags:\n- 杂项\ncategories: \n- 杂项\n---\n\n**A journey of a thousand miles begins with a single step.**\n\n<!-- more -->\n\n![picture](hello-world/picture.png)\n","slug":"hello-world","published":1,"updated":"2024-09-12T15:49:07.668Z","layout":"post","photos":[],"_id":"cm2t94r3b0014gwilgjhzc8ck","content":"<p><strong>A journey of a thousand miles begins with a single\r\nstep.</strong></p>\r\n<span id=\"more\"></span>\r\n<img src=\"/2024/09/08/hello-world/picture.png\" class=\"\" title=\"picture\">\r\n","length":13,"excerpt":"<p><strong>A journey of a thousand miles begins with a single\r\nstep.</strong></p>","more":"<img src=\"/2024/09/08/hello-world/picture.png\" class=\"\" title=\"picture\">"}],"PostAsset":[{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"pic2-1.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"pic2-2.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"pic2-3.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"pic2-4.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"pic2-5.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"pic2-6.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"pic2-7.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"pic2-9.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"spic2-1.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"spic2-2.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"spic2-3.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"spic2-4.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"tab2-1.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png","post":"cm2t94r2w0003gwilfueubj7g","slug":"tab2-2.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png","post":"cm2t94r310009gwil91at5t8n","slug":"pic1-1.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png","post":"cm2t94r310009gwil91at5t8n","slug":"pic1-2.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png","post":"cm2t94r310009gwil91at5t8n","slug":"pic1-3.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png","post":"cm2t94r310009gwil91at5t8n","slug":"pic1-4.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png","post":"cm2t94r310009gwil91at5t8n","slug":"table1-1.png","modified":1,"renderable":0},{"_id":"source/_posts/LeetCode-P4/p1.png","post":"cm2t94r39000zgwil1e2w5mv3","slug":"p1.png","modified":1,"renderable":0},{"_id":"source/_posts/LeetCode-P4/p2.png","post":"cm2t94r39000zgwil1e2w5mv3","slug":"p2.png","modified":1,"renderable":0},{"_id":"source/_posts/LeetCode-P4/P4.fig","post":"cm2t94r39000zgwil1e2w5mv3","slug":"P4.fig","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A1/pic1.png","post":"cm2t94r390010gwilfe0u00ts","slug":"pic1.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A1/pic2.png","post":"cm2t94r390010gwilfe0u00ts","slug":"pic2.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A1/pic3.png","post":"cm2t94r390010gwilfe0u00ts","slug":"pic3.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic1.png","post":"cm2t94r3a0013gwil1h25e0c8","slug":"pic1.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic2.png","post":"cm2t94r3a0013gwil1h25e0c8","slug":"pic2.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic3.png","post":"cm2t94r3a0013gwil1h25e0c8","slug":"pic3.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic4.png","post":"cm2t94r3a0013gwil1h25e0c8","slug":"pic4.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic5.png","post":"cm2t94r3a0013gwil1h25e0c8","slug":"pic5.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic6.png","post":"cm2t94r3a0013gwil1h25e0c8","slug":"pic6.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic7.png","post":"cm2t94r3a0013gwil1h25e0c8","slug":"pic7.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/SPA-A2-IR示意图.fig","post":"cm2t94r3a0013gwil1h25e0c8","slug":"SPA-A2-IR示意图.fig","modified":1,"renderable":0},{"_id":"source/_posts/hello-world/picture.png","post":"cm2t94r3b0014gwilgjhzc8ck","slug":"picture.png","modified":1,"renderable":0},{"_id":"source/_posts/hello-world/test.txt","post":"cm2t94r3b0014gwilgjhzc8ck","slug":"test.txt","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cm2t94r310009gwil91at5t8n","category_id":"cm2t94r2y0004gwild6lb6l8y","_id":"cm2t94r34000dgwil5qzx60se"},{"post_id":"cm2t94r2t0001gwil1vuk7shg","category_id":"cm2t94r2y0004gwild6lb6l8y","_id":"cm2t94r35000ggwilb13t38rz"},{"post_id":"cm2t94r32000agwil76zoczar","category_id":"cm2t94r2y0004gwild6lb6l8y","_id":"cm2t94r36000igwilegbp7pyd"},{"post_id":"cm2t94r2w0003gwilfueubj7g","category_id":"cm2t94r2y0004gwild6lb6l8y","_id":"cm2t94r36000lgwilbfku4djw"},{"post_id":"cm2t94r300007gwilfygjakjr","category_id":"cm2t94r2y0004gwild6lb6l8y","_id":"cm2t94r36000mgwila6n212u1"},{"post_id":"cm2t94r39000zgwil1e2w5mv3","category_id":"cm2t94r3a0011gwil0pp5bb9l","_id":"cm2t94r3c0017gwil1i17ccoe"},{"post_id":"cm2t94r390010gwilfe0u00ts","category_id":"cm2t94r3c0015gwileut9er4h","_id":"cm2t94r3d001dgwilccxh7hhq"},{"post_id":"cm2t94r3a0013gwil1h25e0c8","category_id":"cm2t94r3c0015gwileut9er4h","_id":"cm2t94r3d001fgwildr9112a0"},{"post_id":"cm2t94r3b0014gwilgjhzc8ck","category_id":"cm2t94r3d001cgwildsox60xf","_id":"cm2t94r3e001igwilc7wbgoz5"}],"PostTag":[{"post_id":"cm2t94r2t0001gwil1vuk7shg","tag_id":"cm2t94r2z0005gwileg739rvd","_id":"cm2t94r36000hgwil7g7idtxd"},{"post_id":"cm2t94r2t0001gwil1vuk7shg","tag_id":"cm2t94r32000cgwil0lel8nua","_id":"cm2t94r36000jgwil6jdkas3o"},{"post_id":"cm2t94r2w0003gwilfueubj7g","tag_id":"cm2t94r2z0005gwileg739rvd","_id":"cm2t94r37000ogwilhqseam8a"},{"post_id":"cm2t94r2w0003gwilfueubj7g","tag_id":"cm2t94r36000kgwilc7om3u4t","_id":"cm2t94r37000pgwilex6vd9wf"},{"post_id":"cm2t94r300007gwilfygjakjr","tag_id":"cm2t94r2z0005gwileg739rvd","_id":"cm2t94r37000sgwildzv67f0l"},{"post_id":"cm2t94r300007gwilfygjakjr","tag_id":"cm2t94r32000cgwil0lel8nua","_id":"cm2t94r37000tgwil5dqffmli"},{"post_id":"cm2t94r310009gwil91at5t8n","tag_id":"cm2t94r2z0005gwileg739rvd","_id":"cm2t94r38000vgwil1ke3ca5i"},{"post_id":"cm2t94r310009gwil91at5t8n","tag_id":"cm2t94r36000kgwilc7om3u4t","_id":"cm2t94r38000wgwil8p84aisr"},{"post_id":"cm2t94r32000agwil76zoczar","tag_id":"cm2t94r2z0005gwileg739rvd","_id":"cm2t94r38000xgwilfv7zdrzy"},{"post_id":"cm2t94r32000agwil76zoczar","tag_id":"cm2t94r36000kgwilc7om3u4t","_id":"cm2t94r38000ygwilfnbc84y8"},{"post_id":"cm2t94r39000zgwil1e2w5mv3","tag_id":"cm2t94r3a0012gwil7vm3e3pk","_id":"cm2t94r3d001agwil2yjee2k3"},{"post_id":"cm2t94r39000zgwil1e2w5mv3","tag_id":"cm2t94r3c0016gwil57rd7mqh","_id":"cm2t94r3d001bgwilewdt5p4b"},{"post_id":"cm2t94r390010gwilfe0u00ts","tag_id":"cm2t94r3c0019gwil979h82wj","_id":"cm2t94r3e001hgwilhrea5j2u"},{"post_id":"cm2t94r390010gwilfe0u00ts","tag_id":"cm2t94r3d001egwil19cse23p","_id":"cm2t94r3e001jgwilhnnvfphq"},{"post_id":"cm2t94r3a0013gwil1h25e0c8","tag_id":"cm2t94r3c0019gwil979h82wj","_id":"cm2t94r3e001mgwilgky0e32c"},{"post_id":"cm2t94r3a0013gwil1h25e0c8","tag_id":"cm2t94r3d001egwil19cse23p","_id":"cm2t94r3e001ngwil4k6bc52p"},{"post_id":"cm2t94r3b0014gwilgjhzc8ck","tag_id":"cm2t94r3e001lgwilbs4fcxdr","_id":"cm2t94r3e001ogwil552md6b1"}],"Tag":[{"name":"读书笔记","_id":"cm2t94r2z0005gwileg739rvd"},{"name":"设计模式","_id":"cm2t94r32000cgwil0lel8nua"},{"name":"机器学习","_id":"cm2t94r36000kgwilc7om3u4t"},{"name":"LeetCode","_id":"cm2t94r3a0012gwil7vm3e3pk"},{"name":"二分","_id":"cm2t94r3c0016gwil57rd7mqh"},{"name":"NJU","_id":"cm2t94r3c0019gwil979h82wj"},{"name":"静态分析","_id":"cm2t94r3d001egwil19cse23p"},{"name":"杂项","_id":"cm2t94r3e001lgwilbs4fcxdr"}]}}