{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/512x512.png","path":"images/hikari_tairitsu/512x512.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/android-chrome-192x192.png","path":"images/hikari_tairitsu/android-chrome-192x192.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/android-chrome-512x512.png","path":"images/hikari_tairitsu/android-chrome-512x512.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/apple-touch-icon.png","path":"images/hikari_tairitsu/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/avatar.jpg","path":"images/hikari_tairitsu/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/browserconfig.xml","path":"images/hikari_tairitsu/browserconfig.xml","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/favicon-16x16.png","path":"images/hikari_tairitsu/favicon-16x16.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/favicon-32x32.png","path":"images/hikari_tairitsu/favicon-32x32.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/mstile-150x150.png","path":"images/hikari_tairitsu/mstile-150x150.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/favicon.ico","path":"images/hikari_tairitsu/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/safari-pinned-tab.svg","path":"images/hikari_tairitsu/safari-pinned-tab.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/hikari_tairitsu/site.webmanifest","path":"images/hikari_tairitsu/site.webmanifest","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","path":"lib/pjax/CHANGELOG.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/LICENSE","path":"lib/pjax/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/README.md","path":"lib/pjax/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.d.ts","path":"lib/pjax/index.d.ts","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.js","path":"lib/pjax/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/package.json","path":"lib/pjax/package.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.js","path":"lib/pjax/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/algolia_logo.svg","path":"images/next/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.min.js","path":"lib/pjax/pjax.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/apple-touch-icon-next.png","path":"images/next/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/avatar.gif","path":"images/next/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-by-nc-nd.svg","path":"images/next/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-by-nc-sa.svg","path":"images/next/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-by-nc.svg","path":"images/next/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-by-nd.svg","path":"images/next/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-by.svg","path":"images/next/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-by-sa.svg","path":"images/next/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/favicon-16x16-next.png","path":"images/next/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/cc-zero.svg","path":"images/next/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/favicon-32x32-next.png","path":"images/next/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/next/logo.svg","path":"images/next/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/example.js","path":"lib/pjax/example/example.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/forms.html","path":"lib/pjax/example/forms.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/index.html","path":"lib/pjax/example/index.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","path":"lib/pjax/lib/abort-request.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/page3.html","path":"lib/pjax/example/page3.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/page2.html","path":"lib/pjax/example/page2.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","path":"lib/pjax/lib/eval-script.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","path":"lib/pjax/lib/execute-scripts.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","path":"lib/pjax/lib/foreach-els.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","path":"lib/pjax/lib/foreach-selectors.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","path":"lib/pjax/lib/is-supported.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","path":"lib/pjax/lib/parse-options.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","path":"lib/pjax/lib/send-request.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","path":"lib/pjax/lib/switches-selectors.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/switches.js","path":"lib/pjax/lib/switches.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","path":"lib/pjax/lib/uniqueid.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/setup.js","path":"lib/pjax/tests/setup.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/test.ts","path":"lib/pjax/tests/test.ts","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/off.js","path":"lib/pjax/lib/events/off.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/on.js","path":"lib/pjax/lib/events/on.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/trigger.js","path":"lib/pjax/lib/events/trigger.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-form.js","path":"lib/pjax/lib/proto/attach-form.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-link.js","path":"lib/pjax/lib/proto/attach-link.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/handle-response.js","path":"lib/pjax/lib/proto/handle-response.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/parse-element.js","path":"lib/pjax/lib/proto/parse-element.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/log.js","path":"lib/pjax/lib/proto/log.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/abort-request.js","path":"lib/pjax/tests/lib/abort-request.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/eval-scripts.js","path":"lib/pjax/tests/lib/eval-scripts.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/execute-scripts.js","path":"lib/pjax/tests/lib/execute-scripts.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/events.js","path":"lib/pjax/tests/lib/events.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-els.js","path":"lib/pjax/tests/lib/foreach-els.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-selectors.js","path":"lib/pjax/tests/lib/foreach-selectors.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/is-supported.js","path":"lib/pjax/tests/lib/is-supported.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/parse-options.js","path":"lib/pjax/tests/lib/parse-options.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/send-request.js","path":"lib/pjax/tests/lib/send-request.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/switch-selectors.js","path":"lib/pjax/tests/lib/switch-selectors.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/switches.js","path":"lib/pjax/tests/lib/switches.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/uniqueid.js","path":"lib/pjax/tests/lib/uniqueid.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/clone.js","path":"lib/pjax/lib/util/clone.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/contains.js","path":"lib/pjax/lib/util/contains.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/extend.js","path":"lib/pjax/lib/util/extend.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/noop.js","path":"lib/pjax/lib/util/noop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/update-query-string.js","path":"lib/pjax/lib/util/update-query-string.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-link.js","path":"lib/pjax/tests/lib/proto/attach-link.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-form.js","path":"lib/pjax/tests/lib/proto/attach-form.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/parse-element.js","path":"lib/pjax/tests/lib/proto/parse-element.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/handle-response.js","path":"lib/pjax/tests/lib/proto/handle-response.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/clone.js","path":"lib/pjax/tests/lib/util/clone.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/contains.js","path":"lib/pjax/tests/lib/util/contains.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/noop.js","path":"lib/pjax/tests/lib/util/noop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/update-query-string.js","path":"lib/pjax/tests/lib/util/update-query-string.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/extend.js","path":"lib/pjax/tests/lib/util/extend.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"cd845e4bdce68fe6807eccb3a4059915966388c9","modified":1725797234611},{"_id":"source/404/index.md","hash":"26075fcaa308104e5e7ca6c41e057749c4a83c0e","modified":1726156624704},{"_id":"source/_posts/BookNote-DesignPatterns-by-JieCheng-2.md","hash":"edbe829ff89cb8b1495af8cf4216325b3b77e1da","modified":1730289072030},{"_id":"source/_posts/BookNote-DesignPatterns-by-JieCheng-1.md","hash":"f2295a641233008928eb2bb63122de7b2dc7e609","modified":1730289063462},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-3.md","hash":"c0fc2a007b1c833e7b5c185b6306cc89d71c0dfe","modified":1730289054664},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1.md","hash":"132f38be588de8a5ab8e5dad3e4fcab90fdc680e","modified":1730289042059},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2.md","hash":"37e1e6df64bfb19b10a5d92624f7750fdbb566cf","modified":1730289215681},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-3.md","hash":"f94b06325fee7a80c46465769d0922b1e79e6fae","modified":1731503188728},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-1.md","hash":"b1e53c897cab408ed3b37849774295b350ba3ff9","modified":1730386563323},{"_id":"source/_posts/SPA-A1.md","hash":"fd8a82fab075383e5919723dc19b86d90d52f4ea","modified":1730134788587},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-2.md","hash":"93076a02b293cf14c3ae69bec49e7c77e856bf98","modified":1731502903739},{"_id":"source/_posts/LeetCode-P4.md","hash":"8a505c2fc8975971d98363d955d22c4d2645b36e","modified":1726942842472},{"_id":"source/_posts/SPA-A2.md","hash":"16b0d0622c8c5d82aa96ac5ba502e92c9f2b52c7","modified":1730134011367},{"_id":"source/_posts/SPA-A4.md","hash":"41d21d4b0fc1225d46720948e03e189d0d3fb335","modified":1731931206297},{"_id":"source/_posts/SPA-A3.md","hash":"76e6bea15b3841c52525f76740241e80dd008d06","modified":1730973568527},{"_id":"source/categories/index.md","hash":"c23c701eaef0f153fd1b945f4bc272fc009a48d6","modified":1725797619004},{"_id":"source/_posts/SPA-A5.md","hash":"768bf8e6143fb66aa53b5bba0feab32c3b7633f2","modified":1733125490413},{"_id":"source/tags/index.md","hash":"fdbe12a425d04095e0203c30b2d7955adfdfbb49","modified":1725789470758},{"_id":"source/_posts/SPA-A8.md","hash":"705bce1b168579d6aff30e27fa4494ecf6af9676","modified":1734595602187},{"_id":"source/_posts/SPA-A6.md","hash":"ad477a028350b8391018e0b5078723d9eb9f9dcf","modified":1733231328339},{"_id":"source/_posts/SPA-A7.md","hash":"224288fc12f3e1798a4d014e2d9da43e74d7c803","modified":1734457880283},{"_id":"source/_posts/hello-world.md","hash":"64b80c7a245c44ab06658d1ee1a7df45c0c0f056","modified":1726156147668},{"_id":"source/_posts/conda-env.md","hash":"0f8fd80b460eac5bbb91901c555f267cb285510b","modified":1732558661400},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png","hash":"556f97266a898d436eb241fe36e04562b4a76448","modified":1727023278241},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png","hash":"6e0bf2a27a938ea2dd5d03d1c893c98b1cd6aff8","modified":1729915332255},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png","hash":"b18268ea95d8b3256a4b6cf476f76e77b820d14b","modified":1728840936591},{"_id":"source/_posts/LeetCode-P4/P4.fig","hash":"cface4afc2a4a7b0b3806c92aeb5ee23de267be7","modified":1726943166550},{"_id":"source/_posts/LeetCode-P4/p1.png","hash":"2b98623ba44e6eefa5838e3a949e1e7f2d363fd3","modified":1726939682473},{"_id":"source/_posts/LeetCode-P4/p2.png","hash":"5fcaecfe56ef8074aebeb98783c70eae2cd45676","modified":1726940485290},{"_id":"source/_posts/SPA-A2/SPA-A2-IR示意图.fig","hash":"1fa7f57109d343c698e16e3701eab38009d942f6","modified":1730126849753},{"_id":"source/_posts/SPA-A2/pic6.png","hash":"7a5e27da54be8eea0c4691fd8ce11cc508c1b3ae","modified":1730126245155},{"_id":"source/_posts/SPA-A3/pic2.png","hash":"26f0a832cdfc6162ffc52df2732657c234c8de7a","modified":1730611658628},{"_id":"source/_posts/SPA-A3/pic3.png","hash":"9598bcd07bef69d6368f789f1c4d93a9246378fb","modified":1730360779695},{"_id":"source/_posts/SPA-A3/pic5.png","hash":"050390f3eec774f0e6626e149ab13e6637291e69","modified":1730362289298},{"_id":"source/_posts/SPA-A3/pic4.png","hash":"3b16c0efcfe6cee8997599111fc5eed770603031","modified":1730360875170},{"_id":"source/_posts/SPA-A5/pic1-5.png","hash":"f409e30747ca479a8d0072a19553fcd1573cb7b1","modified":1733054588446},{"_id":"source/_posts/SPA-A6/pic1-2.png","hash":"26dbfa27ddde578eef0826208c9787e47bca5ce6","modified":1733221626228},{"_id":"source/_posts/SPA-A6/pic1-3.png","hash":"d6f6e40ea29f7a0d10e19250841ba0be62c015ae","modified":1733230289878},{"_id":"source/_posts/SPA-A7/pic1-3.png","hash":"8154f0ab9eecc61982e7898822f71ebd614b4985","modified":1733916075733},{"_id":"source/_posts/conda-env/pic1-3.png","hash":"8002a0ea14bd9042e511ea8d7fbe09bdc0f776db","modified":1732554408533},{"_id":"source/_posts/conda-env/pic1-12.png","hash":"3a350fd82935de55af45b5efa72a4d89b5eba3ea","modified":1732558080494},{"_id":"source/_posts/conda-env/pic1-11.png","hash":"0fcbe9278aa1143f7e7fa66d32c81bc49c4f9459","modified":1732557982770},{"_id":"source/_posts/conda-env/pic1-4.png","hash":"ef3b4606b8b49a7615aa7d259561c1f99278d197","modified":1732554510002},{"_id":"source/_posts/conda-env/pic1-5.png","hash":"4afef198344e9b6024483ddaf8ee875934963b65","modified":1732554859643},{"_id":"source/_posts/conda-env/pic1-6.png","hash":"35788c5af55c6b0aba9f1d0acafc98a4ec5d88b5","modified":1732555069149},{"_id":"source/_posts/hello-world/test.txt","hash":"f49ca7a5a1d8058de58f1c715d20105186dd9106","modified":1726123019770},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png","hash":"35d876713df544c20ab77e5722dc9608ba242286","modified":1727014016487},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png","hash":"a69db2ced9f20a604f3507b388c98ed97d76391e","modified":1727013956337},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png","hash":"66945618fb91e93cf151904b3a8ad3699cbcfaa1","modified":1727023566876},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png","hash":"a5d6238f80bd187d177650a6fdec7a60775db466","modified":1728842533867},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png","hash":"092d9dca186f75a11e1408d8d1bbb9f379e4b172","modified":1729047113313},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png","hash":"60fd3465aa635f3dfecb3be98b22efdd9ca6897f","modified":1729915483322},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png","hash":"480a3edaa705475401db2fb873326151985b1f66","modified":1728836049686},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png","hash":"3b72face6ef696f051d916b13e4f1648b63b499b","modified":1728832670546},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png","hash":"023729df677ba9b638aafed18a14b0e15d5ceb4e","modified":1728830978756},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-1/pic1-4.png","hash":"13e40e3141056fca1214671d71c2abe55307eb47","modified":1730364977838},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-1/pic1-3.png","hash":"b426624ef5f582dcc608ad4170aca5acb0cfe0ba","modified":1730364940746},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-2/pic2-1.png","hash":"bb871b8c07a2f56667f19e6a59f60fb592959dec","modified":1731496367330},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-1/pic1-5.png","hash":"2b1bc495ac105d0fb7018afa7f0d349c345ffb89","modified":1730365452924},{"_id":"source/_posts/SPA-A1/pic2.png","hash":"dc0d9a67d2a034428415d7da77d7407f0b924f4a","modified":1729356321414},{"_id":"source/_posts/SPA-A2/pic2.png","hash":"fd4dddbc2f86738ba28962636762e65cab03c7f5","modified":1730121937550},{"_id":"source/_posts/SPA-A2/pic4.png","hash":"e1933b1b51b45568089ae71e72c03c73c4605b94","modified":1730124652494},{"_id":"source/_posts/SPA-A2/pic3.png","hash":"32906bde5aeb02bb8d9ab10f1e08b22f0b2ff90f","modified":1730124189452},{"_id":"source/_posts/SPA-A1/pic1.png","hash":"cf90af784d6d894635f8b035989ef119a917d691","modified":1729356206394},{"_id":"source/_posts/SPA-A3/pic1.png","hash":"a35343e8cdccaf760341801db86d600fe0e82a64","modified":1730566008644},{"_id":"source/_posts/SPA-A3/pic6.png","hash":"4c66166f80501a9a8f12a4bab651fb373e89d5a2","modified":1730615200013},{"_id":"source/_posts/SPA-A3/pic7.png","hash":"8c60e6be764fc0cc4cabda9368034d7607996b41","modified":1730617944204},{"_id":"source/_posts/SPA-A3/pic8.png","hash":"f7374620831b2d517d739e0861917bf9acdc4666","modified":1730619150867},{"_id":"source/_posts/SPA-A5/pic1-4.png","hash":"a592c1287884bc18c64566fe02da175198d2a3a9","modified":1733040039229},{"_id":"source/_posts/SPA-A5/pic1-3.png","hash":"0a603ff071e3d9af7be4a0c13c5d0f519c63527d","modified":1733039591703},{"_id":"source/_posts/SPA-A8/pic1-2.png","hash":"29bdfbfa7b29f558053a74f2c412835e5bce2df6","modified":1734569964717},{"_id":"source/_posts/SPA-A8/pic1-1.png","hash":"111b3569bcafccac979ae9de15939d44c7bae585","modified":1734541151005},{"_id":"source/_posts/SPA-A8/pic1-3.png","hash":"dd6528d34a04091a1e6f473ec2cbae73dededcfc","modified":1734570802091},{"_id":"source/_posts/conda-env/pic1-1.png","hash":"02f1669e53499a2431a3b06b9c314330ed323e26","modified":1732501976137},{"_id":"source/_posts/conda-env/pic1-10.png","hash":"8951d62e90ff0699fe948f1d6d070b626607ac79","modified":1732557685246},{"_id":"source/_posts/conda-env/pic1-9.png","hash":"b3d05e2692bbeb10c81fb6c16c4784b10da51b35","modified":1732557469644},{"_id":"source/_posts/conda-env/pic1-8.png","hash":"2aa7d7be4b27de608a62727b71afc6aab2cd9221","modified":1732556259678},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png","hash":"c9b9d9dfe32dc8d3a396e47a52f73495724ec740","modified":1727014255159},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png","hash":"e7855296030e7cf77637b82ea94322651ca0a1ac","modified":1728810091703},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-1/pic1-2.png","hash":"d74dde518c68b8854988760fac0abfe08616593b","modified":1730364739652},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-1/pic1-1.png","hash":"984e5c9ade983189952018fb0c80669e95a950f5","modified":1730351462150},{"_id":"source/_posts/SPA-A1/pic3.png","hash":"ed4db827bc36e997cd72c834ae5d457d5a393907","modified":1729357543195},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png","hash":"0da9857ddea00179ed911ac070c812689efbfefb","modified":1729912075201},{"_id":"source/_posts/SPA-A2/pic1.png","hash":"8ee41437e3906eb29a3a1f6493007d1b13cbb503","modified":1730120970076},{"_id":"source/_posts/SPA-A2/pic5.png","hash":"6764066a82c1fca12d7cbc16b674a51d22a76a59","modified":1730126019200},{"_id":"source/_posts/SPA-A2/pic7.png","hash":"76aec718ca9537be2954a93497397eb65e8b1df3","modified":1730128863227},{"_id":"source/_posts/SPA-A7/pic1-1.png","hash":"f8ae64bc3722b35f9383756905c43a59d7324dc5","modified":1733914937290},{"_id":"source/_posts/SPA-A7/pic1-2.png","hash":"afe5ce46e54f1131d8f79c2b03752c013e4e5f4f","modified":1733915025957},{"_id":"source/_posts/SPA-A7/pic1-5.png","hash":"993027e865b26d86674d17f6d1880e480d4fbf7e","modified":1733936659949},{"_id":"source/_posts/SPA-A7/pic1-4.png","hash":"f3d927336442d210a5529629d41709a5bb998f86","modified":1733916262307},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png","hash":"8689c4fc9af5e5dfbd49238799e7518373f4e15c","modified":1728833192667},{"_id":"source/_posts/conda-env/pic1-7.png","hash":"a7e9670179fa816d28247049399bd6a4f2d98643","modified":1732555348673},{"_id":"source/_posts/conda-env/pic1-2.png","hash":"51c374f16f8fe522a089cab30ab1186ad2c9e72a","modified":1732502171865},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png","hash":"ba76dc635506ca916057049fac464a357f34a027","modified":1729911928403},{"_id":"source/_posts/SPA-A5/pic1-2.png","hash":"3dd7b3b73137090f8797386d52f88f4edb764e05","modified":1733038830517},{"_id":"source/_posts/SPA-A5/pic1-1.png","hash":"a9b6ae7a6acc31bc7d17af16485531639362bfda","modified":1733038807095},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png","hash":"884efd303ca1b3c5fd1d8413996ec83f85514dd9","modified":1728838580496},{"_id":"source/_posts/SPA-A4/pic4-1.png","hash":"b4801b1d8c1e5cd176e9f55356162eb90030c68b","modified":1731920708775},{"_id":"source/_posts/SPA-A6/pic1-1.png","hash":"4c30cccf6499c4dd82901c9462df41f2c7625cbe","modified":1733160748233},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png","hash":"2f59ef050e9131c6b34a0e05eaeef69caa1de6ac","modified":1728806432161},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1725775287825},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1725775287823},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1725775287830},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1725775287825},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1725775287831},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1725775287831},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1725775287831},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1725775287878},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1725775287832},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1725775287826},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1725775287842},{"_id":"themes/next/_config.yml","hash":"a0acab0244cc0e4628e147f3af901201d5a2d3d4","modified":1726678201123},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1725775287833},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1725775287828},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1725775287826},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1725775287829},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1725775287828},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1725775287829},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1725775287830},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1725775287829},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1725775287829},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1725775287829},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1725775287834},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1725775287830},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1725775287834},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1725775287834},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1725775287833},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1725775287836},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1725775287843},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1725775287835},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1725775287835},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1725775287836},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1725775287843},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1725775287844},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1725775287836},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1725775287844},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1725775287844},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1725775287845},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1725775287845},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1725775287845},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1725775287846},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1725775287846},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1725775287846},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1725775287846},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1725775287847},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1725775287848},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1725775287847},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1725775287847},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1725775287848},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1725775287848},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1725775287849},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1725775287849},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1725775287876},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1725775287849},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1725775287851},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1725775287850},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1725775287876},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1725775287887},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1725775287877},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1725775287877},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1726057310336},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1725775287827},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1725775287877},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1725775287827},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1725775287827},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1725775287827},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1725775287838},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1725775287837},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1725775287837},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1725775287839},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1725775287839},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1725775287839},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1725775287840},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1725775287838},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1725775287841},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1725775287840},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1725775287841},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1725775287853},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1725775287842},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1725775287842},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1725775287857},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1725775287856},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1725775287851},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e2220f970e8d3ca25ef7461d84a1ac43ba277d66","modified":1726142356748},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1725775287860},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1725775287861},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1725775287852},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1725775287861},{"_id":"themes/next/layout/_macro/post.swig","hash":"5e0c93a291873bf4721c3f4e0f521074868a4533","modified":1726142824694},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1725775287862},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1725775287864},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1725775287878},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1725775287872},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1725775287864},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1725775287884},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1725775287885},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1725775287869},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1725775287866},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1725775287871},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1725775287885},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1725775287885},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1725775287888},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1725775287887},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1725775287886},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1725775287887},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1725775287886},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1725775287888},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1725775287886},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1725775287889},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1725775287889},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1725775287890},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1725775287891},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1725775287889},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1725775287890},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1725775287888},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1725775287891},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1725775287890},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1725775287932},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1725775287926},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1725775287916},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1725775287933},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1725775287932},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1725775287935},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1725775287932},{"_id":"themes/next/source/js/next-boot.js","hash":"28a082026aa01f8be204d104d6733550e866faaa","modified":1726065808203},{"_id":"themes/next/source/js/utils.js","hash":"d0d0aa46e813fe3997842b2e0f1751155c815f6d","modified":1726065767786},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1725775287854},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1725775287853},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1725775287854},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1725775287855},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"b719c3b5bf5cbbca7323d5aa0dbb545e4ec73922","modified":1726154327480},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1725775287855},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1725775287855},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1725775287856},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1725775287858},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1725775287857},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1725775287858},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1725775287858},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1725775287859},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1725775287859},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1725775287858},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1725775287859},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1725775287859},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1725775287863},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1725775287863},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1725775287862},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1725775287860},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1725775287868},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1725775287863},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1725775287868},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1725775287868},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1725775287863},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1725775287868},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1725775287869},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1725775287867},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1725775287865},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1725775287867},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1725775287869},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1725775287870},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1725775287865},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1725775287871},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1725775287866},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1725775287866},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1725775287872},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1725775287873},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1725775287874},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1725775287873},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1725775287871},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1725775287879},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1725775287875},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"0693a22f8a8f5a92c218e223536949e1f38d2bc0","modified":1726148317760},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1725775287880},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1725775287875},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1725775287881},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1725775287875},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1725775287874},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1725775287874},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1725775287880},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1725775287881},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1725775287883},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1725775287884},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1725775287882},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1725775287882},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1725775287884},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1725775287883},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1725775287925},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1725775287925},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1725775287925},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1725775287925},{"_id":"themes/next/source/css/_variables/base.styl","hash":"723cca3d5c683bca6c7750699bd7e46088955dec","modified":1727313495287},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1725775287934},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1725775287934},{"_id":"themes/next/source/images/hikari_tairitsu/android-chrome-192x192.png","hash":"25865e7af2504be3394770ce0a72727aecdcc525","modified":1725781375878},{"_id":"themes/next/source/images/hikari_tairitsu/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1725781375744},{"_id":"themes/next/source/images/hikari_tairitsu/apple-touch-icon.png","hash":"8f04c5e4e06ae947c8c0663ef50a0f3bb7f09f1b","modified":1725781375729},{"_id":"themes/next/source/images/hikari_tairitsu/favicon-32x32.png","hash":"6974521760b637c8d4f3de05fe58d46b8ac31ff3","modified":1725781375810},{"_id":"themes/next/source/images/hikari_tairitsu/favicon-16x16.png","hash":"c26e50b60f618ca7b5982219bb8a695103f8bb46","modified":1725781375782},{"_id":"themes/next/source/images/hikari_tairitsu/site.webmanifest","hash":"13e5aa58eb2182d8ace63266856c8cc29c47c083","modified":1725781375858},{"_id":"themes/next/source/images/hikari_tairitsu/safari-pinned-tab.svg","hash":"3c200590c537484feebe28e90af1da625d9a6e0e","modified":1725781375843},{"_id":"themes/next/source/images/hikari_tairitsu/mstile-150x150.png","hash":"84cd4238961f5176f0695bc1e8673dcf295cf0dd","modified":1725781375826},{"_id":"themes/next/source/lib/pjax/.editorconfig","hash":"8c81c4efc1ebde69b4c084c370c29071af62ed2f","modified":1725787408070},{"_id":"themes/next/source/lib/pjax/.eslintrc.json","hash":"37eb8287500c9f2d4e1b887bec1c7636791a31dc","modified":1725787408070},{"_id":"themes/next/source/lib/pjax/.eslintignore","hash":"72a528c49453bc417123c12a5482f9a3dec8e1a5","modified":1725787408070},{"_id":"themes/next/source/images/hikari_tairitsu/favicon.ico","hash":"0007af3e6daabafb6100ef2f1dfada4728a54e8b","modified":1725781375762},{"_id":"themes/next/source/lib/pjax/.gitignore","hash":"37a0d5efc8a1eaa132681e1c2bf9f68333c2fbff","modified":1725787408070},{"_id":"themes/next/source/lib/pjax/.prettierignore","hash":"72a528c49453bc417123c12a5482f9a3dec8e1a5","modified":1725787408071},{"_id":"themes/next/source/lib/pjax/.travis.yml","hash":"a8afaf403ef826c018803df13ed5a36943320983","modified":1725787408071},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","hash":"c6bec1421c73c2b33eb0f2974566351968eac342","modified":1725787408071},{"_id":"themes/next/source/lib/pjax/LICENSE","hash":"2c7168814d9d35ea9500809b0904962f511eb4a8","modified":1725787408072},{"_id":"themes/next/source/lib/pjax/index.d.ts","hash":"c452cd6e990eeeea10f7dbf17fefbc6845585bf6","modified":1725787408075},{"_id":"themes/next/source/lib/pjax/README.md","hash":"f3f023db70ec08d0e8602e091c9aee621978a23d","modified":1725787408072},{"_id":"themes/next/source/lib/pjax/index.js","hash":"e6fc3fb4501520bae1505c5d95214d3318810c2d","modified":1725787408076},{"_id":"themes/next/source/lib/pjax/package.json","hash":"c3670a3576aa4bc6d0818edda3723e034b647e52","modified":1725787408088},{"_id":"themes/next/source/lib/pjax/pjax.min.js","hash":"68d0c6ad28f042c78fc18a6e9d782a7047c01905","modified":1725787408089},{"_id":"themes/next/source/images/next/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1725775287926},{"_id":"themes/next/source/lib/pjax/pjax.js","hash":"39b3063839a090bf3224c0c4776ffcedf2faf327","modified":1725787408088},{"_id":"themes/next/source/images/next/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1725775287927},{"_id":"themes/next/source/images/next/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1725775287927},{"_id":"themes/next/source/images/next/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1725775287928},{"_id":"themes/next/source/images/next/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1725775287928},{"_id":"themes/next/source/images/next/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1725775287928},{"_id":"themes/next/source/images/next/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1725775287931},{"_id":"themes/next/source/images/next/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1725775287927},{"_id":"themes/next/source/images/next/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1725775287930},{"_id":"themes/next/source/images/next/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1725775287930},{"_id":"themes/next/source/images/next/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1725775287930},{"_id":"themes/next/source/images/next/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1725775287931},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1725775287918},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1725775287939},{"_id":"themes/next/source/images/next/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1725775287931},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1725775287939},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1725775287919},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1725775287919},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1725775287918},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1725775287918},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1725775287919},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1725775287922},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1725775287919},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1725775287922},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1725775287922},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1725775287922},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1725775287920},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1725775287923},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1725775287920},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1725775287923},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1725775287920},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1725775287922},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1725775287909},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1725775287920},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1725775287909},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1725775287909},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1725775287913},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1725775287913},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1725775287911},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1725775287912},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1725775287892},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1725775287892},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1725775287899},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1725775287893},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1725775287916},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1725775287905},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1725775287905},{"_id":"themes/next/source/lib/pjax/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1725787408058},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1725775287937},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1725775287938},{"_id":"themes/next/source/lib/pjax/.git/config","hash":"010b0a17841ab64c111503876d0d06bafdd7ef62","modified":1725787408067},{"_id":"themes/next/source/lib/pjax/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1725787405310},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","hash":"a6eae74d5b80dccde2ee4485ee427aca39dbe66b","modified":1725787408076},{"_id":"themes/next/source/lib/pjax/.git/index","hash":"d2be17337efe4a7e0a3e4fa1d09d2d0395fa6674","modified":1725787408099},{"_id":"themes/next/source/lib/pjax/.git/packed-refs","hash":"edbdf218d3ec5dca511b8e29e88aebcf725d68ad","modified":1725787408051},{"_id":"themes/next/source/lib/pjax/example/page2.html","hash":"5396196c9179746716ef02833504b1172332243f","modified":1725787408075},{"_id":"themes/next/source/lib/pjax/example/example.js","hash":"4d9fea820f1a91590b0d49099e8a79d3984ba9bf","modified":1725787408074},{"_id":"themes/next/source/lib/pjax/example/page3.html","hash":"703e2d34011c3d8918ba811ead26f1734d4d74fb","modified":1725787408075},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","hash":"b16da782b37eb0538ac267f4ec4d478e79e96fa6","modified":1725787408079},{"_id":"themes/next/source/lib/pjax/example/forms.html","hash":"35769b826750d64ad649f93ee2272961d65a61c7","modified":1725787408074},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","hash":"95df8390d94be89f23f50e2acbde8e08a6264096","modified":1725787408080},{"_id":"themes/next/source/lib/pjax/example/index.html","hash":"1cc0a16040597669b26e8a7168a620520c98f4a1","modified":1725787408075},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","hash":"773d5fddaad11e76df9354f3cf8078f26ad760ff","modified":1725787408076},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","hash":"dea4eb52b70fd285ba3df161b51496d30677d9e9","modified":1725787408081},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","hash":"e79ce0bccb20e9245605ae7b2d7dc35fa4213c45","modified":1725787408080},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","hash":"0b29aa13306a0462d5c6ba0761acd75e65bb1691","modified":1725787408081},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","hash":"ca86271d363eecd1abc854bf03491130101b427d","modified":1725787408085},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","hash":"1348fec349076f4ccf72bb6f01999988764bdafd","modified":1725787408085},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","hash":"643336dc475999234b7843b1e7b38c60a48041bc","modified":1725787408086},{"_id":"themes/next/source/lib/pjax/lib/switches.js","hash":"29ea82638d566d41dc6562873fb3d58310ca34d0","modified":1725787408085},{"_id":"themes/next/source/lib/pjax/tests/setup.js","hash":"de561f5d8212d10ae79188b294c94264e6f96386","modified":1725787408098},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1725775287910},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1725775287911},{"_id":"themes/next/source/lib/pjax/tests/test.ts","hash":"5fc54ab37b36965037b2476e62adbc684cdd5537","modified":1725787408099},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1725775287913},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1725775287910},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1725775287910},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1725775287914},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1725775287915},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1725775287914},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1725775287915},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1725775287916},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1725775287893},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1725775287894},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1725775287916},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1725775287894},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1725775287894},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1725775287895},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1726651211827},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1725775287895},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1725775287894},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1725775287896},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1725775287897},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1725775287896},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1725775287898},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1725775287897},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1725775287898},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1725775287898},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1725775287899},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1725775287898},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1725775287900},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1725775287901},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1725775287899},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1725775287902},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1725775287903},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1725775287901},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1725775287903},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1725775287904},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1725775287901},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1725775287902},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1725775287903},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1725775287905},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1725775287904},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1725775287904},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1725775287906},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1725775287906},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1725775287907},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1725775287907},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1725775287907},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1725775287908},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1725775287906},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1725775287908},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1725775287908},{"_id":"themes/next/source/lib/pjax/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1725787405321},{"_id":"themes/next/source/lib/pjax/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1725787405311},{"_id":"themes/next/source/lib/pjax/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1725787405314},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1725775287909},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1725787405314},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1725787405314},{"_id":"themes/next/source/lib/pjax/.git/hooks/fsmonitor-watchman.sample","hash":"0ec0ec9ac11111433d17ea79e0ae8cec650dcfa4","modified":1725787405313},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1725787405317},{"_id":"themes/next/source/lib/pjax/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1725787405312},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1725787405316},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1725787405318},{"_id":"themes/next/source/lib/pjax/.git/logs/HEAD","hash":"3897e35b3c96d21338501293d7da1800999c80c5","modified":1725787408062},{"_id":"themes/next/source/lib/pjax/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1725787405318},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1725787405317},{"_id":"themes/next/source/lib/pjax/lib/events/off.js","hash":"edc5309f813bc323a0f470836d763aa54d996042","modified":1725787408078},{"_id":"themes/next/source/lib/pjax/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1725787405319},{"_id":"themes/next/source/lib/pjax/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1725787405320},{"_id":"themes/next/source/lib/pjax/lib/events/on.js","hash":"c8d6059a8117c61e64e10e65a977e6d82b866af8","modified":1725787408078},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-form.js","hash":"65db8791b8914ab29f2bad44202d2ee20cfaac1f","modified":1725787408082},{"_id":"themes/next/source/lib/pjax/lib/events/trigger.js","hash":"1e8b098cc0ff96a964fe90595bcf65b7d6ca1792","modified":1725787408079},{"_id":"themes/next/source/lib/pjax/tests/lib/abort-request.js","hash":"edb7512db755a13b963510914152b53aaf490e40","modified":1725787408090},{"_id":"themes/next/source/lib/pjax/lib/proto/parse-element.js","hash":"fa128f4b896c22c48c748b41cd6886ac7325a2d4","modified":1725787408083},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-link.js","hash":"de0d6d91ecb8650e0cb49dc40470233c4bab57e9","modified":1725787408082},{"_id":"themes/next/source/lib/pjax/lib/proto/log.js","hash":"a61b7223e6af70a075bb7c6c5f6ebfa4adbc5f31","modified":1725787408083},{"_id":"themes/next/source/lib/pjax/lib/proto/handle-response.js","hash":"43bff3061ccc910c86247735c6059ff489310a81","modified":1725787408083},{"_id":"themes/next/source/lib/pjax/tests/lib/events.js","hash":"6c4e2b245605bf78d84fcd596034680f6e483dee","modified":1725787408090},{"_id":"themes/next/source/lib/pjax/tests/lib/eval-scripts.js","hash":"3a11fd9978ccc4c5b5ca91699a55336633173d33","modified":1725787408090},{"_id":"themes/next/source/lib/pjax/tests/lib/execute-scripts.js","hash":"2419bf5111e717b720643dbf5f89e49f301b4ac0","modified":1725787408091},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-els.js","hash":"a94e48ceede2b4543e82f74ed0f2b2da3fb8357f","modified":1725787408091},{"_id":"themes/next/source/lib/pjax/tests/lib/is-supported.js","hash":"19f819a9508f4ce2ce11ad8f27979fa84d7a2a52","modified":1725787408092},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-selectors.js","hash":"2ca80242a94d2aab40fd0e25d91a6db4991802ce","modified":1725787408092},{"_id":"themes/next/source/lib/pjax/tests/lib/send-request.js","hash":"b8fd6112a0d908c0f4c64ec898578bedbd23ed70","modified":1725787408095},{"_id":"themes/next/source/lib/pjax/tests/lib/parse-options.js","hash":"65baba099b1074521287a10f5ff3f4e99cf8f8ee","modified":1725787408092},{"_id":"themes/next/source/lib/pjax/tests/lib/switches.js","hash":"0274886c7f0985da381c234a3ddca510e1a8cc0f","modified":1725787408096},{"_id":"themes/next/source/lib/pjax/tests/lib/uniqueid.js","hash":"e0bc8cf01dcc15eb72a856c4f0734f02790e3275","modified":1725787408096},{"_id":"themes/next/source/lib/pjax/lib/util/contains.js","hash":"77fd6688fb2c1818d9b35f17b6d3b6a70cc492f7","modified":1725787408086},{"_id":"themes/next/source/lib/pjax/lib/util/clone.js","hash":"862544f772345622927de6a4bcb27e4ef18aec3e","modified":1725787408086},{"_id":"themes/next/source/lib/pjax/tests/lib/switch-selectors.js","hash":"b3f170dd24a1d4a9aefbb5cdfbaad16dfafa6c80","modified":1725787408096},{"_id":"themes/next/source/lib/pjax/lib/util/update-query-string.js","hash":"d505d78906844c180503c63767083d599bfbbfa8","modified":1725787408087},{"_id":"themes/next/source/lib/pjax/lib/util/extend.js","hash":"bfd842a1c6b091b9a231652cc9aa4b59bcc4ea6f","modified":1725787408087},{"_id":"themes/next/source/lib/pjax/lib/util/noop.js","hash":"674eb07958489875f1d449b7864511f6bc70ee45","modified":1725787408087},{"_id":"themes/next/source/lib/pjax/.git/refs/heads/master","hash":"3c8414e83b32974579667c4c79e04af7d699edde","modified":1725787408061},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-form.js","hash":"93675412f1c9e4008ab5c64edcb9a08b549bb477","modified":1725787408093},{"_id":"themes/next/source/lib/pjax/.git/objects/pack/pack-c44afb8b14583aea8a946bf5944820752f2a752d.idx","hash":"db4f698e84be1b114c7d29712172449b3183c286","modified":1725787408007},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-link.js","hash":"9b1b047dc1d1d3d114540438511afcedb5b86528","modified":1725787408093},{"_id":"themes/next/source/lib/pjax/tests/lib/util/clone.js","hash":"306d6430ddcddf7c67c1d76ed784036713cd86a1","modified":1725787408097},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/handle-response.js","hash":"1dbbfa86a360c1109fc1153bea363cfd57d05afe","modified":1725787408095},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/parse-element.js","hash":"942486a70ec1f582f456834df4f22effa2603a87","modified":1725787408095},{"_id":"themes/next/source/lib/pjax/tests/lib/util/contains.js","hash":"c8b155c78944368f37715f9631115769ea1f645b","modified":1725787408097},{"_id":"themes/next/source/lib/pjax/tests/lib/util/noop.js","hash":"ed2fb792fe378b9b92cf7854a3e395fc6eec21bf","modified":1725787408098},{"_id":"themes/next/source/lib/pjax/tests/lib/util/extend.js","hash":"f46afc9bf5c2ebe3766ffeb0ee638ac610e70332","modified":1725787408097},{"_id":"themes/next/source/lib/pjax/.git/logs/refs/heads/master","hash":"3897e35b3c96d21338501293d7da1800999c80c5","modified":1725787408063},{"_id":"themes/next/source/lib/pjax/tests/lib/util/update-query-string.js","hash":"ffd39a45f445e2f2d20593415ef31280bff7dfdd","modified":1725787408098},{"_id":"themes/next/source/lib/pjax/.git/logs/refs/remotes/origin/HEAD","hash":"3897e35b3c96d21338501293d7da1800999c80c5","modified":1725787408057},{"_id":"themes/next/source/lib/pjax/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1725787408057},{"_id":"themes/next/source/images/hikari_tairitsu/avatar.jpg","hash":"2c0edcf5c1b0d07f8b4733bb90155faedf4c6a3f","modified":1725782310886},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1725775287938},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1725775287937},{"_id":"themes/next/source/images/hikari_tairitsu/512x512.png","hash":"585cd7139de7f0823d5b74b6a2e65e51206a62f8","modified":1725780804812},{"_id":"themes/next/source/images/hikari_tairitsu/android-chrome-512x512.png","hash":"585cd7139de7f0823d5b74b6a2e65e51206a62f8","modified":1725781375899},{"_id":"themes/next/source/lib/pjax/.git/objects/pack/pack-c44afb8b14583aea8a946bf5944820752f2a752d.pack","hash":"c1012ba4ce7f42ed478471cc6dd0c20153bfc19f","modified":1725787408006},{"_id":"source/_posts/hello-world/picture.png","hash":"a18f398678d463eec974cfc47b722cec91f83d36","modified":1656555203837},{"_id":"public/atom.xml","hash":"3422e64daa220def35a2d0117235fb888f687b5d","modified":1734595613624},{"_id":"public/search.xml","hash":"331911a73bedcaa72a360f519193be5bf209259e","modified":1734595613624},{"_id":"public/sitemap.xml","hash":"f8e55313c75df190338e2653d9583d138b9f3d5f","modified":1734595613624},{"_id":"public/sitemap.txt","hash":"ac07325279bfcb4ab718a99b6d48a22ea189a1ae","modified":1734595613624},{"_id":"public/about/index.html","hash":"4a203bd36a35538d756c2c4e99ef26fc5dfa6514","modified":1734595613624},{"_id":"public/categories/index.html","hash":"2f0db4c5af0e4c2559433c0e84d1eef078641dd5","modified":1734595613624},{"_id":"public/404.html","hash":"f82e9b2af6988f59d4c1f3a59063acc4a75e7c46","modified":1734595613624},{"_id":"public/tags/index.html","hash":"529c3ad6c061c1700146ff2879d70ba67b97b52f","modified":1734595613624},{"_id":"public/2024/12/17/SPA-A8/index.html","hash":"4c15538f4dd2f42c0e05da5a11d306bee5eebbff","modified":1734595613624},{"_id":"public/2024/12/09/SPA-A7/index.html","hash":"dde4ea0696a8a565a372c51c5eb6335d6efb08f3","modified":1734595613624},{"_id":"public/2024/12/01/SPA-A6/index.html","hash":"8dad69e895592d25a51671787142d1e56877fda8","modified":1734595613624},{"_id":"public/2024/11/27/SPA-A5/index.html","hash":"c4240f7b3c18dd58d3b703f9b91e4f9df8b3380e","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/index.html","hash":"192f65b53ef4a937e0826ca080c94a4bca0444ea","modified":1734595613624},{"_id":"public/2024/11/18/SPA-A4/index.html","hash":"87b85d1fcbf92393033797124530e2e928cc83ef","modified":1734595613624},{"_id":"public/2024/11/03/BookNote-OnJava8-by-BruceEckel-2/index.html","hash":"1c2941d3c653fb8d24e121a0c57253514485bc28","modified":1734595613624},{"_id":"public/2024/11/02/SPA-A3/index.html","hash":"aaaad68c5b39c20a8b5093e53b13c9dc41ab7d69","modified":1734595613624},{"_id":"public/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/index.html","hash":"c7ba391b18b554d39dcfe5a3d36f3d01bb978dc8","modified":1734595613624},{"_id":"public/2024/10/28/SPA-A2/index.html","hash":"7a69ebad87c8273829a6105441883fc3e51007f2","modified":1734595613624},{"_id":"public/2024/10/20/SPA-A1/index.html","hash":"7fa6550065d08be5a445b387ee47e357477295b0","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/index.html","hash":"7d02a332a24b65d872a42166e8e8561dd9edf90a","modified":1734595613624},{"_id":"public/2024/09/21/LeetCode-P4/index.html","hash":"0914e0b4c707b163016d4eb36b2bd9a52ad0e73f","modified":1734595613624},{"_id":"public/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/index.html","hash":"2e54f5bc9ffd5dcf11b701ffa989ee526c8b734b","modified":1734595613624},{"_id":"public/2024/09/10/BookNote-DesignPatterns-by-JieCheng-1/index.html","hash":"43568f70cbd9e0dbf736f950515d07bf010d971c","modified":1734595613624},{"_id":"public/2024/09/08/hello-world/index.html","hash":"e43729daef90943ced438bf0ae67ca8624cea08c","modified":1734595613624},{"_id":"public/2024/11/13/BookNote-OnJava8-by-BruceEckel-3/index.html","hash":"a4fff0a4e3a335e11cd442eebeeff03c160593b7","modified":1734595613624},{"_id":"public/2024/10/26/BookNote-MachineLearning-by-ZhihuaZhou-3/index.html","hash":"d7b1443e99aa95d5451c0097b3d6c8948595c3e1","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-DesignPatterns-by-JieCheng-2/index.html","hash":"8361b6376883bc439b0dff6915519870a942a4a0","modified":1734595613624},{"_id":"public/archives/index.html","hash":"de19e7634762ee7668a21403d3f582a288c1d56c","modified":1734595613624},{"_id":"public/archives/2024/index.html","hash":"13e65138be863382e17f4a02dd0f72441c424476","modified":1734595613624},{"_id":"public/archives/2024/09/index.html","hash":"d4c375cebb39c63732e1432939bf66f782c46269","modified":1734595613624},{"_id":"public/archives/2024/10/index.html","hash":"d126dc6e9e5f43ea7b8678d906ead2ec6a9aefb4","modified":1734595613624},{"_id":"public/archives/2024/11/index.html","hash":"7b622638c41cb2b09a920b96095b2879179a4423","modified":1734595613624},{"_id":"public/archives/2024/12/index.html","hash":"bf652d718545fa7e08128d693c0aa57ee923226f","modified":1734595613624},{"_id":"public/categories/读书笔记-设计模式/index.html","hash":"85bf7fd05f56628f12cb8ea11147b2d9ca285371","modified":1734595613624},{"_id":"public/categories/读书笔记-机器学习/index.html","hash":"640f7483a9c31931cd77dae4adae3965dc1a8498","modified":1734595613624},{"_id":"public/categories/读书笔记-OnJava8/index.html","hash":"337ad1b7afbfdc8663ab062f3aa74a8a181cdeb2","modified":1734595613624},{"_id":"public/categories/NJU静态分析实验记录/index.html","hash":"eaa7ae73e6bfa7acea183eadad2802308d31cb71","modified":1734595613624},{"_id":"public/categories/LeetCode刷题记录/index.html","hash":"cfc4f1e01901839b0f17717904bbb144d4b7161e","modified":1734595613624},{"_id":"public/categories/AI/index.html","hash":"436025be935ca78949d64ecf78cb3bd94b11c7a6","modified":1734595613624},{"_id":"public/categories/杂项/index.html","hash":"4aeabc4a71be884ffc13306b5ffbe54dec4be861","modified":1734595613624},{"_id":"public/index.html","hash":"89fc10570ab8ba9434208ac5ae78a153c5bdd5bb","modified":1734595613624},{"_id":"public/page/2/index.html","hash":"e220f0e56e547c4cda9c80e065d70d90a129cb89","modified":1734595613624},{"_id":"public/tags/读书笔记/index.html","hash":"697deee53f405448df311f3e047ecf158c4c3eae","modified":1734595613624},{"_id":"public/tags/设计模式/index.html","hash":"6890fa15248b51b1f82da49a81fb3b94aed92b6d","modified":1734595613624},{"_id":"public/tags/机器学习/index.html","hash":"d6faba4add0b6a193f87e7d0e331b81004df0ec3","modified":1734595613624},{"_id":"public/tags/Java/index.html","hash":"f231b2ce98460ffdfec1ea88d4b550b0c2c0a6a9","modified":1734595613624},{"_id":"public/tags/NJU/index.html","hash":"6594e6e63b84e5fcf782bd2dde1e5eacf7038653","modified":1734595613624},{"_id":"public/tags/静态分析/index.html","hash":"ca869e606297562bc6956ac4c00b89252ea0a788","modified":1734595613624},{"_id":"public/tags/LeetCode/index.html","hash":"8da5890a6344e616e7f85e672910ca4a4f3af3d2","modified":1734595613624},{"_id":"public/tags/二分/index.html","hash":"a821ad71cb0b023d2efd6e9937049b83a75836b5","modified":1734595613624},{"_id":"public/tags/环境配置/index.html","hash":"25776f43d2a6dfca45c0bd130ed81e63502de46c","modified":1734595613624},{"_id":"public/tags/AI/index.html","hash":"061674f88ddc38ebe9646a4bd4142195e3fe04c0","modified":1734595613624},{"_id":"public/tags/杂项/index.html","hash":"e06bbba68534b61c950308ad9d217b5a8852d0a6","modified":1734595613624},{"_id":"public/images/hikari_tairitsu/android-chrome-192x192.png","hash":"25865e7af2504be3394770ce0a72727aecdcc525","modified":1734595613624},{"_id":"public/images/hikari_tairitsu/apple-touch-icon.png","hash":"8f04c5e4e06ae947c8c0663ef50a0f3bb7f09f1b","modified":1734595613624},{"_id":"public/images/hikari_tairitsu/favicon-16x16.png","hash":"c26e50b60f618ca7b5982219bb8a695103f8bb46","modified":1734595613624},{"_id":"public/images/hikari_tairitsu/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1734595613624},{"_id":"public/images/hikari_tairitsu/favicon-32x32.png","hash":"6974521760b637c8d4f3de05fe58d46b8ac31ff3","modified":1734595613624},{"_id":"public/images/hikari_tairitsu/favicon.ico","hash":"0007af3e6daabafb6100ef2f1dfada4728a54e8b","modified":1734595613624},{"_id":"public/images/hikari_tairitsu/mstile-150x150.png","hash":"84cd4238961f5176f0695bc1e8673dcf295cf0dd","modified":1734595613624},{"_id":"public/images/hikari_tairitsu/safari-pinned-tab.svg","hash":"3c200590c537484feebe28e90af1da625d9a6e0e","modified":1734595613624},{"_id":"public/images/hikari_tairitsu/site.webmanifest","hash":"13e5aa58eb2182d8ace63266856c8cc29c47c083","modified":1734595613624},{"_id":"public/lib/pjax/index.d.ts","hash":"c452cd6e990eeeea10f7dbf17fefbc6845585bf6","modified":1734595613624},{"_id":"public/images/next/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1734595613624},{"_id":"public/lib/pjax/LICENSE","hash":"2c7168814d9d35ea9500809b0904962f511eb4a8","modified":1734595613624},{"_id":"public/images/next/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1734595613624},{"_id":"public/images/next/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1734595613624},{"_id":"public/images/next/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1734595613624},{"_id":"public/images/next/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1734595613624},{"_id":"public/images/next/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1734595613624},{"_id":"public/images/next/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1734595613624},{"_id":"public/images/next/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1734595613624},{"_id":"public/images/next/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1734595613624},{"_id":"public/images/next/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1734595613624},{"_id":"public/images/next/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1734595613624},{"_id":"public/images/next/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1734595613624},{"_id":"public/images/next/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1734595613624},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1734595613624},{"_id":"public/lib/pjax/tests/test.ts","hash":"5fc54ab37b36965037b2476e62adbc684cdd5537","modified":1734595613624},{"_id":"public/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png","hash":"556f97266a898d436eb241fe36e04562b4a76448","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png","hash":"6e0bf2a27a938ea2dd5d03d1c893c98b1cd6aff8","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png","hash":"b18268ea95d8b3256a4b6cf476f76e77b820d14b","modified":1734595613624},{"_id":"public/2024/09/21/LeetCode-P4/p1.png","hash":"2b98623ba44e6eefa5838e3a949e1e7f2d363fd3","modified":1734595613624},{"_id":"public/2024/09/21/LeetCode-P4/p2.png","hash":"5fcaecfe56ef8074aebeb98783c70eae2cd45676","modified":1734595613624},{"_id":"public/2024/09/21/LeetCode-P4/P4.fig","hash":"cface4afc2a4a7b0b3806c92aeb5ee23de267be7","modified":1734595613624},{"_id":"public/2024/10/28/SPA-A2/pic6.png","hash":"7a5e27da54be8eea0c4691fd8ce11cc508c1b3ae","modified":1734595613624},{"_id":"public/2024/10/28/SPA-A2/SPA-A2-IR示意图.fig","hash":"1fa7f57109d343c698e16e3701eab38009d942f6","modified":1734595613624},{"_id":"public/2024/11/02/SPA-A3/pic2.png","hash":"26f0a832cdfc6162ffc52df2732657c234c8de7a","modified":1734595613624},{"_id":"public/2024/11/02/SPA-A3/pic3.png","hash":"9598bcd07bef69d6368f789f1c4d93a9246378fb","modified":1734595613624},{"_id":"public/2024/11/02/SPA-A3/pic4.png","hash":"3b16c0efcfe6cee8997599111fc5eed770603031","modified":1734595613624},{"_id":"public/2024/11/02/SPA-A3/pic5.png","hash":"050390f3eec774f0e6626e149ab13e6637291e69","modified":1734595613624},{"_id":"public/2024/11/27/SPA-A5/pic1-5.png","hash":"f409e30747ca479a8d0072a19553fcd1573cb7b1","modified":1734595613624},{"_id":"public/2024/12/01/SPA-A6/pic1-2.png","hash":"26dbfa27ddde578eef0826208c9787e47bca5ce6","modified":1734595613624},{"_id":"public/2024/12/01/SPA-A6/pic1-3.png","hash":"d6f6e40ea29f7a0d10e19250841ba0be62c015ae","modified":1734595613624},{"_id":"public/2024/12/09/SPA-A7/pic1-3.png","hash":"8154f0ab9eecc61982e7898822f71ebd614b4985","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/pic1-11.png","hash":"0fcbe9278aa1143f7e7fa66d32c81bc49c4f9459","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/pic1-12.png","hash":"3a350fd82935de55af45b5efa72a4d89b5eba3ea","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/pic1-3.png","hash":"8002a0ea14bd9042e511ea8d7fbe09bdc0f776db","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/pic1-4.png","hash":"ef3b4606b8b49a7615aa7d259561c1f99278d197","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/pic1-5.png","hash":"4afef198344e9b6024483ddaf8ee875934963b65","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/pic1-6.png","hash":"35788c5af55c6b0aba9f1d0acafc98a4ec5d88b5","modified":1734595613624},{"_id":"public/2024/09/08/hello-world/test.txt","hash":"f49ca7a5a1d8058de58f1c715d20105186dd9106","modified":1734595613624},{"_id":"public/images/hikari_tairitsu/avatar.jpg","hash":"2c0edcf5c1b0d07f8b4733bb90155faedf4c6a3f","modified":1734595613624},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1734595613624},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1734595613624},{"_id":"public/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png","hash":"35d876713df544c20ab77e5722dc9608ba242286","modified":1734595613624},{"_id":"public/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png","hash":"a69db2ced9f20a604f3507b388c98ed97d76391e","modified":1734595613624},{"_id":"public/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png","hash":"66945618fb91e93cf151904b3a8ad3699cbcfaa1","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png","hash":"a5d6238f80bd187d177650a6fdec7a60775db466","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png","hash":"092d9dca186f75a11e1408d8d1bbb9f379e4b172","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png","hash":"3b72face6ef696f051d916b13e4f1648b63b499b","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png","hash":"480a3edaa705475401db2fb873326151985b1f66","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png","hash":"60fd3465aa635f3dfecb3be98b22efdd9ca6897f","modified":1734595613624},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1734595613624},{"_id":"public/css/main.css","hash":"91e4feca917ea085ca7080d9b32c4f38a96edc27","modified":1734595613624},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1734595613624},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1734595613624},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1734595613624},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1734595613624},{"_id":"public/js/next-boot.js","hash":"1db2e0d1486ff7792eb36b7924a464569329f47c","modified":1734595613624},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1734595613624},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1734595613624},{"_id":"public/js/utils.js","hash":"7096e3d049263aff233c795b959910e34f1bde06","modified":1734595613624},{"_id":"public/lib/pjax/CHANGELOG.html","hash":"dca956c3e61e68bf3eb9eab2d2f79b3cfe5492b2","modified":1734595613624},{"_id":"public/lib/pjax/index.js","hash":"4af61bcf253ce67d67bb0f524b441869301de9a5","modified":1734595613624},{"_id":"public/lib/pjax/README.html","hash":"f05e5fafe43fa4a3aa205391417bc36b3706d964","modified":1734595613624},{"_id":"public/lib/pjax/package.json","hash":"da55143475b12cb91a44aeb5a995c53879fe3326","modified":1734595613624},{"_id":"public/lib/pjax/pjax.js","hash":"e973e2c6ffb6f6d7b4a1730ba0ed6d3628b2b39f","modified":1734595613624},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1734595613624},{"_id":"public/lib/pjax/pjax.min.js","hash":"68d0c6ad28f042c78fc18a6e9d782a7047c01905","modified":1734595613624},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1734595613624},{"_id":"public/lib/pjax/lib/abort-request.js","hash":"cbae038c94f70163340801cb608f4e503640b88d","modified":1734595613624},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1734595613624},{"_id":"public/lib/pjax/example/example.js","hash":"48b27c93eb351d2fa91247c35038a9f1627e971a","modified":1734595613624},{"_id":"public/lib/pjax/example/forms.html","hash":"aa62fc6e697e17e16a947eb0176dc24e2e42d72c","modified":1734595613624},{"_id":"public/lib/pjax/example/index.html","hash":"4a00b556253eeb11fc10013c8c3940a019154001","modified":1734595613624},{"_id":"public/lib/pjax/lib/execute-scripts.js","hash":"8c7c18b14c11af7e2d8dd0146b7df428bf8149bb","modified":1734595613624},{"_id":"public/lib/pjax/lib/eval-script.js","hash":"d5980b3c5f3c1a95427eab0d7d2263324fb72bca","modified":1734595613624},{"_id":"public/lib/pjax/lib/foreach-selectors.js","hash":"b11d36344a7a6aa36d533a335785772c9bfb6bc9","modified":1734595613624},{"_id":"public/lib/pjax/lib/is-supported.js","hash":"62ede7268080ab7efddd64fced8b3e79af2901f6","modified":1734595613624},{"_id":"public/lib/pjax/lib/foreach-els.js","hash":"d8e50967878930891112f4acb46f47697ddc3ad7","modified":1734595613624},{"_id":"public/lib/pjax/lib/parse-options.js","hash":"054a902e9f350f7414b80f62419da004dd90aa37","modified":1734595613624},{"_id":"public/lib/pjax/example/page3.html","hash":"8d1d6a9afd80caf29e5b22f10a849b23a864a6a4","modified":1734595613624},{"_id":"public/lib/pjax/lib/send-request.js","hash":"15c341d066b0d60879ef3ca5ff858103381fb378","modified":1734595613624},{"_id":"public/lib/pjax/example/page2.html","hash":"7654e0a5a471bec5d74fb88d9f2f218817afdd52","modified":1734595613624},{"_id":"public/lib/pjax/tests/setup.js","hash":"4a9489e72cbe98527931d95d68b68e2d6a9bff6e","modified":1734595613624},{"_id":"public/lib/pjax/lib/switches-selectors.js","hash":"f31b4af163db3d9a5b3bb7c7534a4a2dd5543435","modified":1734595613624},{"_id":"public/lib/pjax/lib/events/on.js","hash":"111fba16cc4ca701aefedea2589c832b60af303d","modified":1734595613624},{"_id":"public/lib/pjax/lib/events/off.js","hash":"79920b24246e150f1c73511f1a271b93b9c5d9c8","modified":1734595613624},{"_id":"public/lib/pjax/lib/switches.js","hash":"4e283f667c10e0fea15e269f1c73ccb699979bb4","modified":1734595613624},{"_id":"public/lib/pjax/lib/uniqueid.js","hash":"eb127cf8936e5bdcaa7459cf5bd042ff96b5a387","modified":1734595613624},{"_id":"public/lib/pjax/lib/events/trigger.js","hash":"c05ba73199c5e2c7682655491ed37743bd451751","modified":1734595613624},{"_id":"public/lib/pjax/lib/proto/attach-form.js","hash":"b41c66e58897e6371fbd04cd2b9eb7bae10e0d89","modified":1734595613624},{"_id":"public/lib/pjax/lib/proto/handle-response.js","hash":"f68bab958cce4dbbcb91920d7a8aba55b9066b41","modified":1734595613624},{"_id":"public/lib/pjax/lib/proto/attach-link.js","hash":"d15a61235aa8c1615e60ea34d9bbee834be804d0","modified":1734595613624},{"_id":"public/lib/pjax/lib/proto/parse-element.js","hash":"52bef8a845aab0d54907f73875fa58b4084019be","modified":1734595613624},{"_id":"public/lib/pjax/lib/proto/log.js","hash":"c728730594aed7d81509787c5bb487af014415e1","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/eval-scripts.js","hash":"3c9125a04cec9d511f16f9311656533ef6a115d1","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/abort-request.js","hash":"96d7a604ca275455199bd94d16b9cdc254bee9b9","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/execute-scripts.js","hash":"2d02a0151ead9924516cdae9308f8667b27a7ea7","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/foreach-els.js","hash":"85995dd27d0d866cfaf5c560732fab8b0099938c","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/foreach-selectors.js","hash":"898b48ef191719070488f16a54fba8a794b10057","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/events.js","hash":"70ca7ec140d1dcf8c4958e7b6788b09ef2b60181","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/parse-options.js","hash":"45ab302da33e5457a71fd22bbd082e51f5b06b49","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/send-request.js","hash":"d6adad7f95754c53b9885c0999a5118995fdc76f","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/is-supported.js","hash":"e25c7e69c8b7a64a44affcae317adb2b3889aee6","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/switch-selectors.js","hash":"993dd67b1b629288feb8d167fb12b602626cf1d5","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/switches.js","hash":"f5dfdf57bafd2b4edd5f854d70837b5fe760756e","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/uniqueid.js","hash":"430550f31b9e6356c2e3a033c1b418bd6acd9667","modified":1734595613624},{"_id":"public/lib/pjax/lib/util/clone.js","hash":"55027b88e007818c6963205fcd0090a61af8237c","modified":1734595613624},{"_id":"public/lib/pjax/lib/util/contains.js","hash":"fcc9be0477d941b7c4ba71de328773e556ded7ce","modified":1734595613624},{"_id":"public/lib/pjax/lib/util/extend.js","hash":"e599aaef93e3a00ccbd92cd87df09898d712e398","modified":1734595613624},{"_id":"public/lib/pjax/lib/util/update-query-string.js","hash":"eefcbff322f8c607865d47ee8fa49f1c8bfa8d7a","modified":1734595613624},{"_id":"public/lib/pjax/lib/util/noop.js","hash":"2c9f7e231af1a62db195875ca62df7edc253c3c4","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/proto/attach-link.js","hash":"9d283cb0b09730e932673c73a3352a2d2e8939fa","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/proto/attach-form.js","hash":"3614a962e3185b354a2e0d987bcecdef4a209da6","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/proto/parse-element.js","hash":"474edc8844028de67cbad054da79c05727620785","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/proto/handle-response.js","hash":"26e0e334f0b20ff2fe75b3ab12a93ce44a5823f0","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/util/noop.js","hash":"6959a4c02c41453a5edfa4163e36752fcfa3edf9","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/util/update-query-string.js","hash":"4158dcd877c5f229400417e0da22eb4c5b8e8e38","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/util/contains.js","hash":"bc0c8be855e9736cb256a2aa44fd46f3a7d1d6c5","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/util/clone.js","hash":"4b0e62bd0f4eef3549b0da70987f63ce4953bef0","modified":1734595613624},{"_id":"public/lib/pjax/tests/lib/util/extend.js","hash":"d45488ff6f8e3e1b59a62d0c88c86b750fe50ed4","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png","hash":"023729df677ba9b638aafed18a14b0e15d5ceb4e","modified":1734595613624},{"_id":"public/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-3.png","hash":"b426624ef5f582dcc608ad4170aca5acb0cfe0ba","modified":1734595613624},{"_id":"public/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-4.png","hash":"13e40e3141056fca1214671d71c2abe55307eb47","modified":1734595613624},{"_id":"public/2024/10/20/SPA-A1/pic1.png","hash":"cf90af784d6d894635f8b035989ef119a917d691","modified":1734595613624},{"_id":"public/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-5.png","hash":"2b1bc495ac105d0fb7018afa7f0d349c345ffb89","modified":1734595613624},{"_id":"public/2024/10/20/SPA-A1/pic2.png","hash":"dc0d9a67d2a034428415d7da77d7407f0b924f4a","modified":1734595613624},{"_id":"public/2024/11/03/BookNote-OnJava8-by-BruceEckel-2/pic2-1.png","hash":"bb871b8c07a2f56667f19e6a59f60fb592959dec","modified":1734595613624},{"_id":"public/2024/10/28/SPA-A2/pic2.png","hash":"fd4dddbc2f86738ba28962636762e65cab03c7f5","modified":1734595613624},{"_id":"public/2024/10/28/SPA-A2/pic3.png","hash":"32906bde5aeb02bb8d9ab10f1e08b22f0b2ff90f","modified":1734595613624},{"_id":"public/2024/10/28/SPA-A2/pic4.png","hash":"e1933b1b51b45568089ae71e72c03c73c4605b94","modified":1734595613624},{"_id":"public/2024/11/02/SPA-A3/pic1.png","hash":"a35343e8cdccaf760341801db86d600fe0e82a64","modified":1734595613624},{"_id":"public/2024/11/02/SPA-A3/pic6.png","hash":"4c66166f80501a9a8f12a4bab651fb373e89d5a2","modified":1734595613624},{"_id":"public/2024/11/02/SPA-A3/pic8.png","hash":"f7374620831b2d517d739e0861917bf9acdc4666","modified":1734595613624},{"_id":"public/2024/11/02/SPA-A3/pic7.png","hash":"8c60e6be764fc0cc4cabda9368034d7607996b41","modified":1734595613624},{"_id":"public/2024/11/27/SPA-A5/pic1-3.png","hash":"0a603ff071e3d9af7be4a0c13c5d0f519c63527d","modified":1734595613624},{"_id":"public/2024/11/27/SPA-A5/pic1-4.png","hash":"a592c1287884bc18c64566fe02da175198d2a3a9","modified":1734595613624},{"_id":"public/2024/12/17/SPA-A8/pic1-1.png","hash":"111b3569bcafccac979ae9de15939d44c7bae585","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/pic1-1.png","hash":"02f1669e53499a2431a3b06b9c314330ed323e26","modified":1734595613624},{"_id":"public/2024/12/17/SPA-A8/pic1-2.png","hash":"29bdfbfa7b29f558053a74f2c412835e5bce2df6","modified":1734595613624},{"_id":"public/2024/12/17/SPA-A8/pic1-3.png","hash":"dd6528d34a04091a1e6f473ec2cbae73dededcfc","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/pic1-10.png","hash":"8951d62e90ff0699fe948f1d6d070b626607ac79","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/pic1-8.png","hash":"2aa7d7be4b27de608a62727b71afc6aab2cd9221","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/pic1-9.png","hash":"b3d05e2692bbeb10c81fb6c16c4784b10da51b35","modified":1734595613624},{"_id":"public/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png","hash":"c9b9d9dfe32dc8d3a396e47a52f73495724ec740","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png","hash":"e7855296030e7cf77637b82ea94322651ca0a1ac","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png","hash":"0da9857ddea00179ed911ac070c812689efbfefb","modified":1734595613624},{"_id":"public/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-2.png","hash":"d74dde518c68b8854988760fac0abfe08616593b","modified":1734595613624},{"_id":"public/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-1.png","hash":"984e5c9ade983189952018fb0c80669e95a950f5","modified":1734595613624},{"_id":"public/2024/10/20/SPA-A1/pic3.png","hash":"ed4db827bc36e997cd72c834ae5d457d5a393907","modified":1734595613624},{"_id":"public/2024/10/28/SPA-A2/pic1.png","hash":"8ee41437e3906eb29a3a1f6493007d1b13cbb503","modified":1734595613624},{"_id":"public/2024/10/28/SPA-A2/pic5.png","hash":"6764066a82c1fca12d7cbc16b674a51d22a76a59","modified":1734595613624},{"_id":"public/2024/10/28/SPA-A2/pic7.png","hash":"76aec718ca9537be2954a93497397eb65e8b1df3","modified":1734595613624},{"_id":"public/2024/12/09/SPA-A7/pic1-1.png","hash":"f8ae64bc3722b35f9383756905c43a59d7324dc5","modified":1734595613624},{"_id":"public/2024/12/09/SPA-A7/pic1-2.png","hash":"afe5ce46e54f1131d8f79c2b03752c013e4e5f4f","modified":1734595613624},{"_id":"public/2024/12/09/SPA-A7/pic1-4.png","hash":"f3d927336442d210a5529629d41709a5bb998f86","modified":1734595613624},{"_id":"public/2024/12/09/SPA-A7/pic1-5.png","hash":"993027e865b26d86674d17f6d1880e480d4fbf7e","modified":1734595613624},{"_id":"public/images/hikari_tairitsu/512x512.png","hash":"585cd7139de7f0823d5b74b6a2e65e51206a62f8","modified":1734595613624},{"_id":"public/images/hikari_tairitsu/android-chrome-512x512.png","hash":"585cd7139de7f0823d5b74b6a2e65e51206a62f8","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png","hash":"8689c4fc9af5e5dfbd49238799e7518373f4e15c","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/pic1-2.png","hash":"51c374f16f8fe522a089cab30ab1186ad2c9e72a","modified":1734595613624},{"_id":"public/2024/11/25/conda-env/pic1-7.png","hash":"a7e9670179fa816d28247049399bd6a4f2d98643","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png","hash":"ba76dc635506ca916057049fac464a357f34a027","modified":1734595613624},{"_id":"public/2024/11/27/SPA-A5/pic1-1.png","hash":"a9b6ae7a6acc31bc7d17af16485531639362bfda","modified":1734595613624},{"_id":"public/2024/11/27/SPA-A5/pic1-2.png","hash":"3dd7b3b73137090f8797386d52f88f4edb764e05","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png","hash":"884efd303ca1b3c5fd1d8413996ec83f85514dd9","modified":1734595613624},{"_id":"public/2024/11/18/SPA-A4/pic4-1.png","hash":"b4801b1d8c1e5cd176e9f55356162eb90030c68b","modified":1734595613624},{"_id":"public/2024/12/01/SPA-A6/pic1-1.png","hash":"4c30cccf6499c4dd82901c9462df41f2c7625cbe","modified":1734595613624},{"_id":"public/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png","hash":"2f59ef050e9131c6b34a0e05eaeef69caa1de6ac","modified":1734595613624},{"_id":"public/2024/09/08/hello-world/picture.png","hash":"a18f398678d463eec974cfc47b722cec91f83d36","modified":1734595613624}],"Category":[{"name":"读书笔记-设计模式","_id":"cm4v1fyu90004ssil4vo7ecr5"},{"name":"读书笔记-机器学习","_id":"cm4v1fyuh000fssil40byfwa3"},{"name":"读书笔记-OnJava8","_id":"cm4v1fyuo000yssilf12cch8r"},{"name":"NJU静态分析实验记录","_id":"cm4v1fyuq001cssil5nh2cedm"},{"name":"LeetCode刷题记录","_id":"cm4v1fyur001issilet2kdgiv"},{"name":"AI","_id":"cm4v1fyv3002zssildlxv8zgm"},{"name":"杂项","_id":"cm4v1fyv30035ssila7rtbfqx"}],"Data":[],"Page":[{"title":"About","date":"2024-09-08T09:34:16.000Z","_content":"\nTBD\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2024-09-08 17:34:16\n---\n\nTBD\n","updated":"2024-09-08T12:07:14.611Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm4v1fyu20000ssil0qcf8nsu","content":"<p>TBD</p>\r\n","length":1,"excerpt":"","more":"<p>TBD</p>\r\n"},{"title":"Categories","date":"2024-09-08T12:08:26.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2024-09-08 20:08:26\ntype: categories\ncomments: false\n---\n","updated":"2024-09-08T12:13:39.004Z","path":"categories/index.html","layout":"page","_id":"cm4v1fyu70002ssil117uhgho","content":"\r\n","length":0,"excerpt":"","more":"\r\n"},{"title":"404 Not Found","date":"2024-09-12T15:49:23.000Z","comments":0,"toc":false,"_content":"","source":"404/index.md","raw":"---\ntitle: 404 Not Found\ndate: 2024-09-12 23:49:23\npermalink: /404.html\ncomments: false\ntoc: false\n---\n","updated":"2024-09-12T15:57:04.704Z","path":"/404.html","layout":"page","_id":"cm4v1fyub0006ssilfmq9c1vu","content":"\r\n","length":0,"excerpt":"","more":"\r\n"},{"title":"Tags","date":"2024-09-08T09:29:15.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2024-09-08 17:29:15\ntype: tags\ncomments: false\n---\n","updated":"2024-09-08T09:57:50.758Z","path":"tags/index.html","layout":"page","_id":"cm4v1fyuc0008ssil48qpdoty","content":"\r\n","length":0,"excerpt":"","more":"\r\n"}],"Post":[{"title":"读书笔记-大话设计模式 Ch1-","date":"2024-09-24T15:12:19.000Z","hidden":true,"_content":"\n[Chapter 1: 简单工厂模式](#chapter-1-简单工厂模式)\n\n**好的代码可维护, 可复用, 可扩展, 灵活性强.**\n\n<!--more-->\n\n<p><font size = 5><b>目录</b></font></p>\n\n## Chapter 1: 简单工厂模式\n","source":"_posts/BookNote-DesignPatterns-by-JieCheng-2.md","raw":"---\ntitle: 读书笔记-大话设计模式 Ch1-\ndate: 2024-09-24 23:12:19\nhidden: true\ntags:\n- 读书笔记\n- 设计模式\ncategories:\n- 读书笔记-设计模式\n---\n\n[Chapter 1: 简单工厂模式](#chapter-1-简单工厂模式)\n\n**好的代码可维护, 可复用, 可扩展, 灵活性强.**\n\n<!--more-->\n\n<p><font size = 5><b>目录</b></font></p>\n\n## Chapter 1: 简单工厂模式\n","slug":"BookNote-DesignPatterns-by-JieCheng-2","published":1,"updated":"2024-10-30T11:51:12.030Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyu50001ssildx3xeoqn","content":"<p><a href=\"#chapter-1-简单工厂模式\">Chapter 1: 简单工厂模式</a></p>\r\n<p><strong>好的代码可维护, 可复用, 可扩展, 灵活性强.</strong></p>\r\n<span id=\"more\"></span>\r\n<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<h2 id=\"chapter-1-简单工厂模式\">Chapter 1: 简单工厂模式</h2>\r\n<!-- flag of hidden posts -->","length":44,"excerpt":"<p><a href=\"#chapter-1-简单工厂模式\">Chapter 1: 简单工厂模式</a></p>\r\n<p><strong>好的代码可维护, 可复用, 可扩展, 灵活性强.</strong></p>","more":"<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<h2 id=\"chapter-1-简单工厂模式\">Chapter 1: 简单工厂模式</h2>"},{"title":"读书笔记-大话设计模式 Ch0","date":"2024-09-10T11:45:47.000Z","hidden":false,"_content":"\n**精彩的代码是如何想出来的, 要比看到精彩的代码更加令人期待.**\n\n<!-- more -->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [书籍基本信息](#书籍基本信息)\n- [Chapter 0: Preview 面向对象基础](#chapter-0-preview-面向对象基础)\n\n---\n\n## 书籍基本信息\n\n《大话设计模式》程杰 2007.\n\n本文***不提供***书籍的电子版文件, 请有需要的读者移步至**Z-library**或其他渠道获得.\n\n本书以情景对话形式, 辅以故事或例子介绍设计模式, 以C#语言书写代码, 适合有面向过程编程基础但面向对象编程能力弱的初学者.\n\n## Chapter 0: Preview 面向对象基础\n\n> 附录A 培训实习生——面向对象基础\n>\n> **Tips:** 本部分不设计具体的语法细节, 特性和原理, 仅作示例, 如有需去可移步至专业书籍文献寻求细节, 如[**微软官方**](https://learn.microsoft.com/en-us/dotnet/csharp/)或书籍[**C#图解教程**](https://book.douban.com/subject/34894447/).\n\n- **对象(Object):** 对象是一个自包含的实体, 用一组可识别的特性和行为来标识.\n\n    > **Tips:** 定义比较拗口, 通俗来说, 对象是对事物的抽象, 一切事物都可以称为对象.\n\n- **面向对象编程(Object-Oriented Programming):** 面向对象的编程.\n\n    > **Tips:** 简称OOP, 区别于面向过程编程, 面向过程需要分析得出步骤, 按序实现程序功能. OOP首先对事物抽象为\"对象\", 用对象的属性和行为解决问题.\n\n- **类(Class):** 具有相同属性和功能对象的抽象集合.\n\n``` C#\nclass Cat {\n    public string shout() {\n        return \"mew\";\n    }\n}\n```\n\n- **实例(Instance) & 实例化:** 实例是真实的对象, new得到实例的过程称为实例化.\n\n    > **Tips:** 类就像是工厂的蓝图, 实例就是生产出来的产品, 一个类只有实例化后才可以调用(可能不严谨, 存疑), 和蓝图与产品一样, 一个类可以实例化出多个不同的实例(**学生类**可以实例化为**学生李华**, **学生张三**等).\n\n``` C#\nCat cat = new Cat();\n```\n\n- **修饰符:**\n  - **public:** 修饰的类成员允许被任何类访问\n  - **protected:** 修饰的类成员仅允许该类和其子类访问\n  - **private:** 修饰的类成员仅允许该类访问\n\n    > **Tips:** 程序设计是一门权衡和妥协的艺术, 对OOP为何如此设计的读者可自行查阅OOP发展的历史.\n\n- **属性:** 属性是一个方法或一对方法, 在调用它的代码看来, 它是一个字段, 即属性适合于以字段的方法使用方法调用的场合.\n\n- **字段:** 储存类设计所需的数据, 形式上是与类相关的变量.\n\n``` C#\nclass Example{\n    private int num; //声明一个私有内部字段, 修饰符private\n    public int Num { //Num公有外部属性, 修饰符public\n        get { //外部读取方法\n            return Num;\n        }\n        set { //外部修改方法, 删去此方法时表示Num是只读的.\n            Num = value; // set含有隐式参数, 由关键字value表示, 用于赋值\n        }\n    }\n}\n```\n\n> **Tips:** 属性和字段的描述比较抽象, 推荐直接结合代码理解. 笔者认为是一种语法糖上的tricky, 在其他语言OOP也有相似的写法. 这种写法的好处是隔离内部与外部, 仅允许类提供的公共方法访问类内成员变量.\n\n- **构造方法/构造函数:** 对类进行初始化的方法. 与类同名, 无返回值, 不需要void, 在new中调用.\n\n    > **Tips:** 以上语法细节适用于C#, 非C#可能会有差别, 类中不显示写明构造函数时由编译器默认构造(更多语法细节和原理请移步至讨论C#的相关文献).\n\n``` C#\nclass Cat {\n    private string name;\n    public Cat(string name){ //这是构造函数\n        this.name = name;\n    }\n}\n```\n\n- **重载(overload):** 提供了创建多个同名方法(Function)的功能, 重载方法的参数类型不同. 重载可以在不改变原方法基础上添加新功能.\n\n    > **Tips:** 这里**参数类型的不同**指的是参数个数不同或参数类型的不同(详见代码示例)\n\n``` C#\nclass Example{\n    //不仅构造函数, 普通函数也可以重载\n    public function(){};\n    public function(int arg_1){};\n    public function(float arg_1){};\n    public function(int arg_1, float arg_2){};\n    public function(float arg_1, int arg_2){};//类型顺序不同也会被认为是重载\n}\n```\n\n- **封装:** 每个对象包含该对象操作所需的所有信息, 不必依赖其他对象来完成自己的操作, 该特性称为封装.\n\n    > **Addtional:** 良好的封装可以减少耦合, 类内部实现可以自由修改, 具有清晰的对外接口\n\n- **继承:** 对象的继承代表了一种\"**is-a**\"关系, 若描述为\"B是A\", 则认为B可以继承A. 又可以理解为B是A的一种特殊化, B拥有A的特性之外, 还拥有自己独特的特性. 即继承代表了一种包含关系, A包含B.\n\n    > **Addtional:**\n    > - 继承的双方称为**子类/派生类&父类/基类**.\n    > - 子类继承父类的成员有方法, 域, 属性, 事件, 索引指示器\n    > - 构造方法**无法**继承, 只能调用, 可以使用**base**关键字(C#语法特性)\n\n``` C#\nclass Animal { //父类\n    protected string name = \"\";\n    public Animal() { //构造函数\n        this.name = \"unamed\";\n    }\n    public Animal(string name) {\n        this.name = name;\n    }\n    protected int shoutNum = 3;\n    public int ShoutNum { //属性\n        get {\n            return shoutNum;\n        }\n        set {\n            shoutNum = value;\n        }\n    }\n}\n\nclass Cat : Animal { //继承父类Animal的子类Cat\n    public Cat() : base() {}\n    public Cat(string name) : base(name) {}\n\n    public string Shout() {\n        string result = \"\";\n        for(int i = 0; i < shoutNum; i++){\n            result += \"mew \";\n        }\n        return result;\n    }\n}\n\nclass Dog : Animal { //继承父类Animal的子类Dog\n    public Dog() : base() {}\n    public Dog(string name) : base(name) {}\n\n    public string Shout() {\n        string result = \"\";\n        for(int i = 0; i < shoutNum; i++){\n            result += \"woof \";\n        }\n        return result;\n    }\n}\n```\n\n> **Tips:** 继承的**优点**是使子类公共部分放在了父类, 代码得到了共享, 减少了代码重复, 修改和扩展都变得相对容易. 但**缺点**也是显而易见的, 继承会破坏封装, 父类实现的细节暴露给子类, 父类和子类间是强耦合的.\n\n- **多态:** 多态表示不同的对象可以执行相同的动作, 但通过自己的代码执行.\n\n    > **Additional:**\n    > - 子类以父类身份出现\n    > - 子类工作时以自己的方式实现\n    > - 子类以父类身份出现时, 无法使用子类特有的属性和方法\n    >\n    > **Tips:** 在父类中, 该动作需要声明为虚拟的, 用关键字**virtual**标识.\n\n- **重写/覆写(override):** 子类使用关键字**override**将父类实现替换为自己的实现.\n\n``` C#\nclass Animal{\n    ......\n    public virtual string Shout(){ //声明为虚方法\n        return \"\";\n    }\n}\nclass Cat : Animal{\n    ......\n    public override string Shout(){ //覆写\n        ....... //略, 代码见上文\n    }\n}\nclass Dog : Animal{\n    ......\n    public override string Shout(){ //覆写\n        ....... //略, 代码见上文\n    }\n}\n\n/*-----------------------------------------------------*/\n/*执行环境*/\n\narrayAnimal = new Animal[5];\narrayAnimal[0] = new Cat();\narrayAnimal[1] = new Dog();\nforeach(Animal item in arrayAnimal){\n    MessageBox.Show(item.Shout()); //Cat为\"mew\", Dog为\"woof\".\n}\n\n```\n\n> **Tips1:** C#的多态性分为静态多态性和动态多态性. 静态多态性即为前文提到的overload重载, 在编译时确定; 动态多态性为override覆写, 在运行时确定, 通过抽象类(见下文)和虚方法实现.\n>\n> **Tips2:** 笔者在翻阅相关资料时, 在C++语言中发现了更为复杂的机制, overwrite重写和override覆写存在区别, 详见[**博客园|C++中的Overload、Override和Overwrite**](https://www.cnblogs.com/kuliuheng/p/4107012.html)\n>\n> **Addtional:** 原书对上述实现Animal Shout的代码进行重构, 具体方法为将Shout()声明为父类公共方法(去掉virtual), 声明新的虚方法getSound(), 在Shout()中调用, 在子类中覆写(override), 从而避免了代码重复, 此处笔者不再浪费篇幅详细赘述.\n\n- **抽象类&抽象方法:** C#允许将类和方法用关键字**abstract**声明, 即抽象类, 抽象方法.\n\n    > **Addtional:**\n    > - 抽象类不能被实例化\n    > - 抽象方法必须被子类覆写(override)\n    > - 含有抽象方法的类必须声明为抽象类, 不论是否具有一般方法\n    > - 使用时考虑让抽象类拥有尽可能多的共同代码, 拥有尽可能少的数据\n    >\n    > **Tips:** 抽象类通常代表一种抽象概念, 提供了一个继承的出发点, 当设计一个新的抽象类时, 一定是用来继承的. 因此在继承结构中, 叶节点应当是具体类, 非叶节点应当是抽象类.\n\n- **接口(Interface):** 接口是把隐式公共方法和属性组合起来, 以封装特定功能的一个集合. 类实现了接口就可以支持接口所指定的所有属性和成员. 接口不允许提供任何成员的执行方法(因此接口不能实例化, 没有构造方法, 字段和修饰符, 不能声明静态或虚拟等).\n\n    > **Addtionnal:**\n    > - 实现接口的类必须实现接口中所有方法和属性.\n    > - 一个类可以支持多个接口, 不同类也可以支持相同接口.\n    >\n    > **Tips:** [菜鸟教程|C# Interface](https://www.runoob.com/csharp/csharp-interface.html)将接口表述为:\n    >\n    >接口定义了所有类继承接口时应遵循的语法合同. 接口定义了语法合同\"是什么\"部分, 派生类定义了语法合同\"怎么做\"部分. 接口定义了属性, 方法和事件, 这些都是接口的成员. 接口只包含了成员的声明. 成员的定义是派生类的责任. 接口提供了派生类应遵循的标准结构.\n    >\n    > **书写规范:** 接口的命名需要在前面加一个大写\"I\".\n\n``` C#\n// 笔者在此化简了书目中提供的例子, 能理解即可.\n// 叮当猫继承自上文出现的Cat类, 内部需要实现变东西的接口\n\ninterface IChange {\n    string ChangeThing(string thing);\n}\n\nclass MachineCat : Cat, IChange {\n    public MachineCat() : base(){}\n    public MachineCat() : base(name){}\n\n    public string ChangeThing(string thing){ //实现接口, 不需要使用override修饰\n        return base.Shout() + \"我有万能口袋, 可以变出: \" + thing;\n    }\n}\n```\n\n> **Additional:**\n> 笔者在此补充一点C#的语法特性, 接口也可以继承接口, 假设IB继承IA, 在IB中不需要声明IA中的声明, 但实现IB的类需要实现IA和IB中的所有声明.\n>\n> **Compare: Class v.s. Interface**\n>\n> - **语法上:** 抽象类可以给出一些成员的实现, 接口不能包含成员的实现, 抽象类的抽象成员可被子类部分实现, 但接口的成员需要类全部实现, 一个类只能继承**一个**抽象类, 但可以实现**多个**接口.\n> - **含义上:** 类是对象的抽象, 抽象类是对类的抽象, 接口是对**行为**的抽象.\n> - **使用上:** 如果行为跨越不同类的对象, 可使用接口; 对于一些相似的类对象, 用继承抽象类. 需要注意的是, 实现接口和继承抽象类并不冲突.\n> - **设计角度上:** 抽象类是从子类中发现了公共的东西, 泛化出父类, 然后子类继承父类, 而接口根本不知道子类的存在, 方法如何实现不明确, 预先定义.\n\n- **泛型(Generic):** 泛型是具有占位符(类型参数)的类, 结构, 接口和方法, 这些占位符是类, 结构, 接口和方法所储存域或使用的一个或多个类型的占位符. 泛型集合类可以将类型参数用作它所存储的对象的类型的占位符: 类型参数作为其字段的类型和其方法的参数类型出现.\n\n    > **Additional:** 通常情况下, 都建议使用泛型集合, 因为这样可以获得类型安全的直接优点而不需要从基集合类型派生并实现类型特定成员. 此外, 如果集合元素为值类型, 泛型集合类型的性能通常优于对应的非泛型集合类型, 因为使用泛型时不必对元素进行装箱.\n    >\n    > **Tips:** [菜鸟教程|C# Generic](https://www.runoob.com/csharp/csharp-generic.html)将泛型表述为:\n    >\n    > 泛型(Generic)允许您延迟编写类或方法中的编程元素的数据类型的规范, 直到实际在程序中使用它的时候. 换句话说, 泛型允许您编写一个可以与任何数据类型一起工作的类或方法.\n    >\n    > 泛型的定义较为晦涩, 建议结合代码理解. 笔者在此强烈建议阅读更多的资料来学习泛型.\n\n``` C#\nusing System.Collections.Generic; //增加泛型集合命名空间\n\npublic partial class Forml : Form{\n    IList<Animal> arrayAnimal; // 声明泛型集合变量, 表示只接受Animal类型\n    //List<Animal> arrayAnimal; 两种写法是等价的\n\n    private Event(){\n        arrayAnimal = new List<Animal>();\n\n        arrayAnimal.Add(new Cat());\n        arrayAnimal.Add(new Dog());\n        arrayAnimal.Add(123); // Error! Invalid Type \n    }\n}\n```\n\n- **委托:** 委托是对函数的封装, 可以当作给方法的特征指定一个名称. 委托对象用关键字**delegate**声明.\n\n- **事件:** 事件时委托的一种特殊形式, 当发生有意义的事情时, 事件对象处理通知过程. 事件对象用关键字**event**声明.\n\n> **Additional:** 委托是一种引用方法的类型, 一旦为委托分配了方法, 委托将与该方法具有完全相同的行为. 事件则是在发生其他类或对象关注的事情时, 类或对象可通过事件通知它们.\n\n``` C#\n//情境: 猫Tom叫的时候两只老鼠Jerry和Jack要跑.\n\nclass Cat{\n    private string name;\n    public Cat(string name){\n        this.name = name;\n    }\n\n    public delegate void CatShoutEventHandler(); // 声明委托\n    public event CatShoutEventHandler CatShout; //声明事件\n\n    public void Shout(){\n        Console.WriteLine(\"喵, 我是{0}.\", name);\n        if (CatShout != null){ // 如果声明了事件CatShout\n            CatShout();\n        }\n    }\n}\n\nclass Mouse{\n    private string name;\n    public Mouse(string name){\n        this.name = name;\n    }\n\n    public void Run(){\n        Console.WriteLine(\"老猫来了, {0}快跑\", name);\n    }\n}\n\nstatic void Main(string[] args){\n    Cat cat = new Cat(\"Tom\");\n    Mouse mouse1 = new Mouse(\"Jerry\");\n    Mouse mouse2 = new Mouse(\"Jack\");\n\n    cat.CatShout += new Cat.CatShoutEventHandler(mouse1.Run);\n    cat.CatShout += new Cat.CatShoutEventHandler(mouse2.Run); \n    // \"+=\" 表示 \"add_CatShout\" 的意思; 与之相反 \"-=\" 表示 \"remove_CatShout()\"\n\n    cat.Shout();\n    Console.Read();\n}\n```\n\n运行结果:\n\n``` Shell\n喵, 我是Tom.\n老猫来了, Jerry快跑!\n老猫来了, Jack快跑!\n```\n\n- **EventArgs:** EventArgs是包含事件数据的类的基类.\n\n``` C#\npublic class CatShoutEventArgs : EventArgs{\n    private string name;\n    public string Name{\n        get {return name; }\n        set {name = value; }\n    }\n}\n\nclass Cat{\n    private string name;\n    public Cat(string name){\n        this.name = name;\n    }\n\n    public delegate void CatShoutEventHandler(object sender, CatShoutEventArgs args);\n    public event CatShoutEventHandler CatShout;\n\n    public void Shout(){\n        Console.WriteLine(\"喵, 我是{0}.\", name);\n        if(CatShout != null){\n            CatShoutEventArgs e = new CatShoutEventArgs();\n            e.Name = this.name;\n            CatShout(this, e);\n        }\n    }\n}\n\nclass Mouse{\n    private string name;\n    public Mouse(string name){\n        this.name = name;\n    }\n\n    public void Run(object sender, CatShoutEventArgs args){\n        Console.WriteLine(\"老猫{0}来了, {1}快跑!\", args.Name, name);\n    }\n}\n```\n\nMain执行结果:\n\n``` Shell\n喵, 我是Tom.\n老猫Tom来了, Jerry快跑!\n老猫Tom来了, Jack快跑!\n```\n","source":"_posts/BookNote-DesignPatterns-by-JieCheng-1.md","raw":"---\ntitle: 读书笔记-大话设计模式 Ch0\ndate: 2024-09-10 19:45:47\nhidden: false\ntags:\n- 读书笔记\n- 设计模式\ncategories:\n- 读书笔记-设计模式\n---\n\n**精彩的代码是如何想出来的, 要比看到精彩的代码更加令人期待.**\n\n<!-- more -->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [书籍基本信息](#书籍基本信息)\n- [Chapter 0: Preview 面向对象基础](#chapter-0-preview-面向对象基础)\n\n---\n\n## 书籍基本信息\n\n《大话设计模式》程杰 2007.\n\n本文***不提供***书籍的电子版文件, 请有需要的读者移步至**Z-library**或其他渠道获得.\n\n本书以情景对话形式, 辅以故事或例子介绍设计模式, 以C#语言书写代码, 适合有面向过程编程基础但面向对象编程能力弱的初学者.\n\n## Chapter 0: Preview 面向对象基础\n\n> 附录A 培训实习生——面向对象基础\n>\n> **Tips:** 本部分不设计具体的语法细节, 特性和原理, 仅作示例, 如有需去可移步至专业书籍文献寻求细节, 如[**微软官方**](https://learn.microsoft.com/en-us/dotnet/csharp/)或书籍[**C#图解教程**](https://book.douban.com/subject/34894447/).\n\n- **对象(Object):** 对象是一个自包含的实体, 用一组可识别的特性和行为来标识.\n\n    > **Tips:** 定义比较拗口, 通俗来说, 对象是对事物的抽象, 一切事物都可以称为对象.\n\n- **面向对象编程(Object-Oriented Programming):** 面向对象的编程.\n\n    > **Tips:** 简称OOP, 区别于面向过程编程, 面向过程需要分析得出步骤, 按序实现程序功能. OOP首先对事物抽象为\"对象\", 用对象的属性和行为解决问题.\n\n- **类(Class):** 具有相同属性和功能对象的抽象集合.\n\n``` C#\nclass Cat {\n    public string shout() {\n        return \"mew\";\n    }\n}\n```\n\n- **实例(Instance) & 实例化:** 实例是真实的对象, new得到实例的过程称为实例化.\n\n    > **Tips:** 类就像是工厂的蓝图, 实例就是生产出来的产品, 一个类只有实例化后才可以调用(可能不严谨, 存疑), 和蓝图与产品一样, 一个类可以实例化出多个不同的实例(**学生类**可以实例化为**学生李华**, **学生张三**等).\n\n``` C#\nCat cat = new Cat();\n```\n\n- **修饰符:**\n  - **public:** 修饰的类成员允许被任何类访问\n  - **protected:** 修饰的类成员仅允许该类和其子类访问\n  - **private:** 修饰的类成员仅允许该类访问\n\n    > **Tips:** 程序设计是一门权衡和妥协的艺术, 对OOP为何如此设计的读者可自行查阅OOP发展的历史.\n\n- **属性:** 属性是一个方法或一对方法, 在调用它的代码看来, 它是一个字段, 即属性适合于以字段的方法使用方法调用的场合.\n\n- **字段:** 储存类设计所需的数据, 形式上是与类相关的变量.\n\n``` C#\nclass Example{\n    private int num; //声明一个私有内部字段, 修饰符private\n    public int Num { //Num公有外部属性, 修饰符public\n        get { //外部读取方法\n            return Num;\n        }\n        set { //外部修改方法, 删去此方法时表示Num是只读的.\n            Num = value; // set含有隐式参数, 由关键字value表示, 用于赋值\n        }\n    }\n}\n```\n\n> **Tips:** 属性和字段的描述比较抽象, 推荐直接结合代码理解. 笔者认为是一种语法糖上的tricky, 在其他语言OOP也有相似的写法. 这种写法的好处是隔离内部与外部, 仅允许类提供的公共方法访问类内成员变量.\n\n- **构造方法/构造函数:** 对类进行初始化的方法. 与类同名, 无返回值, 不需要void, 在new中调用.\n\n    > **Tips:** 以上语法细节适用于C#, 非C#可能会有差别, 类中不显示写明构造函数时由编译器默认构造(更多语法细节和原理请移步至讨论C#的相关文献).\n\n``` C#\nclass Cat {\n    private string name;\n    public Cat(string name){ //这是构造函数\n        this.name = name;\n    }\n}\n```\n\n- **重载(overload):** 提供了创建多个同名方法(Function)的功能, 重载方法的参数类型不同. 重载可以在不改变原方法基础上添加新功能.\n\n    > **Tips:** 这里**参数类型的不同**指的是参数个数不同或参数类型的不同(详见代码示例)\n\n``` C#\nclass Example{\n    //不仅构造函数, 普通函数也可以重载\n    public function(){};\n    public function(int arg_1){};\n    public function(float arg_1){};\n    public function(int arg_1, float arg_2){};\n    public function(float arg_1, int arg_2){};//类型顺序不同也会被认为是重载\n}\n```\n\n- **封装:** 每个对象包含该对象操作所需的所有信息, 不必依赖其他对象来完成自己的操作, 该特性称为封装.\n\n    > **Addtional:** 良好的封装可以减少耦合, 类内部实现可以自由修改, 具有清晰的对外接口\n\n- **继承:** 对象的继承代表了一种\"**is-a**\"关系, 若描述为\"B是A\", 则认为B可以继承A. 又可以理解为B是A的一种特殊化, B拥有A的特性之外, 还拥有自己独特的特性. 即继承代表了一种包含关系, A包含B.\n\n    > **Addtional:**\n    > - 继承的双方称为**子类/派生类&父类/基类**.\n    > - 子类继承父类的成员有方法, 域, 属性, 事件, 索引指示器\n    > - 构造方法**无法**继承, 只能调用, 可以使用**base**关键字(C#语法特性)\n\n``` C#\nclass Animal { //父类\n    protected string name = \"\";\n    public Animal() { //构造函数\n        this.name = \"unamed\";\n    }\n    public Animal(string name) {\n        this.name = name;\n    }\n    protected int shoutNum = 3;\n    public int ShoutNum { //属性\n        get {\n            return shoutNum;\n        }\n        set {\n            shoutNum = value;\n        }\n    }\n}\n\nclass Cat : Animal { //继承父类Animal的子类Cat\n    public Cat() : base() {}\n    public Cat(string name) : base(name) {}\n\n    public string Shout() {\n        string result = \"\";\n        for(int i = 0; i < shoutNum; i++){\n            result += \"mew \";\n        }\n        return result;\n    }\n}\n\nclass Dog : Animal { //继承父类Animal的子类Dog\n    public Dog() : base() {}\n    public Dog(string name) : base(name) {}\n\n    public string Shout() {\n        string result = \"\";\n        for(int i = 0; i < shoutNum; i++){\n            result += \"woof \";\n        }\n        return result;\n    }\n}\n```\n\n> **Tips:** 继承的**优点**是使子类公共部分放在了父类, 代码得到了共享, 减少了代码重复, 修改和扩展都变得相对容易. 但**缺点**也是显而易见的, 继承会破坏封装, 父类实现的细节暴露给子类, 父类和子类间是强耦合的.\n\n- **多态:** 多态表示不同的对象可以执行相同的动作, 但通过自己的代码执行.\n\n    > **Additional:**\n    > - 子类以父类身份出现\n    > - 子类工作时以自己的方式实现\n    > - 子类以父类身份出现时, 无法使用子类特有的属性和方法\n    >\n    > **Tips:** 在父类中, 该动作需要声明为虚拟的, 用关键字**virtual**标识.\n\n- **重写/覆写(override):** 子类使用关键字**override**将父类实现替换为自己的实现.\n\n``` C#\nclass Animal{\n    ......\n    public virtual string Shout(){ //声明为虚方法\n        return \"\";\n    }\n}\nclass Cat : Animal{\n    ......\n    public override string Shout(){ //覆写\n        ....... //略, 代码见上文\n    }\n}\nclass Dog : Animal{\n    ......\n    public override string Shout(){ //覆写\n        ....... //略, 代码见上文\n    }\n}\n\n/*-----------------------------------------------------*/\n/*执行环境*/\n\narrayAnimal = new Animal[5];\narrayAnimal[0] = new Cat();\narrayAnimal[1] = new Dog();\nforeach(Animal item in arrayAnimal){\n    MessageBox.Show(item.Shout()); //Cat为\"mew\", Dog为\"woof\".\n}\n\n```\n\n> **Tips1:** C#的多态性分为静态多态性和动态多态性. 静态多态性即为前文提到的overload重载, 在编译时确定; 动态多态性为override覆写, 在运行时确定, 通过抽象类(见下文)和虚方法实现.\n>\n> **Tips2:** 笔者在翻阅相关资料时, 在C++语言中发现了更为复杂的机制, overwrite重写和override覆写存在区别, 详见[**博客园|C++中的Overload、Override和Overwrite**](https://www.cnblogs.com/kuliuheng/p/4107012.html)\n>\n> **Addtional:** 原书对上述实现Animal Shout的代码进行重构, 具体方法为将Shout()声明为父类公共方法(去掉virtual), 声明新的虚方法getSound(), 在Shout()中调用, 在子类中覆写(override), 从而避免了代码重复, 此处笔者不再浪费篇幅详细赘述.\n\n- **抽象类&抽象方法:** C#允许将类和方法用关键字**abstract**声明, 即抽象类, 抽象方法.\n\n    > **Addtional:**\n    > - 抽象类不能被实例化\n    > - 抽象方法必须被子类覆写(override)\n    > - 含有抽象方法的类必须声明为抽象类, 不论是否具有一般方法\n    > - 使用时考虑让抽象类拥有尽可能多的共同代码, 拥有尽可能少的数据\n    >\n    > **Tips:** 抽象类通常代表一种抽象概念, 提供了一个继承的出发点, 当设计一个新的抽象类时, 一定是用来继承的. 因此在继承结构中, 叶节点应当是具体类, 非叶节点应当是抽象类.\n\n- **接口(Interface):** 接口是把隐式公共方法和属性组合起来, 以封装特定功能的一个集合. 类实现了接口就可以支持接口所指定的所有属性和成员. 接口不允许提供任何成员的执行方法(因此接口不能实例化, 没有构造方法, 字段和修饰符, 不能声明静态或虚拟等).\n\n    > **Addtionnal:**\n    > - 实现接口的类必须实现接口中所有方法和属性.\n    > - 一个类可以支持多个接口, 不同类也可以支持相同接口.\n    >\n    > **Tips:** [菜鸟教程|C# Interface](https://www.runoob.com/csharp/csharp-interface.html)将接口表述为:\n    >\n    >接口定义了所有类继承接口时应遵循的语法合同. 接口定义了语法合同\"是什么\"部分, 派生类定义了语法合同\"怎么做\"部分. 接口定义了属性, 方法和事件, 这些都是接口的成员. 接口只包含了成员的声明. 成员的定义是派生类的责任. 接口提供了派生类应遵循的标准结构.\n    >\n    > **书写规范:** 接口的命名需要在前面加一个大写\"I\".\n\n``` C#\n// 笔者在此化简了书目中提供的例子, 能理解即可.\n// 叮当猫继承自上文出现的Cat类, 内部需要实现变东西的接口\n\ninterface IChange {\n    string ChangeThing(string thing);\n}\n\nclass MachineCat : Cat, IChange {\n    public MachineCat() : base(){}\n    public MachineCat() : base(name){}\n\n    public string ChangeThing(string thing){ //实现接口, 不需要使用override修饰\n        return base.Shout() + \"我有万能口袋, 可以变出: \" + thing;\n    }\n}\n```\n\n> **Additional:**\n> 笔者在此补充一点C#的语法特性, 接口也可以继承接口, 假设IB继承IA, 在IB中不需要声明IA中的声明, 但实现IB的类需要实现IA和IB中的所有声明.\n>\n> **Compare: Class v.s. Interface**\n>\n> - **语法上:** 抽象类可以给出一些成员的实现, 接口不能包含成员的实现, 抽象类的抽象成员可被子类部分实现, 但接口的成员需要类全部实现, 一个类只能继承**一个**抽象类, 但可以实现**多个**接口.\n> - **含义上:** 类是对象的抽象, 抽象类是对类的抽象, 接口是对**行为**的抽象.\n> - **使用上:** 如果行为跨越不同类的对象, 可使用接口; 对于一些相似的类对象, 用继承抽象类. 需要注意的是, 实现接口和继承抽象类并不冲突.\n> - **设计角度上:** 抽象类是从子类中发现了公共的东西, 泛化出父类, 然后子类继承父类, 而接口根本不知道子类的存在, 方法如何实现不明确, 预先定义.\n\n- **泛型(Generic):** 泛型是具有占位符(类型参数)的类, 结构, 接口和方法, 这些占位符是类, 结构, 接口和方法所储存域或使用的一个或多个类型的占位符. 泛型集合类可以将类型参数用作它所存储的对象的类型的占位符: 类型参数作为其字段的类型和其方法的参数类型出现.\n\n    > **Additional:** 通常情况下, 都建议使用泛型集合, 因为这样可以获得类型安全的直接优点而不需要从基集合类型派生并实现类型特定成员. 此外, 如果集合元素为值类型, 泛型集合类型的性能通常优于对应的非泛型集合类型, 因为使用泛型时不必对元素进行装箱.\n    >\n    > **Tips:** [菜鸟教程|C# Generic](https://www.runoob.com/csharp/csharp-generic.html)将泛型表述为:\n    >\n    > 泛型(Generic)允许您延迟编写类或方法中的编程元素的数据类型的规范, 直到实际在程序中使用它的时候. 换句话说, 泛型允许您编写一个可以与任何数据类型一起工作的类或方法.\n    >\n    > 泛型的定义较为晦涩, 建议结合代码理解. 笔者在此强烈建议阅读更多的资料来学习泛型.\n\n``` C#\nusing System.Collections.Generic; //增加泛型集合命名空间\n\npublic partial class Forml : Form{\n    IList<Animal> arrayAnimal; // 声明泛型集合变量, 表示只接受Animal类型\n    //List<Animal> arrayAnimal; 两种写法是等价的\n\n    private Event(){\n        arrayAnimal = new List<Animal>();\n\n        arrayAnimal.Add(new Cat());\n        arrayAnimal.Add(new Dog());\n        arrayAnimal.Add(123); // Error! Invalid Type \n    }\n}\n```\n\n- **委托:** 委托是对函数的封装, 可以当作给方法的特征指定一个名称. 委托对象用关键字**delegate**声明.\n\n- **事件:** 事件时委托的一种特殊形式, 当发生有意义的事情时, 事件对象处理通知过程. 事件对象用关键字**event**声明.\n\n> **Additional:** 委托是一种引用方法的类型, 一旦为委托分配了方法, 委托将与该方法具有完全相同的行为. 事件则是在发生其他类或对象关注的事情时, 类或对象可通过事件通知它们.\n\n``` C#\n//情境: 猫Tom叫的时候两只老鼠Jerry和Jack要跑.\n\nclass Cat{\n    private string name;\n    public Cat(string name){\n        this.name = name;\n    }\n\n    public delegate void CatShoutEventHandler(); // 声明委托\n    public event CatShoutEventHandler CatShout; //声明事件\n\n    public void Shout(){\n        Console.WriteLine(\"喵, 我是{0}.\", name);\n        if (CatShout != null){ // 如果声明了事件CatShout\n            CatShout();\n        }\n    }\n}\n\nclass Mouse{\n    private string name;\n    public Mouse(string name){\n        this.name = name;\n    }\n\n    public void Run(){\n        Console.WriteLine(\"老猫来了, {0}快跑\", name);\n    }\n}\n\nstatic void Main(string[] args){\n    Cat cat = new Cat(\"Tom\");\n    Mouse mouse1 = new Mouse(\"Jerry\");\n    Mouse mouse2 = new Mouse(\"Jack\");\n\n    cat.CatShout += new Cat.CatShoutEventHandler(mouse1.Run);\n    cat.CatShout += new Cat.CatShoutEventHandler(mouse2.Run); \n    // \"+=\" 表示 \"add_CatShout\" 的意思; 与之相反 \"-=\" 表示 \"remove_CatShout()\"\n\n    cat.Shout();\n    Console.Read();\n}\n```\n\n运行结果:\n\n``` Shell\n喵, 我是Tom.\n老猫来了, Jerry快跑!\n老猫来了, Jack快跑!\n```\n\n- **EventArgs:** EventArgs是包含事件数据的类的基类.\n\n``` C#\npublic class CatShoutEventArgs : EventArgs{\n    private string name;\n    public string Name{\n        get {return name; }\n        set {name = value; }\n    }\n}\n\nclass Cat{\n    private string name;\n    public Cat(string name){\n        this.name = name;\n    }\n\n    public delegate void CatShoutEventHandler(object sender, CatShoutEventArgs args);\n    public event CatShoutEventHandler CatShout;\n\n    public void Shout(){\n        Console.WriteLine(\"喵, 我是{0}.\", name);\n        if(CatShout != null){\n            CatShoutEventArgs e = new CatShoutEventArgs();\n            e.Name = this.name;\n            CatShout(this, e);\n        }\n    }\n}\n\nclass Mouse{\n    private string name;\n    public Mouse(string name){\n        this.name = name;\n    }\n\n    public void Run(object sender, CatShoutEventArgs args){\n        Console.WriteLine(\"老猫{0}来了, {1}快跑!\", args.Name, name);\n    }\n}\n```\n\nMain执行结果:\n\n``` Shell\n喵, 我是Tom.\n老猫Tom来了, Jerry快跑!\n老猫Tom来了, Jack快跑!\n```\n","slug":"BookNote-DesignPatterns-by-JieCheng-1","published":1,"updated":"2024-10-30T11:51:03.462Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyu80003ssila9pj5hhm","content":"<p><strong>精彩的代码是如何想出来的,\r\n要比看到精彩的代码更加令人期待.</strong></p>\r\n<span id=\"more\"></span>\r\n<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#书籍基本信息\">书籍基本信息</a></li>\r\n<li><a href=\"#chapter-0-preview-面向对象基础\">Chapter 0: Preview\r\n面向对象基础</a></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"书籍基本信息\">书籍基本信息</h2>\r\n<p>《大话设计模式》程杰 2007.</p>\r\n<p>本文<strong><em>不提供</em></strong>书籍的电子版文件,\r\n请有需要的读者移步至<strong>Z-library</strong>或其他渠道获得.</p>\r\n<p>本书以情景对话形式, 辅以故事或例子介绍设计模式, 以C#语言书写代码,\r\n适合有面向过程编程基础但面向对象编程能力弱的初学者.</p>\r\n<h2 id=\"chapter-0-preview-面向对象基础\">Chapter 0: Preview\r\n面向对象基础</h2>\r\n<blockquote>\r\n<p>附录A 培训实习生——面向对象基础</p>\r\n<p><strong>Tips:</strong> 本部分不设计具体的语法细节, 特性和原理,\r\n仅作示例, 如有需去可移步至专业书籍文献寻求细节, 如<a\r\nhref=\"https://learn.microsoft.com/en-us/dotnet/csharp/\"><strong>微软官方</strong></a>或书籍<a\r\nhref=\"https://book.douban.com/subject/34894447/\"><strong>C#图解教程</strong></a>.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>对象(Object):</strong> 对象是一个自包含的实体,\r\n用一组可识别的特性和行为来标识.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 定义比较拗口, 通俗来说, 对象是对事物的抽象,\r\n一切事物都可以称为对象.</p>\r\n</blockquote></li>\r\n<li><p><strong>面向对象编程(Object-Oriented Programming):</strong>\r\n面向对象的编程.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 简称OOP, 区别于面向过程编程,\r\n面向过程需要分析得出步骤, 按序实现程序功能. OOP首先对事物抽象为\"对象\",\r\n用对象的属性和行为解决问题.</p>\r\n</blockquote></li>\r\n<li><p><strong>类(Class):</strong>\r\n具有相同属性和功能对象的抽象集合.</p></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">shout</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;mew&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>实例(Instance) &amp; 实例化:</strong> 实例是真实的对象,\r\nnew得到实例的过程称为实例化.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 类就像是工厂的蓝图, 实例就是生产出来的产品,\r\n一个类只有实例化后才可以调用(可能不严谨, 存疑), 和蓝图与产品一样,\r\n一个类可以实例化出多个不同的实例(<strong>学生类</strong>可以实例化为<strong>学生李华</strong>,\r\n<strong>学生张三</strong>等).</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat cat = <span class=\"keyword\">new</span> Cat();</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>修饰符:</strong></p>\r\n<ul>\r\n<li><p><strong>public:</strong> 修饰的类成员允许被任何类访问</p></li>\r\n<li><p><strong>protected:</strong>\r\n修饰的类成员仅允许该类和其子类访问</p></li>\r\n<li><p><strong>private:</strong> 修饰的类成员仅允许该类访问</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 程序设计是一门权衡和妥协的艺术,\r\n对OOP为何如此设计的读者可自行查阅OOP发展的历史.</p>\r\n</blockquote></li>\r\n</ul></li>\r\n<li><p><strong>属性:</strong> 属性是一个方法或一对方法,\r\n在调用它的代码看来, 它是一个字段,\r\n即属性适合于以字段的方法使用方法调用的场合.</p></li>\r\n<li><p><strong>字段:</strong> 储存类设计所需的数据,\r\n形式上是与类相关的变量.</p></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> num; <span class=\"comment\">//声明一个私有内部字段, 修饰符private</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Num &#123; <span class=\"comment\">//Num公有外部属性, 修饰符public</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"comment\">//外部读取方法</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123; <span class=\"comment\">//外部修改方法, 删去此方法时表示Num是只读的.</span></span><br><span class=\"line\">            Num = <span class=\"keyword\">value</span>; <span class=\"comment\">// set含有隐式参数, 由关键字value表示, 用于赋值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 属性和字段的描述比较抽象,\r\n推荐直接结合代码理解. 笔者认为是一种语法糖上的tricky,\r\n在其他语言OOP也有相似的写法. 这种写法的好处是隔离内部与外部,\r\n仅允许类提供的公共方法访问类内成员变量.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>构造方法/构造函数:</strong> 对类进行初始化的方法.\r\n与类同名, 无返回值, 不需要void, 在new中调用.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 以上语法细节适用于C#, 非C#可能会有差别,\r\n类中不显示写明构造函数时由编译器默认构造(更多语法细节和原理请移步至讨论C#的相关文献).</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123; <span class=\"comment\">//这是构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>重载(overload):</strong>\r\n提供了创建多个同名方法(Function)的功能, 重载方法的参数类型不同.\r\n重载可以在不改变原方法基础上添加新功能.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n这里<strong>参数类型的不同</strong>指的是参数个数不同或参数类型的不同(详见代码示例)</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不仅构造函数, 普通函数也可以重载</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>()</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">int</span> arg_1</span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">float</span> arg_1</span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">int</span> arg_1, <span class=\"built_in\">float</span> arg_2</span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">float</span> arg_1, <span class=\"built_in\">int</span> arg_2</span>)</span>&#123;&#125;;<span class=\"comment\">//类型顺序不同也会被认为是重载</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>封装:</strong> 每个对象包含该对象操作所需的所有信息,\r\n不必依赖其他对象来完成自己的操作, 该特性称为封装.</p>\r\n<blockquote>\r\n<p><strong>Addtional:</strong> 良好的封装可以减少耦合,\r\n类内部实现可以自由修改, 具有清晰的对外接口</p>\r\n</blockquote></li>\r\n<li><p><strong>继承:</strong>\r\n对象的继承代表了一种\"<strong>is-a</strong>\"关系, 若描述为\"B是A\",\r\n则认为B可以继承A. 又可以理解为B是A的一种特殊化, B拥有A的特性之外,\r\n还拥有自己独特的特性. 即继承代表了一种包含关系, A包含B.</p>\r\n<blockquote>\r\n<strong>Addtional:</strong>\r\n<ul>\r\n<li>继承的双方称为<strong>子类/派生类&amp;父类/基类</strong>.</li>\r\n<li>子类继承父类的成员有方法, 域, 属性, 事件, 索引指示器</li>\r\n<li>构造方法<strong>无法</strong>继承, 只能调用,\r\n可以使用<strong>base</strong>关键字(C#语法特性)</li>\r\n</ul>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> &#123; <span class=\"comment\">//父类</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"built_in\">string</span> name = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span>()</span> &#123; <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">&quot;unamed&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"built_in\">int</span> shoutNum = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ShoutNum &#123; <span class=\"comment\">//属性</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> shoutNum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">            shoutNum = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> : <span class=\"title\">Animal</span> &#123; <span class=\"comment\">//继承父类Animal的子类Cat</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>() : <span class=\"title\">base</span>()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>) : <span class=\"title\">base</span>(<span class=\"params\">name</span>)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; shoutNum; i++)&#123;</span><br><span class=\"line\">            result += <span class=\"string\">&quot;mew &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"title\">Animal</span> &#123; <span class=\"comment\">//继承父类Animal的子类Dog</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span>() : <span class=\"title\">base</span>()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>) : <span class=\"title\">base</span>(<span class=\"params\">name</span>)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; shoutNum; i++)&#123;</span><br><span class=\"line\">            result += <span class=\"string\">&quot;woof &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n继承的<strong>优点</strong>是使子类公共部分放在了父类, 代码得到了共享,\r\n减少了代码重复, 修改和扩展都变得相对容易.\r\n但<strong>缺点</strong>也是显而易见的, 继承会破坏封装,\r\n父类实现的细节暴露给子类, 父类和子类间是强耦合的.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>多态:</strong> 多态表示不同的对象可以执行相同的动作,\r\n但通过自己的代码执行.</p>\r\n<blockquote>\r\n<strong>Additional:</strong>\r\n<ul>\r\n<li>子类以父类身份出现</li>\r\n<li>子类工作时以自己的方式实现</li>\r\n<li>子类以父类身份出现时, 无法使用子类特有的属性和方法</li>\r\n</ul>\r\n<p><strong>Tips:</strong> 在父类中, 该动作需要声明为虚拟的,\r\n用关键字<strong>virtual</strong>标识.</p>\r\n</blockquote></li>\r\n<li><p><strong>重写/覆写(override):</strong>\r\n子类使用关键字<strong>override</strong>将父类实现替换为自己的实现.</p></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span>&#123; <span class=\"comment\">//声明为虚方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> : <span class=\"title\">Animal</span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span>&#123; <span class=\"comment\">//覆写</span></span><br><span class=\"line\">        ....... <span class=\"comment\">//略, 代码见上文</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"title\">Animal</span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span>&#123; <span class=\"comment\">//覆写</span></span><br><span class=\"line\">        ....... <span class=\"comment\">//略, 代码见上文</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*-----------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/*执行环境*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">arrayAnimal = <span class=\"keyword\">new</span> Animal[<span class=\"number\">5</span>];</span><br><span class=\"line\">arrayAnimal[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">arrayAnimal[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(Animal item <span class=\"keyword\">in</span> arrayAnimal)&#123;</span><br><span class=\"line\">    MessageBox.Show(item.Shout()); <span class=\"comment\">//Cat为&quot;mew&quot;, Dog为&quot;woof&quot;.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips1:</strong> C#的多态性分为静态多态性和动态多态性.\r\n静态多态性即为前文提到的overload重载, 在编译时确定;\r\n动态多态性为override覆写, 在运行时确定,\r\n通过抽象类(见下文)和虚方法实现.</p>\r\n<p><strong>Tips2:</strong> 笔者在翻阅相关资料时,\r\n在C++语言中发现了更为复杂的机制, overwrite重写和override覆写存在区别,\r\n详见<a\r\nhref=\"https://www.cnblogs.com/kuliuheng/p/4107012.html\"><strong>博客园|C++中的Overload、Override和Overwrite</strong></a></p>\r\n<p><strong>Addtional:</strong> 原书对上述实现Animal Shout的代码进行重构,\r\n具体方法为将Shout()声明为父类公共方法(去掉virtual),\r\n声明新的虚方法getSound(), 在Shout()中调用, 在子类中覆写(override),\r\n从而避免了代码重复, 此处笔者不再浪费篇幅详细赘述.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>抽象类&amp;抽象方法:</strong>\r\nC#允许将类和方法用关键字<strong>abstract</strong>声明, 即抽象类,\r\n抽象方法.</p>\r\n<blockquote>\r\n<strong>Addtional:</strong>\r\n<ul>\r\n<li>抽象类不能被实例化</li>\r\n<li>抽象方法必须被子类覆写(override)</li>\r\n<li>含有抽象方法的类必须声明为抽象类, 不论是否具有一般方法</li>\r\n<li>使用时考虑让抽象类拥有尽可能多的共同代码, 拥有尽可能少的数据</li>\r\n</ul>\r\n<p><strong>Tips:</strong> 抽象类通常代表一种抽象概念,\r\n提供了一个继承的出发点, 当设计一个新的抽象类时, 一定是用来继承的.\r\n因此在继承结构中, 叶节点应当是具体类, 非叶节点应当是抽象类.</p>\r\n</blockquote></li>\r\n<li><p><strong>接口(Interface):</strong>\r\n接口是把隐式公共方法和属性组合起来, 以封装特定功能的一个集合.\r\n类实现了接口就可以支持接口所指定的所有属性和成员.\r\n接口不允许提供任何成员的执行方法(因此接口不能实例化, 没有构造方法,\r\n字段和修饰符, 不能声明静态或虚拟等).</p>\r\n<blockquote>\r\n<strong>Addtionnal:</strong>\r\n<ul>\r\n<li>实现接口的类必须实现接口中所有方法和属性.</li>\r\n<li>一个类可以支持多个接口, 不同类也可以支持相同接口.</li>\r\n</ul>\r\n<p><strong>Tips:</strong> <a\r\nhref=\"https://www.runoob.com/csharp/csharp-interface.html\">菜鸟教程|C#\r\nInterface</a>将接口表述为:</p>\r\n<p>接口定义了所有类继承接口时应遵循的语法合同.\r\n接口定义了语法合同\"是什么\"部分, 派生类定义了语法合同\"怎么做\"部分.\r\n接口定义了属性, 方法和事件, 这些都是接口的成员. 接口只包含了成员的声明.\r\n成员的定义是派生类的责任. 接口提供了派生类应遵循的标准结构.</p>\r\n<p><strong>书写规范:</strong> 接口的命名需要在前面加一个大写\"I\".</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 笔者在此化简了书目中提供的例子, 能理解即可.</span></span><br><span class=\"line\"><span class=\"comment\">// 叮当猫继承自上文出现的Cat类, 内部需要实现变东西的接口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">IChange</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">ChangeThing</span>(<span class=\"params\"><span class=\"built_in\">string</span> thing</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MachineCat</span> : <span class=\"title\">Cat</span>, <span class=\"title\">IChange</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MachineCat</span>() : <span class=\"title\">base</span>()</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MachineCat</span>() : <span class=\"title\">base</span>(<span class=\"params\">name</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">ChangeThing</span>(<span class=\"params\"><span class=\"built_in\">string</span> thing</span>)</span>&#123; <span class=\"comment\">//实现接口, 不需要使用override修饰</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.Shout() + <span class=\"string\">&quot;我有万能口袋, 可以变出: &quot;</span> + thing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 笔者在此补充一点C#的语法特性,\r\n接口也可以继承接口, 假设IB继承IA, 在IB中不需要声明IA中的声明,\r\n但实现IB的类需要实现IA和IB中的所有声明.</p>\r\n<p><strong>Compare: Class v.s. Interface</strong></p>\r\n<ul>\r\n<li><strong>语法上:</strong> 抽象类可以给出一些成员的实现,\r\n接口不能包含成员的实现, 抽象类的抽象成员可被子类部分实现,\r\n但接口的成员需要类全部实现, 一个类只能继承<strong>一个</strong>抽象类,\r\n但可以实现<strong>多个</strong>接口.</li>\r\n<li><strong>含义上:</strong> 类是对象的抽象, 抽象类是对类的抽象,\r\n接口是对<strong>行为</strong>的抽象.</li>\r\n<li><strong>使用上:</strong> 如果行为跨越不同类的对象, 可使用接口;\r\n对于一些相似的类对象, 用继承抽象类. 需要注意的是,\r\n实现接口和继承抽象类并不冲突.</li>\r\n<li><strong>设计角度上:</strong> 抽象类是从子类中发现了公共的东西,\r\n泛化出父类, 然后子类继承父类, 而接口根本不知道子类的存在,\r\n方法如何实现不明确, 预先定义.</li>\r\n</ul>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>泛型(Generic):</strong> 泛型是具有占位符(类型参数)的类,\r\n结构, 接口和方法, 这些占位符是类, 结构,\r\n接口和方法所储存域或使用的一个或多个类型的占位符.\r\n泛型集合类可以将类型参数用作它所存储的对象的类型的占位符:\r\n类型参数作为其字段的类型和其方法的参数类型出现.</p>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 通常情况下, 都建议使用泛型集合,\r\n因为这样可以获得类型安全的直接优点而不需要从基集合类型派生并实现类型特定成员.\r\n此外, 如果集合元素为值类型,\r\n泛型集合类型的性能通常优于对应的非泛型集合类型,\r\n因为使用泛型时不必对元素进行装箱.</p>\r\n<p><strong>Tips:</strong> <a\r\nhref=\"https://www.runoob.com/csharp/csharp-generic.html\">菜鸟教程|C#\r\nGeneric</a>将泛型表述为:</p>\r\n<p>泛型(Generic)允许您延迟编写类或方法中的编程元素的数据类型的规范,\r\n直到实际在程序中使用它的时候. 换句话说,\r\n泛型允许您编写一个可以与任何数据类型一起工作的类或方法.</p>\r\n<p>泛型的定义较为晦涩, 建议结合代码理解.\r\n笔者在此强烈建议阅读更多的资料来学习泛型.</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic; <span class=\"comment\">//增加泛型集合命名空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">Forml</span> : <span class=\"title\">Form</span>&#123;</span><br><span class=\"line\">    IList&lt;Animal&gt; arrayAnimal; <span class=\"comment\">// 声明泛型集合变量, 表示只接受Animal类型</span></span><br><span class=\"line\">    <span class=\"comment\">//List&lt;Animal&gt; arrayAnimal; 两种写法是等价的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Event</span>()</span>&#123;</span><br><span class=\"line\">        arrayAnimal = <span class=\"keyword\">new</span> List&lt;Animal&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        arrayAnimal.Add(<span class=\"keyword\">new</span> Cat());</span><br><span class=\"line\">        arrayAnimal.Add(<span class=\"keyword\">new</span> Dog());</span><br><span class=\"line\">        arrayAnimal.Add(<span class=\"number\">123</span>); <span class=\"comment\">// Error! Invalid Type </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>委托:</strong> 委托是对函数的封装,\r\n可以当作给方法的特征指定一个名称.\r\n委托对象用关键字<strong>delegate</strong>声明.</p></li>\r\n<li><p><strong>事件:</strong> 事件时委托的一种特殊形式,\r\n当发生有意义的事情时, 事件对象处理通知过程.\r\n事件对象用关键字<strong>event</strong>声明.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 委托是一种引用方法的类型,\r\n一旦为委托分配了方法, 委托将与该方法具有完全相同的行为.\r\n事件则是在发生其他类或对象关注的事情时, 类或对象可通过事件通知它们.</p>\r\n</blockquote>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//情境: 猫Tom叫的时候两只老鼠Jerry和Jack要跑.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">CatShoutEventHandler</span>()</span>; <span class=\"comment\">// 声明委托</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> CatShoutEventHandler CatShout; <span class=\"comment\">//声明事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Shout</span>()</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;喵, 我是&#123;0&#125;.&quot;</span>, name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CatShout != <span class=\"literal\">null</span>)&#123; <span class=\"comment\">// 如果声明了事件CatShout</span></span><br><span class=\"line\">            CatShout();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Mouse</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mouse</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;老猫来了, &#123;0&#125;快跑&quot;</span>, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span>&#123;</span><br><span class=\"line\">    Cat cat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">    Mouse mouse1 = <span class=\"keyword\">new</span> Mouse(<span class=\"string\">&quot;Jerry&quot;</span>);</span><br><span class=\"line\">    Mouse mouse2 = <span class=\"keyword\">new</span> Mouse(<span class=\"string\">&quot;Jack&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    cat.CatShout += <span class=\"keyword\">new</span> Cat.CatShoutEventHandler(mouse1.Run);</span><br><span class=\"line\">    cat.CatShout += <span class=\"keyword\">new</span> Cat.CatShoutEventHandler(mouse2.Run); </span><br><span class=\"line\">    <span class=\"comment\">// &quot;+=&quot; 表示 &quot;add_CatShout&quot; 的意思; 与之相反 &quot;-=&quot; 表示 &quot;remove_CatShout()&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cat.Shout();</span><br><span class=\"line\">    Console.Read();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>运行结果:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">喵, 我是Tom.</span><br><span class=\"line\">老猫来了, Jerry快跑!</span><br><span class=\"line\">老猫来了, Jack快跑!</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><strong>EventArgs:</strong> EventArgs是包含事件数据的类的基类.</li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CatShoutEventArgs</span> : <span class=\"title\">EventArgs</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name&#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;<span class=\"keyword\">return</span> name; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;name = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">CatShoutEventHandler</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, CatShoutEventArgs args</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> CatShoutEventHandler CatShout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Shout</span>()</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;喵, 我是&#123;0&#125;.&quot;</span>, name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(CatShout != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            CatShoutEventArgs e = <span class=\"keyword\">new</span> CatShoutEventArgs();</span><br><span class=\"line\">            e.Name = <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">            CatShout(<span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Mouse</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mouse</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, CatShoutEventArgs args</span>)</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;老猫&#123;0&#125;来了, &#123;1&#125;快跑!&quot;</span>, args.Name, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>Main执行结果:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">喵, 我是Tom.</span><br><span class=\"line\">老猫Tom来了, Jerry快跑!</span><br><span class=\"line\">老猫Tom来了, Jack快跑!</span><br></pre></td></tr></table></figure>\r\n","length":3585,"excerpt":"<p><strong>精彩的代码是如何想出来的,\r\n要比看到精彩的代码更加令人期待.</strong></p>","more":"<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#书籍基本信息\">书籍基本信息</a></li>\r\n<li><a href=\"#chapter-0-preview-面向对象基础\">Chapter 0: Preview\r\n面向对象基础</a></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"书籍基本信息\">书籍基本信息</h2>\r\n<p>《大话设计模式》程杰 2007.</p>\r\n<p>本文<strong><em>不提供</em></strong>书籍的电子版文件,\r\n请有需要的读者移步至<strong>Z-library</strong>或其他渠道获得.</p>\r\n<p>本书以情景对话形式, 辅以故事或例子介绍设计模式, 以C#语言书写代码,\r\n适合有面向过程编程基础但面向对象编程能力弱的初学者.</p>\r\n<h2 id=\"chapter-0-preview-面向对象基础\">Chapter 0: Preview\r\n面向对象基础</h2>\r\n<blockquote>\r\n<p>附录A 培训实习生——面向对象基础</p>\r\n<p><strong>Tips:</strong> 本部分不设计具体的语法细节, 特性和原理,\r\n仅作示例, 如有需去可移步至专业书籍文献寻求细节, 如<a\r\nhref=\"https://learn.microsoft.com/en-us/dotnet/csharp/\"><strong>微软官方</strong></a>或书籍<a\r\nhref=\"https://book.douban.com/subject/34894447/\"><strong>C#图解教程</strong></a>.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>对象(Object):</strong> 对象是一个自包含的实体,\r\n用一组可识别的特性和行为来标识.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 定义比较拗口, 通俗来说, 对象是对事物的抽象,\r\n一切事物都可以称为对象.</p>\r\n</blockquote></li>\r\n<li><p><strong>面向对象编程(Object-Oriented Programming):</strong>\r\n面向对象的编程.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 简称OOP, 区别于面向过程编程,\r\n面向过程需要分析得出步骤, 按序实现程序功能. OOP首先对事物抽象为\"对象\",\r\n用对象的属性和行为解决问题.</p>\r\n</blockquote></li>\r\n<li><p><strong>类(Class):</strong>\r\n具有相同属性和功能对象的抽象集合.</p></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">shout</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;mew&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>实例(Instance) &amp; 实例化:</strong> 实例是真实的对象,\r\nnew得到实例的过程称为实例化.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 类就像是工厂的蓝图, 实例就是生产出来的产品,\r\n一个类只有实例化后才可以调用(可能不严谨, 存疑), 和蓝图与产品一样,\r\n一个类可以实例化出多个不同的实例(<strong>学生类</strong>可以实例化为<strong>学生李华</strong>,\r\n<strong>学生张三</strong>等).</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat cat = <span class=\"keyword\">new</span> Cat();</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>修饰符:</strong></p>\r\n<ul>\r\n<li><p><strong>public:</strong> 修饰的类成员允许被任何类访问</p></li>\r\n<li><p><strong>protected:</strong>\r\n修饰的类成员仅允许该类和其子类访问</p></li>\r\n<li><p><strong>private:</strong> 修饰的类成员仅允许该类访问</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 程序设计是一门权衡和妥协的艺术,\r\n对OOP为何如此设计的读者可自行查阅OOP发展的历史.</p>\r\n</blockquote></li>\r\n</ul></li>\r\n<li><p><strong>属性:</strong> 属性是一个方法或一对方法,\r\n在调用它的代码看来, 它是一个字段,\r\n即属性适合于以字段的方法使用方法调用的场合.</p></li>\r\n<li><p><strong>字段:</strong> 储存类设计所需的数据,\r\n形式上是与类相关的变量.</p></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> num; <span class=\"comment\">//声明一个私有内部字段, 修饰符private</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Num &#123; <span class=\"comment\">//Num公有外部属性, 修饰符public</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"comment\">//外部读取方法</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123; <span class=\"comment\">//外部修改方法, 删去此方法时表示Num是只读的.</span></span><br><span class=\"line\">            Num = <span class=\"keyword\">value</span>; <span class=\"comment\">// set含有隐式参数, 由关键字value表示, 用于赋值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 属性和字段的描述比较抽象,\r\n推荐直接结合代码理解. 笔者认为是一种语法糖上的tricky,\r\n在其他语言OOP也有相似的写法. 这种写法的好处是隔离内部与外部,\r\n仅允许类提供的公共方法访问类内成员变量.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>构造方法/构造函数:</strong> 对类进行初始化的方法.\r\n与类同名, 无返回值, 不需要void, 在new中调用.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 以上语法细节适用于C#, 非C#可能会有差别,\r\n类中不显示写明构造函数时由编译器默认构造(更多语法细节和原理请移步至讨论C#的相关文献).</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123; <span class=\"comment\">//这是构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>重载(overload):</strong>\r\n提供了创建多个同名方法(Function)的功能, 重载方法的参数类型不同.\r\n重载可以在不改变原方法基础上添加新功能.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n这里<strong>参数类型的不同</strong>指的是参数个数不同或参数类型的不同(详见代码示例)</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不仅构造函数, 普通函数也可以重载</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>()</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">int</span> arg_1</span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">float</span> arg_1</span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">int</span> arg_1, <span class=\"built_in\">float</span> arg_2</span>)</span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">function</span>(<span class=\"params\"><span class=\"built_in\">float</span> arg_1, <span class=\"built_in\">int</span> arg_2</span>)</span>&#123;&#125;;<span class=\"comment\">//类型顺序不同也会被认为是重载</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>封装:</strong> 每个对象包含该对象操作所需的所有信息,\r\n不必依赖其他对象来完成自己的操作, 该特性称为封装.</p>\r\n<blockquote>\r\n<p><strong>Addtional:</strong> 良好的封装可以减少耦合,\r\n类内部实现可以自由修改, 具有清晰的对外接口</p>\r\n</blockquote></li>\r\n<li><p><strong>继承:</strong>\r\n对象的继承代表了一种\"<strong>is-a</strong>\"关系, 若描述为\"B是A\",\r\n则认为B可以继承A. 又可以理解为B是A的一种特殊化, B拥有A的特性之外,\r\n还拥有自己独特的特性. 即继承代表了一种包含关系, A包含B.</p>\r\n<blockquote>\r\n<strong>Addtional:</strong>\r\n<ul>\r\n<li>继承的双方称为<strong>子类/派生类&amp;父类/基类</strong>.</li>\r\n<li>子类继承父类的成员有方法, 域, 属性, 事件, 索引指示器</li>\r\n<li>构造方法<strong>无法</strong>继承, 只能调用,\r\n可以使用<strong>base</strong>关键字(C#语法特性)</li>\r\n</ul>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> &#123; <span class=\"comment\">//父类</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"built_in\">string</span> name = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span>()</span> &#123; <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">&quot;unamed&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"built_in\">int</span> shoutNum = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ShoutNum &#123; <span class=\"comment\">//属性</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> shoutNum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">            shoutNum = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> : <span class=\"title\">Animal</span> &#123; <span class=\"comment\">//继承父类Animal的子类Cat</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>() : <span class=\"title\">base</span>()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>) : <span class=\"title\">base</span>(<span class=\"params\">name</span>)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; shoutNum; i++)&#123;</span><br><span class=\"line\">            result += <span class=\"string\">&quot;mew &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"title\">Animal</span> &#123; <span class=\"comment\">//继承父类Animal的子类Dog</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span>() : <span class=\"title\">base</span>()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Dog</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>) : <span class=\"title\">base</span>(<span class=\"params\">name</span>)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; shoutNum; i++)&#123;</span><br><span class=\"line\">            result += <span class=\"string\">&quot;woof &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n继承的<strong>优点</strong>是使子类公共部分放在了父类, 代码得到了共享,\r\n减少了代码重复, 修改和扩展都变得相对容易.\r\n但<strong>缺点</strong>也是显而易见的, 继承会破坏封装,\r\n父类实现的细节暴露给子类, 父类和子类间是强耦合的.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>多态:</strong> 多态表示不同的对象可以执行相同的动作,\r\n但通过自己的代码执行.</p>\r\n<blockquote>\r\n<strong>Additional:</strong>\r\n<ul>\r\n<li>子类以父类身份出现</li>\r\n<li>子类工作时以自己的方式实现</li>\r\n<li>子类以父类身份出现时, 无法使用子类特有的属性和方法</li>\r\n</ul>\r\n<p><strong>Tips:</strong> 在父类中, 该动作需要声明为虚拟的,\r\n用关键字<strong>virtual</strong>标识.</p>\r\n</blockquote></li>\r\n<li><p><strong>重写/覆写(override):</strong>\r\n子类使用关键字<strong>override</strong>将父类实现替换为自己的实现.</p></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span>&#123; <span class=\"comment\">//声明为虚方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> : <span class=\"title\">Animal</span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span>&#123; <span class=\"comment\">//覆写</span></span><br><span class=\"line\">        ....... <span class=\"comment\">//略, 代码见上文</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"title\">Animal</span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">string</span> <span class=\"title\">Shout</span>()</span>&#123; <span class=\"comment\">//覆写</span></span><br><span class=\"line\">        ....... <span class=\"comment\">//略, 代码见上文</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*-----------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/*执行环境*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">arrayAnimal = <span class=\"keyword\">new</span> Animal[<span class=\"number\">5</span>];</span><br><span class=\"line\">arrayAnimal[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">arrayAnimal[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(Animal item <span class=\"keyword\">in</span> arrayAnimal)&#123;</span><br><span class=\"line\">    MessageBox.Show(item.Shout()); <span class=\"comment\">//Cat为&quot;mew&quot;, Dog为&quot;woof&quot;.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips1:</strong> C#的多态性分为静态多态性和动态多态性.\r\n静态多态性即为前文提到的overload重载, 在编译时确定;\r\n动态多态性为override覆写, 在运行时确定,\r\n通过抽象类(见下文)和虚方法实现.</p>\r\n<p><strong>Tips2:</strong> 笔者在翻阅相关资料时,\r\n在C++语言中发现了更为复杂的机制, overwrite重写和override覆写存在区别,\r\n详见<a\r\nhref=\"https://www.cnblogs.com/kuliuheng/p/4107012.html\"><strong>博客园|C++中的Overload、Override和Overwrite</strong></a></p>\r\n<p><strong>Addtional:</strong> 原书对上述实现Animal Shout的代码进行重构,\r\n具体方法为将Shout()声明为父类公共方法(去掉virtual),\r\n声明新的虚方法getSound(), 在Shout()中调用, 在子类中覆写(override),\r\n从而避免了代码重复, 此处笔者不再浪费篇幅详细赘述.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>抽象类&amp;抽象方法:</strong>\r\nC#允许将类和方法用关键字<strong>abstract</strong>声明, 即抽象类,\r\n抽象方法.</p>\r\n<blockquote>\r\n<strong>Addtional:</strong>\r\n<ul>\r\n<li>抽象类不能被实例化</li>\r\n<li>抽象方法必须被子类覆写(override)</li>\r\n<li>含有抽象方法的类必须声明为抽象类, 不论是否具有一般方法</li>\r\n<li>使用时考虑让抽象类拥有尽可能多的共同代码, 拥有尽可能少的数据</li>\r\n</ul>\r\n<p><strong>Tips:</strong> 抽象类通常代表一种抽象概念,\r\n提供了一个继承的出发点, 当设计一个新的抽象类时, 一定是用来继承的.\r\n因此在继承结构中, 叶节点应当是具体类, 非叶节点应当是抽象类.</p>\r\n</blockquote></li>\r\n<li><p><strong>接口(Interface):</strong>\r\n接口是把隐式公共方法和属性组合起来, 以封装特定功能的一个集合.\r\n类实现了接口就可以支持接口所指定的所有属性和成员.\r\n接口不允许提供任何成员的执行方法(因此接口不能实例化, 没有构造方法,\r\n字段和修饰符, 不能声明静态或虚拟等).</p>\r\n<blockquote>\r\n<strong>Addtionnal:</strong>\r\n<ul>\r\n<li>实现接口的类必须实现接口中所有方法和属性.</li>\r\n<li>一个类可以支持多个接口, 不同类也可以支持相同接口.</li>\r\n</ul>\r\n<p><strong>Tips:</strong> <a\r\nhref=\"https://www.runoob.com/csharp/csharp-interface.html\">菜鸟教程|C#\r\nInterface</a>将接口表述为:</p>\r\n<p>接口定义了所有类继承接口时应遵循的语法合同.\r\n接口定义了语法合同\"是什么\"部分, 派生类定义了语法合同\"怎么做\"部分.\r\n接口定义了属性, 方法和事件, 这些都是接口的成员. 接口只包含了成员的声明.\r\n成员的定义是派生类的责任. 接口提供了派生类应遵循的标准结构.</p>\r\n<p><strong>书写规范:</strong> 接口的命名需要在前面加一个大写\"I\".</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 笔者在此化简了书目中提供的例子, 能理解即可.</span></span><br><span class=\"line\"><span class=\"comment\">// 叮当猫继承自上文出现的Cat类, 内部需要实现变东西的接口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">IChange</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">ChangeThing</span>(<span class=\"params\"><span class=\"built_in\">string</span> thing</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MachineCat</span> : <span class=\"title\">Cat</span>, <span class=\"title\">IChange</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MachineCat</span>() : <span class=\"title\">base</span>()</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MachineCat</span>() : <span class=\"title\">base</span>(<span class=\"params\">name</span>)</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">ChangeThing</span>(<span class=\"params\"><span class=\"built_in\">string</span> thing</span>)</span>&#123; <span class=\"comment\">//实现接口, 不需要使用override修饰</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.Shout() + <span class=\"string\">&quot;我有万能口袋, 可以变出: &quot;</span> + thing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 笔者在此补充一点C#的语法特性,\r\n接口也可以继承接口, 假设IB继承IA, 在IB中不需要声明IA中的声明,\r\n但实现IB的类需要实现IA和IB中的所有声明.</p>\r\n<p><strong>Compare: Class v.s. Interface</strong></p>\r\n<ul>\r\n<li><strong>语法上:</strong> 抽象类可以给出一些成员的实现,\r\n接口不能包含成员的实现, 抽象类的抽象成员可被子类部分实现,\r\n但接口的成员需要类全部实现, 一个类只能继承<strong>一个</strong>抽象类,\r\n但可以实现<strong>多个</strong>接口.</li>\r\n<li><strong>含义上:</strong> 类是对象的抽象, 抽象类是对类的抽象,\r\n接口是对<strong>行为</strong>的抽象.</li>\r\n<li><strong>使用上:</strong> 如果行为跨越不同类的对象, 可使用接口;\r\n对于一些相似的类对象, 用继承抽象类. 需要注意的是,\r\n实现接口和继承抽象类并不冲突.</li>\r\n<li><strong>设计角度上:</strong> 抽象类是从子类中发现了公共的东西,\r\n泛化出父类, 然后子类继承父类, 而接口根本不知道子类的存在,\r\n方法如何实现不明确, 预先定义.</li>\r\n</ul>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>泛型(Generic):</strong> 泛型是具有占位符(类型参数)的类,\r\n结构, 接口和方法, 这些占位符是类, 结构,\r\n接口和方法所储存域或使用的一个或多个类型的占位符.\r\n泛型集合类可以将类型参数用作它所存储的对象的类型的占位符:\r\n类型参数作为其字段的类型和其方法的参数类型出现.</p>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 通常情况下, 都建议使用泛型集合,\r\n因为这样可以获得类型安全的直接优点而不需要从基集合类型派生并实现类型特定成员.\r\n此外, 如果集合元素为值类型,\r\n泛型集合类型的性能通常优于对应的非泛型集合类型,\r\n因为使用泛型时不必对元素进行装箱.</p>\r\n<p><strong>Tips:</strong> <a\r\nhref=\"https://www.runoob.com/csharp/csharp-generic.html\">菜鸟教程|C#\r\nGeneric</a>将泛型表述为:</p>\r\n<p>泛型(Generic)允许您延迟编写类或方法中的编程元素的数据类型的规范,\r\n直到实际在程序中使用它的时候. 换句话说,\r\n泛型允许您编写一个可以与任何数据类型一起工作的类或方法.</p>\r\n<p>泛型的定义较为晦涩, 建议结合代码理解.\r\n笔者在此强烈建议阅读更多的资料来学习泛型.</p>\r\n</blockquote></li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic; <span class=\"comment\">//增加泛型集合命名空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">Forml</span> : <span class=\"title\">Form</span>&#123;</span><br><span class=\"line\">    IList&lt;Animal&gt; arrayAnimal; <span class=\"comment\">// 声明泛型集合变量, 表示只接受Animal类型</span></span><br><span class=\"line\">    <span class=\"comment\">//List&lt;Animal&gt; arrayAnimal; 两种写法是等价的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Event</span>()</span>&#123;</span><br><span class=\"line\">        arrayAnimal = <span class=\"keyword\">new</span> List&lt;Animal&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        arrayAnimal.Add(<span class=\"keyword\">new</span> Cat());</span><br><span class=\"line\">        arrayAnimal.Add(<span class=\"keyword\">new</span> Dog());</span><br><span class=\"line\">        arrayAnimal.Add(<span class=\"number\">123</span>); <span class=\"comment\">// Error! Invalid Type </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><p><strong>委托:</strong> 委托是对函数的封装,\r\n可以当作给方法的特征指定一个名称.\r\n委托对象用关键字<strong>delegate</strong>声明.</p></li>\r\n<li><p><strong>事件:</strong> 事件时委托的一种特殊形式,\r\n当发生有意义的事情时, 事件对象处理通知过程.\r\n事件对象用关键字<strong>event</strong>声明.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 委托是一种引用方法的类型,\r\n一旦为委托分配了方法, 委托将与该方法具有完全相同的行为.\r\n事件则是在发生其他类或对象关注的事情时, 类或对象可通过事件通知它们.</p>\r\n</blockquote>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//情境: 猫Tom叫的时候两只老鼠Jerry和Jack要跑.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">CatShoutEventHandler</span>()</span>; <span class=\"comment\">// 声明委托</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> CatShoutEventHandler CatShout; <span class=\"comment\">//声明事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Shout</span>()</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;喵, 我是&#123;0&#125;.&quot;</span>, name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CatShout != <span class=\"literal\">null</span>)&#123; <span class=\"comment\">// 如果声明了事件CatShout</span></span><br><span class=\"line\">            CatShout();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Mouse</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mouse</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;老猫来了, &#123;0&#125;快跑&quot;</span>, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span>&#123;</span><br><span class=\"line\">    Cat cat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">    Mouse mouse1 = <span class=\"keyword\">new</span> Mouse(<span class=\"string\">&quot;Jerry&quot;</span>);</span><br><span class=\"line\">    Mouse mouse2 = <span class=\"keyword\">new</span> Mouse(<span class=\"string\">&quot;Jack&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    cat.CatShout += <span class=\"keyword\">new</span> Cat.CatShoutEventHandler(mouse1.Run);</span><br><span class=\"line\">    cat.CatShout += <span class=\"keyword\">new</span> Cat.CatShoutEventHandler(mouse2.Run); </span><br><span class=\"line\">    <span class=\"comment\">// &quot;+=&quot; 表示 &quot;add_CatShout&quot; 的意思; 与之相反 &quot;-=&quot; 表示 &quot;remove_CatShout()&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cat.Shout();</span><br><span class=\"line\">    Console.Read();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>运行结果:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">喵, 我是Tom.</span><br><span class=\"line\">老猫来了, Jerry快跑!</span><br><span class=\"line\">老猫来了, Jack快跑!</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><strong>EventArgs:</strong> EventArgs是包含事件数据的类的基类.</li>\r\n</ul>\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CatShoutEventArgs</span> : <span class=\"title\">EventArgs</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name&#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;<span class=\"keyword\">return</span> name; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;name = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">CatShoutEventHandler</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, CatShoutEventArgs args</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> CatShoutEventHandler CatShout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Shout</span>()</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;喵, 我是&#123;0&#125;.&quot;</span>, name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(CatShout != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            CatShoutEventArgs e = <span class=\"keyword\">new</span> CatShoutEventArgs();</span><br><span class=\"line\">            e.Name = <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">            CatShout(<span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Mouse</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mouse</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, CatShoutEventArgs args</span>)</span>&#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;老猫&#123;0&#125;来了, &#123;1&#125;快跑!&quot;</span>, args.Name, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>Main执行结果:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">喵, 我是Tom.</span><br><span class=\"line\">老猫Tom来了, Jerry快跑!</span><br><span class=\"line\">老猫Tom来了, Jack快跑!</span><br></pre></td></tr></table></figure>"},{"title":"读书笔记-机器学习 Ch0-Ch1","date":"2024-09-18T15:04:27.000Z","hidden":false,"_content":"\n**机器学习所研究的主要内容, 是关于在计算机上从数据中产生\"模型\"(model)的算法, 即\"学习算法\"(learning algorithm).**\n\n<!-- more -->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [书籍基本信息](#书籍基本信息)\n- [Chapter 0: 主要符号表](#chapter-0-主要符号表)\n- [Chapter 1: 绪论](#chapter-1-绪论)\n  - [$ 1.1 基本术语](#-11-基本术语)\n  - [$ 1.3 假设空间](#-13-假设空间)\n  - [$ 1.4 归纳偏好](#-14-归纳偏好)\n\n---\n\n## 书籍基本信息\n\n《机器学习》周志华 2016.\n\n大名鼎鼎的西瓜书, 笔者在此略去介绍.\n\n## Chapter 0: 主要符号表\n\n$$\\begin{aligned}\n&\\mathit{x}& &标量\\\\\n&\\boldsymbol{x}& &向量 \\\\\n&\\mathrm{x}& &变量集 \\\\\n&\\mathbf{A}& &矩阵 \\\\\n&\\mathbf{I}& &单位阵 \\\\\n&\\mathcal{X}& &样本空间或状态空间\\\\\n&\\mathcal{D}& &概率分布\\\\\n&\\mathit{D}& &数据样本(数据集)\\\\\n&\\mathcal{H}& &假设空间\\\\\n&\\mathit{H}& &假设集\\\\\n&\\mathfrak{L}& &学习算法\\\\\n&\\left ( \\cdot ,\\cdot ,\\cdot  \\right )& &行向量\\\\\n&\\left ( \\cdot ;\\cdot ;\\cdot \\right )& &列向量\\\\\n&\\left ( \\cdot  \\right )^{T}& &向量或矩阵转置\\\\\n&\\left \\{  \\cdot \\cdot \\cdot \\right \\}& &集合\\\\\n&\\left | \\left \\{ \\cdot \\cdot \\cdot \\right \\} \\right |& &集合中元素个数\\\\\n&\\left \\| \\cdot  \\right \\|_{p}& &L_p范数, p缺省时为L_2范数\\\\\n&\\mathit{P}\\left ( \\cdot  \\right ),\\mathit{P}\\left ( \\cdot |\\cdot  \\right )& &概率质量函数,条件概率质量函数\\\\\n&\\mathit{p}\\left ( \\cdot  \\right ),\\mathit{p}\\left ( \\cdot  | \\cdot \\right )& &概率密度函数, 条件概率密度函数\\\\\n&\\mathbb{E}_{\\cdot \\sim \\mathcal{D}}\\left [ f\\! \\left ( \\cdot \\right ) \\right ]& &函数 f\\! \\left ( \\cdot \\right ) 对 \\cdot 在分布 \\mathcal{D} 下的数学期望:意义明确是将省略 \\mathcal{D} 和(或)\\cdot \\\\\n&sup\\left ( \\cdot \\right )& &上确界\\\\\n&\\mathbb{I} \\left ( \\cdot  \\right )& &指示函数，在 \\cdot  为真和假分别取值为1 , 0 \\\\\n&sign\\left ( \\cdot  \\right )& &符号函数，在 \\cdot < 0, = 0 , >  0 时分别取值为 -1,0,1\n\\end{aligned}$$\n\n## Chapter 1: 绪论\n\n### $ 1.1 基本术语\n\n> 假定我们收集了一批关于西瓜的数据, 例如(色泽 = 浅白; 根蒂 = 蜷缩; 敲声 = 浊响), (色泽 = 乌黑; 根蒂 = 稍蜷; 敲声 = 沉闷), (色泽 = 浅白; 根蒂 = 硬挺; 敲声 = 清脆), ......, 每对括号内是一条记录, 下文关于术语的表述会基于上述假定进行解释.\n\n- **数据集/样本(Data Set):** 这组记录的集合称为一个数据集.\n\n    > **Tips:** 数据集亦称样本, 因为数据集可看作对样本空间的一个采样.\n    >\n    > **Addtional:** \"样本\"的具体指代示例还是数据集, 要看具体的上下文.\n\n- **示例(Instance)/样本(Sample):** 每条记录称为示例/样本, 是关于一个事件或对象的描述(以上例, 该对象为西瓜).\n\n- **属性(Attribute)/特征(Feature):** \"色泽\", \"根蒂\", \"敲声\"称为属性.\n\n- **属性值(Attribute Value):** 属性的取值称为属性值(以上例, \"青绿\"和\"乌黑\"是色泽的属性值).\n\n- **属性空间(Attribute Space)/样本空间(Sample Space)/输入空间:** 属性张成的空间.\n\n    > **Tips:** 此处涉及的是线性代数知识, 即将样本(Instance)依据属性转化为向量, 其中色泽, 根蒂和敲声为坐标轴, 张成了一个用于描述西瓜特征的三维空间, 该空间每个点即是线性代数意义上的一个向量, 也就是**特征向量(Feature Vector)**. 我们可以认为, 示例(Instance)的另一种等价表述是特征向量.\n\n- **数据集的表示:** 令 $\\mathit{D} = \\{x_1, x_2, ..., x_m\\}$ 表示包含$m$个示例的数据集, 每个示例由 $d$ 个属性描述, 则每个示例(Instance) $x_i= (x_{i1}; x_{i2}; ...; x_{id})$ 是 $d$ 维样本空间 $\\mathcal{X}$ 中的一个向量, $x_i \\in \\mathcal{X}$. $d$ 称为样本 $x_i$ 的**维数(Dimensionality)**.\n\n- **学习(Learning)/训练(Training):** 从数据中学得模型的过程称为学习/训练, 该过程通过执行某个学习算法完成.\n\n- **训练数据(Training Data):** 训练过程中所使用的数据.\n\n- **训练样本(Training Sample)/训练示例(Training Instance):** 训练数据中的每个样本/示例.\n\n- **训练集(Training Set):** 训练样本组成的集合称为训练集.\n\n    > **Tips:** 训练集相当于训练数据的子集, 训练数据除去**训练集**外还存在**验证集**.(参考自:[**知乎|训练集(training dataset), 测试集(test dataset)与验证集(validation dataset)**](https://zhuanlan.zhihu.com/p/115344944))\n\n- **假设(Hypothesis)&真相/真实(Ground-Truth):** 学得模型对应了关于数据的某种潜在规律, 因此亦称假设.这种潜在规律称为\"真相\"/\"真实\". 学习的过程就是为了找出或逼近真相.\n\n    > **Tips:** [**WIKIPEDIA|Ground-Truth**](https://en.wikipedia.org/wiki/Ground_truth)又将其表述为**基准真相**.\n    >\n    > \"Ground truth is information that is known to be real or true, provided by direct observation and measurement (i.e. empirical evidence) as opposed to information provided by inference.\"\n\n**Tips:** 本书有时又将**模型**称为**学习器(Learner)**, 模型可看作是学习算法在给定数据和参数空间上的实例化.\n\n- **标记(Label):** 关于示例(Instance)结果的信息, 称为标记(如\"好瓜\"). 一般的, 用 $(x_i, y_i)$ 表示第 $i$ 个样例, 其中 $y_i \\in \\mathcal{Y}$ 是示例 $x_i$ 的标记, $\\mathcal{Y}$ 是所有标记的集合, 又称**标记空间(Label Space)/输出空间**.\n\n- **分类(Classification):** 若**预测(Prediction)**的是离散值(如\"好瓜\", \"坏瓜\"), 则称此类学习任务是分类.\n\n- **回归(Regression):** 若预测的是连续值(如成熟度0.95, 0.7), 则称此类学习任务是回归.\n\n- **二分类(Binary Classification):** 只涉及两个类别的分类任务, 通常称其中一类为**正类(Positive Class)**, 另一类为**反类(Negative Class)**.\n\n- **多分类(Multi-class Classification):** 与之相对的, 涉及多种类别的分类任务称为多分类任务.\n\n- **预测任务:** 预测任务希望通过对训练集$\\{(x_1, y_1), (x_2, y_2), ..., (x_m, y_m)\\}$ 进行学习, 建立一个从输入空间 $\\mathcal{X}$ 到输出空间 $\\mathcal{Y}$ 的映射 $f : \\mathcal{X} \\rightarrow \\mathcal{Y}$. 对二分类, 通常取 $\\mathcal{Y} = \\{-1, 1\\}$ 或 $\\{0, 1\\}$; 对于多分类, $|\\mathcal{Y}| > 2$; 对于回归, $\\mathcal{Y} = \\mathbb{R}$.\n\n- **测试(Testing):** 使用学习得到的模型进行预测的过程称为测试, 预测的样本称为**测试样本(Testing Sample)/测试示例(Testing Instance)**.\n\n- **聚类(Clustering):** 将训练集中的样本分为若干组, 每组称为一个**簇(Cluster)**.\n\n    > **Tips:** 形成的簇可能对应一些潜在的概念划分(如本地瓜, 外地瓜), 但这样的概念我们事先不知道, 否则通过标记(Label)就可以形成簇划分.\n\n- **监督学习(Supervised Learning)/有导师学习:** 训练数据拥有标记信息, 分类和回归为代表.\n\n- **无监督学习(Unsupervised Learning)/无导师学习** 训练数据无标记信息, 聚类为代表.\n\n> **Tips:** 此处仅作最基本的概念了解, 关于上述两概念的具体释义留及之后的学习.\n\n- **泛化(Generalization):** 学得模型适用于新样本的能力,称为泛化能力.\n\n    > **Tips1:** 样本空间通常很大, 训练过程无法涵盖所有的示例, 我们希望模型可以对新样本有较好的目标表现, 这就是泛化的意义.\n    >\n    > **Tips2:** 泛化的数学支撑:\n    >\n    >关于这种泛化, 我们通常假设样本空间中的所有样本都服从一个未知的**分布(Distribution)** $\\mathcal{D}$, 获取的样本是从该分布上采样获得的, 满足**独立同分布(Independent and Identically Distributed, *i.d.d*)**.\n    >\n  > 关于机器学习中为什么使用i.d.d, 可以从[**知乎|为什么机器学习中, 要假设我们的数据是独立同分布的?**](https://www.zhihu.com/question/41222495)获取相关信息.\n\n### $ 1.3 假设空间\n\n**归纳(Induction)**与**演绎(Deduction)**是科学推理的两大基本手段.\n\n> 前者是从特殊到一般的**泛化(Generalization)**过程; 后者是从一般到特殊的**特化(Specialization)**过程.\n\n- **归纳学习(Inductive Learning):** 广义的归纳学习大体相当于从样例中学习, 狭义的归纳学习要求从学习过程中习得**概念(concept)**, 亦称**概念学习/概念形成**.\n\n- **版本空间(Version Space):** 存在一个与训练集一致的\"假设集合\", 称为版本空间, 例如:\n\n![table1-1](BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png)\n\n其假设空间为\n\n![pic1-1](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png)\n\n其版本空间为\n\n![pic1-2](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png)\n\n> **Tips:** 在该数据集中, 好瓜具有的共同特征是蜷缩和浊响. 因此色泽标识为通配符 $*$, 同时, 第一行的两种假设同样是与训练集一致的(可以匹配好瓜).\n\n### $ 1.4 归纳偏好\n\n- **归纳偏好(Inductive bias):** 算法在学习过程中对某种类型假设的偏好称为归纳偏好.\n\n    > **Tips:** **任何**一个有效的机器学习算法必有其归纳偏好, 否则它无法产生确定的学习结果.\n    >\n    > 以图1-2的版本空间为例, 对新瓜(色泽=青绿;根蒂=蜷缩;敲声=沉闷), 若模型告诉我们这种瓜时好时坏则没有意义, 模型必须对给定的样本给予确定的结果.\n    >\n    > **Additional:** 归纳偏好可看作学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或\"价值观\". 常遵循**奥卡姆剃刀(Occam's Razor)**原则(**若有多个假设与观察一致, 则选简单的那个**).\n\n接下来我们来比较不同归纳偏好的优劣\n\n![pic1-3](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png)\n\n从直观上看我们一般会认为, 拟合出平滑的曲线A要优于曲线B, 但很遗憾, 当面临一些极端数据时, 曲线B可能会优于曲线A, 情形如下图所示.\n\n![pic1-4](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png)\n\n接下来我们用数学语言尝试量化模型的优劣.\n\n假设样本空间 $\\mathcal{X}$ 和假设空间 $\\mathcal{H}$ 都是离散的, 令 $P(h|X, \\mathfrak{L})$ 代表学习算法 $\\mathfrak{L}_a$ 基于训练数据 $X$ 产生假设 $h$ 的概率, 令 $f$ 为目标函数.则 $\\mathfrak{L}_a$ 在训练集外的所有样本上的误差为\n\n$$\\begin{equation} \\label{eq1.1}\nE_{ote}(\\mathfrak{L}_a|X, f) = \\sum_h \\sum_{x \\in \\mathcal{X} -X} P(x) \\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\n\\tag{1.1}\n\\end{equation}$$\n\n> **Tips:** 以下是笔者个人对该公式的理解,可能存在疏漏或错误.\n>\n> 首先看乘起来的的三个式子, $\\mathbb{I}$ 为指示函数, 代表的含义是假设 $h$ 与目标函数 $f$ 没有误差时取0, 存在误差时取1. 若取1, 则两个概率乘积表示在给定的$x$和$h$下, 存在误差的概率.\n>\n> 接下来的两个求和就不难理解了, 分别是对$x$的所有取值求和以及对$h$的所有取值求和, 权重为特定$x$和$h$的概率.\n\n为简化问题, 考虑二分类, 真实目标函数$f$可以是任何函数$\\mathcal{X} \\rightarrow \\{0,1\\}$, 函数空间$\\{0,1\\}^{|\\mathcal{X}|}$. 对所有可能的$f$按均匀分布对误差求和,有\n\n$$\n\\begin{align} \\nonumber\n\\sum_f E_{ote}(\\mathfrak{L}_a|x, f) &= \\sum_f \\sum_h \\sum_{x \\in \\mathcal{X} -X} P(x) \\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\\\\ \\nonumber\n&= \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a) \\sum_f \\mathbb{I}(h(x) \\neq f(x))\\\\ \\nonumber\n^*&=  \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a) \\frac{1}{2}2^{|\\mathcal{X}|}\\\\ \\nonumber\n&= \\frac{1}{2}2^{|\\mathcal{X}|} \\sum_{x \\in \\mathcal{X} -X} P(x) \\cdot 1 \\tag{1.2}\n\\end{align}\n$$\n\n> **Tips:** 标识$*$的一步因为若$f$均匀分布, 则有一半的$f$对$x$的预测与$h(x)$不一致.\n\n式(1.2)指出, 误差与学习算法$\\mathfrak{L}$无关! 对于任意学习算法$\\mathfrak{L}_a$和$mathfrak{L}_b$,有\n\n$$\\begin{equation}\n\\sum_f E_{ote}(\\mathfrak{L}_a|X, f) = \\sum_f E_{ote}(\\mathfrak{L}_b|X, f) \\tag{1.3}\n\\end{equation}$$\n\n这简直糟糕透了, 似乎所有的学习算法期望性能居然都相同. 这就是**没有免费午餐定理(No Free Lunch Theorem, NFL)**.\n\n> **Tips:** 原书的证明是多重假设下的简化论述, 对严格数学证明感兴趣的读者可以自行查阅相关资料.\n\n但是, NFL定理有一个重要前提, 它假定了所有问题出现的机会相等, 所有问题同等重要(例如上述证明中假设了$f$均匀分布). 但我们并不要求模型对所有情况都能给出一个好的解决方案, 往往我们希望模型对特定问题表现是好的.\n\n> **Tips:** 原书中举了一个简单的例子, 骑自行车从南京鼓楼到南京新街口显然是好方案(距离约两站地铁), 但骑自行车从南京鼓楼到北京新街口, 显然不是好的方案,但我们不care.\n\n简单来说, NFL定理指出了**没有一种机器学习算法是适用于所有情况的**, 只有针对具体问题, 才能谈论模型的优劣.\n","source":"_posts/BookNote-MachineLearning-by-ZhihuaZhou-1.md","raw":"---\ntitle: 读书笔记-机器学习 Ch0-Ch1\ndate: 2024-09-18 23:04:27\nhidden: false\ntags:\n- 读书笔记\n- 机器学习\ncategories:\n- 读书笔记-机器学习\n---\n\n**机器学习所研究的主要内容, 是关于在计算机上从数据中产生\"模型\"(model)的算法, 即\"学习算法\"(learning algorithm).**\n\n<!-- more -->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [书籍基本信息](#书籍基本信息)\n- [Chapter 0: 主要符号表](#chapter-0-主要符号表)\n- [Chapter 1: 绪论](#chapter-1-绪论)\n  - [$ 1.1 基本术语](#-11-基本术语)\n  - [$ 1.3 假设空间](#-13-假设空间)\n  - [$ 1.4 归纳偏好](#-14-归纳偏好)\n\n---\n\n## 书籍基本信息\n\n《机器学习》周志华 2016.\n\n大名鼎鼎的西瓜书, 笔者在此略去介绍.\n\n## Chapter 0: 主要符号表\n\n$$\\begin{aligned}\n&\\mathit{x}& &标量\\\\\n&\\boldsymbol{x}& &向量 \\\\\n&\\mathrm{x}& &变量集 \\\\\n&\\mathbf{A}& &矩阵 \\\\\n&\\mathbf{I}& &单位阵 \\\\\n&\\mathcal{X}& &样本空间或状态空间\\\\\n&\\mathcal{D}& &概率分布\\\\\n&\\mathit{D}& &数据样本(数据集)\\\\\n&\\mathcal{H}& &假设空间\\\\\n&\\mathit{H}& &假设集\\\\\n&\\mathfrak{L}& &学习算法\\\\\n&\\left ( \\cdot ,\\cdot ,\\cdot  \\right )& &行向量\\\\\n&\\left ( \\cdot ;\\cdot ;\\cdot \\right )& &列向量\\\\\n&\\left ( \\cdot  \\right )^{T}& &向量或矩阵转置\\\\\n&\\left \\{  \\cdot \\cdot \\cdot \\right \\}& &集合\\\\\n&\\left | \\left \\{ \\cdot \\cdot \\cdot \\right \\} \\right |& &集合中元素个数\\\\\n&\\left \\| \\cdot  \\right \\|_{p}& &L_p范数, p缺省时为L_2范数\\\\\n&\\mathit{P}\\left ( \\cdot  \\right ),\\mathit{P}\\left ( \\cdot |\\cdot  \\right )& &概率质量函数,条件概率质量函数\\\\\n&\\mathit{p}\\left ( \\cdot  \\right ),\\mathit{p}\\left ( \\cdot  | \\cdot \\right )& &概率密度函数, 条件概率密度函数\\\\\n&\\mathbb{E}_{\\cdot \\sim \\mathcal{D}}\\left [ f\\! \\left ( \\cdot \\right ) \\right ]& &函数 f\\! \\left ( \\cdot \\right ) 对 \\cdot 在分布 \\mathcal{D} 下的数学期望:意义明确是将省略 \\mathcal{D} 和(或)\\cdot \\\\\n&sup\\left ( \\cdot \\right )& &上确界\\\\\n&\\mathbb{I} \\left ( \\cdot  \\right )& &指示函数，在 \\cdot  为真和假分别取值为1 , 0 \\\\\n&sign\\left ( \\cdot  \\right )& &符号函数，在 \\cdot < 0, = 0 , >  0 时分别取值为 -1,0,1\n\\end{aligned}$$\n\n## Chapter 1: 绪论\n\n### $ 1.1 基本术语\n\n> 假定我们收集了一批关于西瓜的数据, 例如(色泽 = 浅白; 根蒂 = 蜷缩; 敲声 = 浊响), (色泽 = 乌黑; 根蒂 = 稍蜷; 敲声 = 沉闷), (色泽 = 浅白; 根蒂 = 硬挺; 敲声 = 清脆), ......, 每对括号内是一条记录, 下文关于术语的表述会基于上述假定进行解释.\n\n- **数据集/样本(Data Set):** 这组记录的集合称为一个数据集.\n\n    > **Tips:** 数据集亦称样本, 因为数据集可看作对样本空间的一个采样.\n    >\n    > **Addtional:** \"样本\"的具体指代示例还是数据集, 要看具体的上下文.\n\n- **示例(Instance)/样本(Sample):** 每条记录称为示例/样本, 是关于一个事件或对象的描述(以上例, 该对象为西瓜).\n\n- **属性(Attribute)/特征(Feature):** \"色泽\", \"根蒂\", \"敲声\"称为属性.\n\n- **属性值(Attribute Value):** 属性的取值称为属性值(以上例, \"青绿\"和\"乌黑\"是色泽的属性值).\n\n- **属性空间(Attribute Space)/样本空间(Sample Space)/输入空间:** 属性张成的空间.\n\n    > **Tips:** 此处涉及的是线性代数知识, 即将样本(Instance)依据属性转化为向量, 其中色泽, 根蒂和敲声为坐标轴, 张成了一个用于描述西瓜特征的三维空间, 该空间每个点即是线性代数意义上的一个向量, 也就是**特征向量(Feature Vector)**. 我们可以认为, 示例(Instance)的另一种等价表述是特征向量.\n\n- **数据集的表示:** 令 $\\mathit{D} = \\{x_1, x_2, ..., x_m\\}$ 表示包含$m$个示例的数据集, 每个示例由 $d$ 个属性描述, 则每个示例(Instance) $x_i= (x_{i1}; x_{i2}; ...; x_{id})$ 是 $d$ 维样本空间 $\\mathcal{X}$ 中的一个向量, $x_i \\in \\mathcal{X}$. $d$ 称为样本 $x_i$ 的**维数(Dimensionality)**.\n\n- **学习(Learning)/训练(Training):** 从数据中学得模型的过程称为学习/训练, 该过程通过执行某个学习算法完成.\n\n- **训练数据(Training Data):** 训练过程中所使用的数据.\n\n- **训练样本(Training Sample)/训练示例(Training Instance):** 训练数据中的每个样本/示例.\n\n- **训练集(Training Set):** 训练样本组成的集合称为训练集.\n\n    > **Tips:** 训练集相当于训练数据的子集, 训练数据除去**训练集**外还存在**验证集**.(参考自:[**知乎|训练集(training dataset), 测试集(test dataset)与验证集(validation dataset)**](https://zhuanlan.zhihu.com/p/115344944))\n\n- **假设(Hypothesis)&真相/真实(Ground-Truth):** 学得模型对应了关于数据的某种潜在规律, 因此亦称假设.这种潜在规律称为\"真相\"/\"真实\". 学习的过程就是为了找出或逼近真相.\n\n    > **Tips:** [**WIKIPEDIA|Ground-Truth**](https://en.wikipedia.org/wiki/Ground_truth)又将其表述为**基准真相**.\n    >\n    > \"Ground truth is information that is known to be real or true, provided by direct observation and measurement (i.e. empirical evidence) as opposed to information provided by inference.\"\n\n**Tips:** 本书有时又将**模型**称为**学习器(Learner)**, 模型可看作是学习算法在给定数据和参数空间上的实例化.\n\n- **标记(Label):** 关于示例(Instance)结果的信息, 称为标记(如\"好瓜\"). 一般的, 用 $(x_i, y_i)$ 表示第 $i$ 个样例, 其中 $y_i \\in \\mathcal{Y}$ 是示例 $x_i$ 的标记, $\\mathcal{Y}$ 是所有标记的集合, 又称**标记空间(Label Space)/输出空间**.\n\n- **分类(Classification):** 若**预测(Prediction)**的是离散值(如\"好瓜\", \"坏瓜\"), 则称此类学习任务是分类.\n\n- **回归(Regression):** 若预测的是连续值(如成熟度0.95, 0.7), 则称此类学习任务是回归.\n\n- **二分类(Binary Classification):** 只涉及两个类别的分类任务, 通常称其中一类为**正类(Positive Class)**, 另一类为**反类(Negative Class)**.\n\n- **多分类(Multi-class Classification):** 与之相对的, 涉及多种类别的分类任务称为多分类任务.\n\n- **预测任务:** 预测任务希望通过对训练集$\\{(x_1, y_1), (x_2, y_2), ..., (x_m, y_m)\\}$ 进行学习, 建立一个从输入空间 $\\mathcal{X}$ 到输出空间 $\\mathcal{Y}$ 的映射 $f : \\mathcal{X} \\rightarrow \\mathcal{Y}$. 对二分类, 通常取 $\\mathcal{Y} = \\{-1, 1\\}$ 或 $\\{0, 1\\}$; 对于多分类, $|\\mathcal{Y}| > 2$; 对于回归, $\\mathcal{Y} = \\mathbb{R}$.\n\n- **测试(Testing):** 使用学习得到的模型进行预测的过程称为测试, 预测的样本称为**测试样本(Testing Sample)/测试示例(Testing Instance)**.\n\n- **聚类(Clustering):** 将训练集中的样本分为若干组, 每组称为一个**簇(Cluster)**.\n\n    > **Tips:** 形成的簇可能对应一些潜在的概念划分(如本地瓜, 外地瓜), 但这样的概念我们事先不知道, 否则通过标记(Label)就可以形成簇划分.\n\n- **监督学习(Supervised Learning)/有导师学习:** 训练数据拥有标记信息, 分类和回归为代表.\n\n- **无监督学习(Unsupervised Learning)/无导师学习** 训练数据无标记信息, 聚类为代表.\n\n> **Tips:** 此处仅作最基本的概念了解, 关于上述两概念的具体释义留及之后的学习.\n\n- **泛化(Generalization):** 学得模型适用于新样本的能力,称为泛化能力.\n\n    > **Tips1:** 样本空间通常很大, 训练过程无法涵盖所有的示例, 我们希望模型可以对新样本有较好的目标表现, 这就是泛化的意义.\n    >\n    > **Tips2:** 泛化的数学支撑:\n    >\n    >关于这种泛化, 我们通常假设样本空间中的所有样本都服从一个未知的**分布(Distribution)** $\\mathcal{D}$, 获取的样本是从该分布上采样获得的, 满足**独立同分布(Independent and Identically Distributed, *i.d.d*)**.\n    >\n  > 关于机器学习中为什么使用i.d.d, 可以从[**知乎|为什么机器学习中, 要假设我们的数据是独立同分布的?**](https://www.zhihu.com/question/41222495)获取相关信息.\n\n### $ 1.3 假设空间\n\n**归纳(Induction)**与**演绎(Deduction)**是科学推理的两大基本手段.\n\n> 前者是从特殊到一般的**泛化(Generalization)**过程; 后者是从一般到特殊的**特化(Specialization)**过程.\n\n- **归纳学习(Inductive Learning):** 广义的归纳学习大体相当于从样例中学习, 狭义的归纳学习要求从学习过程中习得**概念(concept)**, 亦称**概念学习/概念形成**.\n\n- **版本空间(Version Space):** 存在一个与训练集一致的\"假设集合\", 称为版本空间, 例如:\n\n![table1-1](BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png)\n\n其假设空间为\n\n![pic1-1](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png)\n\n其版本空间为\n\n![pic1-2](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png)\n\n> **Tips:** 在该数据集中, 好瓜具有的共同特征是蜷缩和浊响. 因此色泽标识为通配符 $*$, 同时, 第一行的两种假设同样是与训练集一致的(可以匹配好瓜).\n\n### $ 1.4 归纳偏好\n\n- **归纳偏好(Inductive bias):** 算法在学习过程中对某种类型假设的偏好称为归纳偏好.\n\n    > **Tips:** **任何**一个有效的机器学习算法必有其归纳偏好, 否则它无法产生确定的学习结果.\n    >\n    > 以图1-2的版本空间为例, 对新瓜(色泽=青绿;根蒂=蜷缩;敲声=沉闷), 若模型告诉我们这种瓜时好时坏则没有意义, 模型必须对给定的样本给予确定的结果.\n    >\n    > **Additional:** 归纳偏好可看作学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或\"价值观\". 常遵循**奥卡姆剃刀(Occam's Razor)**原则(**若有多个假设与观察一致, 则选简单的那个**).\n\n接下来我们来比较不同归纳偏好的优劣\n\n![pic1-3](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png)\n\n从直观上看我们一般会认为, 拟合出平滑的曲线A要优于曲线B, 但很遗憾, 当面临一些极端数据时, 曲线B可能会优于曲线A, 情形如下图所示.\n\n![pic1-4](BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png)\n\n接下来我们用数学语言尝试量化模型的优劣.\n\n假设样本空间 $\\mathcal{X}$ 和假设空间 $\\mathcal{H}$ 都是离散的, 令 $P(h|X, \\mathfrak{L})$ 代表学习算法 $\\mathfrak{L}_a$ 基于训练数据 $X$ 产生假设 $h$ 的概率, 令 $f$ 为目标函数.则 $\\mathfrak{L}_a$ 在训练集外的所有样本上的误差为\n\n$$\\begin{equation} \\label{eq1.1}\nE_{ote}(\\mathfrak{L}_a|X, f) = \\sum_h \\sum_{x \\in \\mathcal{X} -X} P(x) \\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\n\\tag{1.1}\n\\end{equation}$$\n\n> **Tips:** 以下是笔者个人对该公式的理解,可能存在疏漏或错误.\n>\n> 首先看乘起来的的三个式子, $\\mathbb{I}$ 为指示函数, 代表的含义是假设 $h$ 与目标函数 $f$ 没有误差时取0, 存在误差时取1. 若取1, 则两个概率乘积表示在给定的$x$和$h$下, 存在误差的概率.\n>\n> 接下来的两个求和就不难理解了, 分别是对$x$的所有取值求和以及对$h$的所有取值求和, 权重为特定$x$和$h$的概率.\n\n为简化问题, 考虑二分类, 真实目标函数$f$可以是任何函数$\\mathcal{X} \\rightarrow \\{0,1\\}$, 函数空间$\\{0,1\\}^{|\\mathcal{X}|}$. 对所有可能的$f$按均匀分布对误差求和,有\n\n$$\n\\begin{align} \\nonumber\n\\sum_f E_{ote}(\\mathfrak{L}_a|x, f) &= \\sum_f \\sum_h \\sum_{x \\in \\mathcal{X} -X} P(x) \\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\\\\ \\nonumber\n&= \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a) \\sum_f \\mathbb{I}(h(x) \\neq f(x))\\\\ \\nonumber\n^*&=  \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a) \\frac{1}{2}2^{|\\mathcal{X}|}\\\\ \\nonumber\n&= \\frac{1}{2}2^{|\\mathcal{X}|} \\sum_{x \\in \\mathcal{X} -X} P(x) \\cdot 1 \\tag{1.2}\n\\end{align}\n$$\n\n> **Tips:** 标识$*$的一步因为若$f$均匀分布, 则有一半的$f$对$x$的预测与$h(x)$不一致.\n\n式(1.2)指出, 误差与学习算法$\\mathfrak{L}$无关! 对于任意学习算法$\\mathfrak{L}_a$和$mathfrak{L}_b$,有\n\n$$\\begin{equation}\n\\sum_f E_{ote}(\\mathfrak{L}_a|X, f) = \\sum_f E_{ote}(\\mathfrak{L}_b|X, f) \\tag{1.3}\n\\end{equation}$$\n\n这简直糟糕透了, 似乎所有的学习算法期望性能居然都相同. 这就是**没有免费午餐定理(No Free Lunch Theorem, NFL)**.\n\n> **Tips:** 原书的证明是多重假设下的简化论述, 对严格数学证明感兴趣的读者可以自行查阅相关资料.\n\n但是, NFL定理有一个重要前提, 它假定了所有问题出现的机会相等, 所有问题同等重要(例如上述证明中假设了$f$均匀分布). 但我们并不要求模型对所有情况都能给出一个好的解决方案, 往往我们希望模型对特定问题表现是好的.\n\n> **Tips:** 原书中举了一个简单的例子, 骑自行车从南京鼓楼到南京新街口显然是好方案(距离约两站地铁), 但骑自行车从南京鼓楼到北京新街口, 显然不是好的方案,但我们不care.\n\n简单来说, NFL定理指出了**没有一种机器学习算法是适用于所有情况的**, 只有针对具体问题, 才能谈论模型的优劣.\n","slug":"BookNote-MachineLearning-by-ZhihuaZhou-1","published":1,"updated":"2024-10-30T11:50:42.059Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyub0007ssilh5zl4zt8","content":"<p><strong>机器学习所研究的主要内容,\r\n是关于在计算机上从数据中产生\"模型\"(model)的算法, 即\"学习算法\"(learning\r\nalgorithm).</strong></p>\r\n<span id=\"more\"></span>\r\n<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#书籍基本信息\">书籍基本信息</a></li>\r\n<li><a href=\"#chapter-0-主要符号表\">Chapter 0: 主要符号表</a></li>\r\n<li><a href=\"#chapter-1-绪论\">Chapter 1: 绪论</a>\r\n<ul>\r\n<li><a href=\"#-11-基本术语\">$ 1.1 基本术语</a></li>\r\n<li><a href=\"#-13-假设空间\">$ 1.3 假设空间</a></li>\r\n<li><a href=\"#-14-归纳偏好\">$ 1.4 归纳偏好</a></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"书籍基本信息\">书籍基本信息</h2>\r\n<p>《机器学习》周志华 2016.</p>\r\n<p>大名鼎鼎的西瓜书, 笔者在此略去介绍.</p>\r\n<h2 id=\"chapter-0-主要符号表\">Chapter 0: 主要符号表</h2>\r\n<p><span class=\"math display\">\\[\\begin{aligned}\r\n&amp;\\mathit{x}&amp; &amp;标量\\\\\r\n&amp;\\boldsymbol{x}&amp; &amp;向量 \\\\\r\n&amp;\\mathrm{x}&amp; &amp;变量集 \\\\\r\n&amp;\\mathbf{A}&amp; &amp;矩阵 \\\\\r\n&amp;\\mathbf{I}&amp; &amp;单位阵 \\\\\r\n&amp;\\mathcal{X}&amp; &amp;样本空间或状态空间\\\\\r\n&amp;\\mathcal{D}&amp; &amp;概率分布\\\\\r\n&amp;\\mathit{D}&amp; &amp;数据样本(数据集)\\\\\r\n&amp;\\mathcal{H}&amp; &amp;假设空间\\\\\r\n&amp;\\mathit{H}&amp; &amp;假设集\\\\\r\n&amp;\\mathfrak{L}&amp; &amp;学习算法\\\\\r\n&amp;\\left ( \\cdot ,\\cdot ,\\cdot  \\right )&amp; &amp;行向量\\\\\r\n&amp;\\left ( \\cdot ;\\cdot ;\\cdot \\right )&amp; &amp;列向量\\\\\r\n&amp;\\left ( \\cdot  \\right )^{T}&amp; &amp;向量或矩阵转置\\\\\r\n&amp;\\left \\{  \\cdot \\cdot \\cdot \\right \\}&amp; &amp;集合\\\\\r\n&amp;\\left | \\left \\{ \\cdot \\cdot \\cdot \\right \\} \\right |&amp;\r\n&amp;集合中元素个数\\\\\r\n&amp;\\left \\| \\cdot  \\right \\|_{p}&amp; &amp;L_p范数, p缺省时为L_2范数\\\\\r\n&amp;\\mathit{P}\\left ( \\cdot  \\right ),\\mathit{P}\\left ( \\cdot\r\n|\\cdot  \\right )&amp; &amp;概率质量函数,条件概率质量函数\\\\\r\n&amp;\\mathit{p}\\left ( \\cdot  \\right ),\\mathit{p}\\left ( \\cdot  | \\cdot\r\n\\right )&amp; &amp;概率密度函数, 条件概率密度函数\\\\\r\n&amp;\\mathbb{E}_{\\cdot \\sim \\mathcal{D}}\\left [ f\\! \\left ( \\cdot \\right\r\n) \\right ]&amp; &amp;函数 f\\! \\left ( \\cdot \\right ) 对 \\cdot 在分布\r\n\\mathcal{D} 下的数学期望:意义明确是将省略 \\mathcal{D} 和(或)\\cdot \\\\\r\n&amp;sup\\left ( \\cdot \\right )&amp; &amp;上确界\\\\\r\n&amp;\\mathbb{I} \\left ( \\cdot  \\right )&amp; &amp;指示函数，在\r\n\\cdot  为真和假分别取值为1 , 0 \\\\\r\n&amp;sign\\left ( \\cdot  \\right )&amp; &amp;符号函数，在 \\cdot &lt; 0, =\r\n0 , &gt;  0 时分别取值为 -1,0,1\r\n\\end{aligned}\\]</span></p>\r\n<h2 id=\"chapter-1-绪论\">Chapter 1: 绪论</h2>\r\n<h3 id=\"基本术语\">$ 1.1 基本术语</h3>\r\n<blockquote>\r\n<p>假定我们收集了一批关于西瓜的数据, 例如(色泽 = 浅白; 根蒂 = 蜷缩; 敲声\r\n= 浊响), (色泽 = 乌黑; 根蒂 = 稍蜷; 敲声 = 沉闷), (色泽 = 浅白; 根蒂 =\r\n硬挺; 敲声 = 清脆), ......, 每对括号内是一条记录,\r\n下文关于术语的表述会基于上述假定进行解释.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>数据集/样本(Data Set):</strong>\r\n这组记录的集合称为一个数据集.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 数据集亦称样本,\r\n因为数据集可看作对样本空间的一个采样.</p>\r\n<p><strong>Addtional:</strong> \"样本\"的具体指代示例还是数据集,\r\n要看具体的上下文.</p>\r\n</blockquote></li>\r\n<li><p><strong>示例(Instance)/样本(Sample):</strong>\r\n每条记录称为示例/样本, 是关于一个事件或对象的描述(以上例,\r\n该对象为西瓜).</p></li>\r\n<li><p><strong>属性(Attribute)/特征(Feature):</strong> \"色泽\", \"根蒂\",\r\n\"敲声\"称为属性.</p></li>\r\n<li><p><strong>属性值(Attribute Value):</strong>\r\n属性的取值称为属性值(以上例, \"青绿\"和\"乌黑\"是色泽的属性值).</p></li>\r\n<li><p><strong>属性空间(Attribute Space)/样本空间(Sample\r\nSpace)/输入空间:</strong> 属性张成的空间.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处涉及的是线性代数知识,\r\n即将样本(Instance)依据属性转化为向量, 其中色泽, 根蒂和敲声为坐标轴,\r\n张成了一个用于描述西瓜特征的三维空间,\r\n该空间每个点即是线性代数意义上的一个向量, 也就是<strong>特征向量(Feature\r\nVector)</strong>. 我们可以认为,\r\n示例(Instance)的另一种等价表述是特征向量.</p>\r\n</blockquote></li>\r\n<li><p><strong>数据集的表示:</strong> 令 <span\r\nclass=\"math inline\">\\(\\mathit{D} = \\{x_1, x_2, ..., x_m\\}\\)</span>\r\n表示包含<span class=\"math inline\">\\(m\\)</span>个示例的数据集, 每个示例由\r\n<span class=\"math inline\">\\(d\\)</span> 个属性描述, 则每个示例(Instance)\r\n<span class=\"math inline\">\\(x_i= (x_{i1}; x_{i2}; ...; x_{id})\\)</span>\r\n是 <span class=\"math inline\">\\(d\\)</span> 维样本空间 <span\r\nclass=\"math inline\">\\(\\mathcal{X}\\)</span> 中的一个向量, <span\r\nclass=\"math inline\">\\(x_i \\in \\mathcal{X}\\)</span>. <span\r\nclass=\"math inline\">\\(d\\)</span> 称为样本 <span\r\nclass=\"math inline\">\\(x_i\\)</span>\r\n的<strong>维数(Dimensionality)</strong>.</p></li>\r\n<li><p><strong>学习(Learning)/训练(Training):</strong>\r\n从数据中学得模型的过程称为学习/训练,\r\n该过程通过执行某个学习算法完成.</p></li>\r\n<li><p><strong>训练数据(Training Data):</strong>\r\n训练过程中所使用的数据.</p></li>\r\n<li><p><strong>训练样本(Training Sample)/训练示例(Training\r\nInstance):</strong> 训练数据中的每个样本/示例.</p></li>\r\n<li><p><strong>训练集(Training Set):</strong>\r\n训练样本组成的集合称为训练集.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 训练集相当于训练数据的子集,\r\n训练数据除去<strong>训练集</strong>外还存在<strong>验证集</strong>.(参考自:<a\r\nhref=\"https://zhuanlan.zhihu.com/p/115344944\"><strong>知乎|训练集(training\r\ndataset), 测试集(test dataset)与验证集(validation\r\ndataset)</strong></a>)</p>\r\n</blockquote></li>\r\n<li><p><strong>假设(Hypothesis)&amp;真相/真实(Ground-Truth):</strong>\r\n学得模型对应了关于数据的某种潜在规律,\r\n因此亦称假设.这种潜在规律称为\"真相\"/\"真实\".\r\n学习的过程就是为了找出或逼近真相.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> <a\r\nhref=\"https://en.wikipedia.org/wiki/Ground_truth\"><strong>WIKIPEDIA|Ground-Truth</strong></a>又将其表述为<strong>基准真相</strong>.</p>\r\n<p>\"Ground truth is information that is known to be real or true,\r\nprovided by direct observation and measurement (i.e. empirical evidence)\r\nas opposed to information provided by inference.\"</p>\r\n</blockquote></li>\r\n</ul>\r\n<p><strong>Tips:</strong>\r\n本书有时又将<strong>模型</strong>称为<strong>学习器(Learner)</strong>,\r\n模型可看作是学习算法在给定数据和参数空间上的实例化.</p>\r\n<ul>\r\n<li><p><strong>标记(Label):</strong> 关于示例(Instance)结果的信息,\r\n称为标记(如\"好瓜\"). 一般的, 用 <span class=\"math inline\">\\((x_i,\r\ny_i)\\)</span> 表示第 <span class=\"math inline\">\\(i\\)</span> 个样例, 其中\r\n<span class=\"math inline\">\\(y_i \\in \\mathcal{Y}\\)</span> 是示例 <span\r\nclass=\"math inline\">\\(x_i\\)</span> 的标记, <span\r\nclass=\"math inline\">\\(\\mathcal{Y}\\)</span> 是所有标记的集合,\r\n又称<strong>标记空间(Label Space)/输出空间</strong>.</p></li>\r\n<li><p><strong>分类(Classification):</strong>\r\n若<strong>预测(Prediction)</strong>的是离散值(如\"好瓜\", \"坏瓜\"),\r\n则称此类学习任务是分类.</p></li>\r\n<li><p><strong>回归(Regression):</strong> 若预测的是连续值(如成熟度0.95,\r\n0.7), 则称此类学习任务是回归.</p></li>\r\n<li><p><strong>二分类(Binary Classification):</strong>\r\n只涉及两个类别的分类任务, 通常称其中一类为<strong>正类(Positive\r\nClass)</strong>, 另一类为<strong>反类(Negative Class)</strong>.</p></li>\r\n<li><p><strong>多分类(Multi-class Classification):</strong> 与之相对的,\r\n涉及多种类别的分类任务称为多分类任务.</p></li>\r\n<li><p><strong>预测任务:</strong> 预测任务希望通过对训练集<span\r\nclass=\"math inline\">\\(\\{(x_1, y_1), (x_2, y_2), ..., (x_m,\r\ny_m)\\}\\)</span> 进行学习, 建立一个从输入空间 <span\r\nclass=\"math inline\">\\(\\mathcal{X}\\)</span> 到输出空间 <span\r\nclass=\"math inline\">\\(\\mathcal{Y}\\)</span> 的映射 <span\r\nclass=\"math inline\">\\(f : \\mathcal{X} \\rightarrow \\mathcal{Y}\\)</span>.\r\n对二分类, 通常取 <span class=\"math inline\">\\(\\mathcal{Y} = \\{-1,\r\n1\\}\\)</span> 或 <span class=\"math inline\">\\(\\{0, 1\\}\\)</span>;\r\n对于多分类, <span class=\"math inline\">\\(|\\mathcal{Y}| &gt; 2\\)</span>;\r\n对于回归, <span class=\"math inline\">\\(\\mathcal{Y} =\r\n\\mathbb{R}\\)</span>.</p></li>\r\n<li><p><strong>测试(Testing):</strong>\r\n使用学习得到的模型进行预测的过程称为测试,\r\n预测的样本称为<strong>测试样本(Testing Sample)/测试示例(Testing\r\nInstance)</strong>.</p></li>\r\n<li><p><strong>聚类(Clustering):</strong> 将训练集中的样本分为若干组,\r\n每组称为一个<strong>簇(Cluster)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 形成的簇可能对应一些潜在的概念划分(如本地瓜,\r\n外地瓜), 但这样的概念我们事先不知道,\r\n否则通过标记(Label)就可以形成簇划分.</p>\r\n</blockquote></li>\r\n<li><p><strong>监督学习(Supervised Learning)/有导师学习:</strong>\r\n训练数据拥有标记信息, 分类和回归为代表.</p></li>\r\n<li><p><strong>无监督学习(Unsupervised Learning)/无导师学习</strong>\r\n训练数据无标记信息, 聚类为代表.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处仅作最基本的概念了解,\r\n关于上述两概念的具体释义留及之后的学习.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>泛化(Generalization):</strong>\r\n学得模型适用于新样本的能力,称为泛化能力.</p>\r\n<blockquote>\r\n<p><strong>Tips1:</strong> 样本空间通常很大, 训练过程无法涵盖所有的示例,\r\n我们希望模型可以对新样本有较好的目标表现, 这就是泛化的意义.</p>\r\n<p><strong>Tips2:</strong> 泛化的数学支撑:</p>\r\n<p>关于这种泛化,\r\n我们通常假设样本空间中的所有样本都服从一个未知的<strong>分布(Distribution)</strong>\r\n<span class=\"math inline\">\\(\\mathcal{D}\\)</span>,\r\n获取的样本是从该分布上采样获得的, 满足<strong>独立同分布(Independent and\r\nIdentically Distributed, <em>i.d.d</em>)</strong>.</p>\r\n<p>关于机器学习中为什么使用i.d.d, 可以从<a\r\nhref=\"https://www.zhihu.com/question/41222495\"><strong>知乎|为什么机器学习中,\r\n要假设我们的数据是独立同分布的?</strong></a>获取相关信息.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"假设空间\">$ 1.3 假设空间</h3>\r\n<p><strong>归纳(Induction)</strong>与<strong>演绎(Deduction)</strong>是科学推理的两大基本手段.</p>\r\n<blockquote>\r\n<p>前者是从特殊到一般的<strong>泛化(Generalization)</strong>过程;\r\n后者是从一般到特殊的<strong>特化(Specialization)</strong>过程.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>归纳学习(Inductive Learning):</strong>\r\n广义的归纳学习大体相当于从样例中学习,\r\n狭义的归纳学习要求从学习过程中习得<strong>概念(concept)</strong>,\r\n亦称<strong>概念学习/概念形成</strong>.</p></li>\r\n<li><p><strong>版本空间(Version Space):</strong>\r\n存在一个与训练集一致的\"假设集合\", 称为版本空间, 例如:</p></li>\r\n</ul>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png\" class=\"\" title=\"table1-1\">\r\n<p>其假设空间为</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<p>其版本空间为</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 在该数据集中, 好瓜具有的共同特征是蜷缩和浊响.\r\n因此色泽标识为通配符 <span class=\"math inline\">\\(*\\)</span>, 同时,\r\n第一行的两种假设同样是与训练集一致的(可以匹配好瓜).</p>\r\n</blockquote>\r\n<h3 id=\"归纳偏好\">$ 1.4 归纳偏好</h3>\r\n<ul>\r\n<li><p><strong>归纳偏好(Inductive bias):</strong>\r\n算法在学习过程中对某种类型假设的偏好称为归纳偏好.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n<strong>任何</strong>一个有效的机器学习算法必有其归纳偏好,\r\n否则它无法产生确定的学习结果.</p>\r\n<p>以图1-2的版本空间为例, 对新瓜(色泽=青绿;根蒂=蜷缩;敲声=沉闷),\r\n若模型告诉我们这种瓜时好时坏则没有意义,\r\n模型必须对给定的样本给予确定的结果.</p>\r\n<p><strong>Additional:</strong>\r\n归纳偏好可看作学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或\"价值观\".\r\n常遵循<strong>奥卡姆剃刀(Occam's\r\nRazor)</strong>原则(<strong>若有多个假设与观察一致,\r\n则选简单的那个</strong>).</p>\r\n</blockquote></li>\r\n</ul>\r\n<p>接下来我们来比较不同归纳偏好的优劣</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n<p>从直观上看我们一般会认为, 拟合出平滑的曲线A要优于曲线B, 但很遗憾,\r\n当面临一些极端数据时, 曲线B可能会优于曲线A, 情形如下图所示.</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png\" class=\"\" title=\"pic1-4\">\r\n<p>接下来我们用数学语言尝试量化模型的优劣.</p>\r\n<p>假设样本空间 <span class=\"math inline\">\\(\\mathcal{X}\\)</span>\r\n和假设空间 <span class=\"math inline\">\\(\\mathcal{H}\\)</span> 都是离散的,\r\n令 <span class=\"math inline\">\\(P(h|X, \\mathfrak{L})\\)</span>\r\n代表学习算法 <span class=\"math inline\">\\(\\mathfrak{L}_a\\)</span>\r\n基于训练数据 <span class=\"math inline\">\\(X\\)</span> 产生假设 <span\r\nclass=\"math inline\">\\(h\\)</span> 的概率, 令 <span\r\nclass=\"math inline\">\\(f\\)</span> 为目标函数.则 <span\r\nclass=\"math inline\">\\(\\mathfrak{L}_a\\)</span>\r\n在训练集外的所有样本上的误差为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation} \\label{eq1.1}\r\nE_{ote}(\\mathfrak{L}_a|X, f) = \\sum_h \\sum_{x \\in \\mathcal{X} -X} P(x)\r\n\\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\r\n\\tag{1.1}\r\n\\end{equation}\\]</span></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n以下是笔者个人对该公式的理解,可能存在疏漏或错误.</p>\r\n<p>首先看乘起来的的三个式子, <span\r\nclass=\"math inline\">\\(\\mathbb{I}\\)</span> 为指示函数, 代表的含义是假设\r\n<span class=\"math inline\">\\(h\\)</span> 与目标函数 <span\r\nclass=\"math inline\">\\(f\\)</span> 没有误差时取0, 存在误差时取1. 若取1,\r\n则两个概率乘积表示在给定的<span class=\"math inline\">\\(x\\)</span>和<span\r\nclass=\"math inline\">\\(h\\)</span>下, 存在误差的概率.</p>\r\n<p>接下来的两个求和就不难理解了, 分别是对<span\r\nclass=\"math inline\">\\(x\\)</span>的所有取值求和以及对<span\r\nclass=\"math inline\">\\(h\\)</span>的所有取值求和, 权重为特定<span\r\nclass=\"math inline\">\\(x\\)</span>和<span\r\nclass=\"math inline\">\\(h\\)</span>的概率.</p>\r\n</blockquote>\r\n<p>为简化问题, 考虑二分类, 真实目标函数<span\r\nclass=\"math inline\">\\(f\\)</span>可以是任何函数<span\r\nclass=\"math inline\">\\(\\mathcal{X} \\rightarrow \\{0,1\\}\\)</span>,\r\n函数空间<span class=\"math inline\">\\(\\{0,1\\}^{|\\mathcal{X}|}\\)</span>.\r\n对所有可能的<span\r\nclass=\"math inline\">\\(f\\)</span>按均匀分布对误差求和,有</p>\r\n<p><span class=\"math display\">\\[\r\n\\begin{align} \\nonumber\r\n\\sum_f E_{ote}(\\mathfrak{L}_a|x, f) &amp;= \\sum_f \\sum_h \\sum_{x \\in\r\n\\mathcal{X} -X} P(x) \\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\\\\\r\n\\nonumber\r\n&amp;= \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a)\r\n\\sum_f \\mathbb{I}(h(x) \\neq f(x))\\\\ \\nonumber\r\n^*&amp;=  \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a)\r\n\\frac{1}{2}2^{|\\mathcal{X}|}\\\\ \\nonumber\r\n&amp;= \\frac{1}{2}2^{|\\mathcal{X}|} \\sum_{x \\in \\mathcal{X} -X} P(x)\r\n\\cdot 1 \\tag{1.2}\r\n\\end{align}\r\n\\]</span></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 标识<span\r\nclass=\"math inline\">\\(*\\)</span>的一步因为若<span\r\nclass=\"math inline\">\\(f\\)</span>均匀分布, 则有一半的<span\r\nclass=\"math inline\">\\(f\\)</span>对<span\r\nclass=\"math inline\">\\(x\\)</span>的预测与<span\r\nclass=\"math inline\">\\(h(x)\\)</span>不一致.</p>\r\n</blockquote>\r\n<p>式(1.2)指出, 误差与学习算法<span\r\nclass=\"math inline\">\\(\\mathfrak{L}\\)</span>无关! 对于任意学习算法<span\r\nclass=\"math inline\">\\(\\mathfrak{L}_a\\)</span>和<span\r\nclass=\"math inline\">\\(mathfrak{L}_b\\)</span>,有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\sum_f E_{ote}(\\mathfrak{L}_a|X, f) = \\sum_f E_{ote}(\\mathfrak{L}_b|X,\r\nf) \\tag{1.3}\r\n\\end{equation}\\]</span></p>\r\n<p>这简直糟糕透了, 似乎所有的学习算法期望性能居然都相同.\r\n这就是<strong>没有免费午餐定理(No Free Lunch Theorem, NFL)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 原书的证明是多重假设下的简化论述,\r\n对严格数学证明感兴趣的读者可以自行查阅相关资料.</p>\r\n</blockquote>\r\n<p>但是, NFL定理有一个重要前提, 它假定了所有问题出现的机会相等,\r\n所有问题同等重要(例如上述证明中假设了<span\r\nclass=\"math inline\">\\(f\\)</span>均匀分布).\r\n但我们并不要求模型对所有情况都能给出一个好的解决方案,\r\n往往我们希望模型对特定问题表现是好的.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 原书中举了一个简单的例子,\r\n骑自行车从南京鼓楼到南京新街口显然是好方案(距离约两站地铁),\r\n但骑自行车从南京鼓楼到北京新街口, 显然不是好的方案,但我们不care.</p>\r\n</blockquote>\r\n<p>简单来说,\r\nNFL定理指出了<strong>没有一种机器学习算法是适用于所有情况的</strong>,\r\n只有针对具体问题, 才能谈论模型的优劣.</p>\r\n","length":3117,"excerpt":"<p><strong>机器学习所研究的主要内容,\r\n是关于在计算机上从数据中产生\"模型\"(model)的算法, 即\"学习算法\"(learning\r\nalgorithm).</strong></p>","more":"<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#书籍基本信息\">书籍基本信息</a></li>\r\n<li><a href=\"#chapter-0-主要符号表\">Chapter 0: 主要符号表</a></li>\r\n<li><a href=\"#chapter-1-绪论\">Chapter 1: 绪论</a>\r\n<ul>\r\n<li><a href=\"#-11-基本术语\">$ 1.1 基本术语</a></li>\r\n<li><a href=\"#-13-假设空间\">$ 1.3 假设空间</a></li>\r\n<li><a href=\"#-14-归纳偏好\">$ 1.4 归纳偏好</a></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"书籍基本信息\">书籍基本信息</h2>\r\n<p>《机器学习》周志华 2016.</p>\r\n<p>大名鼎鼎的西瓜书, 笔者在此略去介绍.</p>\r\n<h2 id=\"chapter-0-主要符号表\">Chapter 0: 主要符号表</h2>\r\n<p><span class=\"math display\">\\[\\begin{aligned}\r\n&amp;\\mathit{x}&amp; &amp;标量\\\\\r\n&amp;\\boldsymbol{x}&amp; &amp;向量 \\\\\r\n&amp;\\mathrm{x}&amp; &amp;变量集 \\\\\r\n&amp;\\mathbf{A}&amp; &amp;矩阵 \\\\\r\n&amp;\\mathbf{I}&amp; &amp;单位阵 \\\\\r\n&amp;\\mathcal{X}&amp; &amp;样本空间或状态空间\\\\\r\n&amp;\\mathcal{D}&amp; &amp;概率分布\\\\\r\n&amp;\\mathit{D}&amp; &amp;数据样本(数据集)\\\\\r\n&amp;\\mathcal{H}&amp; &amp;假设空间\\\\\r\n&amp;\\mathit{H}&amp; &amp;假设集\\\\\r\n&amp;\\mathfrak{L}&amp; &amp;学习算法\\\\\r\n&amp;\\left ( \\cdot ,\\cdot ,\\cdot  \\right )&amp; &amp;行向量\\\\\r\n&amp;\\left ( \\cdot ;\\cdot ;\\cdot \\right )&amp; &amp;列向量\\\\\r\n&amp;\\left ( \\cdot  \\right )^{T}&amp; &amp;向量或矩阵转置\\\\\r\n&amp;\\left \\{  \\cdot \\cdot \\cdot \\right \\}&amp; &amp;集合\\\\\r\n&amp;\\left | \\left \\{ \\cdot \\cdot \\cdot \\right \\} \\right |&amp;\r\n&amp;集合中元素个数\\\\\r\n&amp;\\left \\| \\cdot  \\right \\|_{p}&amp; &amp;L_p范数, p缺省时为L_2范数\\\\\r\n&amp;\\mathit{P}\\left ( \\cdot  \\right ),\\mathit{P}\\left ( \\cdot\r\n|\\cdot  \\right )&amp; &amp;概率质量函数,条件概率质量函数\\\\\r\n&amp;\\mathit{p}\\left ( \\cdot  \\right ),\\mathit{p}\\left ( \\cdot  | \\cdot\r\n\\right )&amp; &amp;概率密度函数, 条件概率密度函数\\\\\r\n&amp;\\mathbb{E}_{\\cdot \\sim \\mathcal{D}}\\left [ f\\! \\left ( \\cdot \\right\r\n) \\right ]&amp; &amp;函数 f\\! \\left ( \\cdot \\right ) 对 \\cdot 在分布\r\n\\mathcal{D} 下的数学期望:意义明确是将省略 \\mathcal{D} 和(或)\\cdot \\\\\r\n&amp;sup\\left ( \\cdot \\right )&amp; &amp;上确界\\\\\r\n&amp;\\mathbb{I} \\left ( \\cdot  \\right )&amp; &amp;指示函数，在\r\n\\cdot  为真和假分别取值为1 , 0 \\\\\r\n&amp;sign\\left ( \\cdot  \\right )&amp; &amp;符号函数，在 \\cdot &lt; 0, =\r\n0 , &gt;  0 时分别取值为 -1,0,1\r\n\\end{aligned}\\]</span></p>\r\n<h2 id=\"chapter-1-绪论\">Chapter 1: 绪论</h2>\r\n<h3 id=\"基本术语\">$ 1.1 基本术语</h3>\r\n<blockquote>\r\n<p>假定我们收集了一批关于西瓜的数据, 例如(色泽 = 浅白; 根蒂 = 蜷缩; 敲声\r\n= 浊响), (色泽 = 乌黑; 根蒂 = 稍蜷; 敲声 = 沉闷), (色泽 = 浅白; 根蒂 =\r\n硬挺; 敲声 = 清脆), ......, 每对括号内是一条记录,\r\n下文关于术语的表述会基于上述假定进行解释.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>数据集/样本(Data Set):</strong>\r\n这组记录的集合称为一个数据集.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 数据集亦称样本,\r\n因为数据集可看作对样本空间的一个采样.</p>\r\n<p><strong>Addtional:</strong> \"样本\"的具体指代示例还是数据集,\r\n要看具体的上下文.</p>\r\n</blockquote></li>\r\n<li><p><strong>示例(Instance)/样本(Sample):</strong>\r\n每条记录称为示例/样本, 是关于一个事件或对象的描述(以上例,\r\n该对象为西瓜).</p></li>\r\n<li><p><strong>属性(Attribute)/特征(Feature):</strong> \"色泽\", \"根蒂\",\r\n\"敲声\"称为属性.</p></li>\r\n<li><p><strong>属性值(Attribute Value):</strong>\r\n属性的取值称为属性值(以上例, \"青绿\"和\"乌黑\"是色泽的属性值).</p></li>\r\n<li><p><strong>属性空间(Attribute Space)/样本空间(Sample\r\nSpace)/输入空间:</strong> 属性张成的空间.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处涉及的是线性代数知识,\r\n即将样本(Instance)依据属性转化为向量, 其中色泽, 根蒂和敲声为坐标轴,\r\n张成了一个用于描述西瓜特征的三维空间,\r\n该空间每个点即是线性代数意义上的一个向量, 也就是<strong>特征向量(Feature\r\nVector)</strong>. 我们可以认为,\r\n示例(Instance)的另一种等价表述是特征向量.</p>\r\n</blockquote></li>\r\n<li><p><strong>数据集的表示:</strong> 令 <span\r\nclass=\"math inline\">\\(\\mathit{D} = \\{x_1, x_2, ..., x_m\\}\\)</span>\r\n表示包含<span class=\"math inline\">\\(m\\)</span>个示例的数据集, 每个示例由\r\n<span class=\"math inline\">\\(d\\)</span> 个属性描述, 则每个示例(Instance)\r\n<span class=\"math inline\">\\(x_i= (x_{i1}; x_{i2}; ...; x_{id})\\)</span>\r\n是 <span class=\"math inline\">\\(d\\)</span> 维样本空间 <span\r\nclass=\"math inline\">\\(\\mathcal{X}\\)</span> 中的一个向量, <span\r\nclass=\"math inline\">\\(x_i \\in \\mathcal{X}\\)</span>. <span\r\nclass=\"math inline\">\\(d\\)</span> 称为样本 <span\r\nclass=\"math inline\">\\(x_i\\)</span>\r\n的<strong>维数(Dimensionality)</strong>.</p></li>\r\n<li><p><strong>学习(Learning)/训练(Training):</strong>\r\n从数据中学得模型的过程称为学习/训练,\r\n该过程通过执行某个学习算法完成.</p></li>\r\n<li><p><strong>训练数据(Training Data):</strong>\r\n训练过程中所使用的数据.</p></li>\r\n<li><p><strong>训练样本(Training Sample)/训练示例(Training\r\nInstance):</strong> 训练数据中的每个样本/示例.</p></li>\r\n<li><p><strong>训练集(Training Set):</strong>\r\n训练样本组成的集合称为训练集.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 训练集相当于训练数据的子集,\r\n训练数据除去<strong>训练集</strong>外还存在<strong>验证集</strong>.(参考自:<a\r\nhref=\"https://zhuanlan.zhihu.com/p/115344944\"><strong>知乎|训练集(training\r\ndataset), 测试集(test dataset)与验证集(validation\r\ndataset)</strong></a>)</p>\r\n</blockquote></li>\r\n<li><p><strong>假设(Hypothesis)&amp;真相/真实(Ground-Truth):</strong>\r\n学得模型对应了关于数据的某种潜在规律,\r\n因此亦称假设.这种潜在规律称为\"真相\"/\"真实\".\r\n学习的过程就是为了找出或逼近真相.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> <a\r\nhref=\"https://en.wikipedia.org/wiki/Ground_truth\"><strong>WIKIPEDIA|Ground-Truth</strong></a>又将其表述为<strong>基准真相</strong>.</p>\r\n<p>\"Ground truth is information that is known to be real or true,\r\nprovided by direct observation and measurement (i.e. empirical evidence)\r\nas opposed to information provided by inference.\"</p>\r\n</blockquote></li>\r\n</ul>\r\n<p><strong>Tips:</strong>\r\n本书有时又将<strong>模型</strong>称为<strong>学习器(Learner)</strong>,\r\n模型可看作是学习算法在给定数据和参数空间上的实例化.</p>\r\n<ul>\r\n<li><p><strong>标记(Label):</strong> 关于示例(Instance)结果的信息,\r\n称为标记(如\"好瓜\"). 一般的, 用 <span class=\"math inline\">\\((x_i,\r\ny_i)\\)</span> 表示第 <span class=\"math inline\">\\(i\\)</span> 个样例, 其中\r\n<span class=\"math inline\">\\(y_i \\in \\mathcal{Y}\\)</span> 是示例 <span\r\nclass=\"math inline\">\\(x_i\\)</span> 的标记, <span\r\nclass=\"math inline\">\\(\\mathcal{Y}\\)</span> 是所有标记的集合,\r\n又称<strong>标记空间(Label Space)/输出空间</strong>.</p></li>\r\n<li><p><strong>分类(Classification):</strong>\r\n若<strong>预测(Prediction)</strong>的是离散值(如\"好瓜\", \"坏瓜\"),\r\n则称此类学习任务是分类.</p></li>\r\n<li><p><strong>回归(Regression):</strong> 若预测的是连续值(如成熟度0.95,\r\n0.7), 则称此类学习任务是回归.</p></li>\r\n<li><p><strong>二分类(Binary Classification):</strong>\r\n只涉及两个类别的分类任务, 通常称其中一类为<strong>正类(Positive\r\nClass)</strong>, 另一类为<strong>反类(Negative Class)</strong>.</p></li>\r\n<li><p><strong>多分类(Multi-class Classification):</strong> 与之相对的,\r\n涉及多种类别的分类任务称为多分类任务.</p></li>\r\n<li><p><strong>预测任务:</strong> 预测任务希望通过对训练集<span\r\nclass=\"math inline\">\\(\\{(x_1, y_1), (x_2, y_2), ..., (x_m,\r\ny_m)\\}\\)</span> 进行学习, 建立一个从输入空间 <span\r\nclass=\"math inline\">\\(\\mathcal{X}\\)</span> 到输出空间 <span\r\nclass=\"math inline\">\\(\\mathcal{Y}\\)</span> 的映射 <span\r\nclass=\"math inline\">\\(f : \\mathcal{X} \\rightarrow \\mathcal{Y}\\)</span>.\r\n对二分类, 通常取 <span class=\"math inline\">\\(\\mathcal{Y} = \\{-1,\r\n1\\}\\)</span> 或 <span class=\"math inline\">\\(\\{0, 1\\}\\)</span>;\r\n对于多分类, <span class=\"math inline\">\\(|\\mathcal{Y}| &gt; 2\\)</span>;\r\n对于回归, <span class=\"math inline\">\\(\\mathcal{Y} =\r\n\\mathbb{R}\\)</span>.</p></li>\r\n<li><p><strong>测试(Testing):</strong>\r\n使用学习得到的模型进行预测的过程称为测试,\r\n预测的样本称为<strong>测试样本(Testing Sample)/测试示例(Testing\r\nInstance)</strong>.</p></li>\r\n<li><p><strong>聚类(Clustering):</strong> 将训练集中的样本分为若干组,\r\n每组称为一个<strong>簇(Cluster)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 形成的簇可能对应一些潜在的概念划分(如本地瓜,\r\n外地瓜), 但这样的概念我们事先不知道,\r\n否则通过标记(Label)就可以形成簇划分.</p>\r\n</blockquote></li>\r\n<li><p><strong>监督学习(Supervised Learning)/有导师学习:</strong>\r\n训练数据拥有标记信息, 分类和回归为代表.</p></li>\r\n<li><p><strong>无监督学习(Unsupervised Learning)/无导师学习</strong>\r\n训练数据无标记信息, 聚类为代表.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处仅作最基本的概念了解,\r\n关于上述两概念的具体释义留及之后的学习.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>泛化(Generalization):</strong>\r\n学得模型适用于新样本的能力,称为泛化能力.</p>\r\n<blockquote>\r\n<p><strong>Tips1:</strong> 样本空间通常很大, 训练过程无法涵盖所有的示例,\r\n我们希望模型可以对新样本有较好的目标表现, 这就是泛化的意义.</p>\r\n<p><strong>Tips2:</strong> 泛化的数学支撑:</p>\r\n<p>关于这种泛化,\r\n我们通常假设样本空间中的所有样本都服从一个未知的<strong>分布(Distribution)</strong>\r\n<span class=\"math inline\">\\(\\mathcal{D}\\)</span>,\r\n获取的样本是从该分布上采样获得的, 满足<strong>独立同分布(Independent and\r\nIdentically Distributed, <em>i.d.d</em>)</strong>.</p>\r\n<p>关于机器学习中为什么使用i.d.d, 可以从<a\r\nhref=\"https://www.zhihu.com/question/41222495\"><strong>知乎|为什么机器学习中,\r\n要假设我们的数据是独立同分布的?</strong></a>获取相关信息.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"假设空间\">$ 1.3 假设空间</h3>\r\n<p><strong>归纳(Induction)</strong>与<strong>演绎(Deduction)</strong>是科学推理的两大基本手段.</p>\r\n<blockquote>\r\n<p>前者是从特殊到一般的<strong>泛化(Generalization)</strong>过程;\r\n后者是从一般到特殊的<strong>特化(Specialization)</strong>过程.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>归纳学习(Inductive Learning):</strong>\r\n广义的归纳学习大体相当于从样例中学习,\r\n狭义的归纳学习要求从学习过程中习得<strong>概念(concept)</strong>,\r\n亦称<strong>概念学习/概念形成</strong>.</p></li>\r\n<li><p><strong>版本空间(Version Space):</strong>\r\n存在一个与训练集一致的\"假设集合\", 称为版本空间, 例如:</p></li>\r\n</ul>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png\" class=\"\" title=\"table1-1\">\r\n<p>其假设空间为</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<p>其版本空间为</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 在该数据集中, 好瓜具有的共同特征是蜷缩和浊响.\r\n因此色泽标识为通配符 <span class=\"math inline\">\\(*\\)</span>, 同时,\r\n第一行的两种假设同样是与训练集一致的(可以匹配好瓜).</p>\r\n</blockquote>\r\n<h3 id=\"归纳偏好\">$ 1.4 归纳偏好</h3>\r\n<ul>\r\n<li><p><strong>归纳偏好(Inductive bias):</strong>\r\n算法在学习过程中对某种类型假设的偏好称为归纳偏好.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n<strong>任何</strong>一个有效的机器学习算法必有其归纳偏好,\r\n否则它无法产生确定的学习结果.</p>\r\n<p>以图1-2的版本空间为例, 对新瓜(色泽=青绿;根蒂=蜷缩;敲声=沉闷),\r\n若模型告诉我们这种瓜时好时坏则没有意义,\r\n模型必须对给定的样本给予确定的结果.</p>\r\n<p><strong>Additional:</strong>\r\n归纳偏好可看作学习算法自身在一个可能很庞大的假设空间中对假设进行选择的启发式或\"价值观\".\r\n常遵循<strong>奥卡姆剃刀(Occam's\r\nRazor)</strong>原则(<strong>若有多个假设与观察一致,\r\n则选简单的那个</strong>).</p>\r\n</blockquote></li>\r\n</ul>\r\n<p>接下来我们来比较不同归纳偏好的优劣</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n<p>从直观上看我们一般会认为, 拟合出平滑的曲线A要优于曲线B, 但很遗憾,\r\n当面临一些极端数据时, 曲线B可能会优于曲线A, 情形如下图所示.</p>\r\n<img src=\"/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png\" class=\"\" title=\"pic1-4\">\r\n<p>接下来我们用数学语言尝试量化模型的优劣.</p>\r\n<p>假设样本空间 <span class=\"math inline\">\\(\\mathcal{X}\\)</span>\r\n和假设空间 <span class=\"math inline\">\\(\\mathcal{H}\\)</span> 都是离散的,\r\n令 <span class=\"math inline\">\\(P(h|X, \\mathfrak{L})\\)</span>\r\n代表学习算法 <span class=\"math inline\">\\(\\mathfrak{L}_a\\)</span>\r\n基于训练数据 <span class=\"math inline\">\\(X\\)</span> 产生假设 <span\r\nclass=\"math inline\">\\(h\\)</span> 的概率, 令 <span\r\nclass=\"math inline\">\\(f\\)</span> 为目标函数.则 <span\r\nclass=\"math inline\">\\(\\mathfrak{L}_a\\)</span>\r\n在训练集外的所有样本上的误差为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation} \\label{eq1.1}\r\nE_{ote}(\\mathfrak{L}_a|X, f) = \\sum_h \\sum_{x \\in \\mathcal{X} -X} P(x)\r\n\\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\r\n\\tag{1.1}\r\n\\end{equation}\\]</span></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n以下是笔者个人对该公式的理解,可能存在疏漏或错误.</p>\r\n<p>首先看乘起来的的三个式子, <span\r\nclass=\"math inline\">\\(\\mathbb{I}\\)</span> 为指示函数, 代表的含义是假设\r\n<span class=\"math inline\">\\(h\\)</span> 与目标函数 <span\r\nclass=\"math inline\">\\(f\\)</span> 没有误差时取0, 存在误差时取1. 若取1,\r\n则两个概率乘积表示在给定的<span class=\"math inline\">\\(x\\)</span>和<span\r\nclass=\"math inline\">\\(h\\)</span>下, 存在误差的概率.</p>\r\n<p>接下来的两个求和就不难理解了, 分别是对<span\r\nclass=\"math inline\">\\(x\\)</span>的所有取值求和以及对<span\r\nclass=\"math inline\">\\(h\\)</span>的所有取值求和, 权重为特定<span\r\nclass=\"math inline\">\\(x\\)</span>和<span\r\nclass=\"math inline\">\\(h\\)</span>的概率.</p>\r\n</blockquote>\r\n<p>为简化问题, 考虑二分类, 真实目标函数<span\r\nclass=\"math inline\">\\(f\\)</span>可以是任何函数<span\r\nclass=\"math inline\">\\(\\mathcal{X} \\rightarrow \\{0,1\\}\\)</span>,\r\n函数空间<span class=\"math inline\">\\(\\{0,1\\}^{|\\mathcal{X}|}\\)</span>.\r\n对所有可能的<span\r\nclass=\"math inline\">\\(f\\)</span>按均匀分布对误差求和,有</p>\r\n<p><span class=\"math display\">\\[\r\n\\begin{align} \\nonumber\r\n\\sum_f E_{ote}(\\mathfrak{L}_a|x, f) &amp;= \\sum_f \\sum_h \\sum_{x \\in\r\n\\mathcal{X} -X} P(x) \\mathbb{I}(h(x) \\neq f(x)) P(h|X, \\mathfrak{L}_a)\\\\\r\n\\nonumber\r\n&amp;= \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a)\r\n\\sum_f \\mathbb{I}(h(x) \\neq f(x))\\\\ \\nonumber\r\n^*&amp;=  \\sum_{x \\in \\mathcal{X} -X} P(x) \\sum_h P(h|X, \\mathfrak{L}_a)\r\n\\frac{1}{2}2^{|\\mathcal{X}|}\\\\ \\nonumber\r\n&amp;= \\frac{1}{2}2^{|\\mathcal{X}|} \\sum_{x \\in \\mathcal{X} -X} P(x)\r\n\\cdot 1 \\tag{1.2}\r\n\\end{align}\r\n\\]</span></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 标识<span\r\nclass=\"math inline\">\\(*\\)</span>的一步因为若<span\r\nclass=\"math inline\">\\(f\\)</span>均匀分布, 则有一半的<span\r\nclass=\"math inline\">\\(f\\)</span>对<span\r\nclass=\"math inline\">\\(x\\)</span>的预测与<span\r\nclass=\"math inline\">\\(h(x)\\)</span>不一致.</p>\r\n</blockquote>\r\n<p>式(1.2)指出, 误差与学习算法<span\r\nclass=\"math inline\">\\(\\mathfrak{L}\\)</span>无关! 对于任意学习算法<span\r\nclass=\"math inline\">\\(\\mathfrak{L}_a\\)</span>和<span\r\nclass=\"math inline\">\\(mathfrak{L}_b\\)</span>,有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\sum_f E_{ote}(\\mathfrak{L}_a|X, f) = \\sum_f E_{ote}(\\mathfrak{L}_b|X,\r\nf) \\tag{1.3}\r\n\\end{equation}\\]</span></p>\r\n<p>这简直糟糕透了, 似乎所有的学习算法期望性能居然都相同.\r\n这就是<strong>没有免费午餐定理(No Free Lunch Theorem, NFL)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 原书的证明是多重假设下的简化论述,\r\n对严格数学证明感兴趣的读者可以自行查阅相关资料.</p>\r\n</blockquote>\r\n<p>但是, NFL定理有一个重要前提, 它假定了所有问题出现的机会相等,\r\n所有问题同等重要(例如上述证明中假设了<span\r\nclass=\"math inline\">\\(f\\)</span>均匀分布).\r\n但我们并不要求模型对所有情况都能给出一个好的解决方案,\r\n往往我们希望模型对特定问题表现是好的.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 原书中举了一个简单的例子,\r\n骑自行车从南京鼓楼到南京新街口显然是好方案(距离约两站地铁),\r\n但骑自行车从南京鼓楼到北京新街口, 显然不是好的方案,但我们不care.</p>\r\n</blockquote>\r\n<p>简单来说,\r\nNFL定理指出了<strong>没有一种机器学习算法是适用于所有情况的</strong>,\r\n只有针对具体问题, 才能谈论模型的优劣.</p>"},{"title":"BookNote-MachineLearning-by-ZhihuaZhou-3","date":"2024-10-26T15:25:14.000Z","hidden":true,"_content":"\n<!--more-->\n\n","source":"_posts/BookNote-MachineLearning-by-ZhihuaZhou-3.md","raw":"---\ntitle: BookNote-MachineLearning-by-ZhihuaZhou-3\ndate: 2024-10-26 23:25:14\nhidden: true\ntags:\n- 读书笔记\n- 机器学习\ncategories:\n- 读书笔记-机器学习\n---\n\n<!--more-->\n\n","slug":"BookNote-MachineLearning-by-ZhihuaZhou-3","published":1,"updated":"2024-10-30T11:50:54.664Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyud0009ssil7b1a9t9z","content":"<span id=\"more\"></span>\r\n<!-- flag of hidden posts -->","length":1,"excerpt":"","more":""},{"title":"读书笔记-机器学习 Ch2","date":"2024-09-24T15:38:02.000Z","hidden":false,"_content":"\n**有多个算法和参数生成的模型, 哪个才是好的模型?**\n\n<!-- more -->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [Chapter 2: 模型评估与选择](#chapter-2-模型评估与选择)\n  - [$ 2.1 经验误差与过拟合](#-21-经验误差与过拟合)\n  - [$ 2.2 评估方法](#-22-评估方法)\n    - [$ 2.2.1 留出法(Hold-Out)](#-221-留出法hold-out)\n    - [$ 2.2.2 交叉验证法(Cross Validation)](#-222-交叉验证法cross-validation)\n    - [$ 2.2.3 自助法(Bootstapping)](#-223-自助法bootstapping)\n    - [$ 2.2.4 调参与最终模型](#-224-调参与最终模型)\n  - [$ 2.3 性能度量](#-23-性能度量)\n    - [$ 2.3.1 错误率与精度](#-231-错误率与精度)\n    - [$ 2.3.2 查准率(Precision), 查全率(Recall), F1](#-232-查准率precision-查全率recall-f1)\n    - [$ 2.3.3 ROC与AUC](#-233-roc与auc)\n    - [$ 2.3.4 代价敏感错误率与代价曲线](#-234-代价敏感错误率与代价曲线)\n  - [$ 2.4 比较检验](#-24-比较检验)\n    - [$ 2.4.1 假设检验](#-241-假设检验)\n    - [$ 2.4.2 多学习器比较](#-242-多学习器比较)\n  - [2.5 偏差与方差](#25-偏差与方差)\n\n---\n\n## Chapter 2: 模型评估与选择\n\n### $ 2.1 经验误差与过拟合\n\n- **错误率(Error Rate):** 分类错误的样本数占样本总数的比例, 记样本数为$m$, $a$个错误分类的样本, 错误率 $E=\\frac{a}{m}$ .\n\n- **精度(Accuracy):** $(1 - \\frac{a}{m}) \\times 100\\%$ 称为精度, 即 \"精度 = 1 - 错误率\".\n\n- **误差(Error):** 更一般地, 我们把**学习器的实际预测输出**与**样本的真实输出**之间的差异称为误差, 学习器在训练集上的误差称为 **训练误差(Training Error)/经验误差(Empirical Error)**, 在新样本上的误差称为**泛化误差(Generalization Error)**.\n\n    > **Tips:** 这里的误差均指**误差期望**.\n\n尽管我们希望得到一个泛化误差小的学习器, 使得其在新样本上表现很好, 但我们并不能预测新样本, 因此我们只能尝试降低经验误差. 但经验误差很小的学习器往往在泛化误差的表现上都很糟糕. 这样的学习器发生了**过拟合**.\n\n- **过拟合(Overfitting):** 学习器可能将训练样本自身的一些特点当作了所有潜在样本都具有的一般性质, 导致泛化能力下降的现象.\n\n- **欠拟合(Underfitting):** 与过拟合相对, 指对训练样本的一般性质尚未学好.\n\n![pic2-1](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png)\n\n> **Tips:** 导致过拟合的原因很多, 最常见的原因是学习能力过强; 欠拟合则相反, 因为学习能力低下. 欠拟合容易克服, 但过拟合很难解决, 且过拟合无法彻底避免.\n\n- **模型选择(Model Selection):** 在实际中, 面对同一个问题, 往往有多种学习算法可以选择, 参数配置也会对模型产生影响.\n\n![spic2-2](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png)\n\n### $ 2.2 评估方法\n\n通常我们可以通过实验测试对学习器的泛化误差进行评估, 使用**测试集(Testing Set)**测试学习器对新样本的判别能力, 以测试集上**测试误差(Testing Error)**作为泛化误差的近似. 但需要注意的是, 测试集应尽可能与训练集互斥.\n\n> 假设我们有且只有一个包含$m$个样例的数据集$D = \\{(x_1,y_1),(x_2,y_2), ..., (x_m,y_m)\\}$, 既要训练, 又要测试, 这样就需要对$D$进行适当处理, 从中产生 **训练集** $S$和 **测试集** $T$.\n\n#### $ 2.2.1 留出法(Hold-Out)\n\n留出法的思路很简单, 直接将数据集$D$划分成两个互斥的集合, 即$D = S \\cup T, S \\cap T = \\emptyset$.\n\n使用留出法时需要注意训练集和测试集的划分需要保持数据分布一致性, 避免因数据划分引入额外偏差对结果产生影响. 同时单次留出法得到的估计往往并不够准确可靠, 一般采用若干次随机划分, 重复进行实验评估取平均值作为留出法评估结果. 关于划分比例, 通常取2/3 ~ 4/5的样本用于训练, 其余用于测试.\n\n#### $ 2.2.2 交叉验证法(Cross Validation)\n\n交叉验证法可以看作是一种具体的留出法, 其方法过程是:\n\n先将数据集$D$划分为$k$个大小相似的互斥子集, $D = D_1 \\cup D_2 \\cup ... \\cup D_k, D_i \\cap D_j = \\emptyset (i \\neq j)$, 子集$D_i$通过保留类别比例的**分层采样(Stratified Sampling)**来尽可能保持数据分布一致性.\n\n接下来每次取$k-1$个子集作为训练集, 余下一个作为测试集, 进行$k$次训练和测试, 最终结果取$k$个结果的均值.\n\n![pic2-2](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png)\n\n显然交叉验证法评估结果的**稳定性(Stability)**和**保真性(Fidelity)**与$k$的取值强相关. 故而交叉验证法又称**k折交叉验证(k-fold Cross Validation)**. 最常见的取值是 $k=10$.\n\n由于$D$的$k$划分不唯一, k折交叉验证通常也要重复多次, 记为$p$, 最终结果取这$p$次k折交叉验证结果的均值.\n\n**留一法(Leave-One-Out, LOO)**, $|D| = m$, 则令$k = m$ 就得到了留一法.\n\n留一法的优势是不受样本划分影响(有且仅有一种划分方式), 训练集仅比$D$少一个样本, 绝大多数情况下留一法中被评估的模型与期望用$D$训练的模型相似. 因此认为留一法评估结果较为准确. 缺点是当$m$较大时, 计算开销过大以致无法接受.\n\n#### $ 2.2.3 自助法(Bootstapping)\n\n留出法和交叉验证法都保留了一部分样本用于测试, 因此实际评估的模型所使用的训练集比$D$小, 必然会引入一些因训练样本规模不同而导致的估计偏差. 留一法的计算复杂度又太高了. 自助法提供了一个较好的解决方案.\n\n自助法直接以 **自助采样法(Bootstrap Sampling)** 为基础. 给定包含$m$个样本的数据集$D$, 对其进行采样产生数据集$D'$. 采样过程每次随即从$D$中挑选一个样本, 将拷贝放入$M'$ **(意味着下次采样该样本仍有可能被采样到)**. 重复该过程$m$次, 得到了包含$m$个样本的数据集$D'$.\n\n  > **Tips:** 此处\"自助\"为意译, 称**可重复采样/有放回采样**更符合其原理.\n\n不难看出, 可能存在部分样本被多次采样到, 部分样本未被采样到. 我们关注某个样本在$m$次中未被采样的概率,有\n\n$$\\begin{equation}\n\\lim_{m \\rightarrow \\infty}(1 - \\frac{1}{m})^m  = \\frac{1}{e} \\approx 0.368 \\tag{2.1}\n\\end{equation}$$\n\n通过自主采样, 初始数据集$D$中约有$36.8\\%$的样本未出现在采样数据集$D'$中, 将$D'$作为训练集, $D \\backslash D'$作为测试集. 这样的测试结果称为**包外估计(Out-Of-Bagestimate)**.\n\n自助法在数据集较小, 难以有效划分训练和测试集的时候具有优势. 但自助法产生的数据集改变了初始数据集的分布, 会引入估计误差. 初始数据集较大时更常用留出法和交叉验证法.\n\n#### $ 2.2.4 调参与最终模型\n\n**参数(Parameter)**和**调参(Parameter Tuning)**释义见名称.\n\n> **Tips:** 机器学习常涉及两类参数: 算法参数和模型参数.\n\n- **验证集(Validation Set):** 模型评估与选择中用于评估测试的数据集常称为验证集.\n\n  > **Additonal:** 关于训练集, 测试集和验证集的区别, 笔者在此参考[**[知乎|训练集、验证集、测试集]**](https://zhuanlan.zhihu.com/p/98532085)\n\n### $ 2.3 性能度量\n\n- **性能度量(Performance Measure):** 衡量模型泛化能力的评价标准. 显然该标准取决于任务需求.\n\n以预测任务为例, 给定样例集$D = \\{(\\boldsymbol{x_1}, y_1), (\\boldsymbol{x_2}, y_2), ..., (\\boldsymbol{x_m}, y_m)\\}$, 其中$y_i$是$\\boldsymbol{x_i}$的真实标记, 评估学习器$f$的性能, 需要比较预测结果$f(x)$与真实标记$y$.\n\n回归任务常用性能度量**均方误差(Mean Squared Error)**\n\n$$\\begin{equation}\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}(f(\\boldsymbol{x_i}) - y_i)^2 \\tag{2.2}\n\\end{equation}$$\n\n更一般地, 对于数据分布$\\mathcal{D}$和概率密度函数$p(\\cdot)$, 均方误差描述为\n\n$$\\begin{equation}\nE(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}(f(\\boldsymbol{x}) - y)^2 p(\\boldsymbol{x}) d\\boldsymbol{x} \\tag{2.3}\n\\end{equation}$$\n\n#### $ 2.3.1 错误率与精度\n\n错误率和精度是分类任务中最常用的两种性能度量.\n\n对于样例集$\\mathcal{D}$, 错误率和精度定义为\n\n$$\\begin{equation}\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) \\neq y_i) \\tag{2.4}\n\\end{equation}$$\n\n$$\\begin{equation}\nacc(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) = y_i) = 1 - E(f;D) \\tag{2.5}\n\\end{equation}$$\n\n对于数据分布$\\mathcal{D}$和概率密度函数$p(\\cdot)$, 错误率和精度定义为\n\n$$\\begin{equation}\nE(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) \\neq y) p(\\boldsymbol{x}) d\\boldsymbol{x} \\tag{2.6}\n\\end{equation}$$\n\n$$\\begin{equation}\nacc(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) = y) p(\\boldsymbol{x}) d\\boldsymbol{x} = 1 - E(f;\\mathcal{D}) \\tag{2.7}\n\\end{equation}$$\n\n#### $ 2.3.2 查准率(Precision), 查全率(Recall), F1\n\n有时我们更关心模型的正确率, 比如说\"挑选出来的瓜有多少是好瓜\",\"有多少好瓜被挑选出来了\", 查准率和查全率更适合用来度量.\n\n对于二分类问题, 我们有**混淆矩阵(Confusion Matrix)**\n\n![tab2-1](BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png)\n\n定义查准率$P$, 查全率$R$\n\n$$\\begin{equation}\nP = \\frac{TP}{TP + FP}\\tag{2.8}\n\\end{equation}$$\n\n$$\\begin{equation}\nP = \\frac{TP}{TP + FN}\\tag{2.9}\n\\end{equation}$$\n\n> **Tips:** 自然语言解释就是, 查准率是在预测正确中实际正确的比率, 查全率是在实际正确中预测正确的比率.\n\n查准率和查全率是一对矛盾的度量, 二者负相关. 是**sound**和**complete**的关系\n\n![spic2-1](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png)\n\n> **Tips:** 该图片截选自NJU软件分析课件, ~~ly和tt老师应该不会在意吧(雾)~~\n>\n> 课程地址链接[**[Static Program Analysis]**](https://tai-e.pascal-lab.net/lectures.html)\n\n查准率和查全率的关系可以用**P-R图**表示\n\n![pic2-3](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png)\n\n- **平衡点(Break-Even Point, BEP):** $P=R$时的取值, 可基于BEP评估两个学习器的优劣, 如图2-3, 可认为$A>B>C$\n\n比BEP更常用的是$F1$度量定义为\n\n$$\\begin{equation}\nF1 = \\frac{2 \\times P \\times R}{P + R} = \\frac{2 \\times TP}{样例总数 + TP - TN}\\tag{2.10}\n\\end{equation}$$\n\n$F_{\\beta}$是$F_1$的一般形式, 定义为\n\n$$\\begin{equation}\nF_{\\beta} = \\frac{(1 + \\beta^2) \\times P \\times R}{(\\beta^2 \\times P) + R}\\tag{2.11}\n\\end{equation}$$\n\n其中$\\beta > 0$度量了查全率对查准率的相对重要性, $\\beta = 1$时退化为$F_1$, $\\beta > 1$时查全率影响更大, $\\beta < 1$时查准率影响更大.\n\n> **Tips:**\n>\n> $F_1$基于调和平均定义, $\\frac{1}{F_1} = \\frac{1}{2} \\cdot (\\frac{1}{P} + \\frac{1}{R})$.\n>\n> $F_\\beta$基于加权调和平均定义, $\\frac{1}{F_\\beta} = \\frac{1}{1 + \\beta^2} \\cdot (\\frac{1}{P} + \\frac{\\beta^2}{R})$\n\n若在n个二分类混淆矩阵上考察准确率和查全率, 我们有**macro**和**micro**两种选择.\n\n对于**宏(macro)**, 在各个混淆矩阵上分别计算$P$和$R$, 再取平均.得到**宏查准率(macro-P)**, **宏查全率(macro-R)**, **宏F1(macro-F1)**\n\n$$\\begin{equation}\nmacro\\text{-}P = \\frac{1}{n} \\sum_{i=1}^{n} P_i\\tag{2.12}\n\\end{equation}$$\n\n$$\\begin{equation}\nmacro\\text{-}R = \\frac{1}{n} \\sum_{i=1}^{n} R_i\\tag{2.13}\n\\end{equation}$$\n\n$$\\begin{equation}\nmacro\\text{-}F1 = \\frac{2 \\times macro\\text{-}P \\times macro\\text{-}R}{macro\\text{-}P + macro\\text{-}R}\\tag{2.14}\n\\end{equation}$$\n\n对于**微(micro)**, 先平均混淆矩阵得到$\\overline{TP}, \\overline{FP}, \\overline{TN}, \\overline{FN} $, 再计算出**微查准率(micro-P)**, **微查全率(micro-R)**, **微F1(micro-F1)**\n\n$$\\begin{equation}\nmicro\\text{-}P = \\frac{\\overline{TP}}{\\overline{TP}+\\overline{FP}}\\tag{2.15}\n\\end{equation}$$\n\n$$\\begin{equation}\nmicro\\text{-}R = \\frac{\\overline{TP}}{\\overline{TP}+\\overline{FN}}\n\\tag{2.16}\n\\end{equation}$$\n\n$$\\begin{equation}\nmicro\\text{-}F1 = \\frac{2 \\times micro\\text{-}P \\times micro\\text{-}R}{micro\\text{-}P + micro\\text{-}R}\\tag{2.17}\n\\end{equation}$$\n\n#### $ 2.3.3 ROC与AUC\n\n现重新考虑查准率和查全率, 首先我们来看看学习器如何给正/反的分类.\n\n很多学习器为测试样本产生一个实值或概率预测, 将预测值与**分类阈值(Threshold)**比较, 大于阈值则为正类, 否则为反类. 根据该实值或概率预测进行排序, 概率高的在前, 概率低的在后, 则这个分类阈值就是**截断点(Cut Point)**, 前一部分为正例, 后一部分为负例.\n\n不难得到以下结论: 截断点越靠前, 查准率增高而查全率降低; 截断点越靠后, 查准率降低而查全率增高. 同时, 排序质量越好的学习器\"在一般情况下\"泛化性能越好, ROC基于此度量模型的泛化能力.\n\n**受试者工作特征(Receiver Operating Characteristic, ROC)**, 根据学习器的预测结果对样例进行排序, 顺序逐个把样本作为正例进行预测(选择不同的截断点),计算 **真正例率(True Positive Rate, TPR)**, **假正例率(False Positive Rate, FPR)** 作为纵横轴.\n\n$$\\begin{equation}\nTPR = \\frac{TP}{TP + FN}\n\\tag{2.18}\n\\end{equation}$$\n\n$$\\begin{equation}\nFPR = \\frac{FP}{TN + FP}\n\\tag{2.19}\n\\end{equation}$$\n\n![pic2-4](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png)\n\n对角线对应随即猜测模型, 点(0, 1)对应所有正例在负例前的理想模型.\n\n- **AUC(Area Under ROC Curve):** ROC曲线下面积. 为依据两个模型绘制的ROC曲线比较两个模型的优劣而引入.\n\n对于离散样本, 计算AUC:\n\n$$\\begin{equation}\nAUC = \\frac{1}{2} \\sum^{m - 1}_{i=1}(x_{i+1} - x_i)\\cdot(y_i + y_{i + 1} )\n\\tag{2.19}\n\\end{equation}$$\n\n形式化上AUC度量排序质量, 记有$m^+$个正例, $m^-$个反例, 令$D^+$为正例集合, $D^-$为负例集合, 定义排序**损失(loss):**\n\n$$\\begin{equation}\n\\mathscr{l}_{rank} = \\frac{1}{m^+ m^-}\\sum_{x^+ \\in D^+} \\sum_{m^- \\in D^-}\\left(\\mathbb{I}(f(x^+)<f(x^-)) + \\frac{1}{2} \\mathbb{I}(f(x^+)= f(x^-))\\right)\n\\tag{2.21}\n\\end{equation}$$\n\n如何理解这个式子? 考虑每一对正反例, 若正例小于反例记一个\"罚分\", 相等则记半个. 不难看出, 对于每个正例/负例, 可能造成的\"罚分\"与其\"位置\", 越\"错误\"的位置会引起越多的\"罚分\", 这与AUC计算过程及其相似. 实际上, $\\mathscr{l}_{rank}$对应ROC曲线上方的面积, 有\n\n$$\\begin{equation}\nAUC = 1 - \\mathscr{l}_{rank}\n\\tag{2.22}\n\\end{equation}$$\n\n#### $ 2.3.4 代价敏感错误率与代价曲线\n\n为权衡不同类型错误所造成的不同损失, 我们为错误赋予**非均等代价(UnEqual Cost)**.\n\n以二分类为例, **代价矩阵(Cost Matrix)**如下:\n\n![tab2-2](BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png)\n\n若将0类记为正例, 1类记为负例, 定义$D^+, D^-$, **代价敏感(Cost-Sensitive)** 错误率为\n\n$$\\begin{equation}\nE(f;D;cost) = \\frac{1}{m} \\left(\\sum_{\\boldsymbol{x}_i \\in D^+} \\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i) \\times cost_{01} + \\sum_{\\boldsymbol{x}_i \\in D^-} \\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i) \\times cost_{10}\\right)\n\\tag{2.23}\n\\end{equation}$$\n\n非均等情况下, **代价曲线(Cost Curve)**可以解决ROC曲线不能反映出学习器的期望**总体代价(Total Cost)**问题.\n\n其横轴是取值为$[0,1]的$正例概率代价, 其中$p$为样例是正例的概率\n\n$$\\begin{equation}\nP(+)cost=\\frac{p \\times cost_{01}}{p \\times cost_{01} + (1 - p) \\times cost_{10}}\n\\tag{2.24}\n\\end{equation}$$\n\n纵轴是取值为$[0,1]$的归一化代价,FPR为假正例率, FNR为假反例率\n\n$$\\begin{equation}\ncost_{norm} = \\frac{FNR \\times p \\times cost_{01} + FPR \\times (1 - p) \\times cost_{10}}{p \\times cost_{01} + (1 - p) \\times cost_{10}}\n\\tag{2.25}\n\\end{equation}$$\n\n绘制代价曲线时, ROC曲线上每个点对应代价平面上的一条线段, 设ROC点坐标为$(FPR, TPR)$, 然后在代价平面上绘制一条从$(0, FPR)$到$(1, FNR)$的线段, 线段下面积代表了该条件下的期望总体代价.如此为每个点绘制线段, 取线段下界, 围成面积即为在所有条件下学习器的总体期望代价.\n\n![pic2-5](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png)\n\n> **Addtional:** 如何理解代价曲线?\n>\n> 笔者在此给出一篇参考[**[知乎|代价曲线的理解]**](https://www.zhihu.com/question/63492375).这篇参考中对大部分问题给到了解释.\n>\n> 在此额外补充一点困惑笔者许久的问题, 每一条线段代表什么?\n>\n> 每一条线段代表当前**阈值**条件下, 对不同样本集的期望代价. 具体来说, 是以FPR和FNR为预测值对不同样本集的预测.\n\n### $ 2.4 比较检验\n\n**统计假设检验(Hypothesis Test)** 为比较学习器性能提供了重要依据. 本节默认以错误率为性能度量, 用$\\epsilon$表示.\n\n#### $ 2.4.1 假设检验\n\n现实中我们无法知道学习器的泛化错误率 $\\epsilon$, 只能获知其测试错误率 $\\hat{\\epsilon}$. 常用测试错误率估推出泛化错误率.\n\n对于 $m$ 个测试样本, 如果测试错误率为 $\\hat{\\epsilon}$, 则被误分类的样本数量 $m'=\\hat{\\epsilon} \\times m$, 假定测试样本从样本总体分布中独立采样获得, 由**二项(Binomial)分布**, 泛化错误率为 $\\hat{\\epsilon}$ 的学习器恰有 $m'$ 个样本被误分类的概率是 $\\binom{m}{m'}\\epsilon^{m'}(1-\\epsilon)^{m-m'}$ . 同时, 这也表示泛化错误率为 $\\epsilon$ 的学习器在$m$个样本上测试得到测试错误率为 $\\hat{\\epsilon}$ 的概率:\n\n$$\\begin{equation}\nP(\\hat{\\epsilon};\\epsilon)=\\binom{m}{\\hat{\\epsilon} \\times m} \\epsilon^{\\hat{\\epsilon} \\times m} (1 - \\epsilon)^{m - \\hat{\\epsilon} \\times m}\n\\tag{2.26}\n\\end{equation}$$\n\n由二项分布性质, 或者计算 $P(\\hat{\\epsilon};\\epsilon)$ 对 $\\epsilon$ 的偏导, 可以知道 $P(\\hat{\\epsilon};\\epsilon)$ 在 $\\epsilon = \\hat{\\epsilon}$ 时最大, $|\\epsilon - \\hat{\\epsilon}|$ 增大时 $P(\\hat{\\epsilon};\\epsilon)$ 减小.\n\n若取 $m=10, \\epsilon = 0.3$, 示意图如2.6所示.\n\n![pic2-6](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png)\n\n> **Tips:** ~~死去的《概率论与数理统计》突然复活起来攻击我~~, 推荐复习笔记[**[知乎|概率论与数理统计复习整理]**](https://zhuanlan.zhihu.com/p/243215469).\n\n由**二项检验(Binomial Test)**, 考虑假设$\\epsilon \\leq \\epsilon_0$, 在 $1 - \\alpha$ 的概率内能观测到的最大错误率为\n\n$$\\begin{equation}\n\\bar{\\epsilon} = \\min \\epsilon \\ \\ \\text{s.t.} \\ \\ \\sum_{i = \\epsilon \\times m + 1}^{m} \\binom{m}{i}\\epsilon_0^i (1 - \\epsilon_0)^{m - i} < \\alpha\n\\tag{2.27}\n\\end{equation}$$\n\n其中 $1-\\alpha$ 为**置信度(Confidence)**, 直观上对应图2.6的非阴影部分; \"s.t.\"是\"subject to\", 使左边式子在右边式子条件满足时成立.\n\n若测试错误率 $\\hat{\\epsilon}$ 大于临界值 $\\bar{\\epsilon}$, 由二项检验, 我们可以认为在 $\\alpha$ 的显著度下, 假设 $\\epsilon \\leq \\hat{\\epsilon}$ 不能被拒绝, 即能以 $1-\\alpha$ 的置信度认为, 学习器的泛化错误率不高于 $\\epsilon_0$; 否则可以拒绝假设, 在 $\\alpha$ 的显著度下可认为学习器的泛化错误率大于 $\\epsilon_0$.\n\n在通过多次测试中中我们会获得多个测试错误率, 此时可使用**t检验(t-test)**.\n\n设$k$个错误率 $\\hat{\\epsilon_1}, \\hat{\\epsilon_2}, ..., \\hat{\\epsilon_k}$, 则平均错误率 $\\mu$, 方差 $\\sigma^2$ 为\n\n$$\\begin{equation}\n\\mu = \\frac{1}{k} \\sum_{i=1}^k \\hat{\\epsilon_i}\n\\tag{2.28}\n\\end{equation}$$\n\n$$\\begin{equation}\n\\sigma^2=\\frac{1}{k-1} \\sum^{k}_{i=1}(\\hat{\\epsilon_i} - \\mu)^2\n\\tag{2.29}\n\\end{equation}$$\n\n$k$ 个测试错误率可看作是泛化错误率 $\\epsilon_0$ 的独立采样, 则变量\n\n$$\\begin{equation}\n\\tau_t=\\frac{\\sqrt{k} (\\mu - \\epsilon_0)}{\\sigma}\n\\tag{2.30}\n\\end{equation}$$\n\n服从自由度为 $k-1$ 的 $t$ 分布.\n\n> **Addtional:** **基础知识补充**\n>\n> $\\chi^2$ 分布: $X_1, X_2, ..., X_n$ 为独立同分布随机变量, 服从 $N(0, 1)$, 则 $\\chi^2_n = \\sum_{i=1}^n X^2_i$ 为服从自由度为 $n$ 的 $\\chi^2$ 分布\n>\n> $t$ 分布: $X \\sim N(0,1), Y \\sim \\chi^2(n)$, $X,Y$ 独立, 称 $T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}$ 为服从自由度为 $n$ 的 $t$ 分布.\n\n> **Tips:** **推导补充**\n>\n>原书中没有关于这个$\\tau_t$服从$t$分布的推导, 笔者在此给出补充.\n>\n>假设$X_1,X_2,...X_n$是来自正态总体$N(\\mu,\\sigma^2)$的样本. 我们有以下重要统计量:\n>\n>$$\n>\\begin{align}\n>\\nonumber\\text{样本均值}& \\ \\bar{X}=\\frac{1}{n}\\sum_{i=1}^n >X_i \\\\\n>\\nonumber\\text{样本方差}& \\ S^2=\\frac{1}{n-1}\\sum_{i-1}^{n}(X_i-\\bar{X})^2\n>\\end{align}\n>$$\n>\n> 我们有几个重要结论:\n>\n> ![spic2-3](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png)\n>\n> 故而有推论:\n>\n> ![spic2-4](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png)\n\n对假设$\\mu=\\epsilon_0$和显著度$\\alpha$, 可以算出临界值——在$1-\\alpha$内能观测到的最大错误率. 考虑**双边假设(Two-Tailed)**, 若$\\tau_t$位于临界区$[t_{-\\alpha/2},t_{\\alpha/2}]$内(如图2.7所示), 则不能拒绝假设$\\mu=\\epsilon_0$. 我们可以认为泛化错误率为$\\epsilon_0$.\n\n![pic2-7](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png)\n\n#### $ 2.4.2 多学习器比较\n\n笔者对这部分不做过多记录, 翻阅原书该部分即可.\n\n对于两个学习器,我们有\n\n- 交叉验证t检验(基于成对t 检验)\n- McNember检验(基于列联表，卡方检验)\n\n对于多个学习器,我们有\n\n- Friedman检验(基于序值，F检验; 判断”是否都相同”)\n- Nemenyi后续检验(基于序值，进一步判断两两差别)\n\n### 2.5 偏差与方差\n\n- **偏差-方差分解(Bias-variance Decomposition)**\n\n对测试样本$\\boldsymbol{x}$, 令$y_D$为$\\boldsymbol{x}$在数据集的集中标记, $y$为$\\boldsymbol{x}$的真实标记, $f(\\boldsymbol{x};D)$为训练集$D$上的学得模型$f$在$\\boldsymbol{x}$上的预测输出.\n\n以回归算法为例, 我们有如下定义(符号定义见[**[Lapluma|读书笔记-机器学习 Ch0-Ch1]**](http://localhost:4000/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/#chapter-0-%E4%B8%BB%E8%A6%81%E7%AC%A6%E5%8F%B7%E8%A1%A8)):\n\n学习算法的期望预测.\n\n$$\\begin{equation}\n\\bar{f}(\\boldsymbol{x})=\\mathbb{E}_D[f(\\boldsymbol{x};D)]\n\\tag{2.37}\n\\end{equation}$$\n\n使用样本数相同的不同训练集产生的方差, 度量了同样大小的训练集变动导致的学习性能变化, 刻画了数据扰动造成的影响.\n\n$$\\begin{equation}\n\\mathcal{var}(\\boldsymbol{x})=\\mathbb{E}_D[(f(\\boldsymbol{x};D)-\\bar{f}(x))^2]\n\\tag{2.38}\n\\end{equation}$$\n\n噪声, 在当前学习任务上任何学习算法所能达到的期望泛化误差下界, 刻画了学习问题本身的难度.\n\n$$\\begin{equation}\n\\varepsilon^2=\\mathbb{E}_D[(y_D-y)^2]\n\\tag{2.39}\n\\end{equation}$$\n\n期望输出与真实标记的差别称为偏差, 度量了学习算法的期望预测与真是结果的偏离程度, 刻画了学习算法本身的拟合能力.\n\n$$\\begin{equation}\n\\mathcal{bias}^2(\\boldsymbol{x})=(\\bar{f}(\\boldsymbol{x})-y)^2\n\\tag{2.40}\n\\end{equation}$$\n\n便于讨论,我们假定噪声期望为0, 即$\\mathbb{E}_D[y_D-y]=0$, 对期望泛化误差进行分解(推导略, 见原书), 有\n\n$$\\begin{equation}\nE(f;D)=bias^2(\\boldsymbol{x})+var(\\boldsymbol{x})+\\varepsilon ^2\n\\tag{2.42}\n\\end{equation}$$\n\n即泛化误差可以分解为偏差, 方差和噪声之和.\n\n一般来说, 偏差和方差存在冲突, 称为**偏差-方差窘境(Bias-Variance Dilemma)**,见图2-9.\n\n![pic2-9](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png)\n\n训练不足时, 学习器拟合能力不足, 训练数据的扰动不足以使学习器产生显著变化, 此时偏差主导了泛化错误率;训练程度加深, 学习器拟合能力增强, 训练数据发生的扰动被学习器学习到, 方差逐渐主导了泛化错误率;训练充足后, 学习器拟合能力非常强. 训练数据发生轻微扰动都会导致学习器发生显著变化, 此时训练数据自身,非全局的性质被学习器学习, 发生过拟合.\n","source":"_posts/BookNote-MachineLearning-by-ZhihuaZhou-2.md","raw":"---\ntitle: 读书笔记-机器学习 Ch2\ndate: 2024-09-24 23:38:02\nhidden: false\ntags:\n- 读书笔记\n- 机器学习\ncategories:\n- 读书笔记-机器学习\n---\n\n**有多个算法和参数生成的模型, 哪个才是好的模型?**\n\n<!-- more -->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [Chapter 2: 模型评估与选择](#chapter-2-模型评估与选择)\n  - [$ 2.1 经验误差与过拟合](#-21-经验误差与过拟合)\n  - [$ 2.2 评估方法](#-22-评估方法)\n    - [$ 2.2.1 留出法(Hold-Out)](#-221-留出法hold-out)\n    - [$ 2.2.2 交叉验证法(Cross Validation)](#-222-交叉验证法cross-validation)\n    - [$ 2.2.3 自助法(Bootstapping)](#-223-自助法bootstapping)\n    - [$ 2.2.4 调参与最终模型](#-224-调参与最终模型)\n  - [$ 2.3 性能度量](#-23-性能度量)\n    - [$ 2.3.1 错误率与精度](#-231-错误率与精度)\n    - [$ 2.3.2 查准率(Precision), 查全率(Recall), F1](#-232-查准率precision-查全率recall-f1)\n    - [$ 2.3.3 ROC与AUC](#-233-roc与auc)\n    - [$ 2.3.4 代价敏感错误率与代价曲线](#-234-代价敏感错误率与代价曲线)\n  - [$ 2.4 比较检验](#-24-比较检验)\n    - [$ 2.4.1 假设检验](#-241-假设检验)\n    - [$ 2.4.2 多学习器比较](#-242-多学习器比较)\n  - [2.5 偏差与方差](#25-偏差与方差)\n\n---\n\n## Chapter 2: 模型评估与选择\n\n### $ 2.1 经验误差与过拟合\n\n- **错误率(Error Rate):** 分类错误的样本数占样本总数的比例, 记样本数为$m$, $a$个错误分类的样本, 错误率 $E=\\frac{a}{m}$ .\n\n- **精度(Accuracy):** $(1 - \\frac{a}{m}) \\times 100\\%$ 称为精度, 即 \"精度 = 1 - 错误率\".\n\n- **误差(Error):** 更一般地, 我们把**学习器的实际预测输出**与**样本的真实输出**之间的差异称为误差, 学习器在训练集上的误差称为 **训练误差(Training Error)/经验误差(Empirical Error)**, 在新样本上的误差称为**泛化误差(Generalization Error)**.\n\n    > **Tips:** 这里的误差均指**误差期望**.\n\n尽管我们希望得到一个泛化误差小的学习器, 使得其在新样本上表现很好, 但我们并不能预测新样本, 因此我们只能尝试降低经验误差. 但经验误差很小的学习器往往在泛化误差的表现上都很糟糕. 这样的学习器发生了**过拟合**.\n\n- **过拟合(Overfitting):** 学习器可能将训练样本自身的一些特点当作了所有潜在样本都具有的一般性质, 导致泛化能力下降的现象.\n\n- **欠拟合(Underfitting):** 与过拟合相对, 指对训练样本的一般性质尚未学好.\n\n![pic2-1](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png)\n\n> **Tips:** 导致过拟合的原因很多, 最常见的原因是学习能力过强; 欠拟合则相反, 因为学习能力低下. 欠拟合容易克服, 但过拟合很难解决, 且过拟合无法彻底避免.\n\n- **模型选择(Model Selection):** 在实际中, 面对同一个问题, 往往有多种学习算法可以选择, 参数配置也会对模型产生影响.\n\n![spic2-2](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png)\n\n### $ 2.2 评估方法\n\n通常我们可以通过实验测试对学习器的泛化误差进行评估, 使用**测试集(Testing Set)**测试学习器对新样本的判别能力, 以测试集上**测试误差(Testing Error)**作为泛化误差的近似. 但需要注意的是, 测试集应尽可能与训练集互斥.\n\n> 假设我们有且只有一个包含$m$个样例的数据集$D = \\{(x_1,y_1),(x_2,y_2), ..., (x_m,y_m)\\}$, 既要训练, 又要测试, 这样就需要对$D$进行适当处理, 从中产生 **训练集** $S$和 **测试集** $T$.\n\n#### $ 2.2.1 留出法(Hold-Out)\n\n留出法的思路很简单, 直接将数据集$D$划分成两个互斥的集合, 即$D = S \\cup T, S \\cap T = \\emptyset$.\n\n使用留出法时需要注意训练集和测试集的划分需要保持数据分布一致性, 避免因数据划分引入额外偏差对结果产生影响. 同时单次留出法得到的估计往往并不够准确可靠, 一般采用若干次随机划分, 重复进行实验评估取平均值作为留出法评估结果. 关于划分比例, 通常取2/3 ~ 4/5的样本用于训练, 其余用于测试.\n\n#### $ 2.2.2 交叉验证法(Cross Validation)\n\n交叉验证法可以看作是一种具体的留出法, 其方法过程是:\n\n先将数据集$D$划分为$k$个大小相似的互斥子集, $D = D_1 \\cup D_2 \\cup ... \\cup D_k, D_i \\cap D_j = \\emptyset (i \\neq j)$, 子集$D_i$通过保留类别比例的**分层采样(Stratified Sampling)**来尽可能保持数据分布一致性.\n\n接下来每次取$k-1$个子集作为训练集, 余下一个作为测试集, 进行$k$次训练和测试, 最终结果取$k$个结果的均值.\n\n![pic2-2](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png)\n\n显然交叉验证法评估结果的**稳定性(Stability)**和**保真性(Fidelity)**与$k$的取值强相关. 故而交叉验证法又称**k折交叉验证(k-fold Cross Validation)**. 最常见的取值是 $k=10$.\n\n由于$D$的$k$划分不唯一, k折交叉验证通常也要重复多次, 记为$p$, 最终结果取这$p$次k折交叉验证结果的均值.\n\n**留一法(Leave-One-Out, LOO)**, $|D| = m$, 则令$k = m$ 就得到了留一法.\n\n留一法的优势是不受样本划分影响(有且仅有一种划分方式), 训练集仅比$D$少一个样本, 绝大多数情况下留一法中被评估的模型与期望用$D$训练的模型相似. 因此认为留一法评估结果较为准确. 缺点是当$m$较大时, 计算开销过大以致无法接受.\n\n#### $ 2.2.3 自助法(Bootstapping)\n\n留出法和交叉验证法都保留了一部分样本用于测试, 因此实际评估的模型所使用的训练集比$D$小, 必然会引入一些因训练样本规模不同而导致的估计偏差. 留一法的计算复杂度又太高了. 自助法提供了一个较好的解决方案.\n\n自助法直接以 **自助采样法(Bootstrap Sampling)** 为基础. 给定包含$m$个样本的数据集$D$, 对其进行采样产生数据集$D'$. 采样过程每次随即从$D$中挑选一个样本, 将拷贝放入$M'$ **(意味着下次采样该样本仍有可能被采样到)**. 重复该过程$m$次, 得到了包含$m$个样本的数据集$D'$.\n\n  > **Tips:** 此处\"自助\"为意译, 称**可重复采样/有放回采样**更符合其原理.\n\n不难看出, 可能存在部分样本被多次采样到, 部分样本未被采样到. 我们关注某个样本在$m$次中未被采样的概率,有\n\n$$\\begin{equation}\n\\lim_{m \\rightarrow \\infty}(1 - \\frac{1}{m})^m  = \\frac{1}{e} \\approx 0.368 \\tag{2.1}\n\\end{equation}$$\n\n通过自主采样, 初始数据集$D$中约有$36.8\\%$的样本未出现在采样数据集$D'$中, 将$D'$作为训练集, $D \\backslash D'$作为测试集. 这样的测试结果称为**包外估计(Out-Of-Bagestimate)**.\n\n自助法在数据集较小, 难以有效划分训练和测试集的时候具有优势. 但自助法产生的数据集改变了初始数据集的分布, 会引入估计误差. 初始数据集较大时更常用留出法和交叉验证法.\n\n#### $ 2.2.4 调参与最终模型\n\n**参数(Parameter)**和**调参(Parameter Tuning)**释义见名称.\n\n> **Tips:** 机器学习常涉及两类参数: 算法参数和模型参数.\n\n- **验证集(Validation Set):** 模型评估与选择中用于评估测试的数据集常称为验证集.\n\n  > **Additonal:** 关于训练集, 测试集和验证集的区别, 笔者在此参考[**[知乎|训练集、验证集、测试集]**](https://zhuanlan.zhihu.com/p/98532085)\n\n### $ 2.3 性能度量\n\n- **性能度量(Performance Measure):** 衡量模型泛化能力的评价标准. 显然该标准取决于任务需求.\n\n以预测任务为例, 给定样例集$D = \\{(\\boldsymbol{x_1}, y_1), (\\boldsymbol{x_2}, y_2), ..., (\\boldsymbol{x_m}, y_m)\\}$, 其中$y_i$是$\\boldsymbol{x_i}$的真实标记, 评估学习器$f$的性能, 需要比较预测结果$f(x)$与真实标记$y$.\n\n回归任务常用性能度量**均方误差(Mean Squared Error)**\n\n$$\\begin{equation}\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}(f(\\boldsymbol{x_i}) - y_i)^2 \\tag{2.2}\n\\end{equation}$$\n\n更一般地, 对于数据分布$\\mathcal{D}$和概率密度函数$p(\\cdot)$, 均方误差描述为\n\n$$\\begin{equation}\nE(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}(f(\\boldsymbol{x}) - y)^2 p(\\boldsymbol{x}) d\\boldsymbol{x} \\tag{2.3}\n\\end{equation}$$\n\n#### $ 2.3.1 错误率与精度\n\n错误率和精度是分类任务中最常用的两种性能度量.\n\n对于样例集$\\mathcal{D}$, 错误率和精度定义为\n\n$$\\begin{equation}\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) \\neq y_i) \\tag{2.4}\n\\end{equation}$$\n\n$$\\begin{equation}\nacc(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) = y_i) = 1 - E(f;D) \\tag{2.5}\n\\end{equation}$$\n\n对于数据分布$\\mathcal{D}$和概率密度函数$p(\\cdot)$, 错误率和精度定义为\n\n$$\\begin{equation}\nE(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) \\neq y) p(\\boldsymbol{x}) d\\boldsymbol{x} \\tag{2.6}\n\\end{equation}$$\n\n$$\\begin{equation}\nacc(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) = y) p(\\boldsymbol{x}) d\\boldsymbol{x} = 1 - E(f;\\mathcal{D}) \\tag{2.7}\n\\end{equation}$$\n\n#### $ 2.3.2 查准率(Precision), 查全率(Recall), F1\n\n有时我们更关心模型的正确率, 比如说\"挑选出来的瓜有多少是好瓜\",\"有多少好瓜被挑选出来了\", 查准率和查全率更适合用来度量.\n\n对于二分类问题, 我们有**混淆矩阵(Confusion Matrix)**\n\n![tab2-1](BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png)\n\n定义查准率$P$, 查全率$R$\n\n$$\\begin{equation}\nP = \\frac{TP}{TP + FP}\\tag{2.8}\n\\end{equation}$$\n\n$$\\begin{equation}\nP = \\frac{TP}{TP + FN}\\tag{2.9}\n\\end{equation}$$\n\n> **Tips:** 自然语言解释就是, 查准率是在预测正确中实际正确的比率, 查全率是在实际正确中预测正确的比率.\n\n查准率和查全率是一对矛盾的度量, 二者负相关. 是**sound**和**complete**的关系\n\n![spic2-1](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png)\n\n> **Tips:** 该图片截选自NJU软件分析课件, ~~ly和tt老师应该不会在意吧(雾)~~\n>\n> 课程地址链接[**[Static Program Analysis]**](https://tai-e.pascal-lab.net/lectures.html)\n\n查准率和查全率的关系可以用**P-R图**表示\n\n![pic2-3](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png)\n\n- **平衡点(Break-Even Point, BEP):** $P=R$时的取值, 可基于BEP评估两个学习器的优劣, 如图2-3, 可认为$A>B>C$\n\n比BEP更常用的是$F1$度量定义为\n\n$$\\begin{equation}\nF1 = \\frac{2 \\times P \\times R}{P + R} = \\frac{2 \\times TP}{样例总数 + TP - TN}\\tag{2.10}\n\\end{equation}$$\n\n$F_{\\beta}$是$F_1$的一般形式, 定义为\n\n$$\\begin{equation}\nF_{\\beta} = \\frac{(1 + \\beta^2) \\times P \\times R}{(\\beta^2 \\times P) + R}\\tag{2.11}\n\\end{equation}$$\n\n其中$\\beta > 0$度量了查全率对查准率的相对重要性, $\\beta = 1$时退化为$F_1$, $\\beta > 1$时查全率影响更大, $\\beta < 1$时查准率影响更大.\n\n> **Tips:**\n>\n> $F_1$基于调和平均定义, $\\frac{1}{F_1} = \\frac{1}{2} \\cdot (\\frac{1}{P} + \\frac{1}{R})$.\n>\n> $F_\\beta$基于加权调和平均定义, $\\frac{1}{F_\\beta} = \\frac{1}{1 + \\beta^2} \\cdot (\\frac{1}{P} + \\frac{\\beta^2}{R})$\n\n若在n个二分类混淆矩阵上考察准确率和查全率, 我们有**macro**和**micro**两种选择.\n\n对于**宏(macro)**, 在各个混淆矩阵上分别计算$P$和$R$, 再取平均.得到**宏查准率(macro-P)**, **宏查全率(macro-R)**, **宏F1(macro-F1)**\n\n$$\\begin{equation}\nmacro\\text{-}P = \\frac{1}{n} \\sum_{i=1}^{n} P_i\\tag{2.12}\n\\end{equation}$$\n\n$$\\begin{equation}\nmacro\\text{-}R = \\frac{1}{n} \\sum_{i=1}^{n} R_i\\tag{2.13}\n\\end{equation}$$\n\n$$\\begin{equation}\nmacro\\text{-}F1 = \\frac{2 \\times macro\\text{-}P \\times macro\\text{-}R}{macro\\text{-}P + macro\\text{-}R}\\tag{2.14}\n\\end{equation}$$\n\n对于**微(micro)**, 先平均混淆矩阵得到$\\overline{TP}, \\overline{FP}, \\overline{TN}, \\overline{FN} $, 再计算出**微查准率(micro-P)**, **微查全率(micro-R)**, **微F1(micro-F1)**\n\n$$\\begin{equation}\nmicro\\text{-}P = \\frac{\\overline{TP}}{\\overline{TP}+\\overline{FP}}\\tag{2.15}\n\\end{equation}$$\n\n$$\\begin{equation}\nmicro\\text{-}R = \\frac{\\overline{TP}}{\\overline{TP}+\\overline{FN}}\n\\tag{2.16}\n\\end{equation}$$\n\n$$\\begin{equation}\nmicro\\text{-}F1 = \\frac{2 \\times micro\\text{-}P \\times micro\\text{-}R}{micro\\text{-}P + micro\\text{-}R}\\tag{2.17}\n\\end{equation}$$\n\n#### $ 2.3.3 ROC与AUC\n\n现重新考虑查准率和查全率, 首先我们来看看学习器如何给正/反的分类.\n\n很多学习器为测试样本产生一个实值或概率预测, 将预测值与**分类阈值(Threshold)**比较, 大于阈值则为正类, 否则为反类. 根据该实值或概率预测进行排序, 概率高的在前, 概率低的在后, 则这个分类阈值就是**截断点(Cut Point)**, 前一部分为正例, 后一部分为负例.\n\n不难得到以下结论: 截断点越靠前, 查准率增高而查全率降低; 截断点越靠后, 查准率降低而查全率增高. 同时, 排序质量越好的学习器\"在一般情况下\"泛化性能越好, ROC基于此度量模型的泛化能力.\n\n**受试者工作特征(Receiver Operating Characteristic, ROC)**, 根据学习器的预测结果对样例进行排序, 顺序逐个把样本作为正例进行预测(选择不同的截断点),计算 **真正例率(True Positive Rate, TPR)**, **假正例率(False Positive Rate, FPR)** 作为纵横轴.\n\n$$\\begin{equation}\nTPR = \\frac{TP}{TP + FN}\n\\tag{2.18}\n\\end{equation}$$\n\n$$\\begin{equation}\nFPR = \\frac{FP}{TN + FP}\n\\tag{2.19}\n\\end{equation}$$\n\n![pic2-4](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png)\n\n对角线对应随即猜测模型, 点(0, 1)对应所有正例在负例前的理想模型.\n\n- **AUC(Area Under ROC Curve):** ROC曲线下面积. 为依据两个模型绘制的ROC曲线比较两个模型的优劣而引入.\n\n对于离散样本, 计算AUC:\n\n$$\\begin{equation}\nAUC = \\frac{1}{2} \\sum^{m - 1}_{i=1}(x_{i+1} - x_i)\\cdot(y_i + y_{i + 1} )\n\\tag{2.19}\n\\end{equation}$$\n\n形式化上AUC度量排序质量, 记有$m^+$个正例, $m^-$个反例, 令$D^+$为正例集合, $D^-$为负例集合, 定义排序**损失(loss):**\n\n$$\\begin{equation}\n\\mathscr{l}_{rank} = \\frac{1}{m^+ m^-}\\sum_{x^+ \\in D^+} \\sum_{m^- \\in D^-}\\left(\\mathbb{I}(f(x^+)<f(x^-)) + \\frac{1}{2} \\mathbb{I}(f(x^+)= f(x^-))\\right)\n\\tag{2.21}\n\\end{equation}$$\n\n如何理解这个式子? 考虑每一对正反例, 若正例小于反例记一个\"罚分\", 相等则记半个. 不难看出, 对于每个正例/负例, 可能造成的\"罚分\"与其\"位置\", 越\"错误\"的位置会引起越多的\"罚分\", 这与AUC计算过程及其相似. 实际上, $\\mathscr{l}_{rank}$对应ROC曲线上方的面积, 有\n\n$$\\begin{equation}\nAUC = 1 - \\mathscr{l}_{rank}\n\\tag{2.22}\n\\end{equation}$$\n\n#### $ 2.3.4 代价敏感错误率与代价曲线\n\n为权衡不同类型错误所造成的不同损失, 我们为错误赋予**非均等代价(UnEqual Cost)**.\n\n以二分类为例, **代价矩阵(Cost Matrix)**如下:\n\n![tab2-2](BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png)\n\n若将0类记为正例, 1类记为负例, 定义$D^+, D^-$, **代价敏感(Cost-Sensitive)** 错误率为\n\n$$\\begin{equation}\nE(f;D;cost) = \\frac{1}{m} \\left(\\sum_{\\boldsymbol{x}_i \\in D^+} \\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i) \\times cost_{01} + \\sum_{\\boldsymbol{x}_i \\in D^-} \\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i) \\times cost_{10}\\right)\n\\tag{2.23}\n\\end{equation}$$\n\n非均等情况下, **代价曲线(Cost Curve)**可以解决ROC曲线不能反映出学习器的期望**总体代价(Total Cost)**问题.\n\n其横轴是取值为$[0,1]的$正例概率代价, 其中$p$为样例是正例的概率\n\n$$\\begin{equation}\nP(+)cost=\\frac{p \\times cost_{01}}{p \\times cost_{01} + (1 - p) \\times cost_{10}}\n\\tag{2.24}\n\\end{equation}$$\n\n纵轴是取值为$[0,1]$的归一化代价,FPR为假正例率, FNR为假反例率\n\n$$\\begin{equation}\ncost_{norm} = \\frac{FNR \\times p \\times cost_{01} + FPR \\times (1 - p) \\times cost_{10}}{p \\times cost_{01} + (1 - p) \\times cost_{10}}\n\\tag{2.25}\n\\end{equation}$$\n\n绘制代价曲线时, ROC曲线上每个点对应代价平面上的一条线段, 设ROC点坐标为$(FPR, TPR)$, 然后在代价平面上绘制一条从$(0, FPR)$到$(1, FNR)$的线段, 线段下面积代表了该条件下的期望总体代价.如此为每个点绘制线段, 取线段下界, 围成面积即为在所有条件下学习器的总体期望代价.\n\n![pic2-5](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png)\n\n> **Addtional:** 如何理解代价曲线?\n>\n> 笔者在此给出一篇参考[**[知乎|代价曲线的理解]**](https://www.zhihu.com/question/63492375).这篇参考中对大部分问题给到了解释.\n>\n> 在此额外补充一点困惑笔者许久的问题, 每一条线段代表什么?\n>\n> 每一条线段代表当前**阈值**条件下, 对不同样本集的期望代价. 具体来说, 是以FPR和FNR为预测值对不同样本集的预测.\n\n### $ 2.4 比较检验\n\n**统计假设检验(Hypothesis Test)** 为比较学习器性能提供了重要依据. 本节默认以错误率为性能度量, 用$\\epsilon$表示.\n\n#### $ 2.4.1 假设检验\n\n现实中我们无法知道学习器的泛化错误率 $\\epsilon$, 只能获知其测试错误率 $\\hat{\\epsilon}$. 常用测试错误率估推出泛化错误率.\n\n对于 $m$ 个测试样本, 如果测试错误率为 $\\hat{\\epsilon}$, 则被误分类的样本数量 $m'=\\hat{\\epsilon} \\times m$, 假定测试样本从样本总体分布中独立采样获得, 由**二项(Binomial)分布**, 泛化错误率为 $\\hat{\\epsilon}$ 的学习器恰有 $m'$ 个样本被误分类的概率是 $\\binom{m}{m'}\\epsilon^{m'}(1-\\epsilon)^{m-m'}$ . 同时, 这也表示泛化错误率为 $\\epsilon$ 的学习器在$m$个样本上测试得到测试错误率为 $\\hat{\\epsilon}$ 的概率:\n\n$$\\begin{equation}\nP(\\hat{\\epsilon};\\epsilon)=\\binom{m}{\\hat{\\epsilon} \\times m} \\epsilon^{\\hat{\\epsilon} \\times m} (1 - \\epsilon)^{m - \\hat{\\epsilon} \\times m}\n\\tag{2.26}\n\\end{equation}$$\n\n由二项分布性质, 或者计算 $P(\\hat{\\epsilon};\\epsilon)$ 对 $\\epsilon$ 的偏导, 可以知道 $P(\\hat{\\epsilon};\\epsilon)$ 在 $\\epsilon = \\hat{\\epsilon}$ 时最大, $|\\epsilon - \\hat{\\epsilon}|$ 增大时 $P(\\hat{\\epsilon};\\epsilon)$ 减小.\n\n若取 $m=10, \\epsilon = 0.3$, 示意图如2.6所示.\n\n![pic2-6](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png)\n\n> **Tips:** ~~死去的《概率论与数理统计》突然复活起来攻击我~~, 推荐复习笔记[**[知乎|概率论与数理统计复习整理]**](https://zhuanlan.zhihu.com/p/243215469).\n\n由**二项检验(Binomial Test)**, 考虑假设$\\epsilon \\leq \\epsilon_0$, 在 $1 - \\alpha$ 的概率内能观测到的最大错误率为\n\n$$\\begin{equation}\n\\bar{\\epsilon} = \\min \\epsilon \\ \\ \\text{s.t.} \\ \\ \\sum_{i = \\epsilon \\times m + 1}^{m} \\binom{m}{i}\\epsilon_0^i (1 - \\epsilon_0)^{m - i} < \\alpha\n\\tag{2.27}\n\\end{equation}$$\n\n其中 $1-\\alpha$ 为**置信度(Confidence)**, 直观上对应图2.6的非阴影部分; \"s.t.\"是\"subject to\", 使左边式子在右边式子条件满足时成立.\n\n若测试错误率 $\\hat{\\epsilon}$ 大于临界值 $\\bar{\\epsilon}$, 由二项检验, 我们可以认为在 $\\alpha$ 的显著度下, 假设 $\\epsilon \\leq \\hat{\\epsilon}$ 不能被拒绝, 即能以 $1-\\alpha$ 的置信度认为, 学习器的泛化错误率不高于 $\\epsilon_0$; 否则可以拒绝假设, 在 $\\alpha$ 的显著度下可认为学习器的泛化错误率大于 $\\epsilon_0$.\n\n在通过多次测试中中我们会获得多个测试错误率, 此时可使用**t检验(t-test)**.\n\n设$k$个错误率 $\\hat{\\epsilon_1}, \\hat{\\epsilon_2}, ..., \\hat{\\epsilon_k}$, 则平均错误率 $\\mu$, 方差 $\\sigma^2$ 为\n\n$$\\begin{equation}\n\\mu = \\frac{1}{k} \\sum_{i=1}^k \\hat{\\epsilon_i}\n\\tag{2.28}\n\\end{equation}$$\n\n$$\\begin{equation}\n\\sigma^2=\\frac{1}{k-1} \\sum^{k}_{i=1}(\\hat{\\epsilon_i} - \\mu)^2\n\\tag{2.29}\n\\end{equation}$$\n\n$k$ 个测试错误率可看作是泛化错误率 $\\epsilon_0$ 的独立采样, 则变量\n\n$$\\begin{equation}\n\\tau_t=\\frac{\\sqrt{k} (\\mu - \\epsilon_0)}{\\sigma}\n\\tag{2.30}\n\\end{equation}$$\n\n服从自由度为 $k-1$ 的 $t$ 分布.\n\n> **Addtional:** **基础知识补充**\n>\n> $\\chi^2$ 分布: $X_1, X_2, ..., X_n$ 为独立同分布随机变量, 服从 $N(0, 1)$, 则 $\\chi^2_n = \\sum_{i=1}^n X^2_i$ 为服从自由度为 $n$ 的 $\\chi^2$ 分布\n>\n> $t$ 分布: $X \\sim N(0,1), Y \\sim \\chi^2(n)$, $X,Y$ 独立, 称 $T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}$ 为服从自由度为 $n$ 的 $t$ 分布.\n\n> **Tips:** **推导补充**\n>\n>原书中没有关于这个$\\tau_t$服从$t$分布的推导, 笔者在此给出补充.\n>\n>假设$X_1,X_2,...X_n$是来自正态总体$N(\\mu,\\sigma^2)$的样本. 我们有以下重要统计量:\n>\n>$$\n>\\begin{align}\n>\\nonumber\\text{样本均值}& \\ \\bar{X}=\\frac{1}{n}\\sum_{i=1}^n >X_i \\\\\n>\\nonumber\\text{样本方差}& \\ S^2=\\frac{1}{n-1}\\sum_{i-1}^{n}(X_i-\\bar{X})^2\n>\\end{align}\n>$$\n>\n> 我们有几个重要结论:\n>\n> ![spic2-3](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png)\n>\n> 故而有推论:\n>\n> ![spic2-4](BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png)\n\n对假设$\\mu=\\epsilon_0$和显著度$\\alpha$, 可以算出临界值——在$1-\\alpha$内能观测到的最大错误率. 考虑**双边假设(Two-Tailed)**, 若$\\tau_t$位于临界区$[t_{-\\alpha/2},t_{\\alpha/2}]$内(如图2.7所示), 则不能拒绝假设$\\mu=\\epsilon_0$. 我们可以认为泛化错误率为$\\epsilon_0$.\n\n![pic2-7](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png)\n\n#### $ 2.4.2 多学习器比较\n\n笔者对这部分不做过多记录, 翻阅原书该部分即可.\n\n对于两个学习器,我们有\n\n- 交叉验证t检验(基于成对t 检验)\n- McNember检验(基于列联表，卡方检验)\n\n对于多个学习器,我们有\n\n- Friedman检验(基于序值，F检验; 判断”是否都相同”)\n- Nemenyi后续检验(基于序值，进一步判断两两差别)\n\n### 2.5 偏差与方差\n\n- **偏差-方差分解(Bias-variance Decomposition)**\n\n对测试样本$\\boldsymbol{x}$, 令$y_D$为$\\boldsymbol{x}$在数据集的集中标记, $y$为$\\boldsymbol{x}$的真实标记, $f(\\boldsymbol{x};D)$为训练集$D$上的学得模型$f$在$\\boldsymbol{x}$上的预测输出.\n\n以回归算法为例, 我们有如下定义(符号定义见[**[Lapluma|读书笔记-机器学习 Ch0-Ch1]**](http://localhost:4000/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/#chapter-0-%E4%B8%BB%E8%A6%81%E7%AC%A6%E5%8F%B7%E8%A1%A8)):\n\n学习算法的期望预测.\n\n$$\\begin{equation}\n\\bar{f}(\\boldsymbol{x})=\\mathbb{E}_D[f(\\boldsymbol{x};D)]\n\\tag{2.37}\n\\end{equation}$$\n\n使用样本数相同的不同训练集产生的方差, 度量了同样大小的训练集变动导致的学习性能变化, 刻画了数据扰动造成的影响.\n\n$$\\begin{equation}\n\\mathcal{var}(\\boldsymbol{x})=\\mathbb{E}_D[(f(\\boldsymbol{x};D)-\\bar{f}(x))^2]\n\\tag{2.38}\n\\end{equation}$$\n\n噪声, 在当前学习任务上任何学习算法所能达到的期望泛化误差下界, 刻画了学习问题本身的难度.\n\n$$\\begin{equation}\n\\varepsilon^2=\\mathbb{E}_D[(y_D-y)^2]\n\\tag{2.39}\n\\end{equation}$$\n\n期望输出与真实标记的差别称为偏差, 度量了学习算法的期望预测与真是结果的偏离程度, 刻画了学习算法本身的拟合能力.\n\n$$\\begin{equation}\n\\mathcal{bias}^2(\\boldsymbol{x})=(\\bar{f}(\\boldsymbol{x})-y)^2\n\\tag{2.40}\n\\end{equation}$$\n\n便于讨论,我们假定噪声期望为0, 即$\\mathbb{E}_D[y_D-y]=0$, 对期望泛化误差进行分解(推导略, 见原书), 有\n\n$$\\begin{equation}\nE(f;D)=bias^2(\\boldsymbol{x})+var(\\boldsymbol{x})+\\varepsilon ^2\n\\tag{2.42}\n\\end{equation}$$\n\n即泛化误差可以分解为偏差, 方差和噪声之和.\n\n一般来说, 偏差和方差存在冲突, 称为**偏差-方差窘境(Bias-Variance Dilemma)**,见图2-9.\n\n![pic2-9](BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png)\n\n训练不足时, 学习器拟合能力不足, 训练数据的扰动不足以使学习器产生显著变化, 此时偏差主导了泛化错误率;训练程度加深, 学习器拟合能力增强, 训练数据发生的扰动被学习器学习到, 方差逐渐主导了泛化错误率;训练充足后, 学习器拟合能力非常强. 训练数据发生轻微扰动都会导致学习器发生显著变化, 此时训练数据自身,非全局的性质被学习器学习, 发生过拟合.\n","slug":"BookNote-MachineLearning-by-ZhihuaZhou-2","published":1,"updated":"2024-10-30T11:53:35.681Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyud000assil90o2ann0","content":"<p><strong>有多个算法和参数生成的模型, 哪个才是好的模型?</strong></p>\r\n<span id=\"more\"></span>\r\n<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#chapter-2-模型评估与选择\">Chapter 2: 模型评估与选择</a>\r\n<ul>\r\n<li><a href=\"#-21-经验误差与过拟合\">$ 2.1 经验误差与过拟合</a></li>\r\n<li><a href=\"#-22-评估方法\">$ 2.2 评估方法</a>\r\n<ul>\r\n<li><a href=\"#-221-留出法hold-out\">$ 2.2.1 留出法(Hold-Out)</a></li>\r\n<li><a href=\"#-222-交叉验证法cross-validation\">$ 2.2.2 交叉验证法(Cross\r\nValidation)</a></li>\r\n<li><a href=\"#-223-自助法bootstapping\">$ 2.2.3\r\n自助法(Bootstapping)</a></li>\r\n<li><a href=\"#-224-调参与最终模型\">$ 2.2.4 调参与最终模型</a></li>\r\n</ul></li>\r\n<li><a href=\"#-23-性能度量\">$ 2.3 性能度量</a>\r\n<ul>\r\n<li><a href=\"#-231-错误率与精度\">$ 2.3.1 错误率与精度</a></li>\r\n<li><a href=\"#-232-查准率precision-查全率recall-f1\">$ 2.3.2\r\n查准率(Precision), 查全率(Recall), F1</a></li>\r\n<li><a href=\"#-233-roc与auc\">$ 2.3.3 ROC与AUC</a></li>\r\n<li><a href=\"#-234-代价敏感错误率与代价曲线\">$ 2.3.4\r\n代价敏感错误率与代价曲线</a></li>\r\n</ul></li>\r\n<li><a href=\"#-24-比较检验\">$ 2.4 比较检验</a>\r\n<ul>\r\n<li><a href=\"#-241-假设检验\">$ 2.4.1 假设检验</a></li>\r\n<li><a href=\"#-242-多学习器比较\">$ 2.4.2 多学习器比较</a></li>\r\n</ul></li>\r\n<li><a href=\"#25-偏差与方差\">2.5 偏差与方差</a></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"chapter-2-模型评估与选择\">Chapter 2: 模型评估与选择</h2>\r\n<h3 id=\"经验误差与过拟合\">$ 2.1 经验误差与过拟合</h3>\r\n<ul>\r\n<li><p><strong>错误率(Error Rate):</strong>\r\n分类错误的样本数占样本总数的比例, 记样本数为<span\r\nclass=\"math inline\">\\(m\\)</span>, <span\r\nclass=\"math inline\">\\(a\\)</span>个错误分类的样本, 错误率 <span\r\nclass=\"math inline\">\\(E=\\frac{a}{m}\\)</span> .</p></li>\r\n<li><p><strong>精度(Accuracy):</strong> <span class=\"math inline\">\\((1 -\r\n\\frac{a}{m}) \\times 100\\%\\)</span> 称为精度, 即 \"精度 = 1 -\r\n错误率\".</p></li>\r\n<li><p><strong>误差(Error):</strong> 更一般地,\r\n我们把<strong>学习器的实际预测输出</strong>与<strong>样本的真实输出</strong>之间的差异称为误差,\r\n学习器在训练集上的误差称为 <strong>训练误差(Training\r\nError)/经验误差(Empirical Error)</strong>,\r\n在新样本上的误差称为<strong>泛化误差(Generalization Error)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 这里的误差均指<strong>误差期望</strong>.</p>\r\n</blockquote></li>\r\n</ul>\r\n<p>尽管我们希望得到一个泛化误差小的学习器, 使得其在新样本上表现很好,\r\n但我们并不能预测新样本, 因此我们只能尝试降低经验误差.\r\n但经验误差很小的学习器往往在泛化误差的表现上都很糟糕.\r\n这样的学习器发生了<strong>过拟合</strong>.</p>\r\n<ul>\r\n<li><p><strong>过拟合(Overfitting):</strong>\r\n学习器可能将训练样本自身的一些特点当作了所有潜在样本都具有的一般性质,\r\n导致泛化能力下降的现象.</p></li>\r\n<li><p><strong>欠拟合(Underfitting):</strong> 与过拟合相对,\r\n指对训练样本的一般性质尚未学好.</p></li>\r\n</ul>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png\" class=\"\" title=\"pic2-1\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 导致过拟合的原因很多,\r\n最常见的原因是学习能力过强; 欠拟合则相反, 因为学习能力低下.\r\n欠拟合容易克服, 但过拟合很难解决, 且过拟合无法彻底避免.</p>\r\n</blockquote>\r\n<ul>\r\n<li><strong>模型选择(Model Selection):</strong> 在实际中,\r\n面对同一个问题, 往往有多种学习算法可以选择,\r\n参数配置也会对模型产生影响.</li>\r\n</ul>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png\" class=\"\" title=\"spic2-2\">\r\n<h3 id=\"评估方法\">$ 2.2 评估方法</h3>\r\n<p>通常我们可以通过实验测试对学习器的泛化误差进行评估,\r\n使用<strong>测试集(Testing Set)</strong>测试学习器对新样本的判别能力,\r\n以测试集上<strong>测试误差(Testing Error)</strong>作为泛化误差的近似.\r\n但需要注意的是, 测试集应尽可能与训练集互斥.</p>\r\n<blockquote>\r\n<p>假设我们有且只有一个包含<span\r\nclass=\"math inline\">\\(m\\)</span>个样例的数据集<span\r\nclass=\"math inline\">\\(D = \\{(x_1,y_1),(x_2,y_2), ...,\r\n(x_m,y_m)\\}\\)</span>, 既要训练, 又要测试, 这样就需要对<span\r\nclass=\"math inline\">\\(D\\)</span>进行适当处理, 从中产生\r\n<strong>训练集</strong> <span class=\"math inline\">\\(S\\)</span>和\r\n<strong>测试集</strong> <span class=\"math inline\">\\(T\\)</span>.</p>\r\n</blockquote>\r\n<h4 id=\"留出法hold-out\">$ 2.2.1 留出法(Hold-Out)</h4>\r\n<p>留出法的思路很简单, 直接将数据集<span\r\nclass=\"math inline\">\\(D\\)</span>划分成两个互斥的集合, 即<span\r\nclass=\"math inline\">\\(D = S \\cup T, S \\cap T = \\emptyset\\)</span>.</p>\r\n<p>使用留出法时需要注意训练集和测试集的划分需要保持数据分布一致性,\r\n避免因数据划分引入额外偏差对结果产生影响.\r\n同时单次留出法得到的估计往往并不够准确可靠, 一般采用若干次随机划分,\r\n重复进行实验评估取平均值作为留出法评估结果. 关于划分比例, 通常取2/3 ~\r\n4/5的样本用于训练, 其余用于测试.</p>\r\n<h4 id=\"交叉验证法cross-validation\">$ 2.2.2 交叉验证法(Cross\r\nValidation)</h4>\r\n<p>交叉验证法可以看作是一种具体的留出法, 其方法过程是:</p>\r\n<p>先将数据集<span class=\"math inline\">\\(D\\)</span>划分为<span\r\nclass=\"math inline\">\\(k\\)</span>个大小相似的互斥子集, <span\r\nclass=\"math inline\">\\(D = D_1 \\cup D_2 \\cup ... \\cup D_k, D_i \\cap D_j =\r\n\\emptyset (i \\neq j)\\)</span>, 子集<span\r\nclass=\"math inline\">\\(D_i\\)</span>通过保留类别比例的<strong>分层采样(Stratified\r\nSampling)</strong>来尽可能保持数据分布一致性.</p>\r\n<p>接下来每次取<span class=\"math inline\">\\(k-1\\)</span>个子集作为训练集,\r\n余下一个作为测试集, 进行<span\r\nclass=\"math inline\">\\(k\\)</span>次训练和测试, 最终结果取<span\r\nclass=\"math inline\">\\(k\\)</span>个结果的均值.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png\" class=\"\" title=\"pic2-2\">\r\n<p>显然交叉验证法评估结果的<strong>稳定性(Stability)</strong>和<strong>保真性(Fidelity)</strong>与<span\r\nclass=\"math inline\">\\(k\\)</span>的取值强相关.\r\n故而交叉验证法又称<strong>k折交叉验证(k-fold Cross Validation)</strong>.\r\n最常见的取值是 <span class=\"math inline\">\\(k=10\\)</span>.</p>\r\n<p>由于<span class=\"math inline\">\\(D\\)</span>的<span\r\nclass=\"math inline\">\\(k\\)</span>划分不唯一, k折交叉验证通常也要重复多次,\r\n记为<span class=\"math inline\">\\(p\\)</span>, 最终结果取这<span\r\nclass=\"math inline\">\\(p\\)</span>次k折交叉验证结果的均值.</p>\r\n<p><strong>留一法(Leave-One-Out, LOO)</strong>, <span\r\nclass=\"math inline\">\\(|D| = m\\)</span>, 则令<span\r\nclass=\"math inline\">\\(k = m\\)</span> 就得到了留一法.</p>\r\n<p>留一法的优势是不受样本划分影响(有且仅有一种划分方式), 训练集仅比<span\r\nclass=\"math inline\">\\(D\\)</span>少一个样本,\r\n绝大多数情况下留一法中被评估的模型与期望用<span\r\nclass=\"math inline\">\\(D\\)</span>训练的模型相似.\r\n因此认为留一法评估结果较为准确. 缺点是当<span\r\nclass=\"math inline\">\\(m\\)</span>较大时, 计算开销过大以致无法接受.</p>\r\n<h4 id=\"自助法bootstapping\">$ 2.2.3 自助法(Bootstapping)</h4>\r\n<p>留出法和交叉验证法都保留了一部分样本用于测试,\r\n因此实际评估的模型所使用的训练集比<span\r\nclass=\"math inline\">\\(D\\)</span>小,\r\n必然会引入一些因训练样本规模不同而导致的估计偏差.\r\n留一法的计算复杂度又太高了. 自助法提供了一个较好的解决方案.</p>\r\n<p>自助法直接以 <strong>自助采样法(Bootstrap Sampling)</strong> 为基础.\r\n给定包含<span class=\"math inline\">\\(m\\)</span>个样本的数据集<span\r\nclass=\"math inline\">\\(D\\)</span>, 对其进行采样产生数据集<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>. 采样过程每次随即从<span\r\nclass=\"math inline\">\\(D\\)</span>中挑选一个样本, 将拷贝放入<span\r\nclass=\"math inline\">\\(M&#39;\\)</span>\r\n<strong>(意味着下次采样该样本仍有可能被采样到)</strong>. 重复该过程<span\r\nclass=\"math inline\">\\(m\\)</span>次, 得到了包含<span\r\nclass=\"math inline\">\\(m\\)</span>个样本的数据集<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处\"自助\"为意译,\r\n称<strong>可重复采样/有放回采样</strong>更符合其原理.</p>\r\n</blockquote>\r\n<p>不难看出, 可能存在部分样本被多次采样到, 部分样本未被采样到.\r\n我们关注某个样本在<span\r\nclass=\"math inline\">\\(m\\)</span>次中未被采样的概率,有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\lim_{m \\rightarrow \\infty}(1 - \\frac{1}{m})^m  = \\frac{1}{e} \\approx\r\n0.368 \\tag{2.1}\r\n\\end{equation}\\]</span></p>\r\n<p>通过自主采样, 初始数据集<span\r\nclass=\"math inline\">\\(D\\)</span>中约有<span\r\nclass=\"math inline\">\\(36.8\\%\\)</span>的样本未出现在采样数据集<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>中, 将<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>作为训练集, <span\r\nclass=\"math inline\">\\(D \\backslash D&#39;\\)</span>作为测试集.\r\n这样的测试结果称为<strong>包外估计(Out-Of-Bagestimate)</strong>.</p>\r\n<p>自助法在数据集较小, 难以有效划分训练和测试集的时候具有优势.\r\n但自助法产生的数据集改变了初始数据集的分布, 会引入估计误差.\r\n初始数据集较大时更常用留出法和交叉验证法.</p>\r\n<h4 id=\"调参与最终模型\">$ 2.2.4 调参与最终模型</h4>\r\n<p><strong>参数(Parameter)</strong>和<strong>调参(Parameter\r\nTuning)</strong>释义见名称.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 机器学习常涉及两类参数:\r\n算法参数和模型参数.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>验证集(Validation Set):</strong>\r\n模型评估与选择中用于评估测试的数据集常称为验证集.</p>\r\n<blockquote>\r\n<p><strong>Additonal:</strong> 关于训练集, 测试集和验证集的区别,\r\n笔者在此参考<a\r\nhref=\"https://zhuanlan.zhihu.com/p/98532085\"><strong>[知乎|训练集、验证集、测试集]</strong></a></p>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"性能度量\">$ 2.3 性能度量</h3>\r\n<ul>\r\n<li><strong>性能度量(Performance Measure):</strong>\r\n衡量模型泛化能力的评价标准. 显然该标准取决于任务需求.</li>\r\n</ul>\r\n<p>以预测任务为例, 给定样例集<span class=\"math inline\">\\(D =\r\n\\{(\\boldsymbol{x_1}, y_1), (\\boldsymbol{x_2}, y_2), ...,\r\n(\\boldsymbol{x_m}, y_m)\\}\\)</span>, 其中<span\r\nclass=\"math inline\">\\(y_i\\)</span>是<span\r\nclass=\"math inline\">\\(\\boldsymbol{x_i}\\)</span>的真实标记,\r\n评估学习器<span class=\"math inline\">\\(f\\)</span>的性能,\r\n需要比较预测结果<span class=\"math inline\">\\(f(x)\\)</span>与真实标记<span\r\nclass=\"math inline\">\\(y\\)</span>.</p>\r\n<p>回归任务常用性能度量<strong>均方误差(Mean Squared Error)</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}(f(\\boldsymbol{x_i}) - y_i)^2\r\n\\tag{2.2}\r\n\\end{equation}\\]</span></p>\r\n<p>更一般地, 对于数据分布<span\r\nclass=\"math inline\">\\(\\mathcal{D}\\)</span>和概率密度函数<span\r\nclass=\"math inline\">\\(p(\\cdot)\\)</span>, 均方误差描述为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}(f(\\boldsymbol{x}) - y)^2\r\np(\\boldsymbol{x}) d\\boldsymbol{x} \\tag{2.3}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"错误率与精度\">$ 2.3.1 错误率与精度</h4>\r\n<p>错误率和精度是分类任务中最常用的两种性能度量.</p>\r\n<p>对于样例集<span class=\"math inline\">\\(\\mathcal{D}\\)</span>,\r\n错误率和精度定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) \\neq\r\ny_i) \\tag{2.4}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nacc(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) =\r\ny_i) = 1 - E(f;D) \\tag{2.5}\r\n\\end{equation}\\]</span></p>\r\n<p>对于数据分布<span\r\nclass=\"math inline\">\\(\\mathcal{D}\\)</span>和概率密度函数<span\r\nclass=\"math inline\">\\(p(\\cdot)\\)</span>, 错误率和精度定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;\\mathcal{D}) = \\int_{x \\sim\r\n\\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) \\neq y) p(\\boldsymbol{x})\r\nd\\boldsymbol{x} \\tag{2.6}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nacc(f;\\mathcal{D}) = \\int_{x \\sim\r\n\\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) = y) p(\\boldsymbol{x})\r\nd\\boldsymbol{x} = 1 - E(f;\\mathcal{D}) \\tag{2.7}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"查准率precision-查全率recall-f1\">$ 2.3.2 查准率(Precision),\r\n查全率(Recall), F1</h4>\r\n<p>有时我们更关心模型的正确率,\r\n比如说\"挑选出来的瓜有多少是好瓜\",\"有多少好瓜被挑选出来了\",\r\n查准率和查全率更适合用来度量.</p>\r\n<p>对于二分类问题, 我们有<strong>混淆矩阵(Confusion Matrix)</strong></p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png\" class=\"\" title=\"tab2-1\">\r\n<p>定义查准率<span class=\"math inline\">\\(P\\)</span>, 查全率<span\r\nclass=\"math inline\">\\(R\\)</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP = \\frac{TP}{TP + FP}\\tag{2.8}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP = \\frac{TP}{TP + FN}\\tag{2.9}\r\n\\end{equation}\\]</span></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 自然语言解释就是,\r\n查准率是在预测正确中实际正确的比率,\r\n查全率是在实际正确中预测正确的比率.</p>\r\n</blockquote>\r\n<p>查准率和查全率是一对矛盾的度量, 二者负相关.\r\n是<strong>sound</strong>和<strong>complete</strong>的关系</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png\" class=\"\" title=\"spic2-1\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 该图片截选自NJU软件分析课件,\r\n<del>ly和tt老师应该不会在意吧(雾)</del></p>\r\n<p>课程地址链接<a\r\nhref=\"https://tai-e.pascal-lab.net/lectures.html\"><strong>[Static\r\nProgram Analysis]</strong></a></p>\r\n</blockquote>\r\n<p>查准率和查全率的关系可以用<strong>P-R图</strong>表示</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png\" class=\"\" title=\"pic2-3\">\r\n<ul>\r\n<li><strong>平衡点(Break-Even Point, BEP):</strong> <span\r\nclass=\"math inline\">\\(P=R\\)</span>时的取值,\r\n可基于BEP评估两个学习器的优劣, 如图2-3, 可认为<span\r\nclass=\"math inline\">\\(A&gt;B&gt;C\\)</span></li>\r\n</ul>\r\n<p>比BEP更常用的是<span class=\"math inline\">\\(F1\\)</span>度量定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nF1 = \\frac{2 \\times P \\times R}{P + R} = \\frac{2 \\times TP}{样例总数 +\r\nTP - TN}\\tag{2.10}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math inline\">\\(F_{\\beta}\\)</span>是<span\r\nclass=\"math inline\">\\(F_1\\)</span>的一般形式, 定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nF_{\\beta} = \\frac{(1 + \\beta^2) \\times P \\times R}{(\\beta^2 \\times P) +\r\nR}\\tag{2.11}\r\n\\end{equation}\\]</span></p>\r\n<p>其中<span class=\"math inline\">\\(\\beta &gt;\r\n0\\)</span>度量了查全率对查准率的相对重要性, <span\r\nclass=\"math inline\">\\(\\beta = 1\\)</span>时退化为<span\r\nclass=\"math inline\">\\(F_1\\)</span>, <span class=\"math inline\">\\(\\beta\r\n&gt; 1\\)</span>时查全率影响更大, <span class=\"math inline\">\\(\\beta &lt;\r\n1\\)</span>时查准率影响更大.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong></p>\r\n<p><span class=\"math inline\">\\(F_1\\)</span>基于调和平均定义, <span\r\nclass=\"math inline\">\\(\\frac{1}{F_1} = \\frac{1}{2} \\cdot (\\frac{1}{P} +\r\n\\frac{1}{R})\\)</span>.</p>\r\n<p><span class=\"math inline\">\\(F_\\beta\\)</span>基于加权调和平均定义,\r\n<span class=\"math inline\">\\(\\frac{1}{F_\\beta} = \\frac{1}{1 + \\beta^2}\r\n\\cdot (\\frac{1}{P} + \\frac{\\beta^2}{R})\\)</span></p>\r\n</blockquote>\r\n<p>若在n个二分类混淆矩阵上考察准确率和查全率,\r\n我们有<strong>macro</strong>和<strong>micro</strong>两种选择.</p>\r\n<p>对于<strong>宏(macro)</strong>, 在各个混淆矩阵上分别计算<span\r\nclass=\"math inline\">\\(P\\)</span>和<span\r\nclass=\"math inline\">\\(R\\)</span>,\r\n再取平均.得到<strong>宏查准率(macro-P)</strong>,\r\n<strong>宏查全率(macro-R)</strong>, <strong>宏F1(macro-F1)</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmacro\\text{-}P = \\frac{1}{n} \\sum_{i=1}^{n} P_i\\tag{2.12}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmacro\\text{-}R = \\frac{1}{n} \\sum_{i=1}^{n} R_i\\tag{2.13}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmacro\\text{-}F1 = \\frac{2 \\times macro\\text{-}P \\times\r\nmacro\\text{-}R}{macro\\text{-}P + macro\\text{-}R}\\tag{2.14}\r\n\\end{equation}\\]</span></p>\r\n<p>对于<strong>微(micro)</strong>, 先平均混淆矩阵得到$, , , $,\r\n再计算出<strong>微查准率(micro-P)</strong>,\r\n<strong>微查全率(micro-R)</strong>, <strong>微F1(micro-F1)</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmicro\\text{-}P =\r\n\\frac{\\overline{TP}}{\\overline{TP}+\\overline{FP}}\\tag{2.15}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmicro\\text{-}R = \\frac{\\overline{TP}}{\\overline{TP}+\\overline{FN}}\r\n\\tag{2.16}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmicro\\text{-}F1 = \\frac{2 \\times micro\\text{-}P \\times\r\nmicro\\text{-}R}{micro\\text{-}P + micro\\text{-}R}\\tag{2.17}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"roc与auc\">$ 2.3.3 ROC与AUC</h4>\r\n<p>现重新考虑查准率和查全率, 首先我们来看看学习器如何给正/反的分类.</p>\r\n<p>很多学习器为测试样本产生一个实值或概率预测,\r\n将预测值与<strong>分类阈值(Threshold)</strong>比较, 大于阈值则为正类,\r\n否则为反类. 根据该实值或概率预测进行排序, 概率高的在前, 概率低的在后,\r\n则这个分类阈值就是<strong>截断点(Cut Point)</strong>, 前一部分为正例,\r\n后一部分为负例.</p>\r\n<p>不难得到以下结论: 截断点越靠前, 查准率增高而查全率降低; 截断点越靠后,\r\n查准率降低而查全率增高. 同时,\r\n排序质量越好的学习器\"在一般情况下\"泛化性能越好,\r\nROC基于此度量模型的泛化能力.</p>\r\n<p><strong>受试者工作特征(Receiver Operating Characteristic,\r\nROC)</strong>, 根据学习器的预测结果对样例进行排序,\r\n顺序逐个把样本作为正例进行预测(选择不同的截断点),计算\r\n<strong>真正例率(True Positive Rate, TPR)</strong>,\r\n<strong>假正例率(False Positive Rate, FPR)</strong> 作为纵横轴.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nTPR = \\frac{TP}{TP + FN}\r\n\\tag{2.18}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nFPR = \\frac{FP}{TN + FP}\r\n\\tag{2.19}\r\n\\end{equation}\\]</span></p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png\" class=\"\" title=\"pic2-4\">\r\n<p>对角线对应随即猜测模型, 点(0, 1)对应所有正例在负例前的理想模型.</p>\r\n<ul>\r\n<li><strong>AUC(Area Under ROC Curve):</strong> ROC曲线下面积.\r\n为依据两个模型绘制的ROC曲线比较两个模型的优劣而引入.</li>\r\n</ul>\r\n<p>对于离散样本, 计算AUC:</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nAUC = \\frac{1}{2} \\sum^{m - 1}_{i=1}(x_{i+1} - x_i)\\cdot(y_i + y_{i + 1}\r\n)\r\n\\tag{2.19}\r\n\\end{equation}\\]</span></p>\r\n<p>形式化上AUC度量排序质量, 记有<span\r\nclass=\"math inline\">\\(m^+\\)</span>个正例, <span\r\nclass=\"math inline\">\\(m^-\\)</span>个反例, 令<span\r\nclass=\"math inline\">\\(D^+\\)</span>为正例集合, <span\r\nclass=\"math inline\">\\(D^-\\)</span>为负例集合,\r\n定义排序<strong>损失(loss):</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mathscr{l}_{rank} = \\frac{1}{m^+ m^-}\\sum_{x^+ \\in D^+} \\sum_{m^- \\in\r\nD^-}\\left(\\mathbb{I}(f(x^+)&lt;f(x^-)) + \\frac{1}{2} \\mathbb{I}(f(x^+)=\r\nf(x^-))\\right)\r\n\\tag{2.21}\r\n\\end{equation}\\]</span></p>\r\n<p>如何理解这个式子? 考虑每一对正反例, 若正例小于反例记一个\"罚分\",\r\n相等则记半个. 不难看出, 对于每个正例/负例, 可能造成的\"罚分\"与其\"位置\",\r\n越\"错误\"的位置会引起越多的\"罚分\", 这与AUC计算过程及其相似. 实际上, <span\r\nclass=\"math inline\">\\(\\mathscr{l}_{rank}\\)</span>对应ROC曲线上方的面积,\r\n有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nAUC = 1 - \\mathscr{l}_{rank}\r\n\\tag{2.22}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"代价敏感错误率与代价曲线\">$ 2.3.4 代价敏感错误率与代价曲线</h4>\r\n<p>为权衡不同类型错误所造成的不同损失,\r\n我们为错误赋予<strong>非均等代价(UnEqual Cost)</strong>.</p>\r\n<p>以二分类为例, <strong>代价矩阵(Cost Matrix)</strong>如下:</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png\" class=\"\" title=\"tab2-2\">\r\n<p>若将0类记为正例, 1类记为负例, 定义<span class=\"math inline\">\\(D^+,\r\nD^-\\)</span>, <strong>代价敏感(Cost-Sensitive)</strong> 错误率为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D;cost) = \\frac{1}{m} \\left(\\sum_{\\boldsymbol{x}_i \\in D^+}\r\n\\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i) \\times cost_{01} +\r\n\\sum_{\\boldsymbol{x}_i \\in D^-} \\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i)\r\n\\times cost_{10}\\right)\r\n\\tag{2.23}\r\n\\end{equation}\\]</span></p>\r\n<p>非均等情况下, <strong>代价曲线(Cost\r\nCurve)</strong>可以解决ROC曲线不能反映出学习器的期望<strong>总体代价(Total\r\nCost)</strong>问题.</p>\r\n<p>其横轴是取值为<span\r\nclass=\"math inline\">\\([0,1]的\\)</span>正例概率代价, 其中<span\r\nclass=\"math inline\">\\(p\\)</span>为样例是正例的概率</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP(+)cost=\\frac{p \\times cost_{01}}{p \\times cost_{01} + (1 - p) \\times\r\ncost_{10}}\r\n\\tag{2.24}\r\n\\end{equation}\\]</span></p>\r\n<p>纵轴是取值为<span\r\nclass=\"math inline\">\\([0,1]\\)</span>的归一化代价,FPR为假正例率,\r\nFNR为假反例率</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\ncost_{norm} = \\frac{FNR \\times p \\times cost_{01} + FPR \\times (1 - p)\r\n\\times cost_{10}}{p \\times cost_{01} + (1 - p) \\times cost_{10}}\r\n\\tag{2.25}\r\n\\end{equation}\\]</span></p>\r\n<p>绘制代价曲线时, ROC曲线上每个点对应代价平面上的一条线段,\r\n设ROC点坐标为<span class=\"math inline\">\\((FPR, TPR)\\)</span>,\r\n然后在代价平面上绘制一条从<span class=\"math inline\">\\((0,\r\nFPR)\\)</span>到<span class=\"math inline\">\\((1, FNR)\\)</span>的线段,\r\n线段下面积代表了该条件下的期望总体代价.如此为每个点绘制线段, 取线段下界,\r\n围成面积即为在所有条件下学习器的总体期望代价.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png\" class=\"\" title=\"pic2-5\">\r\n<blockquote>\r\n<p><strong>Addtional:</strong> 如何理解代价曲线?</p>\r\n<p>笔者在此给出一篇参考<a\r\nhref=\"https://www.zhihu.com/question/63492375\"><strong>[知乎|代价曲线的理解]</strong></a>.这篇参考中对大部分问题给到了解释.</p>\r\n<p>在此额外补充一点困惑笔者许久的问题, 每一条线段代表什么?</p>\r\n<p>每一条线段代表当前<strong>阈值</strong>条件下,\r\n对不同样本集的期望代价. 具体来说,\r\n是以FPR和FNR为预测值对不同样本集的预测.</p>\r\n</blockquote>\r\n<h3 id=\"比较检验\">$ 2.4 比较检验</h3>\r\n<p><strong>统计假设检验(Hypothesis Test)</strong>\r\n为比较学习器性能提供了重要依据. 本节默认以错误率为性能度量, 用<span\r\nclass=\"math inline\">\\(\\epsilon\\)</span>表示.</p>\r\n<h4 id=\"假设检验\">$ 2.4.1 假设检验</h4>\r\n<p>现实中我们无法知道学习器的泛化错误率 <span\r\nclass=\"math inline\">\\(\\epsilon\\)</span>, 只能获知其测试错误率 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon}\\)</span>.\r\n常用测试错误率估推出泛化错误率.</p>\r\n<p>对于 <span class=\"math inline\">\\(m\\)</span> 个测试样本,\r\n如果测试错误率为 <span class=\"math inline\">\\(\\hat{\\epsilon}\\)</span>,\r\n则被误分类的样本数量 <span class=\"math inline\">\\(m&#39;=\\hat{\\epsilon}\r\n\\times m\\)</span>, 假定测试样本从样本总体分布中独立采样获得,\r\n由<strong>二项(Binomial)分布</strong>, 泛化错误率为 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon}\\)</span> 的学习器恰有 <span\r\nclass=\"math inline\">\\(m&#39;\\)</span> 个样本被误分类的概率是 <span\r\nclass=\"math inline\">\\(\\binom{m}{m&#39;}\\epsilon^{m&#39;}(1-\\epsilon)^{m-m&#39;}\\)</span>\r\n. 同时, 这也表示泛化错误率为 <span\r\nclass=\"math inline\">\\(\\epsilon\\)</span> 的学习器在<span\r\nclass=\"math inline\">\\(m\\)</span>个样本上测试得到测试错误率为 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon}\\)</span> 的概率:</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP(\\hat{\\epsilon};\\epsilon)=\\binom{m}{\\hat{\\epsilon} \\times m}\r\n\\epsilon^{\\hat{\\epsilon} \\times m} (1 - \\epsilon)^{m - \\hat{\\epsilon}\r\n\\times m}\r\n\\tag{2.26}\r\n\\end{equation}\\]</span></p>\r\n<p>由二项分布性质, 或者计算 <span\r\nclass=\"math inline\">\\(P(\\hat{\\epsilon};\\epsilon)\\)</span> 对 <span\r\nclass=\"math inline\">\\(\\epsilon\\)</span> 的偏导, 可以知道 <span\r\nclass=\"math inline\">\\(P(\\hat{\\epsilon};\\epsilon)\\)</span> 在 <span\r\nclass=\"math inline\">\\(\\epsilon = \\hat{\\epsilon}\\)</span> 时最大, <span\r\nclass=\"math inline\">\\(|\\epsilon - \\hat{\\epsilon}|\\)</span> 增大时 <span\r\nclass=\"math inline\">\\(P(\\hat{\\epsilon};\\epsilon)\\)</span> 减小.</p>\r\n<p>若取 <span class=\"math inline\">\\(m=10, \\epsilon = 0.3\\)</span>,\r\n示意图如2.6所示.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png\" class=\"\" title=\"pic2-6\">\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n<del>死去的《概率论与数理统计》突然复活起来攻击我</del>, 推荐复习笔记<a\r\nhref=\"https://zhuanlan.zhihu.com/p/243215469\"><strong>[知乎|概率论与数理统计复习整理]</strong></a>.</p>\r\n</blockquote>\r\n<p>由<strong>二项检验(Binomial Test)</strong>, 考虑假设<span\r\nclass=\"math inline\">\\(\\epsilon \\leq \\epsilon_0\\)</span>, 在 <span\r\nclass=\"math inline\">\\(1 - \\alpha\\)</span>\r\n的概率内能观测到的最大错误率为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\bar{\\epsilon} = \\min \\epsilon \\ \\ \\text{s.t.} \\ \\ \\sum_{i = \\epsilon\r\n\\times m + 1}^{m} \\binom{m}{i}\\epsilon_0^i (1 - \\epsilon_0)^{m - i} &lt;\r\n\\alpha\r\n\\tag{2.27}\r\n\\end{equation}\\]</span></p>\r\n<p>其中 <span class=\"math inline\">\\(1-\\alpha\\)</span>\r\n为<strong>置信度(Confidence)</strong>, 直观上对应图2.6的非阴影部分;\r\n\"s.t.\"是\"subject to\", 使左边式子在右边式子条件满足时成立.</p>\r\n<p>若测试错误率 <span class=\"math inline\">\\(\\hat{\\epsilon}\\)</span>\r\n大于临界值 <span class=\"math inline\">\\(\\bar{\\epsilon}\\)</span>,\r\n由二项检验, 我们可以认为在 <span class=\"math inline\">\\(\\alpha\\)</span>\r\n的显著度下, 假设 <span class=\"math inline\">\\(\\epsilon \\leq\r\n\\hat{\\epsilon}\\)</span> 不能被拒绝, 即能以 <span\r\nclass=\"math inline\">\\(1-\\alpha\\)</span> 的置信度认为,\r\n学习器的泛化错误率不高于 <span\r\nclass=\"math inline\">\\(\\epsilon_0\\)</span>; 否则可以拒绝假设, 在 <span\r\nclass=\"math inline\">\\(\\alpha\\)</span>\r\n的显著度下可认为学习器的泛化错误率大于 <span\r\nclass=\"math inline\">\\(\\epsilon_0\\)</span>.</p>\r\n<p>在通过多次测试中中我们会获得多个测试错误率,\r\n此时可使用<strong>t检验(t-test)</strong>.</p>\r\n<p>设<span class=\"math inline\">\\(k\\)</span>个错误率 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon_1}, \\hat{\\epsilon_2}, ...,\r\n\\hat{\\epsilon_k}\\)</span>, 则平均错误率 <span\r\nclass=\"math inline\">\\(\\mu\\)</span>, 方差 <span\r\nclass=\"math inline\">\\(\\sigma^2\\)</span> 为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mu = \\frac{1}{k} \\sum_{i=1}^k \\hat{\\epsilon_i}\r\n\\tag{2.28}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\sigma^2=\\frac{1}{k-1} \\sum^{k}_{i=1}(\\hat{\\epsilon_i} - \\mu)^2\r\n\\tag{2.29}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math inline\">\\(k\\)</span> 个测试错误率可看作是泛化错误率\r\n<span class=\"math inline\">\\(\\epsilon_0\\)</span> 的独立采样, 则变量</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\tau_t=\\frac{\\sqrt{k} (\\mu - \\epsilon_0)}{\\sigma}\r\n\\tag{2.30}\r\n\\end{equation}\\]</span></p>\r\n<p>服从自由度为 <span class=\"math inline\">\\(k-1\\)</span> 的 <span\r\nclass=\"math inline\">\\(t\\)</span> 分布.</p>\r\n<blockquote>\r\n<p><strong>Addtional:</strong> <strong>基础知识补充</strong></p>\r\n<p><span class=\"math inline\">\\(\\chi^2\\)</span> 分布: <span\r\nclass=\"math inline\">\\(X_1, X_2, ..., X_n\\)</span> 为独立同分布随机变量,\r\n服从 <span class=\"math inline\">\\(N(0, 1)\\)</span>, 则 <span\r\nclass=\"math inline\">\\(\\chi^2_n = \\sum_{i=1}^n X^2_i\\)</span>\r\n为服从自由度为 <span class=\"math inline\">\\(n\\)</span> 的 <span\r\nclass=\"math inline\">\\(\\chi^2\\)</span> 分布</p>\r\n<p><span class=\"math inline\">\\(t\\)</span> 分布: <span\r\nclass=\"math inline\">\\(X \\sim N(0,1), Y \\sim \\chi^2(n)\\)</span>, <span\r\nclass=\"math inline\">\\(X,Y\\)</span> 独立, 称 <span\r\nclass=\"math inline\">\\(T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}\\)</span>\r\n为服从自由度为 <span class=\"math inline\">\\(n\\)</span> 的 <span\r\nclass=\"math inline\">\\(t\\)</span> 分布.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>Tips:</strong> <strong>推导补充</strong></p>\r\n<p>原书中没有关于这个<span\r\nclass=\"math inline\">\\(\\tau_t\\)</span>服从<span\r\nclass=\"math inline\">\\(t\\)</span>分布的推导, 笔者在此给出补充.</p>\r\n<p>假设<span\r\nclass=\"math inline\">\\(X_1,X_2,...X_n\\)</span>是来自正态总体<span\r\nclass=\"math inline\">\\(N(\\mu,\\sigma^2)\\)</span>的样本.\r\n我们有以下重要统计量:</p>\r\n<p><span class=\"math display\">\\[\r\n\\begin{align}\r\n\\nonumber\\text{样本均值}&amp; \\ \\bar{X}=\\frac{1}{n}\\sum_{i=1}^n &gt;X_i\r\n\\\\\r\n\\nonumber\\text{样本方差}&amp; \\\r\nS^2=\\frac{1}{n-1}\\sum_{i-1}^{n}(X_i-\\bar{X})^2\r\n\\end{align}\r\n\\]</span></p>\r\n<p>我们有几个重要结论:</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png\" class=\"\" title=\"spic2-3\">\r\n<p>故而有推论:</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png\" class=\"\" title=\"spic2-4\">\r\n</blockquote>\r\n<p>对假设<span\r\nclass=\"math inline\">\\(\\mu=\\epsilon_0\\)</span>和显著度<span\r\nclass=\"math inline\">\\(\\alpha\\)</span>, 可以算出临界值——在<span\r\nclass=\"math inline\">\\(1-\\alpha\\)</span>内能观测到的最大错误率.\r\n考虑<strong>双边假设(Two-Tailed)</strong>, 若<span\r\nclass=\"math inline\">\\(\\tau_t\\)</span>位于临界区<span\r\nclass=\"math inline\">\\([t_{-\\alpha/2},t_{\\alpha/2}]\\)</span>内(如图2.7所示),\r\n则不能拒绝假设<span class=\"math inline\">\\(\\mu=\\epsilon_0\\)</span>.\r\n我们可以认为泛化错误率为<span\r\nclass=\"math inline\">\\(\\epsilon_0\\)</span>.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png\" class=\"\" title=\"pic2-7\">\r\n<h4 id=\"多学习器比较\">$ 2.4.2 多学习器比较</h4>\r\n<p>笔者对这部分不做过多记录, 翻阅原书该部分即可.</p>\r\n<p>对于两个学习器,我们有</p>\r\n<ul>\r\n<li>交叉验证t检验(基于成对t 检验)</li>\r\n<li>McNember检验(基于列联表，卡方检验)</li>\r\n</ul>\r\n<p>对于多个学习器,我们有</p>\r\n<ul>\r\n<li>Friedman检验(基于序值，F检验; 判断”是否都相同”)</li>\r\n<li>Nemenyi后续检验(基于序值，进一步判断两两差别)</li>\r\n</ul>\r\n<h3 id=\"偏差与方差\">2.5 偏差与方差</h3>\r\n<ul>\r\n<li><strong>偏差-方差分解(Bias-variance Decomposition)</strong></li>\r\n</ul>\r\n<p>对测试样本<span class=\"math inline\">\\(\\boldsymbol{x}\\)</span>,\r\n令<span class=\"math inline\">\\(y_D\\)</span>为<span\r\nclass=\"math inline\">\\(\\boldsymbol{x}\\)</span>在数据集的集中标记, <span\r\nclass=\"math inline\">\\(y\\)</span>为<span\r\nclass=\"math inline\">\\(\\boldsymbol{x}\\)</span>的真实标记, <span\r\nclass=\"math inline\">\\(f(\\boldsymbol{x};D)\\)</span>为训练集<span\r\nclass=\"math inline\">\\(D\\)</span>上的学得模型<span\r\nclass=\"math inline\">\\(f\\)</span>在<span\r\nclass=\"math inline\">\\(\\boldsymbol{x}\\)</span>上的预测输出.</p>\r\n<p>以回归算法为例, 我们有如下定义(符号定义见<a\r\nhref=\"http://localhost:4000/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/#chapter-0-%E4%B8%BB%E8%A6%81%E7%AC%A6%E5%8F%B7%E8%A1%A8\"><strong>[Lapluma|读书笔记-机器学习\r\nCh0-Ch1]</strong></a>):</p>\r\n<p>学习算法的期望预测.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\bar{f}(\\boldsymbol{x})=\\mathbb{E}_D[f(\\boldsymbol{x};D)]\r\n\\tag{2.37}\r\n\\end{equation}\\]</span></p>\r\n<p>使用样本数相同的不同训练集产生的方差,\r\n度量了同样大小的训练集变动导致的学习性能变化,\r\n刻画了数据扰动造成的影响.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mathcal{var}(\\boldsymbol{x})=\\mathbb{E}_D[(f(\\boldsymbol{x};D)-\\bar{f}(x))^2]\r\n\\tag{2.38}\r\n\\end{equation}\\]</span></p>\r\n<p>噪声, 在当前学习任务上任何学习算法所能达到的期望泛化误差下界,\r\n刻画了学习问题本身的难度.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\varepsilon^2=\\mathbb{E}_D[(y_D-y)^2]\r\n\\tag{2.39}\r\n\\end{equation}\\]</span></p>\r\n<p>期望输出与真实标记的差别称为偏差,\r\n度量了学习算法的期望预测与真是结果的偏离程度,\r\n刻画了学习算法本身的拟合能力.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mathcal{bias}^2(\\boldsymbol{x})=(\\bar{f}(\\boldsymbol{x})-y)^2\r\n\\tag{2.40}\r\n\\end{equation}\\]</span></p>\r\n<p>便于讨论,我们假定噪声期望为0, 即<span\r\nclass=\"math inline\">\\(\\mathbb{E}_D[y_D-y]=0\\)</span>,\r\n对期望泛化误差进行分解(推导略, 见原书), 有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D)=bias^2(\\boldsymbol{x})+var(\\boldsymbol{x})+\\varepsilon ^2\r\n\\tag{2.42}\r\n\\end{equation}\\]</span></p>\r\n<p>即泛化误差可以分解为偏差, 方差和噪声之和.</p>\r\n<p>一般来说, 偏差和方差存在冲突, 称为<strong>偏差-方差窘境(Bias-Variance\r\nDilemma)</strong>,见图2-9.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png\" class=\"\" title=\"pic2-9\">\r\n<p>训练不足时, 学习器拟合能力不足,\r\n训练数据的扰动不足以使学习器产生显著变化,\r\n此时偏差主导了泛化错误率;训练程度加深, 学习器拟合能力增强,\r\n训练数据发生的扰动被学习器学习到, 方差逐渐主导了泛化错误率;训练充足后,\r\n学习器拟合能力非常强. 训练数据发生轻微扰动都会导致学习器发生显著变化,\r\n此时训练数据自身,非全局的性质被学习器学习, 发生过拟合.</p>\r\n","length":5648,"excerpt":"<p><strong>有多个算法和参数生成的模型, 哪个才是好的模型?</strong></p>","more":"<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#chapter-2-模型评估与选择\">Chapter 2: 模型评估与选择</a>\r\n<ul>\r\n<li><a href=\"#-21-经验误差与过拟合\">$ 2.1 经验误差与过拟合</a></li>\r\n<li><a href=\"#-22-评估方法\">$ 2.2 评估方法</a>\r\n<ul>\r\n<li><a href=\"#-221-留出法hold-out\">$ 2.2.1 留出法(Hold-Out)</a></li>\r\n<li><a href=\"#-222-交叉验证法cross-validation\">$ 2.2.2 交叉验证法(Cross\r\nValidation)</a></li>\r\n<li><a href=\"#-223-自助法bootstapping\">$ 2.2.3\r\n自助法(Bootstapping)</a></li>\r\n<li><a href=\"#-224-调参与最终模型\">$ 2.2.4 调参与最终模型</a></li>\r\n</ul></li>\r\n<li><a href=\"#-23-性能度量\">$ 2.3 性能度量</a>\r\n<ul>\r\n<li><a href=\"#-231-错误率与精度\">$ 2.3.1 错误率与精度</a></li>\r\n<li><a href=\"#-232-查准率precision-查全率recall-f1\">$ 2.3.2\r\n查准率(Precision), 查全率(Recall), F1</a></li>\r\n<li><a href=\"#-233-roc与auc\">$ 2.3.3 ROC与AUC</a></li>\r\n<li><a href=\"#-234-代价敏感错误率与代价曲线\">$ 2.3.4\r\n代价敏感错误率与代价曲线</a></li>\r\n</ul></li>\r\n<li><a href=\"#-24-比较检验\">$ 2.4 比较检验</a>\r\n<ul>\r\n<li><a href=\"#-241-假设检验\">$ 2.4.1 假设检验</a></li>\r\n<li><a href=\"#-242-多学习器比较\">$ 2.4.2 多学习器比较</a></li>\r\n</ul></li>\r\n<li><a href=\"#25-偏差与方差\">2.5 偏差与方差</a></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"chapter-2-模型评估与选择\">Chapter 2: 模型评估与选择</h2>\r\n<h3 id=\"经验误差与过拟合\">$ 2.1 经验误差与过拟合</h3>\r\n<ul>\r\n<li><p><strong>错误率(Error Rate):</strong>\r\n分类错误的样本数占样本总数的比例, 记样本数为<span\r\nclass=\"math inline\">\\(m\\)</span>, <span\r\nclass=\"math inline\">\\(a\\)</span>个错误分类的样本, 错误率 <span\r\nclass=\"math inline\">\\(E=\\frac{a}{m}\\)</span> .</p></li>\r\n<li><p><strong>精度(Accuracy):</strong> <span class=\"math inline\">\\((1 -\r\n\\frac{a}{m}) \\times 100\\%\\)</span> 称为精度, 即 \"精度 = 1 -\r\n错误率\".</p></li>\r\n<li><p><strong>误差(Error):</strong> 更一般地,\r\n我们把<strong>学习器的实际预测输出</strong>与<strong>样本的真实输出</strong>之间的差异称为误差,\r\n学习器在训练集上的误差称为 <strong>训练误差(Training\r\nError)/经验误差(Empirical Error)</strong>,\r\n在新样本上的误差称为<strong>泛化误差(Generalization Error)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 这里的误差均指<strong>误差期望</strong>.</p>\r\n</blockquote></li>\r\n</ul>\r\n<p>尽管我们希望得到一个泛化误差小的学习器, 使得其在新样本上表现很好,\r\n但我们并不能预测新样本, 因此我们只能尝试降低经验误差.\r\n但经验误差很小的学习器往往在泛化误差的表现上都很糟糕.\r\n这样的学习器发生了<strong>过拟合</strong>.</p>\r\n<ul>\r\n<li><p><strong>过拟合(Overfitting):</strong>\r\n学习器可能将训练样本自身的一些特点当作了所有潜在样本都具有的一般性质,\r\n导致泛化能力下降的现象.</p></li>\r\n<li><p><strong>欠拟合(Underfitting):</strong> 与过拟合相对,\r\n指对训练样本的一般性质尚未学好.</p></li>\r\n</ul>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png\" class=\"\" title=\"pic2-1\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 导致过拟合的原因很多,\r\n最常见的原因是学习能力过强; 欠拟合则相反, 因为学习能力低下.\r\n欠拟合容易克服, 但过拟合很难解决, 且过拟合无法彻底避免.</p>\r\n</blockquote>\r\n<ul>\r\n<li><strong>模型选择(Model Selection):</strong> 在实际中,\r\n面对同一个问题, 往往有多种学习算法可以选择,\r\n参数配置也会对模型产生影响.</li>\r\n</ul>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png\" class=\"\" title=\"spic2-2\">\r\n<h3 id=\"评估方法\">$ 2.2 评估方法</h3>\r\n<p>通常我们可以通过实验测试对学习器的泛化误差进行评估,\r\n使用<strong>测试集(Testing Set)</strong>测试学习器对新样本的判别能力,\r\n以测试集上<strong>测试误差(Testing Error)</strong>作为泛化误差的近似.\r\n但需要注意的是, 测试集应尽可能与训练集互斥.</p>\r\n<blockquote>\r\n<p>假设我们有且只有一个包含<span\r\nclass=\"math inline\">\\(m\\)</span>个样例的数据集<span\r\nclass=\"math inline\">\\(D = \\{(x_1,y_1),(x_2,y_2), ...,\r\n(x_m,y_m)\\}\\)</span>, 既要训练, 又要测试, 这样就需要对<span\r\nclass=\"math inline\">\\(D\\)</span>进行适当处理, 从中产生\r\n<strong>训练集</strong> <span class=\"math inline\">\\(S\\)</span>和\r\n<strong>测试集</strong> <span class=\"math inline\">\\(T\\)</span>.</p>\r\n</blockquote>\r\n<h4 id=\"留出法hold-out\">$ 2.2.1 留出法(Hold-Out)</h4>\r\n<p>留出法的思路很简单, 直接将数据集<span\r\nclass=\"math inline\">\\(D\\)</span>划分成两个互斥的集合, 即<span\r\nclass=\"math inline\">\\(D = S \\cup T, S \\cap T = \\emptyset\\)</span>.</p>\r\n<p>使用留出法时需要注意训练集和测试集的划分需要保持数据分布一致性,\r\n避免因数据划分引入额外偏差对结果产生影响.\r\n同时单次留出法得到的估计往往并不够准确可靠, 一般采用若干次随机划分,\r\n重复进行实验评估取平均值作为留出法评估结果. 关于划分比例, 通常取2/3 ~\r\n4/5的样本用于训练, 其余用于测试.</p>\r\n<h4 id=\"交叉验证法cross-validation\">$ 2.2.2 交叉验证法(Cross\r\nValidation)</h4>\r\n<p>交叉验证法可以看作是一种具体的留出法, 其方法过程是:</p>\r\n<p>先将数据集<span class=\"math inline\">\\(D\\)</span>划分为<span\r\nclass=\"math inline\">\\(k\\)</span>个大小相似的互斥子集, <span\r\nclass=\"math inline\">\\(D = D_1 \\cup D_2 \\cup ... \\cup D_k, D_i \\cap D_j =\r\n\\emptyset (i \\neq j)\\)</span>, 子集<span\r\nclass=\"math inline\">\\(D_i\\)</span>通过保留类别比例的<strong>分层采样(Stratified\r\nSampling)</strong>来尽可能保持数据分布一致性.</p>\r\n<p>接下来每次取<span class=\"math inline\">\\(k-1\\)</span>个子集作为训练集,\r\n余下一个作为测试集, 进行<span\r\nclass=\"math inline\">\\(k\\)</span>次训练和测试, 最终结果取<span\r\nclass=\"math inline\">\\(k\\)</span>个结果的均值.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png\" class=\"\" title=\"pic2-2\">\r\n<p>显然交叉验证法评估结果的<strong>稳定性(Stability)</strong>和<strong>保真性(Fidelity)</strong>与<span\r\nclass=\"math inline\">\\(k\\)</span>的取值强相关.\r\n故而交叉验证法又称<strong>k折交叉验证(k-fold Cross Validation)</strong>.\r\n最常见的取值是 <span class=\"math inline\">\\(k=10\\)</span>.</p>\r\n<p>由于<span class=\"math inline\">\\(D\\)</span>的<span\r\nclass=\"math inline\">\\(k\\)</span>划分不唯一, k折交叉验证通常也要重复多次,\r\n记为<span class=\"math inline\">\\(p\\)</span>, 最终结果取这<span\r\nclass=\"math inline\">\\(p\\)</span>次k折交叉验证结果的均值.</p>\r\n<p><strong>留一法(Leave-One-Out, LOO)</strong>, <span\r\nclass=\"math inline\">\\(|D| = m\\)</span>, 则令<span\r\nclass=\"math inline\">\\(k = m\\)</span> 就得到了留一法.</p>\r\n<p>留一法的优势是不受样本划分影响(有且仅有一种划分方式), 训练集仅比<span\r\nclass=\"math inline\">\\(D\\)</span>少一个样本,\r\n绝大多数情况下留一法中被评估的模型与期望用<span\r\nclass=\"math inline\">\\(D\\)</span>训练的模型相似.\r\n因此认为留一法评估结果较为准确. 缺点是当<span\r\nclass=\"math inline\">\\(m\\)</span>较大时, 计算开销过大以致无法接受.</p>\r\n<h4 id=\"自助法bootstapping\">$ 2.2.3 自助法(Bootstapping)</h4>\r\n<p>留出法和交叉验证法都保留了一部分样本用于测试,\r\n因此实际评估的模型所使用的训练集比<span\r\nclass=\"math inline\">\\(D\\)</span>小,\r\n必然会引入一些因训练样本规模不同而导致的估计偏差.\r\n留一法的计算复杂度又太高了. 自助法提供了一个较好的解决方案.</p>\r\n<p>自助法直接以 <strong>自助采样法(Bootstrap Sampling)</strong> 为基础.\r\n给定包含<span class=\"math inline\">\\(m\\)</span>个样本的数据集<span\r\nclass=\"math inline\">\\(D\\)</span>, 对其进行采样产生数据集<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>. 采样过程每次随即从<span\r\nclass=\"math inline\">\\(D\\)</span>中挑选一个样本, 将拷贝放入<span\r\nclass=\"math inline\">\\(M&#39;\\)</span>\r\n<strong>(意味着下次采样该样本仍有可能被采样到)</strong>. 重复该过程<span\r\nclass=\"math inline\">\\(m\\)</span>次, 得到了包含<span\r\nclass=\"math inline\">\\(m\\)</span>个样本的数据集<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处\"自助\"为意译,\r\n称<strong>可重复采样/有放回采样</strong>更符合其原理.</p>\r\n</blockquote>\r\n<p>不难看出, 可能存在部分样本被多次采样到, 部分样本未被采样到.\r\n我们关注某个样本在<span\r\nclass=\"math inline\">\\(m\\)</span>次中未被采样的概率,有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\lim_{m \\rightarrow \\infty}(1 - \\frac{1}{m})^m  = \\frac{1}{e} \\approx\r\n0.368 \\tag{2.1}\r\n\\end{equation}\\]</span></p>\r\n<p>通过自主采样, 初始数据集<span\r\nclass=\"math inline\">\\(D\\)</span>中约有<span\r\nclass=\"math inline\">\\(36.8\\%\\)</span>的样本未出现在采样数据集<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>中, 将<span\r\nclass=\"math inline\">\\(D&#39;\\)</span>作为训练集, <span\r\nclass=\"math inline\">\\(D \\backslash D&#39;\\)</span>作为测试集.\r\n这样的测试结果称为<strong>包外估计(Out-Of-Bagestimate)</strong>.</p>\r\n<p>自助法在数据集较小, 难以有效划分训练和测试集的时候具有优势.\r\n但自助法产生的数据集改变了初始数据集的分布, 会引入估计误差.\r\n初始数据集较大时更常用留出法和交叉验证法.</p>\r\n<h4 id=\"调参与最终模型\">$ 2.2.4 调参与最终模型</h4>\r\n<p><strong>参数(Parameter)</strong>和<strong>调参(Parameter\r\nTuning)</strong>释义见名称.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 机器学习常涉及两类参数:\r\n算法参数和模型参数.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>验证集(Validation Set):</strong>\r\n模型评估与选择中用于评估测试的数据集常称为验证集.</p>\r\n<blockquote>\r\n<p><strong>Additonal:</strong> 关于训练集, 测试集和验证集的区别,\r\n笔者在此参考<a\r\nhref=\"https://zhuanlan.zhihu.com/p/98532085\"><strong>[知乎|训练集、验证集、测试集]</strong></a></p>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"性能度量\">$ 2.3 性能度量</h3>\r\n<ul>\r\n<li><strong>性能度量(Performance Measure):</strong>\r\n衡量模型泛化能力的评价标准. 显然该标准取决于任务需求.</li>\r\n</ul>\r\n<p>以预测任务为例, 给定样例集<span class=\"math inline\">\\(D =\r\n\\{(\\boldsymbol{x_1}, y_1), (\\boldsymbol{x_2}, y_2), ...,\r\n(\\boldsymbol{x_m}, y_m)\\}\\)</span>, 其中<span\r\nclass=\"math inline\">\\(y_i\\)</span>是<span\r\nclass=\"math inline\">\\(\\boldsymbol{x_i}\\)</span>的真实标记,\r\n评估学习器<span class=\"math inline\">\\(f\\)</span>的性能,\r\n需要比较预测结果<span class=\"math inline\">\\(f(x)\\)</span>与真实标记<span\r\nclass=\"math inline\">\\(y\\)</span>.</p>\r\n<p>回归任务常用性能度量<strong>均方误差(Mean Squared Error)</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}(f(\\boldsymbol{x_i}) - y_i)^2\r\n\\tag{2.2}\r\n\\end{equation}\\]</span></p>\r\n<p>更一般地, 对于数据分布<span\r\nclass=\"math inline\">\\(\\mathcal{D}\\)</span>和概率密度函数<span\r\nclass=\"math inline\">\\(p(\\cdot)\\)</span>, 均方误差描述为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;\\mathcal{D}) = \\int_{x \\sim \\mathcal{D}}^{}(f(\\boldsymbol{x}) - y)^2\r\np(\\boldsymbol{x}) d\\boldsymbol{x} \\tag{2.3}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"错误率与精度\">$ 2.3.1 错误率与精度</h4>\r\n<p>错误率和精度是分类任务中最常用的两种性能度量.</p>\r\n<p>对于样例集<span class=\"math inline\">\\(\\mathcal{D}\\)</span>,\r\n错误率和精度定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) \\neq\r\ny_i) \\tag{2.4}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nacc(f;D) = \\frac{1}{m} \\sum_{i=1}^{m}\\mathbb{I}(f(\\boldsymbol{x_i}) =\r\ny_i) = 1 - E(f;D) \\tag{2.5}\r\n\\end{equation}\\]</span></p>\r\n<p>对于数据分布<span\r\nclass=\"math inline\">\\(\\mathcal{D}\\)</span>和概率密度函数<span\r\nclass=\"math inline\">\\(p(\\cdot)\\)</span>, 错误率和精度定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;\\mathcal{D}) = \\int_{x \\sim\r\n\\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) \\neq y) p(\\boldsymbol{x})\r\nd\\boldsymbol{x} \\tag{2.6}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nacc(f;\\mathcal{D}) = \\int_{x \\sim\r\n\\mathcal{D}}^{}\\mathbb{I}(f(\\boldsymbol{x}) = y) p(\\boldsymbol{x})\r\nd\\boldsymbol{x} = 1 - E(f;\\mathcal{D}) \\tag{2.7}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"查准率precision-查全率recall-f1\">$ 2.3.2 查准率(Precision),\r\n查全率(Recall), F1</h4>\r\n<p>有时我们更关心模型的正确率,\r\n比如说\"挑选出来的瓜有多少是好瓜\",\"有多少好瓜被挑选出来了\",\r\n查准率和查全率更适合用来度量.</p>\r\n<p>对于二分类问题, 我们有<strong>混淆矩阵(Confusion Matrix)</strong></p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png\" class=\"\" title=\"tab2-1\">\r\n<p>定义查准率<span class=\"math inline\">\\(P\\)</span>, 查全率<span\r\nclass=\"math inline\">\\(R\\)</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP = \\frac{TP}{TP + FP}\\tag{2.8}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP = \\frac{TP}{TP + FN}\\tag{2.9}\r\n\\end{equation}\\]</span></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 自然语言解释就是,\r\n查准率是在预测正确中实际正确的比率,\r\n查全率是在实际正确中预测正确的比率.</p>\r\n</blockquote>\r\n<p>查准率和查全率是一对矛盾的度量, 二者负相关.\r\n是<strong>sound</strong>和<strong>complete</strong>的关系</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png\" class=\"\" title=\"spic2-1\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 该图片截选自NJU软件分析课件,\r\n<del>ly和tt老师应该不会在意吧(雾)</del></p>\r\n<p>课程地址链接<a\r\nhref=\"https://tai-e.pascal-lab.net/lectures.html\"><strong>[Static\r\nProgram Analysis]</strong></a></p>\r\n</blockquote>\r\n<p>查准率和查全率的关系可以用<strong>P-R图</strong>表示</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png\" class=\"\" title=\"pic2-3\">\r\n<ul>\r\n<li><strong>平衡点(Break-Even Point, BEP):</strong> <span\r\nclass=\"math inline\">\\(P=R\\)</span>时的取值,\r\n可基于BEP评估两个学习器的优劣, 如图2-3, 可认为<span\r\nclass=\"math inline\">\\(A&gt;B&gt;C\\)</span></li>\r\n</ul>\r\n<p>比BEP更常用的是<span class=\"math inline\">\\(F1\\)</span>度量定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nF1 = \\frac{2 \\times P \\times R}{P + R} = \\frac{2 \\times TP}{样例总数 +\r\nTP - TN}\\tag{2.10}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math inline\">\\(F_{\\beta}\\)</span>是<span\r\nclass=\"math inline\">\\(F_1\\)</span>的一般形式, 定义为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nF_{\\beta} = \\frac{(1 + \\beta^2) \\times P \\times R}{(\\beta^2 \\times P) +\r\nR}\\tag{2.11}\r\n\\end{equation}\\]</span></p>\r\n<p>其中<span class=\"math inline\">\\(\\beta &gt;\r\n0\\)</span>度量了查全率对查准率的相对重要性, <span\r\nclass=\"math inline\">\\(\\beta = 1\\)</span>时退化为<span\r\nclass=\"math inline\">\\(F_1\\)</span>, <span class=\"math inline\">\\(\\beta\r\n&gt; 1\\)</span>时查全率影响更大, <span class=\"math inline\">\\(\\beta &lt;\r\n1\\)</span>时查准率影响更大.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong></p>\r\n<p><span class=\"math inline\">\\(F_1\\)</span>基于调和平均定义, <span\r\nclass=\"math inline\">\\(\\frac{1}{F_1} = \\frac{1}{2} \\cdot (\\frac{1}{P} +\r\n\\frac{1}{R})\\)</span>.</p>\r\n<p><span class=\"math inline\">\\(F_\\beta\\)</span>基于加权调和平均定义,\r\n<span class=\"math inline\">\\(\\frac{1}{F_\\beta} = \\frac{1}{1 + \\beta^2}\r\n\\cdot (\\frac{1}{P} + \\frac{\\beta^2}{R})\\)</span></p>\r\n</blockquote>\r\n<p>若在n个二分类混淆矩阵上考察准确率和查全率,\r\n我们有<strong>macro</strong>和<strong>micro</strong>两种选择.</p>\r\n<p>对于<strong>宏(macro)</strong>, 在各个混淆矩阵上分别计算<span\r\nclass=\"math inline\">\\(P\\)</span>和<span\r\nclass=\"math inline\">\\(R\\)</span>,\r\n再取平均.得到<strong>宏查准率(macro-P)</strong>,\r\n<strong>宏查全率(macro-R)</strong>, <strong>宏F1(macro-F1)</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmacro\\text{-}P = \\frac{1}{n} \\sum_{i=1}^{n} P_i\\tag{2.12}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmacro\\text{-}R = \\frac{1}{n} \\sum_{i=1}^{n} R_i\\tag{2.13}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmacro\\text{-}F1 = \\frac{2 \\times macro\\text{-}P \\times\r\nmacro\\text{-}R}{macro\\text{-}P + macro\\text{-}R}\\tag{2.14}\r\n\\end{equation}\\]</span></p>\r\n<p>对于<strong>微(micro)</strong>, 先平均混淆矩阵得到$, , , $,\r\n再计算出<strong>微查准率(micro-P)</strong>,\r\n<strong>微查全率(micro-R)</strong>, <strong>微F1(micro-F1)</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmicro\\text{-}P =\r\n\\frac{\\overline{TP}}{\\overline{TP}+\\overline{FP}}\\tag{2.15}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmicro\\text{-}R = \\frac{\\overline{TP}}{\\overline{TP}+\\overline{FN}}\r\n\\tag{2.16}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nmicro\\text{-}F1 = \\frac{2 \\times micro\\text{-}P \\times\r\nmicro\\text{-}R}{micro\\text{-}P + micro\\text{-}R}\\tag{2.17}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"roc与auc\">$ 2.3.3 ROC与AUC</h4>\r\n<p>现重新考虑查准率和查全率, 首先我们来看看学习器如何给正/反的分类.</p>\r\n<p>很多学习器为测试样本产生一个实值或概率预测,\r\n将预测值与<strong>分类阈值(Threshold)</strong>比较, 大于阈值则为正类,\r\n否则为反类. 根据该实值或概率预测进行排序, 概率高的在前, 概率低的在后,\r\n则这个分类阈值就是<strong>截断点(Cut Point)</strong>, 前一部分为正例,\r\n后一部分为负例.</p>\r\n<p>不难得到以下结论: 截断点越靠前, 查准率增高而查全率降低; 截断点越靠后,\r\n查准率降低而查全率增高. 同时,\r\n排序质量越好的学习器\"在一般情况下\"泛化性能越好,\r\nROC基于此度量模型的泛化能力.</p>\r\n<p><strong>受试者工作特征(Receiver Operating Characteristic,\r\nROC)</strong>, 根据学习器的预测结果对样例进行排序,\r\n顺序逐个把样本作为正例进行预测(选择不同的截断点),计算\r\n<strong>真正例率(True Positive Rate, TPR)</strong>,\r\n<strong>假正例率(False Positive Rate, FPR)</strong> 作为纵横轴.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nTPR = \\frac{TP}{TP + FN}\r\n\\tag{2.18}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nFPR = \\frac{FP}{TN + FP}\r\n\\tag{2.19}\r\n\\end{equation}\\]</span></p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png\" class=\"\" title=\"pic2-4\">\r\n<p>对角线对应随即猜测模型, 点(0, 1)对应所有正例在负例前的理想模型.</p>\r\n<ul>\r\n<li><strong>AUC(Area Under ROC Curve):</strong> ROC曲线下面积.\r\n为依据两个模型绘制的ROC曲线比较两个模型的优劣而引入.</li>\r\n</ul>\r\n<p>对于离散样本, 计算AUC:</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nAUC = \\frac{1}{2} \\sum^{m - 1}_{i=1}(x_{i+1} - x_i)\\cdot(y_i + y_{i + 1}\r\n)\r\n\\tag{2.19}\r\n\\end{equation}\\]</span></p>\r\n<p>形式化上AUC度量排序质量, 记有<span\r\nclass=\"math inline\">\\(m^+\\)</span>个正例, <span\r\nclass=\"math inline\">\\(m^-\\)</span>个反例, 令<span\r\nclass=\"math inline\">\\(D^+\\)</span>为正例集合, <span\r\nclass=\"math inline\">\\(D^-\\)</span>为负例集合,\r\n定义排序<strong>损失(loss):</strong></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mathscr{l}_{rank} = \\frac{1}{m^+ m^-}\\sum_{x^+ \\in D^+} \\sum_{m^- \\in\r\nD^-}\\left(\\mathbb{I}(f(x^+)&lt;f(x^-)) + \\frac{1}{2} \\mathbb{I}(f(x^+)=\r\nf(x^-))\\right)\r\n\\tag{2.21}\r\n\\end{equation}\\]</span></p>\r\n<p>如何理解这个式子? 考虑每一对正反例, 若正例小于反例记一个\"罚分\",\r\n相等则记半个. 不难看出, 对于每个正例/负例, 可能造成的\"罚分\"与其\"位置\",\r\n越\"错误\"的位置会引起越多的\"罚分\", 这与AUC计算过程及其相似. 实际上, <span\r\nclass=\"math inline\">\\(\\mathscr{l}_{rank}\\)</span>对应ROC曲线上方的面积,\r\n有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nAUC = 1 - \\mathscr{l}_{rank}\r\n\\tag{2.22}\r\n\\end{equation}\\]</span></p>\r\n<h4 id=\"代价敏感错误率与代价曲线\">$ 2.3.4 代价敏感错误率与代价曲线</h4>\r\n<p>为权衡不同类型错误所造成的不同损失,\r\n我们为错误赋予<strong>非均等代价(UnEqual Cost)</strong>.</p>\r\n<p>以二分类为例, <strong>代价矩阵(Cost Matrix)</strong>如下:</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png\" class=\"\" title=\"tab2-2\">\r\n<p>若将0类记为正例, 1类记为负例, 定义<span class=\"math inline\">\\(D^+,\r\nD^-\\)</span>, <strong>代价敏感(Cost-Sensitive)</strong> 错误率为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D;cost) = \\frac{1}{m} \\left(\\sum_{\\boldsymbol{x}_i \\in D^+}\r\n\\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i) \\times cost_{01} +\r\n\\sum_{\\boldsymbol{x}_i \\in D^-} \\mathbb{I}(f(\\boldsymbol{x}_i) \\neq y_i)\r\n\\times cost_{10}\\right)\r\n\\tag{2.23}\r\n\\end{equation}\\]</span></p>\r\n<p>非均等情况下, <strong>代价曲线(Cost\r\nCurve)</strong>可以解决ROC曲线不能反映出学习器的期望<strong>总体代价(Total\r\nCost)</strong>问题.</p>\r\n<p>其横轴是取值为<span\r\nclass=\"math inline\">\\([0,1]的\\)</span>正例概率代价, 其中<span\r\nclass=\"math inline\">\\(p\\)</span>为样例是正例的概率</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP(+)cost=\\frac{p \\times cost_{01}}{p \\times cost_{01} + (1 - p) \\times\r\ncost_{10}}\r\n\\tag{2.24}\r\n\\end{equation}\\]</span></p>\r\n<p>纵轴是取值为<span\r\nclass=\"math inline\">\\([0,1]\\)</span>的归一化代价,FPR为假正例率,\r\nFNR为假反例率</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\ncost_{norm} = \\frac{FNR \\times p \\times cost_{01} + FPR \\times (1 - p)\r\n\\times cost_{10}}{p \\times cost_{01} + (1 - p) \\times cost_{10}}\r\n\\tag{2.25}\r\n\\end{equation}\\]</span></p>\r\n<p>绘制代价曲线时, ROC曲线上每个点对应代价平面上的一条线段,\r\n设ROC点坐标为<span class=\"math inline\">\\((FPR, TPR)\\)</span>,\r\n然后在代价平面上绘制一条从<span class=\"math inline\">\\((0,\r\nFPR)\\)</span>到<span class=\"math inline\">\\((1, FNR)\\)</span>的线段,\r\n线段下面积代表了该条件下的期望总体代价.如此为每个点绘制线段, 取线段下界,\r\n围成面积即为在所有条件下学习器的总体期望代价.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png\" class=\"\" title=\"pic2-5\">\r\n<blockquote>\r\n<p><strong>Addtional:</strong> 如何理解代价曲线?</p>\r\n<p>笔者在此给出一篇参考<a\r\nhref=\"https://www.zhihu.com/question/63492375\"><strong>[知乎|代价曲线的理解]</strong></a>.这篇参考中对大部分问题给到了解释.</p>\r\n<p>在此额外补充一点困惑笔者许久的问题, 每一条线段代表什么?</p>\r\n<p>每一条线段代表当前<strong>阈值</strong>条件下,\r\n对不同样本集的期望代价. 具体来说,\r\n是以FPR和FNR为预测值对不同样本集的预测.</p>\r\n</blockquote>\r\n<h3 id=\"比较检验\">$ 2.4 比较检验</h3>\r\n<p><strong>统计假设检验(Hypothesis Test)</strong>\r\n为比较学习器性能提供了重要依据. 本节默认以错误率为性能度量, 用<span\r\nclass=\"math inline\">\\(\\epsilon\\)</span>表示.</p>\r\n<h4 id=\"假设检验\">$ 2.4.1 假设检验</h4>\r\n<p>现实中我们无法知道学习器的泛化错误率 <span\r\nclass=\"math inline\">\\(\\epsilon\\)</span>, 只能获知其测试错误率 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon}\\)</span>.\r\n常用测试错误率估推出泛化错误率.</p>\r\n<p>对于 <span class=\"math inline\">\\(m\\)</span> 个测试样本,\r\n如果测试错误率为 <span class=\"math inline\">\\(\\hat{\\epsilon}\\)</span>,\r\n则被误分类的样本数量 <span class=\"math inline\">\\(m&#39;=\\hat{\\epsilon}\r\n\\times m\\)</span>, 假定测试样本从样本总体分布中独立采样获得,\r\n由<strong>二项(Binomial)分布</strong>, 泛化错误率为 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon}\\)</span> 的学习器恰有 <span\r\nclass=\"math inline\">\\(m&#39;\\)</span> 个样本被误分类的概率是 <span\r\nclass=\"math inline\">\\(\\binom{m}{m&#39;}\\epsilon^{m&#39;}(1-\\epsilon)^{m-m&#39;}\\)</span>\r\n. 同时, 这也表示泛化错误率为 <span\r\nclass=\"math inline\">\\(\\epsilon\\)</span> 的学习器在<span\r\nclass=\"math inline\">\\(m\\)</span>个样本上测试得到测试错误率为 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon}\\)</span> 的概率:</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nP(\\hat{\\epsilon};\\epsilon)=\\binom{m}{\\hat{\\epsilon} \\times m}\r\n\\epsilon^{\\hat{\\epsilon} \\times m} (1 - \\epsilon)^{m - \\hat{\\epsilon}\r\n\\times m}\r\n\\tag{2.26}\r\n\\end{equation}\\]</span></p>\r\n<p>由二项分布性质, 或者计算 <span\r\nclass=\"math inline\">\\(P(\\hat{\\epsilon};\\epsilon)\\)</span> 对 <span\r\nclass=\"math inline\">\\(\\epsilon\\)</span> 的偏导, 可以知道 <span\r\nclass=\"math inline\">\\(P(\\hat{\\epsilon};\\epsilon)\\)</span> 在 <span\r\nclass=\"math inline\">\\(\\epsilon = \\hat{\\epsilon}\\)</span> 时最大, <span\r\nclass=\"math inline\">\\(|\\epsilon - \\hat{\\epsilon}|\\)</span> 增大时 <span\r\nclass=\"math inline\">\\(P(\\hat{\\epsilon};\\epsilon)\\)</span> 减小.</p>\r\n<p>若取 <span class=\"math inline\">\\(m=10, \\epsilon = 0.3\\)</span>,\r\n示意图如2.6所示.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png\" class=\"\" title=\"pic2-6\">\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n<del>死去的《概率论与数理统计》突然复活起来攻击我</del>, 推荐复习笔记<a\r\nhref=\"https://zhuanlan.zhihu.com/p/243215469\"><strong>[知乎|概率论与数理统计复习整理]</strong></a>.</p>\r\n</blockquote>\r\n<p>由<strong>二项检验(Binomial Test)</strong>, 考虑假设<span\r\nclass=\"math inline\">\\(\\epsilon \\leq \\epsilon_0\\)</span>, 在 <span\r\nclass=\"math inline\">\\(1 - \\alpha\\)</span>\r\n的概率内能观测到的最大错误率为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\bar{\\epsilon} = \\min \\epsilon \\ \\ \\text{s.t.} \\ \\ \\sum_{i = \\epsilon\r\n\\times m + 1}^{m} \\binom{m}{i}\\epsilon_0^i (1 - \\epsilon_0)^{m - i} &lt;\r\n\\alpha\r\n\\tag{2.27}\r\n\\end{equation}\\]</span></p>\r\n<p>其中 <span class=\"math inline\">\\(1-\\alpha\\)</span>\r\n为<strong>置信度(Confidence)</strong>, 直观上对应图2.6的非阴影部分;\r\n\"s.t.\"是\"subject to\", 使左边式子在右边式子条件满足时成立.</p>\r\n<p>若测试错误率 <span class=\"math inline\">\\(\\hat{\\epsilon}\\)</span>\r\n大于临界值 <span class=\"math inline\">\\(\\bar{\\epsilon}\\)</span>,\r\n由二项检验, 我们可以认为在 <span class=\"math inline\">\\(\\alpha\\)</span>\r\n的显著度下, 假设 <span class=\"math inline\">\\(\\epsilon \\leq\r\n\\hat{\\epsilon}\\)</span> 不能被拒绝, 即能以 <span\r\nclass=\"math inline\">\\(1-\\alpha\\)</span> 的置信度认为,\r\n学习器的泛化错误率不高于 <span\r\nclass=\"math inline\">\\(\\epsilon_0\\)</span>; 否则可以拒绝假设, 在 <span\r\nclass=\"math inline\">\\(\\alpha\\)</span>\r\n的显著度下可认为学习器的泛化错误率大于 <span\r\nclass=\"math inline\">\\(\\epsilon_0\\)</span>.</p>\r\n<p>在通过多次测试中中我们会获得多个测试错误率,\r\n此时可使用<strong>t检验(t-test)</strong>.</p>\r\n<p>设<span class=\"math inline\">\\(k\\)</span>个错误率 <span\r\nclass=\"math inline\">\\(\\hat{\\epsilon_1}, \\hat{\\epsilon_2}, ...,\r\n\\hat{\\epsilon_k}\\)</span>, 则平均错误率 <span\r\nclass=\"math inline\">\\(\\mu\\)</span>, 方差 <span\r\nclass=\"math inline\">\\(\\sigma^2\\)</span> 为</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mu = \\frac{1}{k} \\sum_{i=1}^k \\hat{\\epsilon_i}\r\n\\tag{2.28}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\sigma^2=\\frac{1}{k-1} \\sum^{k}_{i=1}(\\hat{\\epsilon_i} - \\mu)^2\r\n\\tag{2.29}\r\n\\end{equation}\\]</span></p>\r\n<p><span class=\"math inline\">\\(k\\)</span> 个测试错误率可看作是泛化错误率\r\n<span class=\"math inline\">\\(\\epsilon_0\\)</span> 的独立采样, 则变量</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\tau_t=\\frac{\\sqrt{k} (\\mu - \\epsilon_0)}{\\sigma}\r\n\\tag{2.30}\r\n\\end{equation}\\]</span></p>\r\n<p>服从自由度为 <span class=\"math inline\">\\(k-1\\)</span> 的 <span\r\nclass=\"math inline\">\\(t\\)</span> 分布.</p>\r\n<blockquote>\r\n<p><strong>Addtional:</strong> <strong>基础知识补充</strong></p>\r\n<p><span class=\"math inline\">\\(\\chi^2\\)</span> 分布: <span\r\nclass=\"math inline\">\\(X_1, X_2, ..., X_n\\)</span> 为独立同分布随机变量,\r\n服从 <span class=\"math inline\">\\(N(0, 1)\\)</span>, 则 <span\r\nclass=\"math inline\">\\(\\chi^2_n = \\sum_{i=1}^n X^2_i\\)</span>\r\n为服从自由度为 <span class=\"math inline\">\\(n\\)</span> 的 <span\r\nclass=\"math inline\">\\(\\chi^2\\)</span> 分布</p>\r\n<p><span class=\"math inline\">\\(t\\)</span> 分布: <span\r\nclass=\"math inline\">\\(X \\sim N(0,1), Y \\sim \\chi^2(n)\\)</span>, <span\r\nclass=\"math inline\">\\(X,Y\\)</span> 独立, 称 <span\r\nclass=\"math inline\">\\(T = \\frac{X}{\\sqrt{\\frac{Y}{n}}}\\)</span>\r\n为服从自由度为 <span class=\"math inline\">\\(n\\)</span> 的 <span\r\nclass=\"math inline\">\\(t\\)</span> 分布.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>Tips:</strong> <strong>推导补充</strong></p>\r\n<p>原书中没有关于这个<span\r\nclass=\"math inline\">\\(\\tau_t\\)</span>服从<span\r\nclass=\"math inline\">\\(t\\)</span>分布的推导, 笔者在此给出补充.</p>\r\n<p>假设<span\r\nclass=\"math inline\">\\(X_1,X_2,...X_n\\)</span>是来自正态总体<span\r\nclass=\"math inline\">\\(N(\\mu,\\sigma^2)\\)</span>的样本.\r\n我们有以下重要统计量:</p>\r\n<p><span class=\"math display\">\\[\r\n\\begin{align}\r\n\\nonumber\\text{样本均值}&amp; \\ \\bar{X}=\\frac{1}{n}\\sum_{i=1}^n &gt;X_i\r\n\\\\\r\n\\nonumber\\text{样本方差}&amp; \\\r\nS^2=\\frac{1}{n-1}\\sum_{i-1}^{n}(X_i-\\bar{X})^2\r\n\\end{align}\r\n\\]</span></p>\r\n<p>我们有几个重要结论:</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png\" class=\"\" title=\"spic2-3\">\r\n<p>故而有推论:</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png\" class=\"\" title=\"spic2-4\">\r\n</blockquote>\r\n<p>对假设<span\r\nclass=\"math inline\">\\(\\mu=\\epsilon_0\\)</span>和显著度<span\r\nclass=\"math inline\">\\(\\alpha\\)</span>, 可以算出临界值——在<span\r\nclass=\"math inline\">\\(1-\\alpha\\)</span>内能观测到的最大错误率.\r\n考虑<strong>双边假设(Two-Tailed)</strong>, 若<span\r\nclass=\"math inline\">\\(\\tau_t\\)</span>位于临界区<span\r\nclass=\"math inline\">\\([t_{-\\alpha/2},t_{\\alpha/2}]\\)</span>内(如图2.7所示),\r\n则不能拒绝假设<span class=\"math inline\">\\(\\mu=\\epsilon_0\\)</span>.\r\n我们可以认为泛化错误率为<span\r\nclass=\"math inline\">\\(\\epsilon_0\\)</span>.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png\" class=\"\" title=\"pic2-7\">\r\n<h4 id=\"多学习器比较\">$ 2.4.2 多学习器比较</h4>\r\n<p>笔者对这部分不做过多记录, 翻阅原书该部分即可.</p>\r\n<p>对于两个学习器,我们有</p>\r\n<ul>\r\n<li>交叉验证t检验(基于成对t 检验)</li>\r\n<li>McNember检验(基于列联表，卡方检验)</li>\r\n</ul>\r\n<p>对于多个学习器,我们有</p>\r\n<ul>\r\n<li>Friedman检验(基于序值，F检验; 判断”是否都相同”)</li>\r\n<li>Nemenyi后续检验(基于序值，进一步判断两两差别)</li>\r\n</ul>\r\n<h3 id=\"偏差与方差\">2.5 偏差与方差</h3>\r\n<ul>\r\n<li><strong>偏差-方差分解(Bias-variance Decomposition)</strong></li>\r\n</ul>\r\n<p>对测试样本<span class=\"math inline\">\\(\\boldsymbol{x}\\)</span>,\r\n令<span class=\"math inline\">\\(y_D\\)</span>为<span\r\nclass=\"math inline\">\\(\\boldsymbol{x}\\)</span>在数据集的集中标记, <span\r\nclass=\"math inline\">\\(y\\)</span>为<span\r\nclass=\"math inline\">\\(\\boldsymbol{x}\\)</span>的真实标记, <span\r\nclass=\"math inline\">\\(f(\\boldsymbol{x};D)\\)</span>为训练集<span\r\nclass=\"math inline\">\\(D\\)</span>上的学得模型<span\r\nclass=\"math inline\">\\(f\\)</span>在<span\r\nclass=\"math inline\">\\(\\boldsymbol{x}\\)</span>上的预测输出.</p>\r\n<p>以回归算法为例, 我们有如下定义(符号定义见<a\r\nhref=\"http://localhost:4000/2024/09/18/BookNote-MachineLearning-by-ZhihuaZhou-1/#chapter-0-%E4%B8%BB%E8%A6%81%E7%AC%A6%E5%8F%B7%E8%A1%A8\"><strong>[Lapluma|读书笔记-机器学习\r\nCh0-Ch1]</strong></a>):</p>\r\n<p>学习算法的期望预测.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\bar{f}(\\boldsymbol{x})=\\mathbb{E}_D[f(\\boldsymbol{x};D)]\r\n\\tag{2.37}\r\n\\end{equation}\\]</span></p>\r\n<p>使用样本数相同的不同训练集产生的方差,\r\n度量了同样大小的训练集变动导致的学习性能变化,\r\n刻画了数据扰动造成的影响.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mathcal{var}(\\boldsymbol{x})=\\mathbb{E}_D[(f(\\boldsymbol{x};D)-\\bar{f}(x))^2]\r\n\\tag{2.38}\r\n\\end{equation}\\]</span></p>\r\n<p>噪声, 在当前学习任务上任何学习算法所能达到的期望泛化误差下界,\r\n刻画了学习问题本身的难度.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\varepsilon^2=\\mathbb{E}_D[(y_D-y)^2]\r\n\\tag{2.39}\r\n\\end{equation}\\]</span></p>\r\n<p>期望输出与真实标记的差别称为偏差,\r\n度量了学习算法的期望预测与真是结果的偏离程度,\r\n刻画了学习算法本身的拟合能力.</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\n\\mathcal{bias}^2(\\boldsymbol{x})=(\\bar{f}(\\boldsymbol{x})-y)^2\r\n\\tag{2.40}\r\n\\end{equation}\\]</span></p>\r\n<p>便于讨论,我们假定噪声期望为0, 即<span\r\nclass=\"math inline\">\\(\\mathbb{E}_D[y_D-y]=0\\)</span>,\r\n对期望泛化误差进行分解(推导略, 见原书), 有</p>\r\n<p><span class=\"math display\">\\[\\begin{equation}\r\nE(f;D)=bias^2(\\boldsymbol{x})+var(\\boldsymbol{x})+\\varepsilon ^2\r\n\\tag{2.42}\r\n\\end{equation}\\]</span></p>\r\n<p>即泛化误差可以分解为偏差, 方差和噪声之和.</p>\r\n<p>一般来说, 偏差和方差存在冲突, 称为<strong>偏差-方差窘境(Bias-Variance\r\nDilemma)</strong>,见图2-9.</p>\r\n<img src=\"/2024/09/24/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png\" class=\"\" title=\"pic2-9\">\r\n<p>训练不足时, 学习器拟合能力不足,\r\n训练数据的扰动不足以使学习器产生显著变化,\r\n此时偏差主导了泛化错误率;训练程度加深, 学习器拟合能力增强,\r\n训练数据发生的扰动被学习器学习到, 方差逐渐主导了泛化错误率;训练充足后,\r\n学习器拟合能力非常强. 训练数据发生轻微扰动都会导致学习器发生显著变化,\r\n此时训练数据自身,非全局的性质被学习器学习, 发生过拟合.</p>"},{"title":"读书笔记-On Java8 Ch0-Ch2","date":"2024-10-30T11:49:40.000Z","hidden":false,"_content":"\n**你所使用的编程语言会将你的思维模式固化并逐渐远离其他语言, 而且往往发生在潜移默化中. Java作为一门傲娇的语言尤其如此. —— Bruce Eckel**\n\n<!--more-->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [书籍基本信息](#书籍基本信息)\n- [Chapter0 简介\\&前言](#chapter0-简介前言)\n- [Chapter1 对象的概念](#chapter1-对象的概念)\n  - [抽象](#抽象)\n    - [所有编程语言都提供抽象机制](#所有编程语言都提供抽象机制)\n    - [\"纯粹\"OOP五大基本特征(Alan Kay)](#纯粹oop五大基本特征alan-kay)\n    - [Grady Booch对对象的描述](#grady-booch对对象的描述)\n  - [接口](#接口)\n  - [服务提供](#服务提供)\n  - [封装](#封装)\n    - [使用访问控制的原因](#使用访问控制的原因)\n    - [Java访问控制关键字](#java访问控制关键字)\n  - [复用](#复用)\n    - [关联关系](#关联关系)\n  - [继承](#继承)\n    - [区分基类与派生类](#区分基类与派生类)\n    - [is-a 与 is-like-a](#is-a-与-is-like-a)\n  - [多态](#多态)\n  - [单继承结构](#单继承结构)\n  - [容器](#容器)\n    - [泛型](#泛型)\n  - [对象创建与生命周期](#对象创建与生命周期)\n  - [异常处理](#异常处理)\n- [Chapter2 安装Java和本书用例](#chapter2-安装java和本书用例)\n\n---\n\n## 书籍基本信息\n\nBruce Eckel \"最新\"力作*On Java 8*, 笔者因为课程需要遂阅读本书. 可以从[**此处**](https://github.com/Knn120/OnJava8-PDF)获取电子书文件.\n\n需要注意的是, 阅读本书需要一定的编程基础.\n\n## Chapter0 简介&前言\n\n> **语言决定世界观. —— 路德维希·维特根斯坦(Wittgenstein)**\n\n- Java的最核心变化: **虚拟机** 和 **垃圾回收机制**\n\n- 编程的过程就是复杂性管理的过程: 业务问题的复杂性, 以及依赖的计算机的复杂性.\n\n*Thing in C* 可以在官方地址[www.OnJava8.com](www.OnJava8.com)免费下载.\n\n示例代码可以通过官方地址[https://github.com/BruceEckel/OnJava8-examples](https://github.com/BruceEckel/OnJava8-examples)中下载.\n\n## Chapter1 对象的概念\n\n> **我们没有意识到惯用语言的结构有多大力量. 可以毫不夸张地说, 它通过语义反应机制奴役我们. 语言表现出来并在无意识中给我们留下深刻印象的结构会自动投射到我们周围的世界. —— Alfred Korzybski(1930)**\n\n- 面向对象编程(Object-Oriented Programming, OOP)是一种编程思维方式和编码架构.\n\n### 抽象\n\n#### 所有编程语言都提供抽象机制\n\n某种程度上, 问题的复杂度直接取决于抽象的类型和质量.\n\n- 汇编语言是对底层机器的轻微抽象.\n\n- \"命令式\"语言(FORTRAN, BASIC, C)是对汇编语言的抽象.\n\n    > **Tips:** 命令式语言的抽象原理依然要求程序员着重考虑计算机的结构而非问题本身的结构.\n\n程序员必须要在**机器模型(解决方案空间)** 和实际解决的**问题模型(问题空间)** 之间建立一种关联. 这个过程既费精力, 又脱离编程语言本身的范畴.\n\n- 问题空间中的元素以及它们在解决方案空间的表示称作**对象(Object)**.\n\n- OOP允许程序员根据问题来描述问题, 而不是根据运行解决方案的计算机.\n\n    > **Tips:** 每个对象都类似一台小计算机, 有自己的状态并且可以进行特定的操作; 与现实中的\"对象\"或\"物体\"相似, 有自己的特征和行为.\n\n#### \"纯粹\"OOP五大基本特征(Alan Kay)\n\n- 万物皆对象.\n  \n- 程序是一组对象, 通过消息传递来告知彼此该做什么.\n\n- 每个对象有自己的存储空间, 可容纳其他对象.\n\n- 每个对象都有一种类型.\n\n- 同一类所有对象都能接收相同信息.\n\n    > **Tips:** 这个表述有点抽象, 结合书中的解释会有所理解.\n    >\n    > 由于类型为“圆”（Circle）的一个对象也属于类型为“形状”（Shape）的一个对象，所以一个圆完全能接收发送给“形状”的消息。这意味着可让程序代码统一指挥“形状”，令其自动控制所有符合“形状” 描述的对象，其中自然包括 “圆”。这一特性称为对象的“可替换性”，是OOP最重要的概念之一。\n\n#### Grady Booch对对象的描述\n\n- 一个对象具有自己的状态, 行为和标识. 即对象有自己的内部数据(提供状态), 方法(产生行为), 并彼此区分(每个对象[笔者注: 称之为实例instance或许更好理解]在内存中有唯一的地址).\n\n### 接口\n\n我们向对象发出的请求是通过它的**接口(Interface)**定义的, 对象的**类型** 或 **类** 规定了接口形式.\n\n假设我们有一个`Class Light`, 其**统一建模语言(Unified Modeling Language, UML)** 设计图如下:\n\n![pic1-1](BookNote-OnJava8-by-BruceEckel-1/pic1-1.png)\n\n可以通过这样的方式调用:\n\n```java\nLight lt = new Light()\nlt.on()\n```\n\n### 服务提供\n\n在开发或理解程序设计时, 可以将对象看成是**服务提供者**. 程序本身为用户提供服务, 并且能通过调用其他对象提供的服务来实现.\n\n在开发时, 可以将分体一一分解, 抽象成一组服务, 每个对象都提供了一组紧密的服务.\n\n软件设计的基本原则是**高内聚**: 每个组件内部作用明确, 功能紧密相关.\n\n### 封装\n\n- 编程的侧重领域可以划分为**研发** 和 **应用**. 应用程序员调用研发程序员构建的基础工具来做快速开发.\n\n#### 使用访问控制的原因\n\n- 让应用程序员不要触摸他们不应该触摸的部分.\n\n- 使类库的创建者(研发程序员)在不影响应用程序员使用的情况下完善更新工具库.\n\n#### Java访问控制关键字\n\n- **public**: 任何人都可以访问和使用.\n\n- **private**: 除了类本身和类内部方法, 外界无法直接访问.\n\n- **protected**: 允许子类访问protected成员, 但不能访问private成员.\n\n- **default**: 包访问, 可以被同一包(组件库)中其他类的成员访问.\n\n### 复用\n\n- 一个类经创建和测试后, 理应是可复用的.\n\n- 代码和设计方案的可复用性是OOP的优点之一.\n\n#### 关联关系\n\n- **组合(Composition)**: 表示**拥有关系(has-a relationship)**.\n\n- **聚合(Aggregation)**: 动态的组合.\n\n> **Tips: 组合与聚合**\n>\n> - 聚合关系中, 整件不会拥有部件的生命周期, 多个整件可以共享同一个部件.\n>\n> - 组合关系中, 整件拥有部件的生命周期, 多个整件不可以共享同一个部件.\n\n组合/聚合的设计相较继承, 更简单灵活, 设计更清晰.\n\n### 继承\n\n- **基类(父类, 超类)** 包含派生自它的类型之间的共享特征和行为, 表示思想的核心.\n- **派生类(子类, 继承类)** 从基类中派生以表示核心的不同方式.\n\n**类的层次结构体现了class之间的相似性和差异性.**\n\n#### 区分基类与派生类\n\n- 派生类中添加新功能.\n\n- 派生类改变基类现有方法的行为, 即**覆盖(overriding)**.\n\n#### is-a 与 is-like-a\n\n- **is-a**: 继承只覆盖基类的方法, 不添加基类没有的方法. 此时派生类和基类可以认为是**同一种类型**(具有完全相同的接口). 称为**纯粹替代**.\n\n- **is-like-a**: 派生类中添加了新的接口元素, 此时基类无法访问这些新的接口元素.\n\n> **Tips:** 此处笔者直接使用原书中的例子.\n>\n> ![pic1-2](BookNote-OnJava8-by-BruceEckel-1/pic1-2.png)\n> ![pic1-3](BookNote-OnJava8-by-BruceEckel-1/pic1-3.png)\n> ![pic1-4](BookNote-OnJava8-by-BruceEckel-1/pic1-4.png)\n\n### 多态\n\n处理类的层次结构时, 通常把一个对象看成他所属的基类而不是具体类. 这样可以编写出不局限于特定类型的代码.\n\n> 在此给出一个多态的例子:\n>\n> ![pic1-5](BookNote-OnJava8-by-BruceEckel-1/pic1-5.png)\n> `Birld Controller`在`Relocate()`时不知道也不需要知道`Bird`的具体类, 也不需要知道执行的是`Goose move()`还是`Penguin move()`.\n\n- **早期绑定**: 非OOP编译器产生的函数调用, 其地址在程序运行前就已确定, 调用会被解析为执行代码的绝对地址.\n\n- **后期绑定**: 被调用的代码直到运行时才确定. 编译器确保方法存在, 对参数和返回值进行类型检测.\n\n多态的机制就是由后期绑定实现的.(在部分语言, 如C++中, 必须使用`virtual`关键字显示授予方法后期绑定属性)\n\n**编译器和运行时系统会负责对所有细节的控制, 程序员只需要知道要做什么, 以及如何利用多态性来更好地设计程序.**\n\n### 单继承结构\n\nJava中所有的类都默认继承自一个基类`Object`. 与之相对的, C++允许多继承方案.\n\n### 容器\n\n通常我们不知道解决某个具体问题需要的对象数量和持续时间, 以及对象的存储方式. 所以我们该如何获知程序在运行时分配的内存对象?\n\n在OOP中, 创建一个新类型的对象来引用, 容纳其他对象. Java中通常使用**容器(Collection)**.\n\n> **Tips**: 笔者完全不知道翻译时为何要使用\"集合\"这个术语, 很容易与 **set** 混淆. C++中的**STL(Standard Template Library)** 亦翻译为容器, 故笔者在此统一使用容器这个表述.\n\n使用容器的经验告诉我们, 不存在一种容器可以满足所有需求, 针对具体的问题, 需要选择能解决这个问题的容器. 需要注意的是:\n\n- 容器可以提供不同类型的接口和外部行为.\n\n- 不同集合对某些操作有不同的效率.\n\n#### 泛型\n\nJava5 之前的容器都只保存`Object`类型, 使用容器时需要对元素做\"向上转型\", 取出元素时需要做\"向下转型\". 但遗憾的是\"向下转型\" **IS NOT SAFE**.\n\nJava5开始提供了**泛型(Generic)**的**参数化类型机制(Parameterized Type Mechanism)**.\n\n```java\nArrayList<Shape> shapes = new ArrayList<>();\n```\n\n### 对象创建与生命周期\n\n对象可以放在**栈(Stack, 自动变量/作用域变量)** 或 **静态存储域(Static Storage Area)** 静态确定; 也可以在 **堆(Heap)**上动态创建.\n\nC++中需要程序员自己处理对象的创建与回收的一整个生命周期, 以此保证效率.\n\nJava使用动态内存分配, 其内存管理建立在垃圾回收器机制上, 提供了更高级别的保险, 防止了潜在的内存泄漏问题.\n\n### 异常处理\n\n异常处理机制将程序错误直接交给编程语言甚至操作系统.\n\n**异常(Exception)** 是一个从出错点**抛出(Thrown)** 后能被特定类型的异常处理程序**捕获(Catch)** 的一个对象.\n\n异常机制提供了一种可靠的从错误状态中恢复的方法.\n\n## Chapter2 安装Java和本书用例\n\n笔者在此略去这部分内容, 有需要的读者可以查阅原书内容.","source":"_posts/BookNote-OnJava8-by-BruceEckel-1.md","raw":"---\ntitle: 读书笔记-On Java8 Ch0-Ch2\ndate: 2024-10-30 19:49:40\nhidden: false\ntags:\n- 读书笔记\n- Java\ncategories:\n- 读书笔记-OnJava8\n---\n\n**你所使用的编程语言会将你的思维模式固化并逐渐远离其他语言, 而且往往发生在潜移默化中. Java作为一门傲娇的语言尤其如此. —— Bruce Eckel**\n\n<!--more-->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [书籍基本信息](#书籍基本信息)\n- [Chapter0 简介\\&前言](#chapter0-简介前言)\n- [Chapter1 对象的概念](#chapter1-对象的概念)\n  - [抽象](#抽象)\n    - [所有编程语言都提供抽象机制](#所有编程语言都提供抽象机制)\n    - [\"纯粹\"OOP五大基本特征(Alan Kay)](#纯粹oop五大基本特征alan-kay)\n    - [Grady Booch对对象的描述](#grady-booch对对象的描述)\n  - [接口](#接口)\n  - [服务提供](#服务提供)\n  - [封装](#封装)\n    - [使用访问控制的原因](#使用访问控制的原因)\n    - [Java访问控制关键字](#java访问控制关键字)\n  - [复用](#复用)\n    - [关联关系](#关联关系)\n  - [继承](#继承)\n    - [区分基类与派生类](#区分基类与派生类)\n    - [is-a 与 is-like-a](#is-a-与-is-like-a)\n  - [多态](#多态)\n  - [单继承结构](#单继承结构)\n  - [容器](#容器)\n    - [泛型](#泛型)\n  - [对象创建与生命周期](#对象创建与生命周期)\n  - [异常处理](#异常处理)\n- [Chapter2 安装Java和本书用例](#chapter2-安装java和本书用例)\n\n---\n\n## 书籍基本信息\n\nBruce Eckel \"最新\"力作*On Java 8*, 笔者因为课程需要遂阅读本书. 可以从[**此处**](https://github.com/Knn120/OnJava8-PDF)获取电子书文件.\n\n需要注意的是, 阅读本书需要一定的编程基础.\n\n## Chapter0 简介&前言\n\n> **语言决定世界观. —— 路德维希·维特根斯坦(Wittgenstein)**\n\n- Java的最核心变化: **虚拟机** 和 **垃圾回收机制**\n\n- 编程的过程就是复杂性管理的过程: 业务问题的复杂性, 以及依赖的计算机的复杂性.\n\n*Thing in C* 可以在官方地址[www.OnJava8.com](www.OnJava8.com)免费下载.\n\n示例代码可以通过官方地址[https://github.com/BruceEckel/OnJava8-examples](https://github.com/BruceEckel/OnJava8-examples)中下载.\n\n## Chapter1 对象的概念\n\n> **我们没有意识到惯用语言的结构有多大力量. 可以毫不夸张地说, 它通过语义反应机制奴役我们. 语言表现出来并在无意识中给我们留下深刻印象的结构会自动投射到我们周围的世界. —— Alfred Korzybski(1930)**\n\n- 面向对象编程(Object-Oriented Programming, OOP)是一种编程思维方式和编码架构.\n\n### 抽象\n\n#### 所有编程语言都提供抽象机制\n\n某种程度上, 问题的复杂度直接取决于抽象的类型和质量.\n\n- 汇编语言是对底层机器的轻微抽象.\n\n- \"命令式\"语言(FORTRAN, BASIC, C)是对汇编语言的抽象.\n\n    > **Tips:** 命令式语言的抽象原理依然要求程序员着重考虑计算机的结构而非问题本身的结构.\n\n程序员必须要在**机器模型(解决方案空间)** 和实际解决的**问题模型(问题空间)** 之间建立一种关联. 这个过程既费精力, 又脱离编程语言本身的范畴.\n\n- 问题空间中的元素以及它们在解决方案空间的表示称作**对象(Object)**.\n\n- OOP允许程序员根据问题来描述问题, 而不是根据运行解决方案的计算机.\n\n    > **Tips:** 每个对象都类似一台小计算机, 有自己的状态并且可以进行特定的操作; 与现实中的\"对象\"或\"物体\"相似, 有自己的特征和行为.\n\n#### \"纯粹\"OOP五大基本特征(Alan Kay)\n\n- 万物皆对象.\n  \n- 程序是一组对象, 通过消息传递来告知彼此该做什么.\n\n- 每个对象有自己的存储空间, 可容纳其他对象.\n\n- 每个对象都有一种类型.\n\n- 同一类所有对象都能接收相同信息.\n\n    > **Tips:** 这个表述有点抽象, 结合书中的解释会有所理解.\n    >\n    > 由于类型为“圆”（Circle）的一个对象也属于类型为“形状”（Shape）的一个对象，所以一个圆完全能接收发送给“形状”的消息。这意味着可让程序代码统一指挥“形状”，令其自动控制所有符合“形状” 描述的对象，其中自然包括 “圆”。这一特性称为对象的“可替换性”，是OOP最重要的概念之一。\n\n#### Grady Booch对对象的描述\n\n- 一个对象具有自己的状态, 行为和标识. 即对象有自己的内部数据(提供状态), 方法(产生行为), 并彼此区分(每个对象[笔者注: 称之为实例instance或许更好理解]在内存中有唯一的地址).\n\n### 接口\n\n我们向对象发出的请求是通过它的**接口(Interface)**定义的, 对象的**类型** 或 **类** 规定了接口形式.\n\n假设我们有一个`Class Light`, 其**统一建模语言(Unified Modeling Language, UML)** 设计图如下:\n\n![pic1-1](BookNote-OnJava8-by-BruceEckel-1/pic1-1.png)\n\n可以通过这样的方式调用:\n\n```java\nLight lt = new Light()\nlt.on()\n```\n\n### 服务提供\n\n在开发或理解程序设计时, 可以将对象看成是**服务提供者**. 程序本身为用户提供服务, 并且能通过调用其他对象提供的服务来实现.\n\n在开发时, 可以将分体一一分解, 抽象成一组服务, 每个对象都提供了一组紧密的服务.\n\n软件设计的基本原则是**高内聚**: 每个组件内部作用明确, 功能紧密相关.\n\n### 封装\n\n- 编程的侧重领域可以划分为**研发** 和 **应用**. 应用程序员调用研发程序员构建的基础工具来做快速开发.\n\n#### 使用访问控制的原因\n\n- 让应用程序员不要触摸他们不应该触摸的部分.\n\n- 使类库的创建者(研发程序员)在不影响应用程序员使用的情况下完善更新工具库.\n\n#### Java访问控制关键字\n\n- **public**: 任何人都可以访问和使用.\n\n- **private**: 除了类本身和类内部方法, 外界无法直接访问.\n\n- **protected**: 允许子类访问protected成员, 但不能访问private成员.\n\n- **default**: 包访问, 可以被同一包(组件库)中其他类的成员访问.\n\n### 复用\n\n- 一个类经创建和测试后, 理应是可复用的.\n\n- 代码和设计方案的可复用性是OOP的优点之一.\n\n#### 关联关系\n\n- **组合(Composition)**: 表示**拥有关系(has-a relationship)**.\n\n- **聚合(Aggregation)**: 动态的组合.\n\n> **Tips: 组合与聚合**\n>\n> - 聚合关系中, 整件不会拥有部件的生命周期, 多个整件可以共享同一个部件.\n>\n> - 组合关系中, 整件拥有部件的生命周期, 多个整件不可以共享同一个部件.\n\n组合/聚合的设计相较继承, 更简单灵活, 设计更清晰.\n\n### 继承\n\n- **基类(父类, 超类)** 包含派生自它的类型之间的共享特征和行为, 表示思想的核心.\n- **派生类(子类, 继承类)** 从基类中派生以表示核心的不同方式.\n\n**类的层次结构体现了class之间的相似性和差异性.**\n\n#### 区分基类与派生类\n\n- 派生类中添加新功能.\n\n- 派生类改变基类现有方法的行为, 即**覆盖(overriding)**.\n\n#### is-a 与 is-like-a\n\n- **is-a**: 继承只覆盖基类的方法, 不添加基类没有的方法. 此时派生类和基类可以认为是**同一种类型**(具有完全相同的接口). 称为**纯粹替代**.\n\n- **is-like-a**: 派生类中添加了新的接口元素, 此时基类无法访问这些新的接口元素.\n\n> **Tips:** 此处笔者直接使用原书中的例子.\n>\n> ![pic1-2](BookNote-OnJava8-by-BruceEckel-1/pic1-2.png)\n> ![pic1-3](BookNote-OnJava8-by-BruceEckel-1/pic1-3.png)\n> ![pic1-4](BookNote-OnJava8-by-BruceEckel-1/pic1-4.png)\n\n### 多态\n\n处理类的层次结构时, 通常把一个对象看成他所属的基类而不是具体类. 这样可以编写出不局限于特定类型的代码.\n\n> 在此给出一个多态的例子:\n>\n> ![pic1-5](BookNote-OnJava8-by-BruceEckel-1/pic1-5.png)\n> `Birld Controller`在`Relocate()`时不知道也不需要知道`Bird`的具体类, 也不需要知道执行的是`Goose move()`还是`Penguin move()`.\n\n- **早期绑定**: 非OOP编译器产生的函数调用, 其地址在程序运行前就已确定, 调用会被解析为执行代码的绝对地址.\n\n- **后期绑定**: 被调用的代码直到运行时才确定. 编译器确保方法存在, 对参数和返回值进行类型检测.\n\n多态的机制就是由后期绑定实现的.(在部分语言, 如C++中, 必须使用`virtual`关键字显示授予方法后期绑定属性)\n\n**编译器和运行时系统会负责对所有细节的控制, 程序员只需要知道要做什么, 以及如何利用多态性来更好地设计程序.**\n\n### 单继承结构\n\nJava中所有的类都默认继承自一个基类`Object`. 与之相对的, C++允许多继承方案.\n\n### 容器\n\n通常我们不知道解决某个具体问题需要的对象数量和持续时间, 以及对象的存储方式. 所以我们该如何获知程序在运行时分配的内存对象?\n\n在OOP中, 创建一个新类型的对象来引用, 容纳其他对象. Java中通常使用**容器(Collection)**.\n\n> **Tips**: 笔者完全不知道翻译时为何要使用\"集合\"这个术语, 很容易与 **set** 混淆. C++中的**STL(Standard Template Library)** 亦翻译为容器, 故笔者在此统一使用容器这个表述.\n\n使用容器的经验告诉我们, 不存在一种容器可以满足所有需求, 针对具体的问题, 需要选择能解决这个问题的容器. 需要注意的是:\n\n- 容器可以提供不同类型的接口和外部行为.\n\n- 不同集合对某些操作有不同的效率.\n\n#### 泛型\n\nJava5 之前的容器都只保存`Object`类型, 使用容器时需要对元素做\"向上转型\", 取出元素时需要做\"向下转型\". 但遗憾的是\"向下转型\" **IS NOT SAFE**.\n\nJava5开始提供了**泛型(Generic)**的**参数化类型机制(Parameterized Type Mechanism)**.\n\n```java\nArrayList<Shape> shapes = new ArrayList<>();\n```\n\n### 对象创建与生命周期\n\n对象可以放在**栈(Stack, 自动变量/作用域变量)** 或 **静态存储域(Static Storage Area)** 静态确定; 也可以在 **堆(Heap)**上动态创建.\n\nC++中需要程序员自己处理对象的创建与回收的一整个生命周期, 以此保证效率.\n\nJava使用动态内存分配, 其内存管理建立在垃圾回收器机制上, 提供了更高级别的保险, 防止了潜在的内存泄漏问题.\n\n### 异常处理\n\n异常处理机制将程序错误直接交给编程语言甚至操作系统.\n\n**异常(Exception)** 是一个从出错点**抛出(Thrown)** 后能被特定类型的异常处理程序**捕获(Catch)** 的一个对象.\n\n异常机制提供了一种可靠的从错误状态中恢复的方法.\n\n## Chapter2 安装Java和本书用例\n\n笔者在此略去这部分内容, 有需要的读者可以查阅原书内容.","slug":"BookNote-OnJava8-by-BruceEckel-1","published":1,"updated":"2024-10-31T14:56:03.323Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyug000dssil3k5adbb0","content":"<p><strong>你所使用的编程语言会将你的思维模式固化并逐渐远离其他语言,\r\n而且往往发生在潜移默化中. Java作为一门傲娇的语言尤其如此. —— Bruce\r\nEckel</strong></p>\r\n<span id=\"more\"></span>\r\n<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#书籍基本信息\">书籍基本信息</a></li>\r\n<li><a href=\"#chapter0-简介前言\">Chapter0 简介&amp;前言</a></li>\r\n<li><a href=\"#chapter1-对象的概念\">Chapter1 对象的概念</a>\r\n<ul>\r\n<li><a href=\"#抽象\">抽象</a>\r\n<ul>\r\n<li><a\r\nhref=\"#所有编程语言都提供抽象机制\">所有编程语言都提供抽象机制</a></li>\r\n<li><a href=\"#纯粹oop五大基本特征alan-kay\">\"纯粹\"OOP五大基本特征(Alan\r\nKay)</a></li>\r\n<li><a href=\"#grady-booch对对象的描述\">Grady Booch对对象的描述</a></li>\r\n</ul></li>\r\n<li><a href=\"#接口\">接口</a></li>\r\n<li><a href=\"#服务提供\">服务提供</a></li>\r\n<li><a href=\"#封装\">封装</a>\r\n<ul>\r\n<li><a href=\"#使用访问控制的原因\">使用访问控制的原因</a></li>\r\n<li><a href=\"#java访问控制关键字\">Java访问控制关键字</a></li>\r\n</ul></li>\r\n<li><a href=\"#复用\">复用</a>\r\n<ul>\r\n<li><a href=\"#关联关系\">关联关系</a></li>\r\n</ul></li>\r\n<li><a href=\"#继承\">继承</a>\r\n<ul>\r\n<li><a href=\"#区分基类与派生类\">区分基类与派生类</a></li>\r\n<li><a href=\"#is-a-与-is-like-a\">is-a 与 is-like-a</a></li>\r\n</ul></li>\r\n<li><a href=\"#多态\">多态</a></li>\r\n<li><a href=\"#单继承结构\">单继承结构</a></li>\r\n<li><a href=\"#容器\">容器</a>\r\n<ul>\r\n<li><a href=\"#泛型\">泛型</a></li>\r\n</ul></li>\r\n<li><a href=\"#对象创建与生命周期\">对象创建与生命周期</a></li>\r\n<li><a href=\"#异常处理\">异常处理</a></li>\r\n</ul></li>\r\n<li><a href=\"#chapter2-安装java和本书用例\">Chapter2\r\n安装Java和本书用例</a></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"书籍基本信息\">书籍基本信息</h2>\r\n<p>Bruce Eckel \"最新\"力作<em>On Java 8</em>, 笔者因为课程需要遂阅读本书.\r\n可以从<a\r\nhref=\"https://github.com/Knn120/OnJava8-PDF\"><strong>此处</strong></a>获取电子书文件.</p>\r\n<p>需要注意的是, 阅读本书需要一定的编程基础.</p>\r\n<h2 id=\"chapter0-简介前言\">Chapter0 简介&amp;前言</h2>\r\n<blockquote>\r\n<p><strong>语言决定世界观. ——\r\n路德维希·维特根斯坦(Wittgenstein)</strong></p>\r\n</blockquote>\r\n<ul>\r\n<li><p>Java的最核心变化: <strong>虚拟机</strong> 和\r\n<strong>垃圾回收机制</strong></p></li>\r\n<li><p>编程的过程就是复杂性管理的过程: 业务问题的复杂性,\r\n以及依赖的计算机的复杂性.</p></li>\r\n</ul>\r\n<p><em>Thing in C</em> 可以在官方地址<a\r\nhref=\"www.OnJava8.com\">www.OnJava8.com</a>免费下载.</p>\r\n<p>示例代码可以通过官方地址<a\r\nhref=\"https://github.com/BruceEckel/OnJava8-examples\">https://github.com/BruceEckel/OnJava8-examples</a>中下载.</p>\r\n<h2 id=\"chapter1-对象的概念\">Chapter1 对象的概念</h2>\r\n<blockquote>\r\n<p><strong>我们没有意识到惯用语言的结构有多大力量. 可以毫不夸张地说,\r\n它通过语义反应机制奴役我们.\r\n语言表现出来并在无意识中给我们留下深刻印象的结构会自动投射到我们周围的世界.\r\n—— Alfred Korzybski(1930)</strong></p>\r\n</blockquote>\r\n<ul>\r\n<li>面向对象编程(Object-Oriented Programming,\r\nOOP)是一种编程思维方式和编码架构.</li>\r\n</ul>\r\n<h3 id=\"抽象\">抽象</h3>\r\n<h4 id=\"所有编程语言都提供抽象机制\">所有编程语言都提供抽象机制</h4>\r\n<p>某种程度上, 问题的复杂度直接取决于抽象的类型和质量.</p>\r\n<ul>\r\n<li><p>汇编语言是对底层机器的轻微抽象.</p></li>\r\n<li><p>\"命令式\"语言(FORTRAN, BASIC, C)是对汇编语言的抽象.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n命令式语言的抽象原理依然要求程序员着重考虑计算机的结构而非问题本身的结构.</p>\r\n</blockquote></li>\r\n</ul>\r\n<p>程序员必须要在<strong>机器模型(解决方案空间)</strong>\r\n和实际解决的<strong>问题模型(问题空间)</strong> 之间建立一种关联.\r\n这个过程既费精力, 又脱离编程语言本身的范畴.</p>\r\n<ul>\r\n<li><p>问题空间中的元素以及它们在解决方案空间的表示称作<strong>对象(Object)</strong>.</p></li>\r\n<li><p>OOP允许程序员根据问题来描述问题,\r\n而不是根据运行解决方案的计算机.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 每个对象都类似一台小计算机,\r\n有自己的状态并且可以进行特定的操作; 与现实中的\"对象\"或\"物体\"相似,\r\n有自己的特征和行为.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h4 id=\"纯粹oop五大基本特征alan-kay\">\"纯粹\"OOP五大基本特征(Alan\r\nKay)</h4>\r\n<ul>\r\n<li><p>万物皆对象.</p></li>\r\n<li><p>程序是一组对象, 通过消息传递来告知彼此该做什么.</p></li>\r\n<li><p>每个对象有自己的存储空间, 可容纳其他对象.</p></li>\r\n<li><p>每个对象都有一种类型.</p></li>\r\n<li><p>同一类所有对象都能接收相同信息.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 这个表述有点抽象,\r\n结合书中的解释会有所理解.</p>\r\n<p>由于类型为“圆”（Circle）的一个对象也属于类型为“形状”（Shape）的一个对象，所以一个圆完全能接收发送给“形状”的消息。这意味着可让程序代码统一指挥“形状”，令其自动控制所有符合“形状”\r\n描述的对象，其中自然包括\r\n“圆”。这一特性称为对象的“可替换性”，是OOP最重要的概念之一。</p>\r\n</blockquote></li>\r\n</ul>\r\n<h4 id=\"grady-booch对对象的描述\">Grady Booch对对象的描述</h4>\r\n<ul>\r\n<li>一个对象具有自己的状态, 行为和标识.\r\n即对象有自己的内部数据(提供状态), 方法(产生行为),\r\n并彼此区分(每个对象[笔者注:\r\n称之为实例instance或许更好理解]在内存中有唯一的地址).</li>\r\n</ul>\r\n<h3 id=\"接口\">接口</h3>\r\n<p>我们向对象发出的请求是通过它的<strong>接口(Interface)</strong>定义的,\r\n对象的<strong>类型</strong> 或 <strong>类</strong> 规定了接口形式.</p>\r\n<p>假设我们有一个<code>Class Light</code>,\r\n其<strong>统一建模语言(Unified Modeling Language, UML)</strong>\r\n设计图如下:</p>\r\n<img src=\"/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<p>可以通过这样的方式调用:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Light</span> <span class=\"variable\">lt</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Light</span>()</span><br><span class=\"line\">lt.on()</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"服务提供\">服务提供</h3>\r\n<p>在开发或理解程序设计时, 可以将对象看成是<strong>服务提供者</strong>.\r\n程序本身为用户提供服务, 并且能通过调用其他对象提供的服务来实现.</p>\r\n<p>在开发时, 可以将分体一一分解, 抽象成一组服务,\r\n每个对象都提供了一组紧密的服务.</p>\r\n<p>软件设计的基本原则是<strong>高内聚</strong>: 每个组件内部作用明确,\r\n功能紧密相关.</p>\r\n<h3 id=\"封装\">封装</h3>\r\n<ul>\r\n<li>编程的侧重领域可以划分为<strong>研发</strong> 和\r\n<strong>应用</strong>.\r\n应用程序员调用研发程序员构建的基础工具来做快速开发.</li>\r\n</ul>\r\n<h4 id=\"使用访问控制的原因\">使用访问控制的原因</h4>\r\n<ul>\r\n<li><p>让应用程序员不要触摸他们不应该触摸的部分.</p></li>\r\n<li><p>使类库的创建者(研发程序员)在不影响应用程序员使用的情况下完善更新工具库.</p></li>\r\n</ul>\r\n<h4 id=\"java访问控制关键字\">Java访问控制关键字</h4>\r\n<ul>\r\n<li><p><strong>public</strong>: 任何人都可以访问和使用.</p></li>\r\n<li><p><strong>private</strong>: 除了类本身和类内部方法,\r\n外界无法直接访问.</p></li>\r\n<li><p><strong>protected</strong>: 允许子类访问protected成员,\r\n但不能访问private成员.</p></li>\r\n<li><p><strong>default</strong>: 包访问,\r\n可以被同一包(组件库)中其他类的成员访问.</p></li>\r\n</ul>\r\n<h3 id=\"复用\">复用</h3>\r\n<ul>\r\n<li><p>一个类经创建和测试后, 理应是可复用的.</p></li>\r\n<li><p>代码和设计方案的可复用性是OOP的优点之一.</p></li>\r\n</ul>\r\n<h4 id=\"关联关系\">关联关系</h4>\r\n<ul>\r\n<li><p><strong>组合(Composition)</strong>: 表示<strong>拥有关系(has-a\r\nrelationship)</strong>.</p></li>\r\n<li><p><strong>聚合(Aggregation)</strong>: 动态的组合.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips: 组合与聚合</strong></p>\r\n<ul>\r\n<li><p>聚合关系中, 整件不会拥有部件的生命周期,\r\n多个整件可以共享同一个部件.</p></li>\r\n<li><p>组合关系中, 整件拥有部件的生命周期,\r\n多个整件不可以共享同一个部件.</p></li>\r\n</ul>\r\n</blockquote>\r\n<p>组合/聚合的设计相较继承, 更简单灵活, 设计更清晰.</p>\r\n<h3 id=\"继承\">继承</h3>\r\n<ul>\r\n<li><strong>基类(父类, 超类)</strong>\r\n包含派生自它的类型之间的共享特征和行为, 表示思想的核心.</li>\r\n<li><strong>派生类(子类, 继承类)</strong>\r\n从基类中派生以表示核心的不同方式.</li>\r\n</ul>\r\n<p><strong>类的层次结构体现了class之间的相似性和差异性.</strong></p>\r\n<h4 id=\"区分基类与派生类\">区分基类与派生类</h4>\r\n<ul>\r\n<li><p>派生类中添加新功能.</p></li>\r\n<li><p>派生类改变基类现有方法的行为,\r\n即<strong>覆盖(overriding)</strong>.</p></li>\r\n</ul>\r\n<h4 id=\"is-a-与-is-like-a\">is-a 与 is-like-a</h4>\r\n<ul>\r\n<li><p><strong>is-a</strong>: 继承只覆盖基类的方法,\r\n不添加基类没有的方法.\r\n此时派生类和基类可以认为是<strong>同一种类型</strong>(具有完全相同的接口).\r\n称为<strong>纯粹替代</strong>.</p></li>\r\n<li><p><strong>is-like-a</strong>: 派生类中添加了新的接口元素,\r\n此时基类无法访问这些新的接口元素.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处笔者直接使用原书中的例子.</p>\r\n<img src=\"/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<img src=\"/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n<img src=\"/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-4.png\" class=\"\" title=\"pic1-4\">\r\n</blockquote>\r\n<h3 id=\"多态\">多态</h3>\r\n<p>处理类的层次结构时, 通常把一个对象看成他所属的基类而不是具体类.\r\n这样可以编写出不局限于特定类型的代码.</p>\r\n<blockquote>\r\n<p>在此给出一个多态的例子:</p>\r\n<img src=\"/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-5.png\" class=\"\" title=\"pic1-5\">\r\n<p><code>Birld Controller</code>在<code>Relocate()</code>时不知道也不需要知道<code>Bird</code>的具体类,\r\n也不需要知道执行的是<code>Goose move()</code>还是<code>Penguin move()</code>.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>早期绑定</strong>: 非OOP编译器产生的函数调用,\r\n其地址在程序运行前就已确定, 调用会被解析为执行代码的绝对地址.</p></li>\r\n<li><p><strong>后期绑定</strong>: 被调用的代码直到运行时才确定.\r\n编译器确保方法存在, 对参数和返回值进行类型检测.</p></li>\r\n</ul>\r\n<p>多态的机制就是由后期绑定实现的.(在部分语言, 如C++中,\r\n必须使用<code>virtual</code>关键字显示授予方法后期绑定属性)</p>\r\n<p><strong>编译器和运行时系统会负责对所有细节的控制,\r\n程序员只需要知道要做什么,\r\n以及如何利用多态性来更好地设计程序.</strong></p>\r\n<h3 id=\"单继承结构\">单继承结构</h3>\r\n<p>Java中所有的类都默认继承自一个基类<code>Object</code>. 与之相对的,\r\nC++允许多继承方案.</p>\r\n<h3 id=\"容器\">容器</h3>\r\n<p>通常我们不知道解决某个具体问题需要的对象数量和持续时间,\r\n以及对象的存储方式. 所以我们该如何获知程序在运行时分配的内存对象?</p>\r\n<p>在OOP中, 创建一个新类型的对象来引用, 容纳其他对象.\r\nJava中通常使用<strong>容器(Collection)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips</strong>: 笔者完全不知道翻译时为何要使用\"集合\"这个术语,\r\n很容易与 <strong>set</strong> 混淆. C++中的<strong>STL(Standard Template\r\nLibrary)</strong> 亦翻译为容器, 故笔者在此统一使用容器这个表述.</p>\r\n</blockquote>\r\n<p>使用容器的经验告诉我们, 不存在一种容器可以满足所有需求,\r\n针对具体的问题, 需要选择能解决这个问题的容器. 需要注意的是:</p>\r\n<ul>\r\n<li><p>容器可以提供不同类型的接口和外部行为.</p></li>\r\n<li><p>不同集合对某些操作有不同的效率.</p></li>\r\n</ul>\r\n<h4 id=\"泛型\">泛型</h4>\r\n<p>Java5 之前的容器都只保存<code>Object</code>类型,\r\n使用容器时需要对元素做\"向上转型\", 取出元素时需要做\"向下转型\".\r\n但遗憾的是\"向下转型\" <strong>IS NOT SAFE</strong>.</p>\r\n<p>Java5开始提供了<strong>泛型(Generic)</strong>的<strong>参数化类型机制(Parameterized\r\nType Mechanism)</strong>.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Shape&gt; shapes = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"对象创建与生命周期\">对象创建与生命周期</h3>\r\n<p>对象可以放在<strong>栈(Stack, 自动变量/作用域变量)</strong> 或\r\n<strong>静态存储域(Static Storage Area)</strong> 静态确定; 也可以在\r\n<strong>堆(Heap)</strong>上动态创建.</p>\r\n<p>C++中需要程序员自己处理对象的创建与回收的一整个生命周期,\r\n以此保证效率.</p>\r\n<p>Java使用动态内存分配, 其内存管理建立在垃圾回收器机制上,\r\n提供了更高级别的保险, 防止了潜在的内存泄漏问题.</p>\r\n<h3 id=\"异常处理\">异常处理</h3>\r\n<p>异常处理机制将程序错误直接交给编程语言甚至操作系统.</p>\r\n<p><strong>异常(Exception)</strong>\r\n是一个从出错点<strong>抛出(Thrown)</strong>\r\n后能被特定类型的异常处理程序<strong>捕获(Catch)</strong> 的一个对象.</p>\r\n<p>异常机制提供了一种可靠的从错误状态中恢复的方法.</p>\r\n<h2 id=\"chapter2-安装java和本书用例\">Chapter2 安装Java和本书用例</h2>\r\n<p>笔者在此略去这部分内容, 有需要的读者可以查阅原书内容.</p>\r\n","length":2684,"excerpt":"<p><strong>你所使用的编程语言会将你的思维模式固化并逐渐远离其他语言,\r\n而且往往发生在潜移默化中. Java作为一门傲娇的语言尤其如此. —— Bruce\r\nEckel</strong></p>","more":"<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#书籍基本信息\">书籍基本信息</a></li>\r\n<li><a href=\"#chapter0-简介前言\">Chapter0 简介&amp;前言</a></li>\r\n<li><a href=\"#chapter1-对象的概念\">Chapter1 对象的概念</a>\r\n<ul>\r\n<li><a href=\"#抽象\">抽象</a>\r\n<ul>\r\n<li><a\r\nhref=\"#所有编程语言都提供抽象机制\">所有编程语言都提供抽象机制</a></li>\r\n<li><a href=\"#纯粹oop五大基本特征alan-kay\">\"纯粹\"OOP五大基本特征(Alan\r\nKay)</a></li>\r\n<li><a href=\"#grady-booch对对象的描述\">Grady Booch对对象的描述</a></li>\r\n</ul></li>\r\n<li><a href=\"#接口\">接口</a></li>\r\n<li><a href=\"#服务提供\">服务提供</a></li>\r\n<li><a href=\"#封装\">封装</a>\r\n<ul>\r\n<li><a href=\"#使用访问控制的原因\">使用访问控制的原因</a></li>\r\n<li><a href=\"#java访问控制关键字\">Java访问控制关键字</a></li>\r\n</ul></li>\r\n<li><a href=\"#复用\">复用</a>\r\n<ul>\r\n<li><a href=\"#关联关系\">关联关系</a></li>\r\n</ul></li>\r\n<li><a href=\"#继承\">继承</a>\r\n<ul>\r\n<li><a href=\"#区分基类与派生类\">区分基类与派生类</a></li>\r\n<li><a href=\"#is-a-与-is-like-a\">is-a 与 is-like-a</a></li>\r\n</ul></li>\r\n<li><a href=\"#多态\">多态</a></li>\r\n<li><a href=\"#单继承结构\">单继承结构</a></li>\r\n<li><a href=\"#容器\">容器</a>\r\n<ul>\r\n<li><a href=\"#泛型\">泛型</a></li>\r\n</ul></li>\r\n<li><a href=\"#对象创建与生命周期\">对象创建与生命周期</a></li>\r\n<li><a href=\"#异常处理\">异常处理</a></li>\r\n</ul></li>\r\n<li><a href=\"#chapter2-安装java和本书用例\">Chapter2\r\n安装Java和本书用例</a></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"书籍基本信息\">书籍基本信息</h2>\r\n<p>Bruce Eckel \"最新\"力作<em>On Java 8</em>, 笔者因为课程需要遂阅读本书.\r\n可以从<a\r\nhref=\"https://github.com/Knn120/OnJava8-PDF\"><strong>此处</strong></a>获取电子书文件.</p>\r\n<p>需要注意的是, 阅读本书需要一定的编程基础.</p>\r\n<h2 id=\"chapter0-简介前言\">Chapter0 简介&amp;前言</h2>\r\n<blockquote>\r\n<p><strong>语言决定世界观. ——\r\n路德维希·维特根斯坦(Wittgenstein)</strong></p>\r\n</blockquote>\r\n<ul>\r\n<li><p>Java的最核心变化: <strong>虚拟机</strong> 和\r\n<strong>垃圾回收机制</strong></p></li>\r\n<li><p>编程的过程就是复杂性管理的过程: 业务问题的复杂性,\r\n以及依赖的计算机的复杂性.</p></li>\r\n</ul>\r\n<p><em>Thing in C</em> 可以在官方地址<a\r\nhref=\"www.OnJava8.com\">www.OnJava8.com</a>免费下载.</p>\r\n<p>示例代码可以通过官方地址<a\r\nhref=\"https://github.com/BruceEckel/OnJava8-examples\">https://github.com/BruceEckel/OnJava8-examples</a>中下载.</p>\r\n<h2 id=\"chapter1-对象的概念\">Chapter1 对象的概念</h2>\r\n<blockquote>\r\n<p><strong>我们没有意识到惯用语言的结构有多大力量. 可以毫不夸张地说,\r\n它通过语义反应机制奴役我们.\r\n语言表现出来并在无意识中给我们留下深刻印象的结构会自动投射到我们周围的世界.\r\n—— Alfred Korzybski(1930)</strong></p>\r\n</blockquote>\r\n<ul>\r\n<li>面向对象编程(Object-Oriented Programming,\r\nOOP)是一种编程思维方式和编码架构.</li>\r\n</ul>\r\n<h3 id=\"抽象\">抽象</h3>\r\n<h4 id=\"所有编程语言都提供抽象机制\">所有编程语言都提供抽象机制</h4>\r\n<p>某种程度上, 问题的复杂度直接取决于抽象的类型和质量.</p>\r\n<ul>\r\n<li><p>汇编语言是对底层机器的轻微抽象.</p></li>\r\n<li><p>\"命令式\"语言(FORTRAN, BASIC, C)是对汇编语言的抽象.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n命令式语言的抽象原理依然要求程序员着重考虑计算机的结构而非问题本身的结构.</p>\r\n</blockquote></li>\r\n</ul>\r\n<p>程序员必须要在<strong>机器模型(解决方案空间)</strong>\r\n和实际解决的<strong>问题模型(问题空间)</strong> 之间建立一种关联.\r\n这个过程既费精力, 又脱离编程语言本身的范畴.</p>\r\n<ul>\r\n<li><p>问题空间中的元素以及它们在解决方案空间的表示称作<strong>对象(Object)</strong>.</p></li>\r\n<li><p>OOP允许程序员根据问题来描述问题,\r\n而不是根据运行解决方案的计算机.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 每个对象都类似一台小计算机,\r\n有自己的状态并且可以进行特定的操作; 与现实中的\"对象\"或\"物体\"相似,\r\n有自己的特征和行为.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h4 id=\"纯粹oop五大基本特征alan-kay\">\"纯粹\"OOP五大基本特征(Alan\r\nKay)</h4>\r\n<ul>\r\n<li><p>万物皆对象.</p></li>\r\n<li><p>程序是一组对象, 通过消息传递来告知彼此该做什么.</p></li>\r\n<li><p>每个对象有自己的存储空间, 可容纳其他对象.</p></li>\r\n<li><p>每个对象都有一种类型.</p></li>\r\n<li><p>同一类所有对象都能接收相同信息.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 这个表述有点抽象,\r\n结合书中的解释会有所理解.</p>\r\n<p>由于类型为“圆”（Circle）的一个对象也属于类型为“形状”（Shape）的一个对象，所以一个圆完全能接收发送给“形状”的消息。这意味着可让程序代码统一指挥“形状”，令其自动控制所有符合“形状”\r\n描述的对象，其中自然包括\r\n“圆”。这一特性称为对象的“可替换性”，是OOP最重要的概念之一。</p>\r\n</blockquote></li>\r\n</ul>\r\n<h4 id=\"grady-booch对对象的描述\">Grady Booch对对象的描述</h4>\r\n<ul>\r\n<li>一个对象具有自己的状态, 行为和标识.\r\n即对象有自己的内部数据(提供状态), 方法(产生行为),\r\n并彼此区分(每个对象[笔者注:\r\n称之为实例instance或许更好理解]在内存中有唯一的地址).</li>\r\n</ul>\r\n<h3 id=\"接口\">接口</h3>\r\n<p>我们向对象发出的请求是通过它的<strong>接口(Interface)</strong>定义的,\r\n对象的<strong>类型</strong> 或 <strong>类</strong> 规定了接口形式.</p>\r\n<p>假设我们有一个<code>Class Light</code>,\r\n其<strong>统一建模语言(Unified Modeling Language, UML)</strong>\r\n设计图如下:</p>\r\n<img src=\"/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<p>可以通过这样的方式调用:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Light</span> <span class=\"variable\">lt</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Light</span>()</span><br><span class=\"line\">lt.on()</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"服务提供\">服务提供</h3>\r\n<p>在开发或理解程序设计时, 可以将对象看成是<strong>服务提供者</strong>.\r\n程序本身为用户提供服务, 并且能通过调用其他对象提供的服务来实现.</p>\r\n<p>在开发时, 可以将分体一一分解, 抽象成一组服务,\r\n每个对象都提供了一组紧密的服务.</p>\r\n<p>软件设计的基本原则是<strong>高内聚</strong>: 每个组件内部作用明确,\r\n功能紧密相关.</p>\r\n<h3 id=\"封装\">封装</h3>\r\n<ul>\r\n<li>编程的侧重领域可以划分为<strong>研发</strong> 和\r\n<strong>应用</strong>.\r\n应用程序员调用研发程序员构建的基础工具来做快速开发.</li>\r\n</ul>\r\n<h4 id=\"使用访问控制的原因\">使用访问控制的原因</h4>\r\n<ul>\r\n<li><p>让应用程序员不要触摸他们不应该触摸的部分.</p></li>\r\n<li><p>使类库的创建者(研发程序员)在不影响应用程序员使用的情况下完善更新工具库.</p></li>\r\n</ul>\r\n<h4 id=\"java访问控制关键字\">Java访问控制关键字</h4>\r\n<ul>\r\n<li><p><strong>public</strong>: 任何人都可以访问和使用.</p></li>\r\n<li><p><strong>private</strong>: 除了类本身和类内部方法,\r\n外界无法直接访问.</p></li>\r\n<li><p><strong>protected</strong>: 允许子类访问protected成员,\r\n但不能访问private成员.</p></li>\r\n<li><p><strong>default</strong>: 包访问,\r\n可以被同一包(组件库)中其他类的成员访问.</p></li>\r\n</ul>\r\n<h3 id=\"复用\">复用</h3>\r\n<ul>\r\n<li><p>一个类经创建和测试后, 理应是可复用的.</p></li>\r\n<li><p>代码和设计方案的可复用性是OOP的优点之一.</p></li>\r\n</ul>\r\n<h4 id=\"关联关系\">关联关系</h4>\r\n<ul>\r\n<li><p><strong>组合(Composition)</strong>: 表示<strong>拥有关系(has-a\r\nrelationship)</strong>.</p></li>\r\n<li><p><strong>聚合(Aggregation)</strong>: 动态的组合.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips: 组合与聚合</strong></p>\r\n<ul>\r\n<li><p>聚合关系中, 整件不会拥有部件的生命周期,\r\n多个整件可以共享同一个部件.</p></li>\r\n<li><p>组合关系中, 整件拥有部件的生命周期,\r\n多个整件不可以共享同一个部件.</p></li>\r\n</ul>\r\n</blockquote>\r\n<p>组合/聚合的设计相较继承, 更简单灵活, 设计更清晰.</p>\r\n<h3 id=\"继承\">继承</h3>\r\n<ul>\r\n<li><strong>基类(父类, 超类)</strong>\r\n包含派生自它的类型之间的共享特征和行为, 表示思想的核心.</li>\r\n<li><strong>派生类(子类, 继承类)</strong>\r\n从基类中派生以表示核心的不同方式.</li>\r\n</ul>\r\n<p><strong>类的层次结构体现了class之间的相似性和差异性.</strong></p>\r\n<h4 id=\"区分基类与派生类\">区分基类与派生类</h4>\r\n<ul>\r\n<li><p>派生类中添加新功能.</p></li>\r\n<li><p>派生类改变基类现有方法的行为,\r\n即<strong>覆盖(overriding)</strong>.</p></li>\r\n</ul>\r\n<h4 id=\"is-a-与-is-like-a\">is-a 与 is-like-a</h4>\r\n<ul>\r\n<li><p><strong>is-a</strong>: 继承只覆盖基类的方法,\r\n不添加基类没有的方法.\r\n此时派生类和基类可以认为是<strong>同一种类型</strong>(具有完全相同的接口).\r\n称为<strong>纯粹替代</strong>.</p></li>\r\n<li><p><strong>is-like-a</strong>: 派生类中添加了新的接口元素,\r\n此时基类无法访问这些新的接口元素.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 此处笔者直接使用原书中的例子.</p>\r\n<img src=\"/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<img src=\"/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n<img src=\"/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-4.png\" class=\"\" title=\"pic1-4\">\r\n</blockquote>\r\n<h3 id=\"多态\">多态</h3>\r\n<p>处理类的层次结构时, 通常把一个对象看成他所属的基类而不是具体类.\r\n这样可以编写出不局限于特定类型的代码.</p>\r\n<blockquote>\r\n<p>在此给出一个多态的例子:</p>\r\n<img src=\"/2024/10/30/BookNote-OnJava8-by-BruceEckel-1/pic1-5.png\" class=\"\" title=\"pic1-5\">\r\n<p><code>Birld Controller</code>在<code>Relocate()</code>时不知道也不需要知道<code>Bird</code>的具体类,\r\n也不需要知道执行的是<code>Goose move()</code>还是<code>Penguin move()</code>.</p>\r\n</blockquote>\r\n<ul>\r\n<li><p><strong>早期绑定</strong>: 非OOP编译器产生的函数调用,\r\n其地址在程序运行前就已确定, 调用会被解析为执行代码的绝对地址.</p></li>\r\n<li><p><strong>后期绑定</strong>: 被调用的代码直到运行时才确定.\r\n编译器确保方法存在, 对参数和返回值进行类型检测.</p></li>\r\n</ul>\r\n<p>多态的机制就是由后期绑定实现的.(在部分语言, 如C++中,\r\n必须使用<code>virtual</code>关键字显示授予方法后期绑定属性)</p>\r\n<p><strong>编译器和运行时系统会负责对所有细节的控制,\r\n程序员只需要知道要做什么,\r\n以及如何利用多态性来更好地设计程序.</strong></p>\r\n<h3 id=\"单继承结构\">单继承结构</h3>\r\n<p>Java中所有的类都默认继承自一个基类<code>Object</code>. 与之相对的,\r\nC++允许多继承方案.</p>\r\n<h3 id=\"容器\">容器</h3>\r\n<p>通常我们不知道解决某个具体问题需要的对象数量和持续时间,\r\n以及对象的存储方式. 所以我们该如何获知程序在运行时分配的内存对象?</p>\r\n<p>在OOP中, 创建一个新类型的对象来引用, 容纳其他对象.\r\nJava中通常使用<strong>容器(Collection)</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips</strong>: 笔者完全不知道翻译时为何要使用\"集合\"这个术语,\r\n很容易与 <strong>set</strong> 混淆. C++中的<strong>STL(Standard Template\r\nLibrary)</strong> 亦翻译为容器, 故笔者在此统一使用容器这个表述.</p>\r\n</blockquote>\r\n<p>使用容器的经验告诉我们, 不存在一种容器可以满足所有需求,\r\n针对具体的问题, 需要选择能解决这个问题的容器. 需要注意的是:</p>\r\n<ul>\r\n<li><p>容器可以提供不同类型的接口和外部行为.</p></li>\r\n<li><p>不同集合对某些操作有不同的效率.</p></li>\r\n</ul>\r\n<h4 id=\"泛型\">泛型</h4>\r\n<p>Java5 之前的容器都只保存<code>Object</code>类型,\r\n使用容器时需要对元素做\"向上转型\", 取出元素时需要做\"向下转型\".\r\n但遗憾的是\"向下转型\" <strong>IS NOT SAFE</strong>.</p>\r\n<p>Java5开始提供了<strong>泛型(Generic)</strong>的<strong>参数化类型机制(Parameterized\r\nType Mechanism)</strong>.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Shape&gt; shapes = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"对象创建与生命周期\">对象创建与生命周期</h3>\r\n<p>对象可以放在<strong>栈(Stack, 自动变量/作用域变量)</strong> 或\r\n<strong>静态存储域(Static Storage Area)</strong> 静态确定; 也可以在\r\n<strong>堆(Heap)</strong>上动态创建.</p>\r\n<p>C++中需要程序员自己处理对象的创建与回收的一整个生命周期,\r\n以此保证效率.</p>\r\n<p>Java使用动态内存分配, 其内存管理建立在垃圾回收器机制上,\r\n提供了更高级别的保险, 防止了潜在的内存泄漏问题.</p>\r\n<h3 id=\"异常处理\">异常处理</h3>\r\n<p>异常处理机制将程序错误直接交给编程语言甚至操作系统.</p>\r\n<p><strong>异常(Exception)</strong>\r\n是一个从出错点<strong>抛出(Thrown)</strong>\r\n后能被特定类型的异常处理程序<strong>捕获(Catch)</strong> 的一个对象.</p>\r\n<p>异常机制提供了一种可靠的从错误状态中恢复的方法.</p>\r\n<h2 id=\"chapter2-安装java和本书用例\">Chapter2 安装Java和本书用例</h2>\r\n<p>笔者在此略去这部分内容, 有需要的读者可以查阅原书内容.</p>"},{"title":"读书笔记-On Java8 Ch6-Ch","date":"2024-11-13T13:05:25.000Z","hidden":true,"_content":"\n\n\n<!--more-->","source":"_posts/BookNote-OnJava8-by-BruceEckel-3.md","raw":"---\ntitle: 读书笔记-On Java8 Ch6-Ch\ndate: 2024-11-13 21:05:25\nhidden: true\ntags:\n- 读书笔记\n- Java\ncategories:\n- 读书笔记-OnJava8\n---\n\n\n\n<!--more-->","slug":"BookNote-OnJava8-by-BruceEckel-3","published":1,"updated":"2024-11-13T13:06:28.728Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyug000essil7zhic3yt","content":"<span id=\"more\"></span>\r\n<!-- flag of hidden posts -->","length":1,"excerpt":"","more":""},{"title":"读书笔记-On Java8 Ch3-Ch5","date":"2024-11-03T11:29:38.000Z","hidden":false,"_content":"\n**Java语言假设程序员只进行面向对象编程, 因此Java中(几乎)万物皆对象.**\n\n<!--more-->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [Chapter3 万物皆对象](#chapter3-万物皆对象)\n  - [对象操纵](#对象操纵)\n  - [对象创建](#对象创建)\n    - [数据存储](#数据存储)\n    - [基本类型存储](#基本类型存储)\n    - [高精度数值](#高精度数值)\n    - [数组存储](#数组存储)\n  - [代码注释](#代码注释)\n  - [对象清理](#对象清理)\n    - [作用域](#作用域)\n    - [对象作用域](#对象作用域)\n  - [类的创建](#类的创建)\n    - [类型](#类型)\n    - [字段(Field)](#字段field)\n    - [基本类型默认值](#基本类型默认值)\n    - [方法使用](#方法使用)\n    - [返回类型](#返回类型)\n    - [参数列表](#参数列表)\n  - [程序编写](#程序编写)\n    - [命名可见性](#命名可见性)\n    - [import](#import)\n    - [static](#static)\n  - [编码风格](#编码风格)\n- [Chapter4 运算符](#chapter4-运算符)\n  - [Beginning](#beginning)\n  - [优先级\\&关联性](#优先级关联性)\n  - [赋值](#赋值)\n  - [算术运算符](#算术运算符)\n  - [自增\\&自减](#自增自减)\n  - [关系运算符](#关系运算符)\n  - [逻辑运算符](#逻辑运算符)\n    - [短路](#短路)\n  - [字面值常量(Literal)](#字面值常量literal)\n  - [位运算符](#位运算符)\n  - [三目运算符](#三目运算符)\n- [Chapter5 控制流](#chapter5-控制流)\n  - [if-else](#if-else)\n  - [for while do-while](#for-while-do-while)\n  - [return](#return)\n  - [break\\&continue](#breakcontinue)\n    - [标签](#标签)\n  - [switch](#switch)\n\n---\n\n## Chapter3 万物皆对象\n\n> **如果我们说另一种不同的语言, 我们会发觉一个不同的世界! —— Ludwig Wittgenstein(1889-1951)**\n\n### 对象操纵\n\n所有的编程语言都会操纵内存中的元素.\n\n> - C/C++中对象的操纵是通过指针来完成的.\n> - Java利用万物皆对象的思想和单一一致的语法方式来简化问题, 采用**引用(Reference)** 操纵对象.\n\n### 对象创建\n\nJava中使用**引用**关联**对象**.\n\n通常使用关键字`new`创建对象实例.\n\n```java\nString s = new String(\"hello world\");\n```\n\n#### 数据存储\n\n- **寄存器(Registers)**: 最快的存储器, 位于CPU内部. 但数量有限, 且Java无法直接控制(C/C++允许开发者像编译器建议寄存器的分配).\n- **栈内存(Stack)**: 位于**随机访问存储器(Random Access Memory, RAM)** 中, CPU可通过栈指针直接访问. 栈指针下移分配内存, 上移释放内存. 但栈上的数据要求提前知晓对象生存周期, 因此栈内存上只存放部分Java数据, 对象本身存储在堆内存.\n- **堆内存(Heap)**: RAM区域的一种通用内存池, 存放着所有的Java对象. 相较于栈区, 堆区的使用更灵活, 但代价是分配和清理对象会比栈区更耗时.\n- **常量存储(COnstant Storage)**: 通常直接放在代码中, 可考虑置于**只读存储器(Read Only Memory, ROM)**.\n- **非RAM存储(Non-RAM Storage)**: 数据存在于程序之外, 包括**序列化对象**和**持久化对象**.\n\n#### 基本类型存储\n\nJava中使用和C/C++一样策略的基本类型数据, 存放在栈中, 其内存占用大小固定.\n\n|基本类型|大小|最小值|最大值|包装类型|\n|:---:|:---:|:---:|:---:|:---:|\n|boolean|---|---|---|Boolean|\n|char|16bits|$Unicode\\ 0$|$Unicode\\ 2^{16}-1$|Character|\n|byte|8bits|$-128$|$+127$|Byte|\n|short|16bits|$-2^{15}$|$+2^{15}-1$|Short|\n|int|32bits|$-2^{31}$|$+2^{31}-1$|Integer|\n|long|64bits|$-2^{63}$|$+2^{63}-1$|Long|\n|float|32bits|$IEEE754$|$IEEE754$|Float|\n|double|64bits|$IEEE754$|$IEEE754$|Double|\n|void|---|---|---|Void|\n\n在堆区表示基本类型数据, 需要使用包装类:\n\n```java\nchar c = 'x';\nCharactor ch = new Charactor(c);\nCharactor ch = new Charactor('x');\n//自动装箱\nCharactor ch = 'x';\n//自动开箱\nchar c = ch;\n```\n\n#### 高精度数值\n\n`BigInteger` & `BigDecimal`\n\n#### 数组存储\n\nJava设计主要目标之一是安全性, 尽管牺牲了部分效率, 但换来了安全性.\n\n### 代码注释\n\n```java\n/*\n* 跨行注释\n*/\n\n//单行注释\n```\n\n### 对象清理\n\n#### 作用域\n\nC/C++和Java中的作用域由`{}`决定.\n\n```java\n{\n    int x = 42;\n    {\n        int q = 114514;\n        //x & q可用\n    }\n    //仅x可用\n}\n```\n\n需要注意的是, 以下操作在Java中非法:\n\n```java\n{\n    int x = 42;\n    {\n        x = 114514; //Illegal\n    }\n}\n```\n\n> **Tips:** 尽管作者在书中如此说明, 但在新版的Java中(笔者使用为JDK17), 该操作是允许的, 仅仅是IDE给出一个提示.\n\n#### 对象作用域\n\nJava中的对象与基本类型具有不同的生命周期.\n\n```java\n{\n    int x;\n    String s = new String(\"a string\");\n}\n// 作用域终点\n// x生命周期结束\n// s生命周期独立作用域\n```\n\nJava的内存回收不同于C++, 采用的是垃圾收集器机制, 通过不可达的判断回收对象. 可以有效避免**内存泄漏**问题.\n\n### 类的创建\n\n#### 类型\n\nJava中使用`class`关键字描述新对象.\n\n```java\nclass Example{\n    \n}\n\nExample example = new Example();\n```\n\n#### 字段(Field)\n\n字段可以是基本类型或引用类型.\n\n与C++中对应则是**成员变量**.\n\n#### 基本类型默认值\n\n默认值仅在Java初始化类时使用.\n\n- 基本类型会被赋值为`0`(`boolean`为`false`).\n\n- 但局部变量不会被赋默认值, 如果不显式指定初始化, 编译器会报错.\n\n#### 方法使用\n\n对应C++中的成员函数.\n\n```java\n[return type] [method name](/*args list*/){\n    //method body\n}\n```\n\n#### 返回类型\n\n- **方法签名(Signature of the Method)** 是方法的唯一标识, 包括方法名和参数列表. (**返回类型不是方法签名的一部分**)\n\n#### 参数列表\n\nJava中参数也是通过对象的形式传递, 也就是说, 传递的是对象引用(不包括基本类型).\n\n### 程序编写\n\n#### 命名可见性\n\n- C++通过**命名空间(namespace)** 解决命名冲突.\n\n- Java为一个类库生成一个明确的名称来解决冲突. 使用反向URL关联命名空间和文件路径会导致源代码管理出现混乱, 比如说空目录问题(用于表示反向URL).\n\n#### import\n\n```java\nimport java.util.ArrayList;\nimport java.util.*;\n```\n\n#### static\n\n在类中的使用与C++基本一致.\n\n- 有时Java使用**类数据(class data)** 和**类方法(class method)** 来表示静态成员.\n\n### 编码风格\n\n**Java编程语言编码规范(Code Conventions for the Java Programming Language).** 采用驼峰命名法. 其中类首字母大写, 字段和方法首字母小写. 对于常量, 可采用全大写 + 下划线的命名方式.\n\n## Chapter4 运算符\n\n> **运算符操纵数据.**\n\n### Beginning\n\n- 运算符接受一个或多个参数并生成新值.\n\n- **副作用(Side Effect):** 运算符可改变运算对象的值.\n\n### 优先级&关联性\n\n![pic2-1](BookNote-OnJava8-by-BruceEckel-2/pic2-1.png)\n\n> **Tips:** 节选自[**[菜鸟教程|Java运算符]**](https://www.runoob.com/java/java-operators.html)\n\n### 赋值\n\n- `=`表示, 将右边的值赋给左边的变量.\n\n- 基本类型的赋值是**值传递**.\n\n- 对象的赋值是**引用传递**.\n\n  > **Tips:** 实际上引用传递也是值传递, 只是这里传递的是**内存地址**.\n\n> **Additional:** [**[知乎|Java 到底是值传递还是引用传递？]**](https://www.zhihu.com/question/31203609?sort=created)\n\n### 算术运算符\n\n- `+`, `-`, `*`, `/`, `%`\n\n### 自增&自减\n\n- `++`, `--`\n\n```java\na = 1;\nb == a++; //先传值后自增, b = 1\nc == ++a; //先自增后传值, c = 3\n```\n\n### 关系运算符\n\n- `>`, `<`, `==`, `>=`, `<=`, `!=`\n\n- 接受两个操作数, 返回一个`boolean`值表示操作数之间的关系.\n\n尽管`==`和`!=`可以比较对象, 但更推荐的方法是使用`equals()`, 需要注意的是, 自定义类型使用`equals()`需要手动**覆写(Override)**.\n\n### 逻辑运算符\n\n- `&&`, `||`, `!`\n\n- 根据参数逻辑关系生成布尔值`true`, `false`.\n\n#### 短路\n\n当逻辑运算符运算结果确定时, 便会发生**短路(short-circuiting)**.\n\n```java\nclass ShortCircuit{\n  public static void main(String[] args){\n    test() && test() && test()\n  }\n  private boolean test(){\n    System.out.println(\"test\");\n    return false;\n  }\n}\n```\n\n上述代码执行结果只会得到一条`test`而非三条, `&&`在运算时发生了短路.\n\n### 字面值常量(Literal)\n\n可以指定字面值来确定常量的类型.\n\n```java\nint i1 = 0x2f; //16进制\nint i2 = 0177; //8进制\nlong n1 = 200L; //long型\nfloat f1 = 1f; //float\ndouble d1 = 1d; //double\nbyte b = (byte)0b00110101; //2进制\n```\n\n### 位运算符\n\n- `&`, `|`, `~`(取反), `^`(异或),`<<`, `>>`, `>>>`(按位右移补零)\n\n### 三目运算符\n\n- `?:` -> `variable x = (expression) ? value if true : value if false`\n\n## Chapter5 控制流\n\n> **程序必须在执行过程中控制它的世界并作出选择. 在Java中, 程序员需要执行控制语句来做出选择.**\n\nJava支持的关键字包括`if-else`, `while`, `do-while`, `for`, `return`, `break`, `switch`.\n\n需要注意的是, 所有条件语句的Expression应当是`boolean`类型.\n\n### if-else\n\n```java\n//允许省略else\nif(Boolean-Expression){\n  statement\n}\n//最常见的形式\nif(Boolean-Expression){\n  statement\n}\nelse{\n  statement\n}\n//允许嵌套\nif(Boolean-Expression){\n  statement\n}\nelse if(Boolean-Expression){\n  statement\n}\nelse{\n  statement\n}\n```\n\n### for while do-while\n\n- 循环语句又称迭代语句.\n\n```java\n//while\nwhile(Boolean-Expression){\n  statement\n}\n//do-while\n//do-while中do的内容无论while判断是否成立都会被至少执行一次.\ndo{\n  statement\n}while(Boolean-Expression)\n//for\nfor(Initialization; Boolean-Expression; step){\n  statement\n}\n//for允许逗号操作符, 使用示例如下\nfor(int i = 0, j = 0; i < 5; i++, j += i){\n  statement\n}\n//for-in/for-each\nfor(Type x: Contianer){\n  statement\n}\nfor(int i : range(10)){\n  statement\n}\nContainer.forEach(\n(Var1, Var2, ...) -> {statement}\n);\n```\n\n### return\n\n- 退出当前方法, 返回方法返回值.\n\n### break&continue\n\n- `break`与`continue`均用在循环体中.\n\n- `break`表示跳出当前循环; `continue`表示停止本次循环, 进行下一次循环.\n\n#### 标签\n\n- 源于`goto`机制, 在Java中, 允许为循环体定义**label**, 并允许`break`和`continue`使用**label**.\n\n具体规则如下:\n\n- `continue`会回退到最内层循环开头, 并继续执行.\n\n- `continue label`会到达标签位置, 并重新进入紧接着那个标签后的循环.\n\n- `break`会中断当前循环, 并移离当前标签末尾.\n\n- `break label`会中断当前循环, 并移离由那个标签指示的循环末尾.\n\n我们来看两个例子:\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        outerLoop:\n        for (int i = 0; i < 3; i++) {\n            innerLoop:\n            for (int j = 0; j < 3; j++) {\n                if (i == 1 && j == 1) {\n                    break outerLoop; // 跳出外部循环\n                }\n                System.out.println(\"i: \" + i + \", j: \" + j);\n            }\n        }\n    }\n}\n```\n\n执行结果为:\n\n```shell\ni: 0, j: 0\ni: 0, j: 1\ni: 0, j: 2\n```\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        outerLoop:\n        for (int i = 0; i < 3; i++) {\n            innerLoop:\n            for (int j = 0; j < 3; j++) {\n                if (i == 1 && j == 1) {\n                    continue outerLoop; // 跳过外部循环的当前迭代\n                }\n                System.out.println(\"i: \" + i + \", j: \" + j);\n            }\n        }\n    }\n}\n```\n\n执行结果为:\n\n```shell\ni: 0, j: 0\ni: 0, j: 1\ni: 0, j: 2\ni: 1, j: 0\ni: 2, j: 0\ni: 2, j: 1\ni: 2, j: 2\n```\n\n### switch\n\n其基本格式如下:\n\n```java\nswitch(integral-selector OR string-selector){\n  case int1/string1: statement; break;\n  case int2/string2: statement; break;\n  case int3/string3: statement; break;\n  default: statement;\n}\n```\n\n在`switch`体中, `default`可以省略. 如果缺少`break`, `switch`将会发生穿透. 示例如下:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    int x = 2;\n    switch(x){\n      case 1:\n        System.out.println(\"case 1\").\n        break;\n      case 2:\n        System.out.println(\"case 2\").\n      case 3:\n        System.out.println(\"case 3\").\n      case 4:\n        System.out.println(\"case 4\").\n        break;\n      default:\n        System.out.println(\"default\").\n    }\n  }\n}\n```\n\n其结果如下:\n\n```shell\ncase 2\ncase 3\ncase 4\n```\n","source":"_posts/BookNote-OnJava8-by-BruceEckel-2.md","raw":"---\ntitle: 读书笔记-On Java8 Ch3-Ch5\ndate: 2024-11-03 19:29:38\nhidden: false\ntags:\n- 读书笔记\n- Java\ncategories:\n- 读书笔记-OnJava8\n---\n\n**Java语言假设程序员只进行面向对象编程, 因此Java中(几乎)万物皆对象.**\n\n<!--more-->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [Chapter3 万物皆对象](#chapter3-万物皆对象)\n  - [对象操纵](#对象操纵)\n  - [对象创建](#对象创建)\n    - [数据存储](#数据存储)\n    - [基本类型存储](#基本类型存储)\n    - [高精度数值](#高精度数值)\n    - [数组存储](#数组存储)\n  - [代码注释](#代码注释)\n  - [对象清理](#对象清理)\n    - [作用域](#作用域)\n    - [对象作用域](#对象作用域)\n  - [类的创建](#类的创建)\n    - [类型](#类型)\n    - [字段(Field)](#字段field)\n    - [基本类型默认值](#基本类型默认值)\n    - [方法使用](#方法使用)\n    - [返回类型](#返回类型)\n    - [参数列表](#参数列表)\n  - [程序编写](#程序编写)\n    - [命名可见性](#命名可见性)\n    - [import](#import)\n    - [static](#static)\n  - [编码风格](#编码风格)\n- [Chapter4 运算符](#chapter4-运算符)\n  - [Beginning](#beginning)\n  - [优先级\\&关联性](#优先级关联性)\n  - [赋值](#赋值)\n  - [算术运算符](#算术运算符)\n  - [自增\\&自减](#自增自减)\n  - [关系运算符](#关系运算符)\n  - [逻辑运算符](#逻辑运算符)\n    - [短路](#短路)\n  - [字面值常量(Literal)](#字面值常量literal)\n  - [位运算符](#位运算符)\n  - [三目运算符](#三目运算符)\n- [Chapter5 控制流](#chapter5-控制流)\n  - [if-else](#if-else)\n  - [for while do-while](#for-while-do-while)\n  - [return](#return)\n  - [break\\&continue](#breakcontinue)\n    - [标签](#标签)\n  - [switch](#switch)\n\n---\n\n## Chapter3 万物皆对象\n\n> **如果我们说另一种不同的语言, 我们会发觉一个不同的世界! —— Ludwig Wittgenstein(1889-1951)**\n\n### 对象操纵\n\n所有的编程语言都会操纵内存中的元素.\n\n> - C/C++中对象的操纵是通过指针来完成的.\n> - Java利用万物皆对象的思想和单一一致的语法方式来简化问题, 采用**引用(Reference)** 操纵对象.\n\n### 对象创建\n\nJava中使用**引用**关联**对象**.\n\n通常使用关键字`new`创建对象实例.\n\n```java\nString s = new String(\"hello world\");\n```\n\n#### 数据存储\n\n- **寄存器(Registers)**: 最快的存储器, 位于CPU内部. 但数量有限, 且Java无法直接控制(C/C++允许开发者像编译器建议寄存器的分配).\n- **栈内存(Stack)**: 位于**随机访问存储器(Random Access Memory, RAM)** 中, CPU可通过栈指针直接访问. 栈指针下移分配内存, 上移释放内存. 但栈上的数据要求提前知晓对象生存周期, 因此栈内存上只存放部分Java数据, 对象本身存储在堆内存.\n- **堆内存(Heap)**: RAM区域的一种通用内存池, 存放着所有的Java对象. 相较于栈区, 堆区的使用更灵活, 但代价是分配和清理对象会比栈区更耗时.\n- **常量存储(COnstant Storage)**: 通常直接放在代码中, 可考虑置于**只读存储器(Read Only Memory, ROM)**.\n- **非RAM存储(Non-RAM Storage)**: 数据存在于程序之外, 包括**序列化对象**和**持久化对象**.\n\n#### 基本类型存储\n\nJava中使用和C/C++一样策略的基本类型数据, 存放在栈中, 其内存占用大小固定.\n\n|基本类型|大小|最小值|最大值|包装类型|\n|:---:|:---:|:---:|:---:|:---:|\n|boolean|---|---|---|Boolean|\n|char|16bits|$Unicode\\ 0$|$Unicode\\ 2^{16}-1$|Character|\n|byte|8bits|$-128$|$+127$|Byte|\n|short|16bits|$-2^{15}$|$+2^{15}-1$|Short|\n|int|32bits|$-2^{31}$|$+2^{31}-1$|Integer|\n|long|64bits|$-2^{63}$|$+2^{63}-1$|Long|\n|float|32bits|$IEEE754$|$IEEE754$|Float|\n|double|64bits|$IEEE754$|$IEEE754$|Double|\n|void|---|---|---|Void|\n\n在堆区表示基本类型数据, 需要使用包装类:\n\n```java\nchar c = 'x';\nCharactor ch = new Charactor(c);\nCharactor ch = new Charactor('x');\n//自动装箱\nCharactor ch = 'x';\n//自动开箱\nchar c = ch;\n```\n\n#### 高精度数值\n\n`BigInteger` & `BigDecimal`\n\n#### 数组存储\n\nJava设计主要目标之一是安全性, 尽管牺牲了部分效率, 但换来了安全性.\n\n### 代码注释\n\n```java\n/*\n* 跨行注释\n*/\n\n//单行注释\n```\n\n### 对象清理\n\n#### 作用域\n\nC/C++和Java中的作用域由`{}`决定.\n\n```java\n{\n    int x = 42;\n    {\n        int q = 114514;\n        //x & q可用\n    }\n    //仅x可用\n}\n```\n\n需要注意的是, 以下操作在Java中非法:\n\n```java\n{\n    int x = 42;\n    {\n        x = 114514; //Illegal\n    }\n}\n```\n\n> **Tips:** 尽管作者在书中如此说明, 但在新版的Java中(笔者使用为JDK17), 该操作是允许的, 仅仅是IDE给出一个提示.\n\n#### 对象作用域\n\nJava中的对象与基本类型具有不同的生命周期.\n\n```java\n{\n    int x;\n    String s = new String(\"a string\");\n}\n// 作用域终点\n// x生命周期结束\n// s生命周期独立作用域\n```\n\nJava的内存回收不同于C++, 采用的是垃圾收集器机制, 通过不可达的判断回收对象. 可以有效避免**内存泄漏**问题.\n\n### 类的创建\n\n#### 类型\n\nJava中使用`class`关键字描述新对象.\n\n```java\nclass Example{\n    \n}\n\nExample example = new Example();\n```\n\n#### 字段(Field)\n\n字段可以是基本类型或引用类型.\n\n与C++中对应则是**成员变量**.\n\n#### 基本类型默认值\n\n默认值仅在Java初始化类时使用.\n\n- 基本类型会被赋值为`0`(`boolean`为`false`).\n\n- 但局部变量不会被赋默认值, 如果不显式指定初始化, 编译器会报错.\n\n#### 方法使用\n\n对应C++中的成员函数.\n\n```java\n[return type] [method name](/*args list*/){\n    //method body\n}\n```\n\n#### 返回类型\n\n- **方法签名(Signature of the Method)** 是方法的唯一标识, 包括方法名和参数列表. (**返回类型不是方法签名的一部分**)\n\n#### 参数列表\n\nJava中参数也是通过对象的形式传递, 也就是说, 传递的是对象引用(不包括基本类型).\n\n### 程序编写\n\n#### 命名可见性\n\n- C++通过**命名空间(namespace)** 解决命名冲突.\n\n- Java为一个类库生成一个明确的名称来解决冲突. 使用反向URL关联命名空间和文件路径会导致源代码管理出现混乱, 比如说空目录问题(用于表示反向URL).\n\n#### import\n\n```java\nimport java.util.ArrayList;\nimport java.util.*;\n```\n\n#### static\n\n在类中的使用与C++基本一致.\n\n- 有时Java使用**类数据(class data)** 和**类方法(class method)** 来表示静态成员.\n\n### 编码风格\n\n**Java编程语言编码规范(Code Conventions for the Java Programming Language).** 采用驼峰命名法. 其中类首字母大写, 字段和方法首字母小写. 对于常量, 可采用全大写 + 下划线的命名方式.\n\n## Chapter4 运算符\n\n> **运算符操纵数据.**\n\n### Beginning\n\n- 运算符接受一个或多个参数并生成新值.\n\n- **副作用(Side Effect):** 运算符可改变运算对象的值.\n\n### 优先级&关联性\n\n![pic2-1](BookNote-OnJava8-by-BruceEckel-2/pic2-1.png)\n\n> **Tips:** 节选自[**[菜鸟教程|Java运算符]**](https://www.runoob.com/java/java-operators.html)\n\n### 赋值\n\n- `=`表示, 将右边的值赋给左边的变量.\n\n- 基本类型的赋值是**值传递**.\n\n- 对象的赋值是**引用传递**.\n\n  > **Tips:** 实际上引用传递也是值传递, 只是这里传递的是**内存地址**.\n\n> **Additional:** [**[知乎|Java 到底是值传递还是引用传递？]**](https://www.zhihu.com/question/31203609?sort=created)\n\n### 算术运算符\n\n- `+`, `-`, `*`, `/`, `%`\n\n### 自增&自减\n\n- `++`, `--`\n\n```java\na = 1;\nb == a++; //先传值后自增, b = 1\nc == ++a; //先自增后传值, c = 3\n```\n\n### 关系运算符\n\n- `>`, `<`, `==`, `>=`, `<=`, `!=`\n\n- 接受两个操作数, 返回一个`boolean`值表示操作数之间的关系.\n\n尽管`==`和`!=`可以比较对象, 但更推荐的方法是使用`equals()`, 需要注意的是, 自定义类型使用`equals()`需要手动**覆写(Override)**.\n\n### 逻辑运算符\n\n- `&&`, `||`, `!`\n\n- 根据参数逻辑关系生成布尔值`true`, `false`.\n\n#### 短路\n\n当逻辑运算符运算结果确定时, 便会发生**短路(short-circuiting)**.\n\n```java\nclass ShortCircuit{\n  public static void main(String[] args){\n    test() && test() && test()\n  }\n  private boolean test(){\n    System.out.println(\"test\");\n    return false;\n  }\n}\n```\n\n上述代码执行结果只会得到一条`test`而非三条, `&&`在运算时发生了短路.\n\n### 字面值常量(Literal)\n\n可以指定字面值来确定常量的类型.\n\n```java\nint i1 = 0x2f; //16进制\nint i2 = 0177; //8进制\nlong n1 = 200L; //long型\nfloat f1 = 1f; //float\ndouble d1 = 1d; //double\nbyte b = (byte)0b00110101; //2进制\n```\n\n### 位运算符\n\n- `&`, `|`, `~`(取反), `^`(异或),`<<`, `>>`, `>>>`(按位右移补零)\n\n### 三目运算符\n\n- `?:` -> `variable x = (expression) ? value if true : value if false`\n\n## Chapter5 控制流\n\n> **程序必须在执行过程中控制它的世界并作出选择. 在Java中, 程序员需要执行控制语句来做出选择.**\n\nJava支持的关键字包括`if-else`, `while`, `do-while`, `for`, `return`, `break`, `switch`.\n\n需要注意的是, 所有条件语句的Expression应当是`boolean`类型.\n\n### if-else\n\n```java\n//允许省略else\nif(Boolean-Expression){\n  statement\n}\n//最常见的形式\nif(Boolean-Expression){\n  statement\n}\nelse{\n  statement\n}\n//允许嵌套\nif(Boolean-Expression){\n  statement\n}\nelse if(Boolean-Expression){\n  statement\n}\nelse{\n  statement\n}\n```\n\n### for while do-while\n\n- 循环语句又称迭代语句.\n\n```java\n//while\nwhile(Boolean-Expression){\n  statement\n}\n//do-while\n//do-while中do的内容无论while判断是否成立都会被至少执行一次.\ndo{\n  statement\n}while(Boolean-Expression)\n//for\nfor(Initialization; Boolean-Expression; step){\n  statement\n}\n//for允许逗号操作符, 使用示例如下\nfor(int i = 0, j = 0; i < 5; i++, j += i){\n  statement\n}\n//for-in/for-each\nfor(Type x: Contianer){\n  statement\n}\nfor(int i : range(10)){\n  statement\n}\nContainer.forEach(\n(Var1, Var2, ...) -> {statement}\n);\n```\n\n### return\n\n- 退出当前方法, 返回方法返回值.\n\n### break&continue\n\n- `break`与`continue`均用在循环体中.\n\n- `break`表示跳出当前循环; `continue`表示停止本次循环, 进行下一次循环.\n\n#### 标签\n\n- 源于`goto`机制, 在Java中, 允许为循环体定义**label**, 并允许`break`和`continue`使用**label**.\n\n具体规则如下:\n\n- `continue`会回退到最内层循环开头, 并继续执行.\n\n- `continue label`会到达标签位置, 并重新进入紧接着那个标签后的循环.\n\n- `break`会中断当前循环, 并移离当前标签末尾.\n\n- `break label`会中断当前循环, 并移离由那个标签指示的循环末尾.\n\n我们来看两个例子:\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        outerLoop:\n        for (int i = 0; i < 3; i++) {\n            innerLoop:\n            for (int j = 0; j < 3; j++) {\n                if (i == 1 && j == 1) {\n                    break outerLoop; // 跳出外部循环\n                }\n                System.out.println(\"i: \" + i + \", j: \" + j);\n            }\n        }\n    }\n}\n```\n\n执行结果为:\n\n```shell\ni: 0, j: 0\ni: 0, j: 1\ni: 0, j: 2\n```\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        outerLoop:\n        for (int i = 0; i < 3; i++) {\n            innerLoop:\n            for (int j = 0; j < 3; j++) {\n                if (i == 1 && j == 1) {\n                    continue outerLoop; // 跳过外部循环的当前迭代\n                }\n                System.out.println(\"i: \" + i + \", j: \" + j);\n            }\n        }\n    }\n}\n```\n\n执行结果为:\n\n```shell\ni: 0, j: 0\ni: 0, j: 1\ni: 0, j: 2\ni: 1, j: 0\ni: 2, j: 0\ni: 2, j: 1\ni: 2, j: 2\n```\n\n### switch\n\n其基本格式如下:\n\n```java\nswitch(integral-selector OR string-selector){\n  case int1/string1: statement; break;\n  case int2/string2: statement; break;\n  case int3/string3: statement; break;\n  default: statement;\n}\n```\n\n在`switch`体中, `default`可以省略. 如果缺少`break`, `switch`将会发生穿透. 示例如下:\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    int x = 2;\n    switch(x){\n      case 1:\n        System.out.println(\"case 1\").\n        break;\n      case 2:\n        System.out.println(\"case 2\").\n      case 3:\n        System.out.println(\"case 3\").\n      case 4:\n        System.out.println(\"case 4\").\n        break;\n      default:\n        System.out.println(\"default\").\n    }\n  }\n}\n```\n\n其结果如下:\n\n```shell\ncase 2\ncase 3\ncase 4\n```\n","slug":"BookNote-OnJava8-by-BruceEckel-2","published":1,"updated":"2024-11-13T13:01:43.739Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyui000issil1u3u9ee7","content":"<p><strong>Java语言假设程序员只进行面向对象编程,\r\n因此Java中(几乎)万物皆对象.</strong></p>\r\n<span id=\"more\"></span>\r\n<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#chapter3-万物皆对象\">Chapter3 万物皆对象</a>\r\n<ul>\r\n<li><a href=\"#对象操纵\">对象操纵</a></li>\r\n<li><a href=\"#对象创建\">对象创建</a>\r\n<ul>\r\n<li><a href=\"#数据存储\">数据存储</a></li>\r\n<li><a href=\"#基本类型存储\">基本类型存储</a></li>\r\n<li><a href=\"#高精度数值\">高精度数值</a></li>\r\n<li><a href=\"#数组存储\">数组存储</a></li>\r\n</ul></li>\r\n<li><a href=\"#代码注释\">代码注释</a></li>\r\n<li><a href=\"#对象清理\">对象清理</a>\r\n<ul>\r\n<li><a href=\"#作用域\">作用域</a></li>\r\n<li><a href=\"#对象作用域\">对象作用域</a></li>\r\n</ul></li>\r\n<li><a href=\"#类的创建\">类的创建</a>\r\n<ul>\r\n<li><a href=\"#类型\">类型</a></li>\r\n<li><a href=\"#字段field\">字段(Field)</a></li>\r\n<li><a href=\"#基本类型默认值\">基本类型默认值</a></li>\r\n<li><a href=\"#方法使用\">方法使用</a></li>\r\n<li><a href=\"#返回类型\">返回类型</a></li>\r\n<li><a href=\"#参数列表\">参数列表</a></li>\r\n</ul></li>\r\n<li><a href=\"#程序编写\">程序编写</a>\r\n<ul>\r\n<li><a href=\"#命名可见性\">命名可见性</a></li>\r\n<li><a href=\"#import\">import</a></li>\r\n<li><a href=\"#static\">static</a></li>\r\n</ul></li>\r\n<li><a href=\"#编码风格\">编码风格</a></li>\r\n</ul></li>\r\n<li><a href=\"#chapter4-运算符\">Chapter4 运算符</a>\r\n<ul>\r\n<li><a href=\"#beginning\">Beginning</a></li>\r\n<li><a href=\"#优先级关联性\">优先级&amp;关联性</a></li>\r\n<li><a href=\"#赋值\">赋值</a></li>\r\n<li><a href=\"#算术运算符\">算术运算符</a></li>\r\n<li><a href=\"#自增自减\">自增&amp;自减</a></li>\r\n<li><a href=\"#关系运算符\">关系运算符</a></li>\r\n<li><a href=\"#逻辑运算符\">逻辑运算符</a>\r\n<ul>\r\n<li><a href=\"#短路\">短路</a></li>\r\n</ul></li>\r\n<li><a href=\"#字面值常量literal\">字面值常量(Literal)</a></li>\r\n<li><a href=\"#位运算符\">位运算符</a></li>\r\n<li><a href=\"#三目运算符\">三目运算符</a></li>\r\n</ul></li>\r\n<li><a href=\"#chapter5-控制流\">Chapter5 控制流</a>\r\n<ul>\r\n<li><a href=\"#if-else\">if-else</a></li>\r\n<li><a href=\"#for-while-do-while\">for while do-while</a></li>\r\n<li><a href=\"#return\">return</a></li>\r\n<li><a href=\"#breakcontinue\">break&amp;continue</a>\r\n<ul>\r\n<li><a href=\"#标签\">标签</a></li>\r\n</ul></li>\r\n<li><a href=\"#switch\">switch</a></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"chapter3-万物皆对象\">Chapter3 万物皆对象</h2>\r\n<blockquote>\r\n<p><strong>如果我们说另一种不同的语言, 我们会发觉一个不同的世界! ——\r\nLudwig Wittgenstein(1889-1951)</strong></p>\r\n</blockquote>\r\n<h3 id=\"对象操纵\">对象操纵</h3>\r\n<p>所有的编程语言都会操纵内存中的元素.</p>\r\n<blockquote>\r\n<ul>\r\n<li>C/C++中对象的操纵是通过指针来完成的.</li>\r\n<li>Java利用万物皆对象的思想和单一一致的语法方式来简化问题,\r\n采用<strong>引用(Reference)</strong> 操纵对象.</li>\r\n</ul>\r\n</blockquote>\r\n<h3 id=\"对象创建\">对象创建</h3>\r\n<p>Java中使用<strong>引用</strong>关联<strong>对象</strong>.</p>\r\n<p>通常使用关键字<code>new</code>创建对象实例.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"数据存储\">数据存储</h4>\r\n<ul>\r\n<li><strong>寄存器(Registers)</strong>: 最快的存储器, 位于CPU内部.\r\n但数量有限,\r\n且Java无法直接控制(C/C++允许开发者像编译器建议寄存器的分配).</li>\r\n<li><strong>栈内存(Stack)</strong>: 位于<strong>随机访问存储器(Random\r\nAccess Memory, RAM)</strong> 中, CPU可通过栈指针直接访问.\r\n栈指针下移分配内存, 上移释放内存. 但栈上的数据要求提前知晓对象生存周期,\r\n因此栈内存上只存放部分Java数据, 对象本身存储在堆内存.</li>\r\n<li><strong>堆内存(Heap)</strong>: RAM区域的一种通用内存池,\r\n存放着所有的Java对象. 相较于栈区, 堆区的使用更灵活,\r\n但代价是分配和清理对象会比栈区更耗时.</li>\r\n<li><strong>常量存储(COnstant Storage)</strong>: 通常直接放在代码中,\r\n可考虑置于<strong>只读存储器(Read Only Memory, ROM)</strong>.</li>\r\n<li><strong>非RAM存储(Non-RAM Storage)</strong>: 数据存在于程序之外,\r\n包括<strong>序列化对象</strong>和<strong>持久化对象</strong>.</li>\r\n</ul>\r\n<h4 id=\"基本类型存储\">基本类型存储</h4>\r\n<p>Java中使用和C/C++一样策略的基本类型数据, 存放在栈中,\r\n其内存占用大小固定.</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align: center;\">基本类型</th>\r\n<th style=\"text-align: center;\">大小</th>\r\n<th style=\"text-align: center;\">最小值</th>\r\n<th style=\"text-align: center;\">最大值</th>\r\n<th style=\"text-align: center;\">包装类型</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: center;\">boolean</td>\r\n<td style=\"text-align: center;\">---</td>\r\n<td style=\"text-align: center;\">---</td>\r\n<td style=\"text-align: center;\">---</td>\r\n<td style=\"text-align: center;\">Boolean</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">char</td>\r\n<td style=\"text-align: center;\">16bits</td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(Unicode\\\r\n0\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(Unicode\\\r\n2^{16}-1\\)</span></td>\r\n<td style=\"text-align: center;\">Character</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">byte</td>\r\n<td style=\"text-align: center;\">8bits</td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(-128\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(+127\\)</span></td>\r\n<td style=\"text-align: center;\">Byte</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">short</td>\r\n<td style=\"text-align: center;\">16bits</td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(-2^{15}\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(+2^{15}-1\\)</span></td>\r\n<td style=\"text-align: center;\">Short</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">int</td>\r\n<td style=\"text-align: center;\">32bits</td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(-2^{31}\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(+2^{31}-1\\)</span></td>\r\n<td style=\"text-align: center;\">Integer</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">long</td>\r\n<td style=\"text-align: center;\">64bits</td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(-2^{63}\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(+2^{63}-1\\)</span></td>\r\n<td style=\"text-align: center;\">Long</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">float</td>\r\n<td style=\"text-align: center;\">32bits</td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(IEEE754\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(IEEE754\\)</span></td>\r\n<td style=\"text-align: center;\">Float</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">double</td>\r\n<td style=\"text-align: center;\">64bits</td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(IEEE754\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(IEEE754\\)</span></td>\r\n<td style=\"text-align: center;\">Double</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">void</td>\r\n<td style=\"text-align: center;\">---</td>\r\n<td style=\"text-align: center;\">---</td>\r\n<td style=\"text-align: center;\">---</td>\r\n<td style=\"text-align: center;\">Void</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>在堆区表示基本类型数据, 需要使用包装类:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;x&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">Charactor</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Charactor</span>(c);</span><br><span class=\"line\"><span class=\"type\">Charactor</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Charactor</span>(<span class=\"string\">&#x27;x&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//自动装箱</span></span><br><span class=\"line\"><span class=\"type\">Charactor</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;x&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//自动开箱</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ch;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"高精度数值\">高精度数值</h4>\r\n<p><code>BigInteger</code> &amp; <code>BigDecimal</code></p>\r\n<h4 id=\"数组存储\">数组存储</h4>\r\n<p>Java设计主要目标之一是安全性, 尽管牺牲了部分效率, 但换来了安全性.</p>\r\n<h3 id=\"代码注释\">代码注释</h3>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 跨行注释</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//单行注释</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"对象清理\">对象清理</h3>\r\n<h4 id=\"作用域\">作用域</h4>\r\n<p>C/C++和Java中的作用域由<code>&#123;&#125;</code>决定.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">q</span> <span class=\"operator\">=</span> <span class=\"number\">114514</span>;</span><br><span class=\"line\">        <span class=\"comment\">//x &amp; q可用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//仅x可用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>需要注意的是, 以下操作在Java中非法:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = <span class=\"number\">114514</span>; <span class=\"comment\">//Illegal</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 尽管作者在书中如此说明,\r\n但在新版的Java中(笔者使用为JDK17), 该操作是允许的,\r\n仅仅是IDE给出一个提示.</p>\r\n</blockquote>\r\n<h4 id=\"对象作用域\">对象作用域</h4>\r\n<p>Java中的对象与基本类型具有不同的生命周期.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;a string&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 作用域终点</span></span><br><span class=\"line\"><span class=\"comment\">// x生命周期结束</span></span><br><span class=\"line\"><span class=\"comment\">// s生命周期独立作用域</span></span><br></pre></td></tr></table></figure>\r\n<p>Java的内存回收不同于C++, 采用的是垃圾收集器机制,\r\n通过不可达的判断回收对象. 可以有效避免<strong>内存泄漏</strong>问题.</p>\r\n<h3 id=\"类的创建\">类的创建</h3>\r\n<h4 id=\"类型\">类型</h4>\r\n<p>Java中使用<code>class</code>关键字描述新对象.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Example</span>();</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"字段field\">字段(Field)</h4>\r\n<p>字段可以是基本类型或引用类型.</p>\r\n<p>与C++中对应则是<strong>成员变量</strong>.</p>\r\n<h4 id=\"基本类型默认值\">基本类型默认值</h4>\r\n<p>默认值仅在Java初始化类时使用.</p>\r\n<ul>\r\n<li><p>基本类型会被赋值为<code>0</code>(<code>boolean</code>为<code>false</code>).</p></li>\r\n<li><p>但局部变量不会被赋默认值, 如果不显式指定初始化,\r\n编译器会报错.</p></li>\r\n</ul>\r\n<h4 id=\"方法使用\">方法使用</h4>\r\n<p>对应C++中的成员函数.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">return</span> type] [method name](<span class=\"comment\">/*args list*/</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//method body</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"返回类型\">返回类型</h4>\r\n<ul>\r\n<li><strong>方法签名(Signature of the Method)</strong> 是方法的唯一标识,\r\n包括方法名和参数列表.\r\n(<strong>返回类型不是方法签名的一部分</strong>)</li>\r\n</ul>\r\n<h4 id=\"参数列表\">参数列表</h4>\r\n<p>Java中参数也是通过对象的形式传递, 也就是说,\r\n传递的是对象引用(不包括基本类型).</p>\r\n<h3 id=\"程序编写\">程序编写</h3>\r\n<h4 id=\"命名可见性\">命名可见性</h4>\r\n<ul>\r\n<li><p>C++通过<strong>命名空间(namespace)</strong>\r\n解决命名冲突.</p></li>\r\n<li><p>Java为一个类库生成一个明确的名称来解决冲突.\r\n使用反向URL关联命名空间和文件路径会导致源代码管理出现混乱,\r\n比如说空目录问题(用于表示反向URL).</p></li>\r\n</ul>\r\n<h4 id=\"import\">import</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"static\">static</h4>\r\n<p>在类中的使用与C++基本一致.</p>\r\n<ul>\r\n<li>有时Java使用<strong>类数据(class data)</strong>\r\n和<strong>类方法(class method)</strong> 来表示静态成员.</li>\r\n</ul>\r\n<h3 id=\"编码风格\">编码风格</h3>\r\n<p><strong>Java编程语言编码规范(Code Conventions for the Java\r\nProgramming Language).</strong> 采用驼峰命名法. 其中类首字母大写,\r\n字段和方法首字母小写. 对于常量, 可采用全大写 + 下划线的命名方式.</p>\r\n<h2 id=\"chapter4-运算符\">Chapter4 运算符</h2>\r\n<blockquote>\r\n<p><strong>运算符操纵数据.</strong></p>\r\n</blockquote>\r\n<h3 id=\"beginning\">Beginning</h3>\r\n<ul>\r\n<li><p>运算符接受一个或多个参数并生成新值.</p></li>\r\n<li><p><strong>副作用(Side Effect):</strong>\r\n运算符可改变运算对象的值.</p></li>\r\n</ul>\r\n<h3 id=\"优先级关联性\">优先级&amp;关联性</h3>\r\n<img src=\"/2024/11/03/BookNote-OnJava8-by-BruceEckel-2/pic2-1.png\" class=\"\" title=\"pic2-1\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 节选自<a\r\nhref=\"https://www.runoob.com/java/java-operators.html\"><strong>[菜鸟教程|Java运算符]</strong></a></p>\r\n</blockquote>\r\n<h3 id=\"赋值\">赋值</h3>\r\n<ul>\r\n<li><p><code>=</code>表示, 将右边的值赋给左边的变量.</p></li>\r\n<li><p>基本类型的赋值是<strong>值传递</strong>.</p></li>\r\n<li><p>对象的赋值是<strong>引用传递</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 实际上引用传递也是值传递,\r\n只是这里传递的是<strong>内存地址</strong>.</p>\r\n</blockquote></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Additional:</strong> <a\r\nhref=\"https://www.zhihu.com/question/31203609?sort=created\"><strong>[知乎|Java\r\n到底是值传递还是引用传递？]</strong></a></p>\r\n</blockquote>\r\n<h3 id=\"算术运算符\">算术运算符</h3>\r\n<ul>\r\n<li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>,\r\n<code>%</code></li>\r\n</ul>\r\n<h3 id=\"自增自减\">自增&amp;自减</h3>\r\n<ul>\r\n<li><code>++</code>, <code>--</code></li>\r\n</ul>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\">b == a++; <span class=\"comment\">//先传值后自增, b = 1</span></span><br><span class=\"line\">c == ++a; <span class=\"comment\">//先自增后传值, c = 3</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"关系运算符\">关系运算符</h3>\r\n<ul>\r\n<li><p><code>&gt;</code>, <code>&lt;</code>, <code>==</code>,\r\n<code>&gt;=</code>, <code>&lt;=</code>, <code>!=</code></p></li>\r\n<li><p>接受两个操作数,\r\n返回一个<code>boolean</code>值表示操作数之间的关系.</p></li>\r\n</ul>\r\n<p>尽管<code>==</code>和<code>!=</code>可以比较对象,\r\n但更推荐的方法是使用<code>equals()</code>, 需要注意的是,\r\n自定义类型使用<code>equals()</code>需要手动<strong>覆写(Override)</strong>.</p>\r\n<h3 id=\"逻辑运算符\">逻辑运算符</h3>\r\n<ul>\r\n<li><p><code>&amp;&amp;</code>, <code>||</code>, <code>!</code></p></li>\r\n<li><p>根据参数逻辑关系生成布尔值<code>true</code>,\r\n<code>false</code>.</p></li>\r\n</ul>\r\n<h4 id=\"短路\">短路</h4>\r\n<p>当逻辑运算符运算结果确定时,\r\n便会发生<strong>短路(short-circuiting)</strong>.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ShortCircuit</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    test() &amp;&amp; test() &amp;&amp; test()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>上述代码执行结果只会得到一条<code>test</code>而非三条,\r\n<code>&amp;&amp;</code>在运算时发生了短路.</p>\r\n<h3 id=\"字面值常量literal\">字面值常量(Literal)</h3>\r\n<p>可以指定字面值来确定常量的类型.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">0x2f</span>; <span class=\"comment\">//16进制</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"number\">0177</span>; <span class=\"comment\">//8进制</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"number\">200L</span>; <span class=\"comment\">//long型</span></span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"number\">1f</span>; <span class=\"comment\">//float</span></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">d1</span> <span class=\"operator\">=</span> <span class=\"number\">1d</span>; <span class=\"comment\">//double</span></span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>)<span class=\"number\">0b00110101</span>; <span class=\"comment\">//2进制</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"位运算符\">位运算符</h3>\r\n<ul>\r\n<li><code>&amp;</code>, <code>|</code>, <code>~</code>(取反),\r\n<code>^</code>(异或),<code>&lt;&lt;</code>, <code>&gt;&gt;</code>,\r\n<code>&gt;&gt;&gt;</code>(按位右移补零)</li>\r\n</ul>\r\n<h3 id=\"三目运算符\">三目运算符</h3>\r\n<ul>\r\n<li><code>?:</code> -&gt;\r\n<code>variable x = (expression) ? value if true : value if false</code></li>\r\n</ul>\r\n<h2 id=\"chapter5-控制流\">Chapter5 控制流</h2>\r\n<blockquote>\r\n<p><strong>程序必须在执行过程中控制它的世界并作出选择. 在Java中,\r\n程序员需要执行控制语句来做出选择.</strong></p>\r\n</blockquote>\r\n<p>Java支持的关键字包括<code>if-else</code>, <code>while</code>,\r\n<code>do-while</code>, <code>for</code>, <code>return</code>,\r\n<code>break</code>, <code>switch</code>.</p>\r\n<p>需要注意的是,\r\n所有条件语句的Expression应当是<code>boolean</code>类型.</p>\r\n<h3 id=\"if-else\">if-else</h3>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//允许省略else</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(Boolean-Expression)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最常见的形式</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(Boolean-Expression)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//允许嵌套</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(Boolean-Expression)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Boolean-Expression)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"for-while-do-while\">for while do-while</h3>\r\n<ul>\r\n<li>循环语句又称迭代语句.</li>\r\n</ul>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//while</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(Boolean-Expression)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//do-while</span></span><br><span class=\"line\"><span class=\"comment\">//do-while中do的内容无论while判断是否成立都会被至少执行一次.</span></span><br><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(Boolean-Expression)</span><br><span class=\"line\"><span class=\"comment\">//for</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Initialization; Boolean-Expression; step)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//for允许逗号操作符, 使用示例如下</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++, j += i)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//for-in/for-each</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Type x: Contianer)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i : range(<span class=\"number\">10</span>))&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Container.forEach(</span><br><span class=\"line\">(Var1, Var2, ...) -&gt; &#123;statement&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"return\">return</h3>\r\n<ul>\r\n<li>退出当前方法, 返回方法返回值.</li>\r\n</ul>\r\n<h3 id=\"breakcontinue\">break&amp;continue</h3>\r\n<ul>\r\n<li><p><code>break</code>与<code>continue</code>均用在循环体中.</p></li>\r\n<li><p><code>break</code>表示跳出当前循环;\r\n<code>continue</code>表示停止本次循环, 进行下一次循环.</p></li>\r\n</ul>\r\n<h4 id=\"标签\">标签</h4>\r\n<ul>\r\n<li>源于<code>goto</code>机制, 在Java中,\r\n允许为循环体定义<strong>label</strong>,\r\n并允许<code>break</code>和<code>continue</code>使用<strong>label</strong>.</li>\r\n</ul>\r\n<p>具体规则如下:</p>\r\n<ul>\r\n<li><p><code>continue</code>会回退到最内层循环开头, 并继续执行.</p></li>\r\n<li><p><code>continue label</code>会到达标签位置,\r\n并重新进入紧接着那个标签后的循环.</p></li>\r\n<li><p><code>break</code>会中断当前循环, 并移离当前标签末尾.</p></li>\r\n<li><p><code>break label</code>会中断当前循环,\r\n并移离由那个标签指示的循环末尾.</p></li>\r\n</ul>\r\n<p>我们来看两个例子:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        outerLoop:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            innerLoop:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span> &amp;&amp; j == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span> outerLoop; <span class=\"comment\">// 跳出外部循环</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;i: &quot;</span> + i + <span class=\"string\">&quot;, j: &quot;</span> + j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>执行结果为:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i: 0, j: 0</span><br><span class=\"line\">i: 0, j: 1</span><br><span class=\"line\">i: 0, j: 2</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        outerLoop:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            innerLoop:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span> &amp;&amp; j == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span> outerLoop; <span class=\"comment\">// 跳过外部循环的当前迭代</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;i: &quot;</span> + i + <span class=\"string\">&quot;, j: &quot;</span> + j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>执行结果为:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i: 0, j: 0</span><br><span class=\"line\">i: 0, j: 1</span><br><span class=\"line\">i: 0, j: 2</span><br><span class=\"line\">i: 1, j: 0</span><br><span class=\"line\">i: 2, j: 0</span><br><span class=\"line\">i: 2, j: 1</span><br><span class=\"line\">i: 2, j: 2</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"switch\">switch</h3>\r\n<p>其基本格式如下:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(integral-selector OR string-selector)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> int1/string1: statement; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> int2/string2: statement; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> int3/string3: statement; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>: statement;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>在<code>switch</code>体中, <code>default</code>可以省略.\r\n如果缺少<code>break</code>, <code>switch</code>将会发生穿透.\r\n示例如下:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(x)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;case 1&quot;</span>).</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;case 2&quot;</span>).</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;case 3&quot;</span>).</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;case 4&quot;</span>).</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;default&quot;</span>).</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>其结果如下:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case 2</span><br><span class=\"line\">case 3</span><br><span class=\"line\">case 4</span><br></pre></td></tr></table></figure>\r\n","length":2472,"excerpt":"<p><strong>Java语言假设程序员只进行面向对象编程,\r\n因此Java中(几乎)万物皆对象.</strong></p>","more":"<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#chapter3-万物皆对象\">Chapter3 万物皆对象</a>\r\n<ul>\r\n<li><a href=\"#对象操纵\">对象操纵</a></li>\r\n<li><a href=\"#对象创建\">对象创建</a>\r\n<ul>\r\n<li><a href=\"#数据存储\">数据存储</a></li>\r\n<li><a href=\"#基本类型存储\">基本类型存储</a></li>\r\n<li><a href=\"#高精度数值\">高精度数值</a></li>\r\n<li><a href=\"#数组存储\">数组存储</a></li>\r\n</ul></li>\r\n<li><a href=\"#代码注释\">代码注释</a></li>\r\n<li><a href=\"#对象清理\">对象清理</a>\r\n<ul>\r\n<li><a href=\"#作用域\">作用域</a></li>\r\n<li><a href=\"#对象作用域\">对象作用域</a></li>\r\n</ul></li>\r\n<li><a href=\"#类的创建\">类的创建</a>\r\n<ul>\r\n<li><a href=\"#类型\">类型</a></li>\r\n<li><a href=\"#字段field\">字段(Field)</a></li>\r\n<li><a href=\"#基本类型默认值\">基本类型默认值</a></li>\r\n<li><a href=\"#方法使用\">方法使用</a></li>\r\n<li><a href=\"#返回类型\">返回类型</a></li>\r\n<li><a href=\"#参数列表\">参数列表</a></li>\r\n</ul></li>\r\n<li><a href=\"#程序编写\">程序编写</a>\r\n<ul>\r\n<li><a href=\"#命名可见性\">命名可见性</a></li>\r\n<li><a href=\"#import\">import</a></li>\r\n<li><a href=\"#static\">static</a></li>\r\n</ul></li>\r\n<li><a href=\"#编码风格\">编码风格</a></li>\r\n</ul></li>\r\n<li><a href=\"#chapter4-运算符\">Chapter4 运算符</a>\r\n<ul>\r\n<li><a href=\"#beginning\">Beginning</a></li>\r\n<li><a href=\"#优先级关联性\">优先级&amp;关联性</a></li>\r\n<li><a href=\"#赋值\">赋值</a></li>\r\n<li><a href=\"#算术运算符\">算术运算符</a></li>\r\n<li><a href=\"#自增自减\">自增&amp;自减</a></li>\r\n<li><a href=\"#关系运算符\">关系运算符</a></li>\r\n<li><a href=\"#逻辑运算符\">逻辑运算符</a>\r\n<ul>\r\n<li><a href=\"#短路\">短路</a></li>\r\n</ul></li>\r\n<li><a href=\"#字面值常量literal\">字面值常量(Literal)</a></li>\r\n<li><a href=\"#位运算符\">位运算符</a></li>\r\n<li><a href=\"#三目运算符\">三目运算符</a></li>\r\n</ul></li>\r\n<li><a href=\"#chapter5-控制流\">Chapter5 控制流</a>\r\n<ul>\r\n<li><a href=\"#if-else\">if-else</a></li>\r\n<li><a href=\"#for-while-do-while\">for while do-while</a></li>\r\n<li><a href=\"#return\">return</a></li>\r\n<li><a href=\"#breakcontinue\">break&amp;continue</a>\r\n<ul>\r\n<li><a href=\"#标签\">标签</a></li>\r\n</ul></li>\r\n<li><a href=\"#switch\">switch</a></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"chapter3-万物皆对象\">Chapter3 万物皆对象</h2>\r\n<blockquote>\r\n<p><strong>如果我们说另一种不同的语言, 我们会发觉一个不同的世界! ——\r\nLudwig Wittgenstein(1889-1951)</strong></p>\r\n</blockquote>\r\n<h3 id=\"对象操纵\">对象操纵</h3>\r\n<p>所有的编程语言都会操纵内存中的元素.</p>\r\n<blockquote>\r\n<ul>\r\n<li>C/C++中对象的操纵是通过指针来完成的.</li>\r\n<li>Java利用万物皆对象的思想和单一一致的语法方式来简化问题,\r\n采用<strong>引用(Reference)</strong> 操纵对象.</li>\r\n</ul>\r\n</blockquote>\r\n<h3 id=\"对象创建\">对象创建</h3>\r\n<p>Java中使用<strong>引用</strong>关联<strong>对象</strong>.</p>\r\n<p>通常使用关键字<code>new</code>创建对象实例.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"数据存储\">数据存储</h4>\r\n<ul>\r\n<li><strong>寄存器(Registers)</strong>: 最快的存储器, 位于CPU内部.\r\n但数量有限,\r\n且Java无法直接控制(C/C++允许开发者像编译器建议寄存器的分配).</li>\r\n<li><strong>栈内存(Stack)</strong>: 位于<strong>随机访问存储器(Random\r\nAccess Memory, RAM)</strong> 中, CPU可通过栈指针直接访问.\r\n栈指针下移分配内存, 上移释放内存. 但栈上的数据要求提前知晓对象生存周期,\r\n因此栈内存上只存放部分Java数据, 对象本身存储在堆内存.</li>\r\n<li><strong>堆内存(Heap)</strong>: RAM区域的一种通用内存池,\r\n存放着所有的Java对象. 相较于栈区, 堆区的使用更灵活,\r\n但代价是分配和清理对象会比栈区更耗时.</li>\r\n<li><strong>常量存储(COnstant Storage)</strong>: 通常直接放在代码中,\r\n可考虑置于<strong>只读存储器(Read Only Memory, ROM)</strong>.</li>\r\n<li><strong>非RAM存储(Non-RAM Storage)</strong>: 数据存在于程序之外,\r\n包括<strong>序列化对象</strong>和<strong>持久化对象</strong>.</li>\r\n</ul>\r\n<h4 id=\"基本类型存储\">基本类型存储</h4>\r\n<p>Java中使用和C/C++一样策略的基本类型数据, 存放在栈中,\r\n其内存占用大小固定.</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align: center;\">基本类型</th>\r\n<th style=\"text-align: center;\">大小</th>\r\n<th style=\"text-align: center;\">最小值</th>\r\n<th style=\"text-align: center;\">最大值</th>\r\n<th style=\"text-align: center;\">包装类型</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: center;\">boolean</td>\r\n<td style=\"text-align: center;\">---</td>\r\n<td style=\"text-align: center;\">---</td>\r\n<td style=\"text-align: center;\">---</td>\r\n<td style=\"text-align: center;\">Boolean</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">char</td>\r\n<td style=\"text-align: center;\">16bits</td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(Unicode\\\r\n0\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(Unicode\\\r\n2^{16}-1\\)</span></td>\r\n<td style=\"text-align: center;\">Character</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">byte</td>\r\n<td style=\"text-align: center;\">8bits</td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(-128\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(+127\\)</span></td>\r\n<td style=\"text-align: center;\">Byte</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">short</td>\r\n<td style=\"text-align: center;\">16bits</td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(-2^{15}\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(+2^{15}-1\\)</span></td>\r\n<td style=\"text-align: center;\">Short</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">int</td>\r\n<td style=\"text-align: center;\">32bits</td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(-2^{31}\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(+2^{31}-1\\)</span></td>\r\n<td style=\"text-align: center;\">Integer</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">long</td>\r\n<td style=\"text-align: center;\">64bits</td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(-2^{63}\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(+2^{63}-1\\)</span></td>\r\n<td style=\"text-align: center;\">Long</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">float</td>\r\n<td style=\"text-align: center;\">32bits</td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(IEEE754\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(IEEE754\\)</span></td>\r\n<td style=\"text-align: center;\">Float</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">double</td>\r\n<td style=\"text-align: center;\">64bits</td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(IEEE754\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(IEEE754\\)</span></td>\r\n<td style=\"text-align: center;\">Double</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">void</td>\r\n<td style=\"text-align: center;\">---</td>\r\n<td style=\"text-align: center;\">---</td>\r\n<td style=\"text-align: center;\">---</td>\r\n<td style=\"text-align: center;\">Void</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>在堆区表示基本类型数据, 需要使用包装类:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;x&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">Charactor</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Charactor</span>(c);</span><br><span class=\"line\"><span class=\"type\">Charactor</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Charactor</span>(<span class=\"string\">&#x27;x&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//自动装箱</span></span><br><span class=\"line\"><span class=\"type\">Charactor</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;x&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//自动开箱</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ch;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"高精度数值\">高精度数值</h4>\r\n<p><code>BigInteger</code> &amp; <code>BigDecimal</code></p>\r\n<h4 id=\"数组存储\">数组存储</h4>\r\n<p>Java设计主要目标之一是安全性, 尽管牺牲了部分效率, 但换来了安全性.</p>\r\n<h3 id=\"代码注释\">代码注释</h3>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 跨行注释</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//单行注释</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"对象清理\">对象清理</h3>\r\n<h4 id=\"作用域\">作用域</h4>\r\n<p>C/C++和Java中的作用域由<code>&#123;&#125;</code>决定.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">q</span> <span class=\"operator\">=</span> <span class=\"number\">114514</span>;</span><br><span class=\"line\">        <span class=\"comment\">//x &amp; q可用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//仅x可用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>需要注意的是, 以下操作在Java中非法:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = <span class=\"number\">114514</span>; <span class=\"comment\">//Illegal</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 尽管作者在书中如此说明,\r\n但在新版的Java中(笔者使用为JDK17), 该操作是允许的,\r\n仅仅是IDE给出一个提示.</p>\r\n</blockquote>\r\n<h4 id=\"对象作用域\">对象作用域</h4>\r\n<p>Java中的对象与基本类型具有不同的生命周期.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;a string&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 作用域终点</span></span><br><span class=\"line\"><span class=\"comment\">// x生命周期结束</span></span><br><span class=\"line\"><span class=\"comment\">// s生命周期独立作用域</span></span><br></pre></td></tr></table></figure>\r\n<p>Java的内存回收不同于C++, 采用的是垃圾收集器机制,\r\n通过不可达的判断回收对象. 可以有效避免<strong>内存泄漏</strong>问题.</p>\r\n<h3 id=\"类的创建\">类的创建</h3>\r\n<h4 id=\"类型\">类型</h4>\r\n<p>Java中使用<code>class</code>关键字描述新对象.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Example</span> <span class=\"variable\">example</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Example</span>();</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"字段field\">字段(Field)</h4>\r\n<p>字段可以是基本类型或引用类型.</p>\r\n<p>与C++中对应则是<strong>成员变量</strong>.</p>\r\n<h4 id=\"基本类型默认值\">基本类型默认值</h4>\r\n<p>默认值仅在Java初始化类时使用.</p>\r\n<ul>\r\n<li><p>基本类型会被赋值为<code>0</code>(<code>boolean</code>为<code>false</code>).</p></li>\r\n<li><p>但局部变量不会被赋默认值, 如果不显式指定初始化,\r\n编译器会报错.</p></li>\r\n</ul>\r\n<h4 id=\"方法使用\">方法使用</h4>\r\n<p>对应C++中的成员函数.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">return</span> type] [method name](<span class=\"comment\">/*args list*/</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//method body</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"返回类型\">返回类型</h4>\r\n<ul>\r\n<li><strong>方法签名(Signature of the Method)</strong> 是方法的唯一标识,\r\n包括方法名和参数列表.\r\n(<strong>返回类型不是方法签名的一部分</strong>)</li>\r\n</ul>\r\n<h4 id=\"参数列表\">参数列表</h4>\r\n<p>Java中参数也是通过对象的形式传递, 也就是说,\r\n传递的是对象引用(不包括基本类型).</p>\r\n<h3 id=\"程序编写\">程序编写</h3>\r\n<h4 id=\"命名可见性\">命名可见性</h4>\r\n<ul>\r\n<li><p>C++通过<strong>命名空间(namespace)</strong>\r\n解决命名冲突.</p></li>\r\n<li><p>Java为一个类库生成一个明确的名称来解决冲突.\r\n使用反向URL关联命名空间和文件路径会导致源代码管理出现混乱,\r\n比如说空目录问题(用于表示反向URL).</p></li>\r\n</ul>\r\n<h4 id=\"import\">import</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"static\">static</h4>\r\n<p>在类中的使用与C++基本一致.</p>\r\n<ul>\r\n<li>有时Java使用<strong>类数据(class data)</strong>\r\n和<strong>类方法(class method)</strong> 来表示静态成员.</li>\r\n</ul>\r\n<h3 id=\"编码风格\">编码风格</h3>\r\n<p><strong>Java编程语言编码规范(Code Conventions for the Java\r\nProgramming Language).</strong> 采用驼峰命名法. 其中类首字母大写,\r\n字段和方法首字母小写. 对于常量, 可采用全大写 + 下划线的命名方式.</p>\r\n<h2 id=\"chapter4-运算符\">Chapter4 运算符</h2>\r\n<blockquote>\r\n<p><strong>运算符操纵数据.</strong></p>\r\n</blockquote>\r\n<h3 id=\"beginning\">Beginning</h3>\r\n<ul>\r\n<li><p>运算符接受一个或多个参数并生成新值.</p></li>\r\n<li><p><strong>副作用(Side Effect):</strong>\r\n运算符可改变运算对象的值.</p></li>\r\n</ul>\r\n<h3 id=\"优先级关联性\">优先级&amp;关联性</h3>\r\n<img src=\"/2024/11/03/BookNote-OnJava8-by-BruceEckel-2/pic2-1.png\" class=\"\" title=\"pic2-1\">\r\n<blockquote>\r\n<p><strong>Tips:</strong> 节选自<a\r\nhref=\"https://www.runoob.com/java/java-operators.html\"><strong>[菜鸟教程|Java运算符]</strong></a></p>\r\n</blockquote>\r\n<h3 id=\"赋值\">赋值</h3>\r\n<ul>\r\n<li><p><code>=</code>表示, 将右边的值赋给左边的变量.</p></li>\r\n<li><p>基本类型的赋值是<strong>值传递</strong>.</p></li>\r\n<li><p>对象的赋值是<strong>引用传递</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 实际上引用传递也是值传递,\r\n只是这里传递的是<strong>内存地址</strong>.</p>\r\n</blockquote></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Additional:</strong> <a\r\nhref=\"https://www.zhihu.com/question/31203609?sort=created\"><strong>[知乎|Java\r\n到底是值传递还是引用传递？]</strong></a></p>\r\n</blockquote>\r\n<h3 id=\"算术运算符\">算术运算符</h3>\r\n<ul>\r\n<li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>,\r\n<code>%</code></li>\r\n</ul>\r\n<h3 id=\"自增自减\">自增&amp;自减</h3>\r\n<ul>\r\n<li><code>++</code>, <code>--</code></li>\r\n</ul>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\">b == a++; <span class=\"comment\">//先传值后自增, b = 1</span></span><br><span class=\"line\">c == ++a; <span class=\"comment\">//先自增后传值, c = 3</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"关系运算符\">关系运算符</h3>\r\n<ul>\r\n<li><p><code>&gt;</code>, <code>&lt;</code>, <code>==</code>,\r\n<code>&gt;=</code>, <code>&lt;=</code>, <code>!=</code></p></li>\r\n<li><p>接受两个操作数,\r\n返回一个<code>boolean</code>值表示操作数之间的关系.</p></li>\r\n</ul>\r\n<p>尽管<code>==</code>和<code>!=</code>可以比较对象,\r\n但更推荐的方法是使用<code>equals()</code>, 需要注意的是,\r\n自定义类型使用<code>equals()</code>需要手动<strong>覆写(Override)</strong>.</p>\r\n<h3 id=\"逻辑运算符\">逻辑运算符</h3>\r\n<ul>\r\n<li><p><code>&amp;&amp;</code>, <code>||</code>, <code>!</code></p></li>\r\n<li><p>根据参数逻辑关系生成布尔值<code>true</code>,\r\n<code>false</code>.</p></li>\r\n</ul>\r\n<h4 id=\"短路\">短路</h4>\r\n<p>当逻辑运算符运算结果确定时,\r\n便会发生<strong>短路(short-circuiting)</strong>.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ShortCircuit</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    test() &amp;&amp; test() &amp;&amp; test()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>上述代码执行结果只会得到一条<code>test</code>而非三条,\r\n<code>&amp;&amp;</code>在运算时发生了短路.</p>\r\n<h3 id=\"字面值常量literal\">字面值常量(Literal)</h3>\r\n<p>可以指定字面值来确定常量的类型.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">0x2f</span>; <span class=\"comment\">//16进制</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"number\">0177</span>; <span class=\"comment\">//8进制</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"number\">200L</span>; <span class=\"comment\">//long型</span></span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"number\">1f</span>; <span class=\"comment\">//float</span></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">d1</span> <span class=\"operator\">=</span> <span class=\"number\">1d</span>; <span class=\"comment\">//double</span></span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>)<span class=\"number\">0b00110101</span>; <span class=\"comment\">//2进制</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"位运算符\">位运算符</h3>\r\n<ul>\r\n<li><code>&amp;</code>, <code>|</code>, <code>~</code>(取反),\r\n<code>^</code>(异或),<code>&lt;&lt;</code>, <code>&gt;&gt;</code>,\r\n<code>&gt;&gt;&gt;</code>(按位右移补零)</li>\r\n</ul>\r\n<h3 id=\"三目运算符\">三目运算符</h3>\r\n<ul>\r\n<li><code>?:</code> -&gt;\r\n<code>variable x = (expression) ? value if true : value if false</code></li>\r\n</ul>\r\n<h2 id=\"chapter5-控制流\">Chapter5 控制流</h2>\r\n<blockquote>\r\n<p><strong>程序必须在执行过程中控制它的世界并作出选择. 在Java中,\r\n程序员需要执行控制语句来做出选择.</strong></p>\r\n</blockquote>\r\n<p>Java支持的关键字包括<code>if-else</code>, <code>while</code>,\r\n<code>do-while</code>, <code>for</code>, <code>return</code>,\r\n<code>break</code>, <code>switch</code>.</p>\r\n<p>需要注意的是,\r\n所有条件语句的Expression应当是<code>boolean</code>类型.</p>\r\n<h3 id=\"if-else\">if-else</h3>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//允许省略else</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(Boolean-Expression)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最常见的形式</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(Boolean-Expression)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//允许嵌套</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(Boolean-Expression)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Boolean-Expression)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"for-while-do-while\">for while do-while</h3>\r\n<ul>\r\n<li>循环语句又称迭代语句.</li>\r\n</ul>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//while</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(Boolean-Expression)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//do-while</span></span><br><span class=\"line\"><span class=\"comment\">//do-while中do的内容无论while判断是否成立都会被至少执行一次.</span></span><br><span class=\"line\"><span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(Boolean-Expression)</span><br><span class=\"line\"><span class=\"comment\">//for</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Initialization; Boolean-Expression; step)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//for允许逗号操作符, 使用示例如下</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++, j += i)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//for-in/for-each</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Type x: Contianer)&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i : range(<span class=\"number\">10</span>))&#123;</span><br><span class=\"line\">  statement</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Container.forEach(</span><br><span class=\"line\">(Var1, Var2, ...) -&gt; &#123;statement&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"return\">return</h3>\r\n<ul>\r\n<li>退出当前方法, 返回方法返回值.</li>\r\n</ul>\r\n<h3 id=\"breakcontinue\">break&amp;continue</h3>\r\n<ul>\r\n<li><p><code>break</code>与<code>continue</code>均用在循环体中.</p></li>\r\n<li><p><code>break</code>表示跳出当前循环;\r\n<code>continue</code>表示停止本次循环, 进行下一次循环.</p></li>\r\n</ul>\r\n<h4 id=\"标签\">标签</h4>\r\n<ul>\r\n<li>源于<code>goto</code>机制, 在Java中,\r\n允许为循环体定义<strong>label</strong>,\r\n并允许<code>break</code>和<code>continue</code>使用<strong>label</strong>.</li>\r\n</ul>\r\n<p>具体规则如下:</p>\r\n<ul>\r\n<li><p><code>continue</code>会回退到最内层循环开头, 并继续执行.</p></li>\r\n<li><p><code>continue label</code>会到达标签位置,\r\n并重新进入紧接着那个标签后的循环.</p></li>\r\n<li><p><code>break</code>会中断当前循环, 并移离当前标签末尾.</p></li>\r\n<li><p><code>break label</code>会中断当前循环,\r\n并移离由那个标签指示的循环末尾.</p></li>\r\n</ul>\r\n<p>我们来看两个例子:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        outerLoop:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            innerLoop:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span> &amp;&amp; j == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span> outerLoop; <span class=\"comment\">// 跳出外部循环</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;i: &quot;</span> + i + <span class=\"string\">&quot;, j: &quot;</span> + j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>执行结果为:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i: 0, j: 0</span><br><span class=\"line\">i: 0, j: 1</span><br><span class=\"line\">i: 0, j: 2</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        outerLoop:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            innerLoop:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span> &amp;&amp; j == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span> outerLoop; <span class=\"comment\">// 跳过外部循环的当前迭代</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;i: &quot;</span> + i + <span class=\"string\">&quot;, j: &quot;</span> + j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>执行结果为:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i: 0, j: 0</span><br><span class=\"line\">i: 0, j: 1</span><br><span class=\"line\">i: 0, j: 2</span><br><span class=\"line\">i: 1, j: 0</span><br><span class=\"line\">i: 2, j: 0</span><br><span class=\"line\">i: 2, j: 1</span><br><span class=\"line\">i: 2, j: 2</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"switch\">switch</h3>\r\n<p>其基本格式如下:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(integral-selector OR string-selector)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> int1/string1: statement; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> int2/string2: statement; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> int3/string3: statement; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>: statement;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>在<code>switch</code>体中, <code>default</code>可以省略.\r\n如果缺少<code>break</code>, <code>switch</code>将会发生穿透.\r\n示例如下:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(x)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;case 1&quot;</span>).</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;case 2&quot;</span>).</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;case 3&quot;</span>).</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;case 4&quot;</span>).</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;default&quot;</span>).</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>其结果如下:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case 2</span><br><span class=\"line\">case 3</span><br><span class=\"line\">case 4</span><br></pre></td></tr></table></figure>"},{"title":"NJU静态分析|A1-Live Variable Analysis","date":"2024-10-19T16:04:07.000Z","hidden":false,"_content":"\n**NJU Static Program Analysis | Assignment-1 Live Variable Analysis & IterativeSolver.**\n\n<!--more-->\n\n## 实验信息\n\nNJU软件分析, 实际上是静态分析(Static Program Analysis), 是由李樾和谭添老师开设的面向本科生和研究生的一门课程, 因为是本研共修选修课, 因此本课程内容较为基础, 比较适合对静态分析感兴趣的初学者快速入门. 课程网站[**[Static Program Analysis]**](https://tai-e.pascal-lab.net/lectures.html), 配套课程[**[Bilibili|南京大学《软件分析》]**](https://www.bilibili.com/video/BV1b7411K7P4).\n\n本课程实验(Assignments)基于Tai-e教学版框架, 框架代码的获取和实验环境配置见课程网站, 笔者在约一年前曾自学过本课程, 现今跟随2024Fall课程进度再次学习, 由于上次学习中受到了多位前辈留下的实验记录帮助, 遂于此记录笔者对各个实验的理解和记录. 限于笔者个人能力水平, 恐难完整覆盖实验中的所有要点, 记录内容仅供参考, 如能帮助到您, 乃笔者荣幸.\n\n鉴于 **学术诚信(Academic Integrity)** 要求, 笔者暂且 ***不*** 公开源代码.\n\n## 食用指南\n\n本试验记录 ***不会*** 从零开始讨论完成实验的知识点, 框架理解和注意事项. 食用前请确保观看并理解了课程的P1-4内容, 尤其是对活跃变量分析(Live Variable Analysis)的算法和原理的基本掌握; 完整阅读过[**实验指南**](https://tai-e.pascal-lab.net/pa1.html)和框架代码后, 再来参考本实验记录, 效果最佳.\n\n## 任务目标\n\n基于已有框架为java实现一个**活跃变量分析**, 使用**迭代求解器(Iterative Solver)**.\n\n具体来说, 实现Your Task中涉及的三份文件中的6个`TODO API`.\n\n涉及的主要算法如下图所示:\n\n![pic1](SPA-A1/pic1.png)\n\n作为第一个实验, 总体难度不高, 关键在于熟悉Tai-e框架, 还望读者耐心阅读框架代码. 不妨善用Github Copilot或者ChatGPT帮助理解框架代码.\n\n## LiveVariableAnalysis\n\n活跃变量分析算法中需要用到的具体方法, 实验指南中已有较为详细的说明, 笔者在此不再赘述.\n\n![pic2](SPA-A1/pic2.png)\n\n关于实现该部分所需的`API`, 请阅读`Class SetFact`源码.\n\n笔者在此补充一些本实验所需java语法性质或语法糖.\n\n### Class Optional\n\nJava 8引入的性质, 详细信息可查询文档或教程, 笔者在此给出其一[**[菜鸟教程|Java Optional]**](https://www.runoob.com/java/java8-optional-class.html).\n\n与之类似的还有`java.util.List`, 学习java语法来获得`Optional`和`List`中的内容.\n\n使用示例:\n\n``` java\nLValue def = stmt.getDef().orElse(null);\n```\n\n### instanceof操作符\n\njava中用于判断类型的操作符, 详细信息可参考[**[Baeldung|Java instanceof Operator]**](https://www.baeldung.com/java-instanceof).\n\n使用示例:\n\n```java\nif(def instanceof Var)\n```\n\n需要注意的是, 如指南所示\n\n![pic3](SPA-A1/pic3.png)\n\n`Exp`下的`LValue` `RValue`包括多种类型, 我们只需要关注`Var`类型的使用.\n\n> **Tips:** 为什么不需要考虑别的类型?\n>\n> `LValue`只需要关注`Var`, 这是手册告诉我们的. `RValue`尽管有多种类型, 但可以通过`getUses()`方法将Exp中涉及的变量等信息全部获取, 此时右式是`UnaryExp`or`BinaryExp`对我们来说都不重要了, 只需要将`getUses()`中的`Var`筛选出来处理即可.\n\n> **Additional:** `getUses()`究竟返回什么?\n> \n> 笔者在此引用[RicoloveFeng](https://github.com/RicoloveFeng)在[SPA-Freestyle-Guidance](https://github.com/RicoloveFeng/SPA-Freestyle-Guidance)中的解释\n>\n> 你可能想知道 `getUses()` 除了 `x = y` 这条语句之外还返回些什么东西.我们举点例子吧:\n>\n> - `x = y op z`: `[y, z, y op z]`\n> \n> - `x = m(n)`: `[mClass, n, invokevirtual mClass.m(n)]`\n\n### java引用机制\n\n```java\npublic boolean transferNode(Stmt stmt, SetFact<Var> in, SetFact<Var> out) {\n        ...\n        //in = out.copy();\n        in.set(out);\n        ...\n}\n```\n\n尽管两行代码\"看起来\"是一致的, 但注释掉的代码只会改变形参`in`的取值, 不会改变实际的`Fact in`. 详细原理可以参考[**[知乎|java引用详解]**](https://zhuanlan.zhihu.com/p/453857961).\n\n## Solver & IterativeSolver\n\n本部分对应具体的算法流程.\n\n实际上指南写的已足够详细, 包括如何从`cfg`中获取信息的方法和两处`TODO`对应的具体部分, 使得即便对框架不甚理解, 仍然能完成该部分.\n\n唯一需要阅读代码知道的是可以通过`analysis.xx`的方式调用我们在上一节中实现的`API`.\n\n`Solver`的`Init`需要注意的是由于我们`analysis.meetInto()`与算法中不完全相同, 在初始化阶段我们同样要对`out Fact`进行赋空初始化.\n\n`IterativeSovlver`部分是算法的循环部分, 由于我们的分析器`BB`是`stmt`, 因此不需要考虑Block内部的执行顺序, 直接使用`analysis.transferNode`即可.\n\n另外, 上课时遍历迭代顺序取的是较优结果, 我们不需要过多考虑性能问题, 因此以任意节点顺序迭代仍然可以得到结果, 这大大降低了代码实现的复杂性, 只需要使用简单的`for(Node node : cfg)`即可.\n\n笔者同样补充一些可能对本实验理解有帮助的细节部分.\n\n### DataflowResult\n\n其本质是两个`Nodes`对应的`inFacts` `outFacts`的集合, 通过给定的API获取和设置其中的值, 其中`inFacts`和`outFacts`不过是`set`的封装, 在抽象层面上意义和课程中的那个代表变量的二进制串相同.\n\n### `CFG<Node> cfg` 中的 `Node`具体指什么?\n\n在本次实验中, `Node node`指的是`stmt`, 从指南中可以推测出这点. 通过阅读源代码, 也可以得知\n\n```java\npublic class LiveVariableAnalysis extends\n        AbstractDataflowAnalysis<Stmt, SetFact<Var>>\n```\n\n所以我们可以直接使用以下代码\n\n```java\nfor(Node node : cfg){\n    ...\n    analysis.transferNode(node, in, out);\n    ...\n}    \n```\n\n## 总结\n\n总的来说这次实验的难点在于框架代码的理解, 笔者在记录中提及了部分关键定义和代码理解, 只要耐心阅读框架代码, 相信一定会AC.\n","source":"_posts/SPA-A1.md","raw":"---\ntitle: NJU静态分析|A1-Live Variable Analysis\ndate: 2024-10-20 00:04:07\nhidden: false\ntags:\n- NJU\n- 静态分析\ncategories:\n- NJU静态分析实验记录\n---\n\n**NJU Static Program Analysis | Assignment-1 Live Variable Analysis & IterativeSolver.**\n\n<!--more-->\n\n## 实验信息\n\nNJU软件分析, 实际上是静态分析(Static Program Analysis), 是由李樾和谭添老师开设的面向本科生和研究生的一门课程, 因为是本研共修选修课, 因此本课程内容较为基础, 比较适合对静态分析感兴趣的初学者快速入门. 课程网站[**[Static Program Analysis]**](https://tai-e.pascal-lab.net/lectures.html), 配套课程[**[Bilibili|南京大学《软件分析》]**](https://www.bilibili.com/video/BV1b7411K7P4).\n\n本课程实验(Assignments)基于Tai-e教学版框架, 框架代码的获取和实验环境配置见课程网站, 笔者在约一年前曾自学过本课程, 现今跟随2024Fall课程进度再次学习, 由于上次学习中受到了多位前辈留下的实验记录帮助, 遂于此记录笔者对各个实验的理解和记录. 限于笔者个人能力水平, 恐难完整覆盖实验中的所有要点, 记录内容仅供参考, 如能帮助到您, 乃笔者荣幸.\n\n鉴于 **学术诚信(Academic Integrity)** 要求, 笔者暂且 ***不*** 公开源代码.\n\n## 食用指南\n\n本试验记录 ***不会*** 从零开始讨论完成实验的知识点, 框架理解和注意事项. 食用前请确保观看并理解了课程的P1-4内容, 尤其是对活跃变量分析(Live Variable Analysis)的算法和原理的基本掌握; 完整阅读过[**实验指南**](https://tai-e.pascal-lab.net/pa1.html)和框架代码后, 再来参考本实验记录, 效果最佳.\n\n## 任务目标\n\n基于已有框架为java实现一个**活跃变量分析**, 使用**迭代求解器(Iterative Solver)**.\n\n具体来说, 实现Your Task中涉及的三份文件中的6个`TODO API`.\n\n涉及的主要算法如下图所示:\n\n![pic1](SPA-A1/pic1.png)\n\n作为第一个实验, 总体难度不高, 关键在于熟悉Tai-e框架, 还望读者耐心阅读框架代码. 不妨善用Github Copilot或者ChatGPT帮助理解框架代码.\n\n## LiveVariableAnalysis\n\n活跃变量分析算法中需要用到的具体方法, 实验指南中已有较为详细的说明, 笔者在此不再赘述.\n\n![pic2](SPA-A1/pic2.png)\n\n关于实现该部分所需的`API`, 请阅读`Class SetFact`源码.\n\n笔者在此补充一些本实验所需java语法性质或语法糖.\n\n### Class Optional\n\nJava 8引入的性质, 详细信息可查询文档或教程, 笔者在此给出其一[**[菜鸟教程|Java Optional]**](https://www.runoob.com/java/java8-optional-class.html).\n\n与之类似的还有`java.util.List`, 学习java语法来获得`Optional`和`List`中的内容.\n\n使用示例:\n\n``` java\nLValue def = stmt.getDef().orElse(null);\n```\n\n### instanceof操作符\n\njava中用于判断类型的操作符, 详细信息可参考[**[Baeldung|Java instanceof Operator]**](https://www.baeldung.com/java-instanceof).\n\n使用示例:\n\n```java\nif(def instanceof Var)\n```\n\n需要注意的是, 如指南所示\n\n![pic3](SPA-A1/pic3.png)\n\n`Exp`下的`LValue` `RValue`包括多种类型, 我们只需要关注`Var`类型的使用.\n\n> **Tips:** 为什么不需要考虑别的类型?\n>\n> `LValue`只需要关注`Var`, 这是手册告诉我们的. `RValue`尽管有多种类型, 但可以通过`getUses()`方法将Exp中涉及的变量等信息全部获取, 此时右式是`UnaryExp`or`BinaryExp`对我们来说都不重要了, 只需要将`getUses()`中的`Var`筛选出来处理即可.\n\n> **Additional:** `getUses()`究竟返回什么?\n> \n> 笔者在此引用[RicoloveFeng](https://github.com/RicoloveFeng)在[SPA-Freestyle-Guidance](https://github.com/RicoloveFeng/SPA-Freestyle-Guidance)中的解释\n>\n> 你可能想知道 `getUses()` 除了 `x = y` 这条语句之外还返回些什么东西.我们举点例子吧:\n>\n> - `x = y op z`: `[y, z, y op z]`\n> \n> - `x = m(n)`: `[mClass, n, invokevirtual mClass.m(n)]`\n\n### java引用机制\n\n```java\npublic boolean transferNode(Stmt stmt, SetFact<Var> in, SetFact<Var> out) {\n        ...\n        //in = out.copy();\n        in.set(out);\n        ...\n}\n```\n\n尽管两行代码\"看起来\"是一致的, 但注释掉的代码只会改变形参`in`的取值, 不会改变实际的`Fact in`. 详细原理可以参考[**[知乎|java引用详解]**](https://zhuanlan.zhihu.com/p/453857961).\n\n## Solver & IterativeSolver\n\n本部分对应具体的算法流程.\n\n实际上指南写的已足够详细, 包括如何从`cfg`中获取信息的方法和两处`TODO`对应的具体部分, 使得即便对框架不甚理解, 仍然能完成该部分.\n\n唯一需要阅读代码知道的是可以通过`analysis.xx`的方式调用我们在上一节中实现的`API`.\n\n`Solver`的`Init`需要注意的是由于我们`analysis.meetInto()`与算法中不完全相同, 在初始化阶段我们同样要对`out Fact`进行赋空初始化.\n\n`IterativeSovlver`部分是算法的循环部分, 由于我们的分析器`BB`是`stmt`, 因此不需要考虑Block内部的执行顺序, 直接使用`analysis.transferNode`即可.\n\n另外, 上课时遍历迭代顺序取的是较优结果, 我们不需要过多考虑性能问题, 因此以任意节点顺序迭代仍然可以得到结果, 这大大降低了代码实现的复杂性, 只需要使用简单的`for(Node node : cfg)`即可.\n\n笔者同样补充一些可能对本实验理解有帮助的细节部分.\n\n### DataflowResult\n\n其本质是两个`Nodes`对应的`inFacts` `outFacts`的集合, 通过给定的API获取和设置其中的值, 其中`inFacts`和`outFacts`不过是`set`的封装, 在抽象层面上意义和课程中的那个代表变量的二进制串相同.\n\n### `CFG<Node> cfg` 中的 `Node`具体指什么?\n\n在本次实验中, `Node node`指的是`stmt`, 从指南中可以推测出这点. 通过阅读源代码, 也可以得知\n\n```java\npublic class LiveVariableAnalysis extends\n        AbstractDataflowAnalysis<Stmt, SetFact<Var>>\n```\n\n所以我们可以直接使用以下代码\n\n```java\nfor(Node node : cfg){\n    ...\n    analysis.transferNode(node, in, out);\n    ...\n}    \n```\n\n## 总结\n\n总的来说这次实验的难点在于框架代码的理解, 笔者在记录中提及了部分关键定义和代码理解, 只要耐心阅读框架代码, 相信一定会AC.\n","slug":"SPA-A1","published":1,"updated":"2024-10-28T16:59:48.587Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyuj000kssil2rsj7npw","content":"<p><strong>NJU Static Program Analysis | Assignment-1 Live Variable\r\nAnalysis &amp; IterativeSolver.</strong></p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"实验信息\">实验信息</h2>\r\n<p>NJU软件分析, 实际上是静态分析(Static Program Analysis),\r\n是由李樾和谭添老师开设的面向本科生和研究生的一门课程,\r\n因为是本研共修选修课, 因此本课程内容较为基础,\r\n比较适合对静态分析感兴趣的初学者快速入门. 课程网站<a\r\nhref=\"https://tai-e.pascal-lab.net/lectures.html\"><strong>[Static\r\nProgram Analysis]</strong></a>, 配套课程<a\r\nhref=\"https://www.bilibili.com/video/BV1b7411K7P4\"><strong>[Bilibili|南京大学《软件分析》]</strong></a>.</p>\r\n<p>本课程实验(Assignments)基于Tai-e教学版框架,\r\n框架代码的获取和实验环境配置见课程网站, 笔者在约一年前曾自学过本课程,\r\n现今跟随2024Fall课程进度再次学习,\r\n由于上次学习中受到了多位前辈留下的实验记录帮助,\r\n遂于此记录笔者对各个实验的理解和记录. 限于笔者个人能力水平,\r\n恐难完整覆盖实验中的所有要点, 记录内容仅供参考, 如能帮助到您,\r\n乃笔者荣幸.</p>\r\n<p>鉴于 <strong>学术诚信(Academic Integrity)</strong> 要求, 笔者暂且\r\n<strong><em>不</em></strong> 公开源代码.</p>\r\n<h2 id=\"食用指南\">食用指南</h2>\r\n<p>本试验记录 <strong><em>不会</em></strong>\r\n从零开始讨论完成实验的知识点, 框架理解和注意事项.\r\n食用前请确保观看并理解了课程的P1-4内容, 尤其是对活跃变量分析(Live\r\nVariable Analysis)的算法和原理的基本掌握; 完整阅读过<a\r\nhref=\"https://tai-e.pascal-lab.net/pa1.html\"><strong>实验指南</strong></a>和框架代码后,\r\n再来参考本实验记录, 效果最佳.</p>\r\n<h2 id=\"任务目标\">任务目标</h2>\r\n<p>基于已有框架为java实现一个<strong>活跃变量分析</strong>,\r\n使用<strong>迭代求解器(Iterative Solver)</strong>.</p>\r\n<p>具体来说, 实现Your\r\nTask中涉及的三份文件中的6个<code>TODO API</code>.</p>\r\n<p>涉及的主要算法如下图所示:</p>\r\n<img src=\"/2024/10/20/SPA-A1/pic1.png\" class=\"\" title=\"pic1\">\r\n<p>作为第一个实验, 总体难度不高, 关键在于熟悉Tai-e框架,\r\n还望读者耐心阅读框架代码. 不妨善用Github\r\nCopilot或者ChatGPT帮助理解框架代码.</p>\r\n<h2 id=\"livevariableanalysis\">LiveVariableAnalysis</h2>\r\n<p>活跃变量分析算法中需要用到的具体方法, 实验指南中已有较为详细的说明,\r\n笔者在此不再赘述.</p>\r\n<img src=\"/2024/10/20/SPA-A1/pic2.png\" class=\"\" title=\"pic2\">\r\n<p>关于实现该部分所需的<code>API</code>,\r\n请阅读<code>Class SetFact</code>源码.</p>\r\n<p>笔者在此补充一些本实验所需java语法性质或语法糖.</p>\r\n<h3 id=\"class-optional\">Class Optional</h3>\r\n<p>Java 8引入的性质, 详细信息可查询文档或教程, 笔者在此给出其一<a\r\nhref=\"https://www.runoob.com/java/java8-optional-class.html\"><strong>[菜鸟教程|Java\r\nOptional]</strong></a>.</p>\r\n<p>与之类似的还有<code>java.util.List</code>,\r\n学习java语法来获得<code>Optional</code>和<code>List</code>中的内容.</p>\r\n<p>使用示例:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LValue</span> <span class=\"variable\">def</span> <span class=\"operator\">=</span> stmt.getDef().orElse(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"instanceof操作符\">instanceof操作符</h3>\r\n<p>java中用于判断类型的操作符, 详细信息可参考<a\r\nhref=\"https://www.baeldung.com/java-instanceof\"><strong>[Baeldung|Java\r\ninstanceof Operator]</strong></a>.</p>\r\n<p>使用示例:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(def <span class=\"keyword\">instanceof</span> Var)</span><br></pre></td></tr></table></figure>\r\n<p>需要注意的是, 如指南所示</p>\r\n<img src=\"/2024/10/20/SPA-A1/pic3.png\" class=\"\" title=\"pic3\">\r\n<p><code>Exp</code>下的<code>LValue</code>\r\n<code>RValue</code>包括多种类型,\r\n我们只需要关注<code>Var</code>类型的使用.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 为什么不需要考虑别的类型?</p>\r\n<p><code>LValue</code>只需要关注<code>Var</code>, 这是手册告诉我们的.\r\n<code>RValue</code>尽管有多种类型,\r\n但可以通过<code>getUses()</code>方法将Exp中涉及的变量等信息全部获取,\r\n此时右式是<code>UnaryExp</code>or<code>BinaryExp</code>对我们来说都不重要了,\r\n只需要将<code>getUses()</code>中的<code>Var</code>筛选出来处理即可.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>Additional:</strong> <code>getUses()</code>究竟返回什么?</p>\r\n<p>笔者在此引用<a\r\nhref=\"https://github.com/RicoloveFeng\">RicoloveFeng</a>在<a\r\nhref=\"https://github.com/RicoloveFeng/SPA-Freestyle-Guidance\">SPA-Freestyle-Guidance</a>中的解释</p>\r\n<p>你可能想知道 <code>getUses()</code> 除了 <code>x = y</code>\r\n这条语句之外还返回些什么东西.我们举点例子吧:</p>\r\n<ul>\r\n<li><p><code>x = y op z</code>: <code>[y, z, y op z]</code></p></li>\r\n<li><p><code>x = m(n)</code>:\r\n<code>[mClass, n, invokevirtual mClass.m(n)]</code></p></li>\r\n</ul>\r\n</blockquote>\r\n<h3 id=\"java引用机制\">java引用机制</h3>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">transferNode</span><span class=\"params\">(Stmt stmt, SetFact&lt;Var&gt; in, SetFact&lt;Var&gt; out)</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">//in = out.copy();</span></span><br><span class=\"line\">        in.set(out);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>尽管两行代码\"看起来\"是一致的,\r\n但注释掉的代码只会改变形参<code>in</code>的取值,\r\n不会改变实际的<code>Fact in</code>. 详细原理可以参考<a\r\nhref=\"https://zhuanlan.zhihu.com/p/453857961\"><strong>[知乎|java引用详解]</strong></a>.</p>\r\n<h2 id=\"solver-iterativesolver\">Solver &amp; IterativeSolver</h2>\r\n<p>本部分对应具体的算法流程.</p>\r\n<p>实际上指南写的已足够详细,\r\n包括如何从<code>cfg</code>中获取信息的方法和两处<code>TODO</code>对应的具体部分,\r\n使得即便对框架不甚理解, 仍然能完成该部分.</p>\r\n<p>唯一需要阅读代码知道的是可以通过<code>analysis.xx</code>的方式调用我们在上一节中实现的<code>API</code>.</p>\r\n<p><code>Solver</code>的<code>Init</code>需要注意的是由于我们<code>analysis.meetInto()</code>与算法中不完全相同,\r\n在初始化阶段我们同样要对<code>out Fact</code>进行赋空初始化.</p>\r\n<p><code>IterativeSovlver</code>部分是算法的循环部分,\r\n由于我们的分析器<code>BB</code>是<code>stmt</code>,\r\n因此不需要考虑Block内部的执行顺序,\r\n直接使用<code>analysis.transferNode</code>即可.</p>\r\n<p>另外, 上课时遍历迭代顺序取的是较优结果, 我们不需要过多考虑性能问题,\r\n因此以任意节点顺序迭代仍然可以得到结果, 这大大降低了代码实现的复杂性,\r\n只需要使用简单的<code>for(Node node : cfg)</code>即可.</p>\r\n<p>笔者同样补充一些可能对本实验理解有帮助的细节部分.</p>\r\n<h3 id=\"dataflowresult\">DataflowResult</h3>\r\n<p>其本质是两个<code>Nodes</code>对应的<code>inFacts</code>\r\n<code>outFacts</code>的集合, 通过给定的API获取和设置其中的值,\r\n其中<code>inFacts</code>和<code>outFacts</code>不过是<code>set</code>的封装,\r\n在抽象层面上意义和课程中的那个代表变量的二进制串相同.</p>\r\n<h3\r\nid=\"cfgnode-cfg-中的-node具体指什么\"><code>CFG&lt;Node&gt; cfg</code>\r\n中的 <code>Node</code>具体指什么?</h3>\r\n<p>在本次实验中, <code>Node node</code>指的是<code>stmt</code>,\r\n从指南中可以推测出这点. 通过阅读源代码, 也可以得知</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LiveVariableAnalysis</span> <span class=\"keyword\">extends</span></span><br><span class=\"line\">        <span class=\"title class_\">AbstractDataflowAnalysis</span>&lt;Stmt, SetFact&lt;Var&gt;&gt;</span><br></pre></td></tr></table></figure>\r\n<p>所以我们可以直接使用以下代码</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(Node node : cfg)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    analysis.transferNode(node, in, out);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>总的来说这次实验的难点在于框架代码的理解,\r\n笔者在记录中提及了部分关键定义和代码理解, 只要耐心阅读框架代码,\r\n相信一定会AC.</p>\r\n","length":1467,"excerpt":"<p><strong>NJU Static Program Analysis | Assignment-1 Live Variable\r\nAnalysis &amp; IterativeSolver.</strong></p>","more":"<h2 id=\"实验信息\">实验信息</h2>\r\n<p>NJU软件分析, 实际上是静态分析(Static Program Analysis),\r\n是由李樾和谭添老师开设的面向本科生和研究生的一门课程,\r\n因为是本研共修选修课, 因此本课程内容较为基础,\r\n比较适合对静态分析感兴趣的初学者快速入门. 课程网站<a\r\nhref=\"https://tai-e.pascal-lab.net/lectures.html\"><strong>[Static\r\nProgram Analysis]</strong></a>, 配套课程<a\r\nhref=\"https://www.bilibili.com/video/BV1b7411K7P4\"><strong>[Bilibili|南京大学《软件分析》]</strong></a>.</p>\r\n<p>本课程实验(Assignments)基于Tai-e教学版框架,\r\n框架代码的获取和实验环境配置见课程网站, 笔者在约一年前曾自学过本课程,\r\n现今跟随2024Fall课程进度再次学习,\r\n由于上次学习中受到了多位前辈留下的实验记录帮助,\r\n遂于此记录笔者对各个实验的理解和记录. 限于笔者个人能力水平,\r\n恐难完整覆盖实验中的所有要点, 记录内容仅供参考, 如能帮助到您,\r\n乃笔者荣幸.</p>\r\n<p>鉴于 <strong>学术诚信(Academic Integrity)</strong> 要求, 笔者暂且\r\n<strong><em>不</em></strong> 公开源代码.</p>\r\n<h2 id=\"食用指南\">食用指南</h2>\r\n<p>本试验记录 <strong><em>不会</em></strong>\r\n从零开始讨论完成实验的知识点, 框架理解和注意事项.\r\n食用前请确保观看并理解了课程的P1-4内容, 尤其是对活跃变量分析(Live\r\nVariable Analysis)的算法和原理的基本掌握; 完整阅读过<a\r\nhref=\"https://tai-e.pascal-lab.net/pa1.html\"><strong>实验指南</strong></a>和框架代码后,\r\n再来参考本实验记录, 效果最佳.</p>\r\n<h2 id=\"任务目标\">任务目标</h2>\r\n<p>基于已有框架为java实现一个<strong>活跃变量分析</strong>,\r\n使用<strong>迭代求解器(Iterative Solver)</strong>.</p>\r\n<p>具体来说, 实现Your\r\nTask中涉及的三份文件中的6个<code>TODO API</code>.</p>\r\n<p>涉及的主要算法如下图所示:</p>\r\n<img src=\"/2024/10/20/SPA-A1/pic1.png\" class=\"\" title=\"pic1\">\r\n<p>作为第一个实验, 总体难度不高, 关键在于熟悉Tai-e框架,\r\n还望读者耐心阅读框架代码. 不妨善用Github\r\nCopilot或者ChatGPT帮助理解框架代码.</p>\r\n<h2 id=\"livevariableanalysis\">LiveVariableAnalysis</h2>\r\n<p>活跃变量分析算法中需要用到的具体方法, 实验指南中已有较为详细的说明,\r\n笔者在此不再赘述.</p>\r\n<img src=\"/2024/10/20/SPA-A1/pic2.png\" class=\"\" title=\"pic2\">\r\n<p>关于实现该部分所需的<code>API</code>,\r\n请阅读<code>Class SetFact</code>源码.</p>\r\n<p>笔者在此补充一些本实验所需java语法性质或语法糖.</p>\r\n<h3 id=\"class-optional\">Class Optional</h3>\r\n<p>Java 8引入的性质, 详细信息可查询文档或教程, 笔者在此给出其一<a\r\nhref=\"https://www.runoob.com/java/java8-optional-class.html\"><strong>[菜鸟教程|Java\r\nOptional]</strong></a>.</p>\r\n<p>与之类似的还有<code>java.util.List</code>,\r\n学习java语法来获得<code>Optional</code>和<code>List</code>中的内容.</p>\r\n<p>使用示例:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LValue</span> <span class=\"variable\">def</span> <span class=\"operator\">=</span> stmt.getDef().orElse(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"instanceof操作符\">instanceof操作符</h3>\r\n<p>java中用于判断类型的操作符, 详细信息可参考<a\r\nhref=\"https://www.baeldung.com/java-instanceof\"><strong>[Baeldung|Java\r\ninstanceof Operator]</strong></a>.</p>\r\n<p>使用示例:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(def <span class=\"keyword\">instanceof</span> Var)</span><br></pre></td></tr></table></figure>\r\n<p>需要注意的是, 如指南所示</p>\r\n<img src=\"/2024/10/20/SPA-A1/pic3.png\" class=\"\" title=\"pic3\">\r\n<p><code>Exp</code>下的<code>LValue</code>\r\n<code>RValue</code>包括多种类型,\r\n我们只需要关注<code>Var</code>类型的使用.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 为什么不需要考虑别的类型?</p>\r\n<p><code>LValue</code>只需要关注<code>Var</code>, 这是手册告诉我们的.\r\n<code>RValue</code>尽管有多种类型,\r\n但可以通过<code>getUses()</code>方法将Exp中涉及的变量等信息全部获取,\r\n此时右式是<code>UnaryExp</code>or<code>BinaryExp</code>对我们来说都不重要了,\r\n只需要将<code>getUses()</code>中的<code>Var</code>筛选出来处理即可.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>Additional:</strong> <code>getUses()</code>究竟返回什么?</p>\r\n<p>笔者在此引用<a\r\nhref=\"https://github.com/RicoloveFeng\">RicoloveFeng</a>在<a\r\nhref=\"https://github.com/RicoloveFeng/SPA-Freestyle-Guidance\">SPA-Freestyle-Guidance</a>中的解释</p>\r\n<p>你可能想知道 <code>getUses()</code> 除了 <code>x = y</code>\r\n这条语句之外还返回些什么东西.我们举点例子吧:</p>\r\n<ul>\r\n<li><p><code>x = y op z</code>: <code>[y, z, y op z]</code></p></li>\r\n<li><p><code>x = m(n)</code>:\r\n<code>[mClass, n, invokevirtual mClass.m(n)]</code></p></li>\r\n</ul>\r\n</blockquote>\r\n<h3 id=\"java引用机制\">java引用机制</h3>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">transferNode</span><span class=\"params\">(Stmt stmt, SetFact&lt;Var&gt; in, SetFact&lt;Var&gt; out)</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"comment\">//in = out.copy();</span></span><br><span class=\"line\">        in.set(out);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>尽管两行代码\"看起来\"是一致的,\r\n但注释掉的代码只会改变形参<code>in</code>的取值,\r\n不会改变实际的<code>Fact in</code>. 详细原理可以参考<a\r\nhref=\"https://zhuanlan.zhihu.com/p/453857961\"><strong>[知乎|java引用详解]</strong></a>.</p>\r\n<h2 id=\"solver-iterativesolver\">Solver &amp; IterativeSolver</h2>\r\n<p>本部分对应具体的算法流程.</p>\r\n<p>实际上指南写的已足够详细,\r\n包括如何从<code>cfg</code>中获取信息的方法和两处<code>TODO</code>对应的具体部分,\r\n使得即便对框架不甚理解, 仍然能完成该部分.</p>\r\n<p>唯一需要阅读代码知道的是可以通过<code>analysis.xx</code>的方式调用我们在上一节中实现的<code>API</code>.</p>\r\n<p><code>Solver</code>的<code>Init</code>需要注意的是由于我们<code>analysis.meetInto()</code>与算法中不完全相同,\r\n在初始化阶段我们同样要对<code>out Fact</code>进行赋空初始化.</p>\r\n<p><code>IterativeSovlver</code>部分是算法的循环部分,\r\n由于我们的分析器<code>BB</code>是<code>stmt</code>,\r\n因此不需要考虑Block内部的执行顺序,\r\n直接使用<code>analysis.transferNode</code>即可.</p>\r\n<p>另外, 上课时遍历迭代顺序取的是较优结果, 我们不需要过多考虑性能问题,\r\n因此以任意节点顺序迭代仍然可以得到结果, 这大大降低了代码实现的复杂性,\r\n只需要使用简单的<code>for(Node node : cfg)</code>即可.</p>\r\n<p>笔者同样补充一些可能对本实验理解有帮助的细节部分.</p>\r\n<h3 id=\"dataflowresult\">DataflowResult</h3>\r\n<p>其本质是两个<code>Nodes</code>对应的<code>inFacts</code>\r\n<code>outFacts</code>的集合, 通过给定的API获取和设置其中的值,\r\n其中<code>inFacts</code>和<code>outFacts</code>不过是<code>set</code>的封装,\r\n在抽象层面上意义和课程中的那个代表变量的二进制串相同.</p>\r\n<h3\r\nid=\"cfgnode-cfg-中的-node具体指什么\"><code>CFG&lt;Node&gt; cfg</code>\r\n中的 <code>Node</code>具体指什么?</h3>\r\n<p>在本次实验中, <code>Node node</code>指的是<code>stmt</code>,\r\n从指南中可以推测出这点. 通过阅读源代码, 也可以得知</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LiveVariableAnalysis</span> <span class=\"keyword\">extends</span></span><br><span class=\"line\">        <span class=\"title class_\">AbstractDataflowAnalysis</span>&lt;Stmt, SetFact&lt;Var&gt;&gt;</span><br></pre></td></tr></table></figure>\r\n<p>所以我们可以直接使用以下代码</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(Node node : cfg)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    analysis.transferNode(node, in, out);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>总的来说这次实验的难点在于框架代码的理解,\r\n笔者在记录中提及了部分关键定义和代码理解, 只要耐心阅读框架代码,\r\n相信一定会AC.</p>"},{"title":"LeetCode个人题解[C++] P4 寻找两个正序数组的中位数","date":"2024-09-21T12:29:30.000Z","hidden":false,"_content":"\n**题目链接:** [**LeetCode|4.寻找两个正序数组的中位数**](https://leetcode.cn/problems/median-of-two-sorted-arrays/)\n\n<!-- more -->\n\n---\n\n## 题面解释\n\n找出两个有序数组合并后的中位数. 但要求时间复杂度$\\mathit{O}(log(m + n))$.\n\n## 解法一 二分\n\n笔者看到复杂度$\\mathit{O}(log(m + n))$第一想法便是二分, 但怎么二分? 两个数组只是内部有序, 两个数组并不有序, 常规对数组二分的思路肯定是不行的.\n\n那该如何进行二分呢, 对答案进行二分. 令k为所寻找的k阶数, 初始为中位数, 则此时我们取两个数组的前$k/2$部分出来, 比较$nums1[k/2]$和$nums2[k/2]$, 则可以直接排除$k/2$个数. 我们以下图例子来解释.\n\n![p1](LeetCode-P4/p1.png)\n\n$m = n = 4$, 我们有 $k = 4, k/2 = 2$, 于是我们取两个数组的前两位, 比较3和5, 不难看出, 1和3不可能是中位数. 为什么? 因为1和3的阶必定小于$k = 4$, 即便第一个数组的3比第二个数组的5前面所有数都大, 3的阶也只能是3, 1就更不必说了. 而5前面的数可能大于3后面的数(例子中未能体现, 读者可以自行构造一个满足这种情况的简单例子). 因此通过这种操作, 我们可以排掉 $k/2$ 个不可能是中位数的元素, 接着我们令$k = k - k/2$, 将被排除的数去掉, 重新进行上述过程.\n\n![p2](LeetCode-P4/p2.png)\n\n选取两个数组的前1位.比较2 和 4, 可以排除掉2. 此时过程进行到了边界处, 接下来$k = 1$无法继续了. 而此时剩下的4和5正是我们需要的中位数.\n\n> **Tips:** 为什么第二个数组不是选择2, 5, 7?\n>\n> 因为我们在上面的步骤中无法确定2和5是中位数与否, 此时的有效信息不足. 而把2 5 7都放进来与4进行比较会出现bug, 以上例, 4会被错误的排除掉\n\nk为奇数时情况稍有不同, 但大多是一些细节问题, 笔者在此不再赘述. 推荐读者自己构建一个例子去推算上面的过程, 相信不难理解其中要义.\n\n每次排除$k/2$, 而 $k = (m + n + 1) / 2$, 故时间复杂度$\\mathit{O}(log(m + n))$.\n\n参考代码如下:\n\n``` C++\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int m = nums1.size();\n        int n = nums2.size();\n        //cout << m << \" \" << n << endl;\n        //for(int i = 0; i < m; i++){cout << nums1[i] << \" \";} cout << endl;\n        //for(int j = 0; j < n; j++){cout << nums2[j] << \" \";} cout << endl;\n\n        int left1 = 0;\n        int left2 = 0;\n\n        int k = (m + n - 1) >> 1; // 排除掉小于中位数的数\n\n        while (k > 1) {\n            // 一个数组被清空\n            if (left1 == m) {\n                left2 += k;\n                k = 0;\n                break;\n            }\n            if (left2 == n) {\n                left1 += k;\n                k = 0;\n                break;\n            }\n            \n            int mid = k >> 1; // 注意循环条件 k > 1\n\n            int mid1 = left1 + mid - 1;\n            int mid2 = left2 + mid - 1;\n\n            // 边界情况，剩余数组大小不足k\n            if (left1 + mid > m) { // 等价于 left1 + mid - 1 >= m\n                mid1 = m - 1;\n            }\n            if (left2 + mid > n) {\n                mid2 = n - 1;\n            }\n\n            if (nums1[mid1] >= nums2[mid2]) {\n                k -= mid2 - left2 + 1; // 一轮可以排除掉一半\n                left2 = mid2 + 1;\n            } else {\n                k -= mid1 - left1 + 1;\n                left1 = mid1 + 1;\n            }\n        }\n\n        // 处理 k == 1\n        if (k == 1) {\n            if (left1 == m) {\n                left2++;\n            } else if (left2 == n) {\n                left1++;\n            } else {\n                if (nums1[left1] >= nums2[left2]) {\n                    left2++;\n                } else {\n                    left1++;\n                }\n            }\n        }\n\n        // 别忘了处理边界情况\n        if ((m + n) & 1 == 1) { // 奇数\n            if (left1 == m) {\n                return nums2[left2];\n            }\n            if (left2 == n) {\n                return nums1[left1];\n            }\n            return std::min(nums1[left1], nums2[left2]);\n        } else { // 偶数\n            if (left1 == m) {\n                return (nums2[left2] + nums2[left2 + 1]) * 1.0 / 2;\n            }\n            if (left2 == n) {\n                return (nums1[left1] + nums1[left1 + 1]) * 1.0 / 2;\n            }\n\n            int num1;\n            if (nums1[left1] >= nums2[left2]) {\n                num1 = nums2[left2];\n                left2++;\n            } else {\n                num1 = nums1[left1];\n                left1++;\n            }\n            int num2;\n            if (left1 == m) {\n                num2 = nums2[left2];\n            }\n            else if (left2 == n) {\n                num2 = nums1[left1];\n            }\n            else{\n                num2 = min(nums1[left1], nums2[left2]);\n            }\n            return (num1 + num2) * 1.0 / 2;\n        }\n\n        return 0;\n    }\n};\n```\n\n> **Tips:** 本题思路并不难想出或者说并不难理解, 但非常考验代码功底, 对细节和边界情况的考察更像是此题的侧重点. 还望看到此处的读者能静下心来调试代码, 祝早日AC.\n\n## 解法二 分割\n\n> 笔者阅读题解时注意到的巧妙的解法, 原链接在此[**P4|windliang**](https://leetcode.cn/problems/median-of-two-sorted-arrays/solutions/8999/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/)\n\n更详细的数学证明, 思路和代码请阅读原文, 笔者在此只给出自己对其的理解.\n\n本质来说, 两种方法殊途同归, 但分割的方法较为巧妙一些. 中位数, 或者说k阶数, 就是将数组分为两个部分, 其一是比k阶数小的部分, 其二是比k阶数大的部分.\n\n对于有序的一个数组, 其性质本身就已经满足, 我们不妨将两部分简称为左半部分(小)和右半部分(大). 对于两个有序数组, 情况是一样的, 如果存在一种划分, 满足左边最大MaxLeft小于右边最小MinRight, 我们则认为这是关于k阶数的一种有效划分.\n\n因此, 这道题就被转化为寻找数组中满足中位数的有效划分, 关于特定k阶数划分, 还需要满足左半部分和右半部分的数量关系, 若规定将k阶数划在左半部分, 则左半部分有k个元素, 右半部分有 n - k 个元素.\n\n后面的事情就简单了, 固定数组1的划分位置, 根据数量关系找到数组2待判定划分位置, 根据MaxLeft和MinRight的大小关系决定数组1划分位置的左移或右移, 该过程可以通过二分完成.\n","source":"_posts/LeetCode-P4.md","raw":"---\ntitle: LeetCode个人题解[C++] P4 寻找两个正序数组的中位数\ndate: 2024-09-21 20:29:30\nhidden: false\ntags:\n- LeetCode\n- 二分\ncategories:\n- LeetCode刷题记录\n---\n\n**题目链接:** [**LeetCode|4.寻找两个正序数组的中位数**](https://leetcode.cn/problems/median-of-two-sorted-arrays/)\n\n<!-- more -->\n\n---\n\n## 题面解释\n\n找出两个有序数组合并后的中位数. 但要求时间复杂度$\\mathit{O}(log(m + n))$.\n\n## 解法一 二分\n\n笔者看到复杂度$\\mathit{O}(log(m + n))$第一想法便是二分, 但怎么二分? 两个数组只是内部有序, 两个数组并不有序, 常规对数组二分的思路肯定是不行的.\n\n那该如何进行二分呢, 对答案进行二分. 令k为所寻找的k阶数, 初始为中位数, 则此时我们取两个数组的前$k/2$部分出来, 比较$nums1[k/2]$和$nums2[k/2]$, 则可以直接排除$k/2$个数. 我们以下图例子来解释.\n\n![p1](LeetCode-P4/p1.png)\n\n$m = n = 4$, 我们有 $k = 4, k/2 = 2$, 于是我们取两个数组的前两位, 比较3和5, 不难看出, 1和3不可能是中位数. 为什么? 因为1和3的阶必定小于$k = 4$, 即便第一个数组的3比第二个数组的5前面所有数都大, 3的阶也只能是3, 1就更不必说了. 而5前面的数可能大于3后面的数(例子中未能体现, 读者可以自行构造一个满足这种情况的简单例子). 因此通过这种操作, 我们可以排掉 $k/2$ 个不可能是中位数的元素, 接着我们令$k = k - k/2$, 将被排除的数去掉, 重新进行上述过程.\n\n![p2](LeetCode-P4/p2.png)\n\n选取两个数组的前1位.比较2 和 4, 可以排除掉2. 此时过程进行到了边界处, 接下来$k = 1$无法继续了. 而此时剩下的4和5正是我们需要的中位数.\n\n> **Tips:** 为什么第二个数组不是选择2, 5, 7?\n>\n> 因为我们在上面的步骤中无法确定2和5是中位数与否, 此时的有效信息不足. 而把2 5 7都放进来与4进行比较会出现bug, 以上例, 4会被错误的排除掉\n\nk为奇数时情况稍有不同, 但大多是一些细节问题, 笔者在此不再赘述. 推荐读者自己构建一个例子去推算上面的过程, 相信不难理解其中要义.\n\n每次排除$k/2$, 而 $k = (m + n + 1) / 2$, 故时间复杂度$\\mathit{O}(log(m + n))$.\n\n参考代码如下:\n\n``` C++\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int m = nums1.size();\n        int n = nums2.size();\n        //cout << m << \" \" << n << endl;\n        //for(int i = 0; i < m; i++){cout << nums1[i] << \" \";} cout << endl;\n        //for(int j = 0; j < n; j++){cout << nums2[j] << \" \";} cout << endl;\n\n        int left1 = 0;\n        int left2 = 0;\n\n        int k = (m + n - 1) >> 1; // 排除掉小于中位数的数\n\n        while (k > 1) {\n            // 一个数组被清空\n            if (left1 == m) {\n                left2 += k;\n                k = 0;\n                break;\n            }\n            if (left2 == n) {\n                left1 += k;\n                k = 0;\n                break;\n            }\n            \n            int mid = k >> 1; // 注意循环条件 k > 1\n\n            int mid1 = left1 + mid - 1;\n            int mid2 = left2 + mid - 1;\n\n            // 边界情况，剩余数组大小不足k\n            if (left1 + mid > m) { // 等价于 left1 + mid - 1 >= m\n                mid1 = m - 1;\n            }\n            if (left2 + mid > n) {\n                mid2 = n - 1;\n            }\n\n            if (nums1[mid1] >= nums2[mid2]) {\n                k -= mid2 - left2 + 1; // 一轮可以排除掉一半\n                left2 = mid2 + 1;\n            } else {\n                k -= mid1 - left1 + 1;\n                left1 = mid1 + 1;\n            }\n        }\n\n        // 处理 k == 1\n        if (k == 1) {\n            if (left1 == m) {\n                left2++;\n            } else if (left2 == n) {\n                left1++;\n            } else {\n                if (nums1[left1] >= nums2[left2]) {\n                    left2++;\n                } else {\n                    left1++;\n                }\n            }\n        }\n\n        // 别忘了处理边界情况\n        if ((m + n) & 1 == 1) { // 奇数\n            if (left1 == m) {\n                return nums2[left2];\n            }\n            if (left2 == n) {\n                return nums1[left1];\n            }\n            return std::min(nums1[left1], nums2[left2]);\n        } else { // 偶数\n            if (left1 == m) {\n                return (nums2[left2] + nums2[left2 + 1]) * 1.0 / 2;\n            }\n            if (left2 == n) {\n                return (nums1[left1] + nums1[left1 + 1]) * 1.0 / 2;\n            }\n\n            int num1;\n            if (nums1[left1] >= nums2[left2]) {\n                num1 = nums2[left2];\n                left2++;\n            } else {\n                num1 = nums1[left1];\n                left1++;\n            }\n            int num2;\n            if (left1 == m) {\n                num2 = nums2[left2];\n            }\n            else if (left2 == n) {\n                num2 = nums1[left1];\n            }\n            else{\n                num2 = min(nums1[left1], nums2[left2]);\n            }\n            return (num1 + num2) * 1.0 / 2;\n        }\n\n        return 0;\n    }\n};\n```\n\n> **Tips:** 本题思路并不难想出或者说并不难理解, 但非常考验代码功底, 对细节和边界情况的考察更像是此题的侧重点. 还望看到此处的读者能静下心来调试代码, 祝早日AC.\n\n## 解法二 分割\n\n> 笔者阅读题解时注意到的巧妙的解法, 原链接在此[**P4|windliang**](https://leetcode.cn/problems/median-of-two-sorted-arrays/solutions/8999/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/)\n\n更详细的数学证明, 思路和代码请阅读原文, 笔者在此只给出自己对其的理解.\n\n本质来说, 两种方法殊途同归, 但分割的方法较为巧妙一些. 中位数, 或者说k阶数, 就是将数组分为两个部分, 其一是比k阶数小的部分, 其二是比k阶数大的部分.\n\n对于有序的一个数组, 其性质本身就已经满足, 我们不妨将两部分简称为左半部分(小)和右半部分(大). 对于两个有序数组, 情况是一样的, 如果存在一种划分, 满足左边最大MaxLeft小于右边最小MinRight, 我们则认为这是关于k阶数的一种有效划分.\n\n因此, 这道题就被转化为寻找数组中满足中位数的有效划分, 关于特定k阶数划分, 还需要满足左半部分和右半部分的数量关系, 若规定将k阶数划在左半部分, 则左半部分有k个元素, 右半部分有 n - k 个元素.\n\n后面的事情就简单了, 固定数组1的划分位置, 根据数量关系找到数组2待判定划分位置, 根据MaxLeft和MinRight的大小关系决定数组1划分位置的左移或右移, 该过程可以通过二分完成.\n","slug":"LeetCode-P4","published":1,"updated":"2024-09-21T18:20:42.472Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyuk000pssilchw1hx3n","content":"<p><strong>题目链接:</strong> <a\r\nhref=\"https://leetcode.cn/problems/median-of-two-sorted-arrays/\"><strong>LeetCode|4.寻找两个正序数组的中位数</strong></a></p>\r\n<span id=\"more\"></span>\r\n<hr />\r\n<h2 id=\"题面解释\">题面解释</h2>\r\n<p>找出两个有序数组合并后的中位数. 但要求时间复杂度<span\r\nclass=\"math inline\">\\(\\mathit{O}(log(m + n))\\)</span>.</p>\r\n<h2 id=\"解法一-二分\">解法一 二分</h2>\r\n<p>笔者看到复杂度<span class=\"math inline\">\\(\\mathit{O}(log(m +\r\nn))\\)</span>第一想法便是二分, 但怎么二分? 两个数组只是内部有序,\r\n两个数组并不有序, 常规对数组二分的思路肯定是不行的.</p>\r\n<p>那该如何进行二分呢, 对答案进行二分. 令k为所寻找的k阶数, 初始为中位数,\r\n则此时我们取两个数组的前<span\r\nclass=\"math inline\">\\(k/2\\)</span>部分出来, 比较<span\r\nclass=\"math inline\">\\(nums1[k/2]\\)</span>和<span\r\nclass=\"math inline\">\\(nums2[k/2]\\)</span>, 则可以直接排除<span\r\nclass=\"math inline\">\\(k/2\\)</span>个数. 我们以下图例子来解释.</p>\r\n<img src=\"/2024/09/21/LeetCode-P4/p1.png\" class=\"\" title=\"p1\">\r\n<p><span class=\"math inline\">\\(m = n = 4\\)</span>, 我们有 <span\r\nclass=\"math inline\">\\(k = 4, k/2 = 2\\)</span>,\r\n于是我们取两个数组的前两位, 比较3和5, 不难看出, 1和3不可能是中位数.\r\n为什么? 因为1和3的阶必定小于<span class=\"math inline\">\\(k = 4\\)</span>,\r\n即便第一个数组的3比第二个数组的5前面所有数都大, 3的阶也只能是3,\r\n1就更不必说了. 而5前面的数可能大于3后面的数(例子中未能体现,\r\n读者可以自行构造一个满足这种情况的简单例子). 因此通过这种操作,\r\n我们可以排掉 <span class=\"math inline\">\\(k/2\\)</span>\r\n个不可能是中位数的元素, 接着我们令<span class=\"math inline\">\\(k = k -\r\nk/2\\)</span>, 将被排除的数去掉, 重新进行上述过程.</p>\r\n<img src=\"/2024/09/21/LeetCode-P4/p2.png\" class=\"\" title=\"p2\">\r\n<p>选取两个数组的前1位.比较2 和 4, 可以排除掉2. 此时过程进行到了边界处,\r\n接下来<span class=\"math inline\">\\(k = 1\\)</span>无法继续了.\r\n而此时剩下的4和5正是我们需要的中位数.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 为什么第二个数组不是选择2, 5, 7?</p>\r\n<p>因为我们在上面的步骤中无法确定2和5是中位数与否, 此时的有效信息不足.\r\n而把2 5 7都放进来与4进行比较会出现bug, 以上例, 4会被错误的排除掉</p>\r\n</blockquote>\r\n<p>k为奇数时情况稍有不同, 但大多是一些细节问题, 笔者在此不再赘述.\r\n推荐读者自己构建一个例子去推算上面的过程, 相信不难理解其中要义.</p>\r\n<p>每次排除<span class=\"math inline\">\\(k/2\\)</span>, 而 <span\r\nclass=\"math inline\">\\(k = (m + n + 1) / 2\\)</span>, 故时间复杂度<span\r\nclass=\"math inline\">\\(\\mathit{O}(log(m + n))\\)</span>.</p>\r\n<p>参考代码如下:</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = nums<span class=\"number\">1.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; m &lt;&lt; &quot; &quot; &lt;&lt; n &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"comment\">//for(int i = 0; i &lt; m; i++)&#123;cout &lt;&lt; nums1[i] &lt;&lt; &quot; &quot;;&#125; cout &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"comment\">//for(int j = 0; j &lt; n; j++)&#123;cout &lt;&lt; nums2[j] &lt;&lt; &quot; &quot;;&#125; cout &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> left1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> left2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> k = (m + n - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 排除掉小于中位数的数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 一个数组被清空</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                left2 += k;</span><br><span class=\"line\">                k = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                left1 += k;</span><br><span class=\"line\">                k = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">int</span> mid = k &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 注意循环条件 k &gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> mid1 = left1 + mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid2 = left2 + mid - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 边界情况，剩余数组大小不足k</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 + mid &gt; m) &#123; <span class=\"comment\">// 等价于 left1 + mid - 1 &gt;= m</span></span><br><span class=\"line\">                mid1 = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 + mid &gt; n) &#123;</span><br><span class=\"line\">                mid2 = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[mid1] &gt;= nums2[mid2]) &#123;</span><br><span class=\"line\">                k -= mid2 - left2 + <span class=\"number\">1</span>; <span class=\"comment\">// 一轮可以排除掉一半</span></span><br><span class=\"line\">                left2 = mid2 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                k -= mid1 - left1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">                left1 = mid1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理 k == 1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                left2++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                left1++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums1[left1] &gt;= nums2[left2]) &#123;</span><br><span class=\"line\">                    left2++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    left1++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 别忘了处理边界情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((m + n) &amp; <span class=\"number\">1</span> == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 奇数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums2[left2];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums1[left1];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> std::<span class=\"built_in\">min</span>(nums1[left1], nums2[left2]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 偶数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> (nums2[left2] + nums2[left2 + <span class=\"number\">1</span>]) * <span class=\"number\">1.0</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (nums1[left1] + nums1[left1 + <span class=\"number\">1</span>]) * <span class=\"number\">1.0</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> num1;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[left1] &gt;= nums2[left2]) &#123;</span><br><span class=\"line\">                num1 = nums2[left2];</span><br><span class=\"line\">                left2++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                num1 = nums1[left1];</span><br><span class=\"line\">                left1++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> num2;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                num2 = nums2[left2];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                num2 = nums1[left1];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                num2 = <span class=\"built_in\">min</span>(nums1[left1], nums2[left2]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (num1 + num2) * <span class=\"number\">1.0</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 本题思路并不难想出或者说并不难理解,\r\n但非常考验代码功底, 对细节和边界情况的考察更像是此题的侧重点.\r\n还望看到此处的读者能静下心来调试代码, 祝早日AC.</p>\r\n</blockquote>\r\n<h2 id=\"解法二-分割\">解法二 分割</h2>\r\n<blockquote>\r\n<p>笔者阅读题解时注意到的巧妙的解法, 原链接在此<a\r\nhref=\"https://leetcode.cn/problems/median-of-two-sorted-arrays/solutions/8999/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/\"><strong>P4|windliang</strong></a></p>\r\n</blockquote>\r\n<p>更详细的数学证明, 思路和代码请阅读原文,\r\n笔者在此只给出自己对其的理解.</p>\r\n<p>本质来说, 两种方法殊途同归, 但分割的方法较为巧妙一些. 中位数,\r\n或者说k阶数, 就是将数组分为两个部分, 其一是比k阶数小的部分,\r\n其二是比k阶数大的部分.</p>\r\n<p>对于有序的一个数组, 其性质本身就已经满足,\r\n我们不妨将两部分简称为左半部分(小)和右半部分(大). 对于两个有序数组,\r\n情况是一样的, 如果存在一种划分, 满足左边最大MaxLeft小于右边最小MinRight,\r\n我们则认为这是关于k阶数的一种有效划分.</p>\r\n<p>因此, 这道题就被转化为寻找数组中满足中位数的有效划分,\r\n关于特定k阶数划分, 还需要满足左半部分和右半部分的数量关系,\r\n若规定将k阶数划在左半部分, 则左半部分有k个元素, 右半部分有 n - k\r\n个元素.</p>\r\n<p>后面的事情就简单了, 固定数组1的划分位置,\r\n根据数量关系找到数组2待判定划分位置,\r\n根据MaxLeft和MinRight的大小关系决定数组1划分位置的左移或右移,\r\n该过程可以通过二分完成.</p>\r\n","length":1380,"excerpt":"<p><strong>题目链接:</strong> <a\r\nhref=\"https://leetcode.cn/problems/median-of-two-sorted-arrays/\"><strong>LeetCode|4.寻找两个正序数组的中位数</strong></a></p>","more":"<hr />\r\n<h2 id=\"题面解释\">题面解释</h2>\r\n<p>找出两个有序数组合并后的中位数. 但要求时间复杂度<span\r\nclass=\"math inline\">\\(\\mathit{O}(log(m + n))\\)</span>.</p>\r\n<h2 id=\"解法一-二分\">解法一 二分</h2>\r\n<p>笔者看到复杂度<span class=\"math inline\">\\(\\mathit{O}(log(m +\r\nn))\\)</span>第一想法便是二分, 但怎么二分? 两个数组只是内部有序,\r\n两个数组并不有序, 常规对数组二分的思路肯定是不行的.</p>\r\n<p>那该如何进行二分呢, 对答案进行二分. 令k为所寻找的k阶数, 初始为中位数,\r\n则此时我们取两个数组的前<span\r\nclass=\"math inline\">\\(k/2\\)</span>部分出来, 比较<span\r\nclass=\"math inline\">\\(nums1[k/2]\\)</span>和<span\r\nclass=\"math inline\">\\(nums2[k/2]\\)</span>, 则可以直接排除<span\r\nclass=\"math inline\">\\(k/2\\)</span>个数. 我们以下图例子来解释.</p>\r\n<img src=\"/2024/09/21/LeetCode-P4/p1.png\" class=\"\" title=\"p1\">\r\n<p><span class=\"math inline\">\\(m = n = 4\\)</span>, 我们有 <span\r\nclass=\"math inline\">\\(k = 4, k/2 = 2\\)</span>,\r\n于是我们取两个数组的前两位, 比较3和5, 不难看出, 1和3不可能是中位数.\r\n为什么? 因为1和3的阶必定小于<span class=\"math inline\">\\(k = 4\\)</span>,\r\n即便第一个数组的3比第二个数组的5前面所有数都大, 3的阶也只能是3,\r\n1就更不必说了. 而5前面的数可能大于3后面的数(例子中未能体现,\r\n读者可以自行构造一个满足这种情况的简单例子). 因此通过这种操作,\r\n我们可以排掉 <span class=\"math inline\">\\(k/2\\)</span>\r\n个不可能是中位数的元素, 接着我们令<span class=\"math inline\">\\(k = k -\r\nk/2\\)</span>, 将被排除的数去掉, 重新进行上述过程.</p>\r\n<img src=\"/2024/09/21/LeetCode-P4/p2.png\" class=\"\" title=\"p2\">\r\n<p>选取两个数组的前1位.比较2 和 4, 可以排除掉2. 此时过程进行到了边界处,\r\n接下来<span class=\"math inline\">\\(k = 1\\)</span>无法继续了.\r\n而此时剩下的4和5正是我们需要的中位数.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 为什么第二个数组不是选择2, 5, 7?</p>\r\n<p>因为我们在上面的步骤中无法确定2和5是中位数与否, 此时的有效信息不足.\r\n而把2 5 7都放进来与4进行比较会出现bug, 以上例, 4会被错误的排除掉</p>\r\n</blockquote>\r\n<p>k为奇数时情况稍有不同, 但大多是一些细节问题, 笔者在此不再赘述.\r\n推荐读者自己构建一个例子去推算上面的过程, 相信不难理解其中要义.</p>\r\n<p>每次排除<span class=\"math inline\">\\(k/2\\)</span>, 而 <span\r\nclass=\"math inline\">\\(k = (m + n + 1) / 2\\)</span>, 故时间复杂度<span\r\nclass=\"math inline\">\\(\\mathit{O}(log(m + n))\\)</span>.</p>\r\n<p>参考代码如下:</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = nums<span class=\"number\">1.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> n = nums<span class=\"number\">2.</span><span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"comment\">//cout &lt;&lt; m &lt;&lt; &quot; &quot; &lt;&lt; n &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"comment\">//for(int i = 0; i &lt; m; i++)&#123;cout &lt;&lt; nums1[i] &lt;&lt; &quot; &quot;;&#125; cout &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"comment\">//for(int j = 0; j &lt; n; j++)&#123;cout &lt;&lt; nums2[j] &lt;&lt; &quot; &quot;;&#125; cout &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> left1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> left2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> k = (m + n - <span class=\"number\">1</span>) &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 排除掉小于中位数的数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 一个数组被清空</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                left2 += k;</span><br><span class=\"line\">                k = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                left1 += k;</span><br><span class=\"line\">                k = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">int</span> mid = k &gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">// 注意循环条件 k &gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> mid1 = left1 + mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid2 = left2 + mid - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 边界情况，剩余数组大小不足k</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 + mid &gt; m) &#123; <span class=\"comment\">// 等价于 left1 + mid - 1 &gt;= m</span></span><br><span class=\"line\">                mid1 = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 + mid &gt; n) &#123;</span><br><span class=\"line\">                mid2 = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[mid1] &gt;= nums2[mid2]) &#123;</span><br><span class=\"line\">                k -= mid2 - left2 + <span class=\"number\">1</span>; <span class=\"comment\">// 一轮可以排除掉一半</span></span><br><span class=\"line\">                left2 = mid2 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                k -= mid1 - left1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">                left1 = mid1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理 k == 1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                left2++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                left1++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums1[left1] &gt;= nums2[left2]) &#123;</span><br><span class=\"line\">                    left2++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    left1++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 别忘了处理边界情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((m + n) &amp; <span class=\"number\">1</span> == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 奇数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums2[left2];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums1[left1];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> std::<span class=\"built_in\">min</span>(nums1[left1], nums2[left2]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 偶数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> (nums2[left2] + nums2[left2 + <span class=\"number\">1</span>]) * <span class=\"number\">1.0</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (nums1[left1] + nums1[left1 + <span class=\"number\">1</span>]) * <span class=\"number\">1.0</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> num1;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums1[left1] &gt;= nums2[left2]) &#123;</span><br><span class=\"line\">                num1 = nums2[left2];</span><br><span class=\"line\">                left2++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                num1 = nums1[left1];</span><br><span class=\"line\">                left1++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> num2;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left1 == m) &#123;</span><br><span class=\"line\">                num2 = nums2[left2];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left2 == n) &#123;</span><br><span class=\"line\">                num2 = nums1[left1];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                num2 = <span class=\"built_in\">min</span>(nums1[left1], nums2[left2]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (num1 + num2) * <span class=\"number\">1.0</span> / <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 本题思路并不难想出或者说并不难理解,\r\n但非常考验代码功底, 对细节和边界情况的考察更像是此题的侧重点.\r\n还望看到此处的读者能静下心来调试代码, 祝早日AC.</p>\r\n</blockquote>\r\n<h2 id=\"解法二-分割\">解法二 分割</h2>\r\n<blockquote>\r\n<p>笔者阅读题解时注意到的巧妙的解法, 原链接在此<a\r\nhref=\"https://leetcode.cn/problems/median-of-two-sorted-arrays/solutions/8999/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/\"><strong>P4|windliang</strong></a></p>\r\n</blockquote>\r\n<p>更详细的数学证明, 思路和代码请阅读原文,\r\n笔者在此只给出自己对其的理解.</p>\r\n<p>本质来说, 两种方法殊途同归, 但分割的方法较为巧妙一些. 中位数,\r\n或者说k阶数, 就是将数组分为两个部分, 其一是比k阶数小的部分,\r\n其二是比k阶数大的部分.</p>\r\n<p>对于有序的一个数组, 其性质本身就已经满足,\r\n我们不妨将两部分简称为左半部分(小)和右半部分(大). 对于两个有序数组,\r\n情况是一样的, 如果存在一种划分, 满足左边最大MaxLeft小于右边最小MinRight,\r\n我们则认为这是关于k阶数的一种有效划分.</p>\r\n<p>因此, 这道题就被转化为寻找数组中满足中位数的有效划分,\r\n关于特定k阶数划分, 还需要满足左半部分和右半部分的数量关系,\r\n若规定将k阶数划在左半部分, 则左半部分有k个元素, 右半部分有 n - k\r\n个元素.</p>\r\n<p>后面的事情就简单了, 固定数组1的划分位置,\r\n根据数量关系找到数组2待判定划分位置,\r\n根据MaxLeft和MinRight的大小关系决定数组1划分位置的左移或右移,\r\n该过程可以通过二分完成.</p>"},{"title":"NJU静态分析|A2-Constant Propagation","date":"2024-10-28T12:59:35.000Z","hidden":false,"_content":"\n**NJU Static Program Analysis | Assignment-2 Constant Propagation & WorlistSolver.**\n\n<!--more-->\n\n## 实验信息与食用指南\n\n请翻阅[**[NJU静态分析|A1-Live Variable Analysis]**](https://la-pluma.github.io/2024/10/20/SPA-A1/#more).\n\n在此进行一点补充, 笔者的这份实验记录更像是Free Style版的**FAQ**. 因此请 ***确保*** 在理解了**理论知识**, **实验指南** 和 **框架代码** 后再参考本记录, 与A1相同, 本记录 ***不提供*** 源代码(~~或者说暂时没有~~).\n\n~~如果您对本实验记录中的内容感到困惑, 可能是因为笔者能力不足或您未能理解实验指南和框架代码, 同时本试验记录难以涵盖所有的坑, 还望海涵.~~\n\n## 实验目标\n\n基于**Tai-e**框架实现**常量传播算法**和**worklist求解器**.\n\n大致的框架代码如下:\n\n![pic1](SPA-A2/pic1.png)\n\n注意常量传播算法是**Forward & Must analysis**.\n\n## 部分重要框架代码带读\n\n~~我知道你们有些人肯定是不看框架代码的, 除非不得不用或者报错的时候.~~\n\n### IR & IRBuilder\n\nTai-e框架中的`IR`与课上教授的IR稍有不同, 以A2 test中的**Assign.java**为例,\n\n```java\n/*   From A2 test/Assign.java   */\nclass Assign {\n    void assign() {\n        int x = 1, y;\n        x = 2;\n        x = 3;\n        x = 4;\n        y = x;\n    }\n}\n```\n\n经过tai-e框架的分析后会得到\n\n```java\n-------------------- <Assign: void <init>()> (constprop) --------------------\n[0@L1] invokespecial %this.<java.lang.Object: void <init>()>(); {}\n[1@L1] return; {}\n\n-------------------- <Assign: void assign()> (constprop) --------------------\n[0@L4] x = 1;   {x=1}\n[1@L5] x = 2;   {x=2}\n[2@L6] x = 3;   {x=3}\n[3@L7] x = 4;   {x=4}\n[4@L8] y = x;   {x=4, y=4}\n[5@L8] return;  {x=4, y=4}\n\n```\n\n结合**IR** & **IRBuilder**(可翻阅[**[官方手册]**](https://tai-e.pascal-lab.net/docs/index.html)),\n\n![pic2](SPA-A2/pic2.png)\n\n~~IR我懒得贴了~~\n\n`IR`的基本单元是**method** (请意识到java是oop语言), `IRBuilder`提供了分析单个方法的API`buildIR(JMethod method)`和分析整个`class hierarchy`(不明白, 等到A4就明白了, 笑)中的所有方法的API`buildAll()`\n\n结合`Stmt` `Exp` 和 `CFG`, 我们可以得到这样的一个示意图(由于笔者未阅读全部的源码实现, 可能会有所出入, 但大致如此).\n\n![pic3](SPA-A2/pic3.png)\n\n> **Tips:** 严格来说`CFG`并不存储`Node`(本实验中指`Stmt`, 见A1试验记录说明), 只存储`Stmt`的关联信息, 但为了方便图示遂如此展示. 至于为何左值和右值都是`Exp`, 请翻阅A1官方实验指南中对`Exp`的图示表示部分.\n\n### DefinitionStmt\n\n尽管理论上不需要这个类也可以完成实验(`Stmt`中的顶层方法足以实现), 但既然框架提供了这么好用的API, 方便我们写出更优雅的代码, 为什么不用呢?\n\n![pic4.png](SPA-A2/pic4.png)\n\n`DefinitionStmt`为我们提供了两个非常好用的API, `getLValue()`和`getRValue`可以直接获取到左右式的`Exp`(希望你还记得`LValue`&`RValue` extends `Exp`), 而不需要像`Stmt`中的`getDef()` & `getUses()` 做较为繁琐的判断和筛选(如果对`getUses()`感到困惑, 也还请翻阅A1实验记录, 里面有解释和参考来源).\n\n需要注意的是, `getLValue()`可能会返回`null`.\n\n## ConstantPropagation\n\n与活跃变量分析类似, 我们需要完成5个API的功能.\n\n### newBoundaryFact() & newInitialFact()\n\n需要注意的是, 本次存储分析结果的数据结构是`CPFact`, 与A1相同, 在完成本次实验代码之前需要了解相关API的用法.\n\n既然是**Must Analysis**, 我们需要将初值赋为空, 但需要注意的是, 我们的**Analysis**仅分析语句, 在进入第一条语句之前, 是否有什么东西需要初始化?\n\n这个问题就对应了指南中为什么`BoundaryInit` 要通过 `getIR().getParas()`获取参数并赋值`NAC`的提示.\n\n在对`IR`的解释中我们提到过, `IR`的基本分析单元是**method**, 即函数, 函数就可能有传入的参数, 这些参数易见**不是Constant**, 因此要赋值为`NAC`\n\n> **Tips:** 如果是Constant干嘛还要传参, 即便真的这么做了, 我们的分析也可以满足**safe-approximation**.\n\n这部分是在方法体(函数语句)执行前就完成的初始化, 因此我们需要赋值给`Entry`的`outFact`.\n\n### meetValue() & meetInto()\n\n`meetValue()`的完成没有任何难点, 只需要照抄ppt中的规则即可.\n\n![pic5](SPA-A2/pic5.png)\n\n同样的, 完成这部分代码需要阅读`Class Value`的源码API和注释.\n\n关于`meetInto()`, 如果没有阅读`CPFact`中的`update()`方法注释, 就不知道可以写出如此优雅的代码来合并`Var`的`Value`值:\n\n```java\ntarget.update(var, meetValue(fact.get(var), target.get(var)));\n```\n\n![pic6](SPA-A2/pic6.png)\n\n### transferNode() & evaluate()\n\n毫无疑问, 这是本次实验中最难最核心的一部分, 细节非常多, 当被卡hidden test的时候, 大概率寄在这里.\n\n笔者建议在`transferNode()`中处理`Stmt`的左值def部分, 在`evaluate()`中处理右值exp部分. 这是比较符合功能分离的写法, 当然, 也可以选择在 `transferNode()`中处理`Var`和`IntLiteral`, `evaluate()`只负责处理`BinaryExp`的计算值. 笔者在此按第一种写法进行说明.\n\n#### transferNode()\n\n这个函数中你需要依次做(次流程可能存在可以优化的部分, 不必完全照做):\n\n- 保存`outFact`原值, 将`inFact`赋值给`outFact`.\n\n- 判断`Node`(`Stmt`)是否为`DefinitionStmt`\n\n- 判断是否拥有**合法**左值, 包括`def`的类型`Var`和`Var`中的`ValueType`是否为`Int`, 如果不是, 本次实验中可以认为是`nop`空操作. 不需要为这个`Stmt`做任何分析, 直接将`inFact` copy给 `outFact`即可.\n\n    > **Tips:** IDEA教给我一个很有意思的语法糖\n    >\n    ```java\n    if(stmt instanceof DefinitionStmt def_stmt){\n        LValue def = def_stmt.getLValue();\n        ...\n    }\n    ```\n    >\n    > 这个用法可以避开繁琐的类型转化, 在判断类型时便做了类型转化.\n\n- 计算`Stmt`的右值(通过`evaluate()`获得), 并更新`outFact`中的相应`Var def`(笔者在此并未使用`update`方法的返回值, 或许可从此处入手优化效率, 但笔者不能保证其正确性)\n\n- 比较`outFact`是否更新返回布尔值.\n\n#### evaluate()\n\n为了完成这个方法, 代码的大致框架应该是这个样子:\n\n```java\npublic static Value evaluate(Exp exp, CPFact in) {\n    if(exp instanceof Var){\n        ...\n        return /*Value*/\n    }\n    if(exp instanceof IntLiteral){\n        ...\n        return /*Value*/\n    }\n    if(exp instanceof BinaryExp binary_exp){\n        Value left = ...;\n        Value right = ...;\n        // Operand may not Int or may not Constant\n        // you'd better do it first\n        if(/*left HoldInt && right HoldInt*/){\n            //you can get Condition Info form ppt\n            if(/*left is Constant && right is constant*/){\n                if (binary_exp instanceof ArithmeticExp arithmetic_exp){\n                    ...\n                    switch(op){\n                        //also should attention to DIV 0 return Undef\n                        case ADD: ...\n                        ...\n                    }\n                }\n                if (binary_exp instanceof BitwiseExp bitwise_exp){\n                    ...\n                    switch(op){\n                        case AND: ...\n                        ...\n                    }\n                }\n                if(...)\n                ...\n            }\n            else if(/*left is NAC || right is NAC*/){\n                //you should do DIV & REM for 0 judgement there\n                ...\n            }\n            else if(/*other condition*/){\n                ...\n            }\n            else if(/*other condition*/){\n                ...\n            }\n            ...\n        }\n        //for over-approximation\n        return Value.getNAC();\n    }\n    //such as x = o.f()\n    //for over-approximation\n    return Value.getNAC(); \n}\n```\n\n其中二元表达式计算规则见ppt所示,\n\n![pic7](SPA-A2/pic7.png)\n\n笔者在此给出一些细节和边界条件, 也可以通过阅读上述代码框架获得细节提示:\n\n- `exp`中的操作数可能不是`IntType`, 所以你需要做一个`canHoldInt()`判断, 非法`exp`为了安全性应赋值为`NAC`\n\n- 实验指南中提到, 对于`/`和`%`的除零错误, 应当给出`Undef`, **即使**被除数是`NAC`.\n\n## Sovler & WorkListSolver\n\n### Sovler Init\n\n照着算法流程前三行写便是, 但这里要提到框架代码的\"**robustness**\".\n\n尽管从分析流程上来看, 我们不应该分析`Node Entry`, 但是框架代码允许我们这样做. 这时框架代码会认为`Node Entry`是一条`nop Stmt`, 不会做constant update, 因此只要在`Init`部分对`Entry`的`inFact`和`outFact`都赋上初值, 就不需要在worklist中考虑`Entry`的处理了.\n\n### WorkListSolver doSolveForward\n\n**worklist**是一种非常简单的算法, 笔者在此不对算法实现过多赘述. 注意在实现worklist的时候可以使用java自带的容器`Queue` & `ArrayList`.\n\n关于**worklist**的初始化问题, 需要注意的是应当为其加入所有的`Node`, 如果只加入`Entry`的后继, 会产生问题, 笔者在此给出一个例子. (感谢课程群中[**日居月诸**](https://github.com/rijuyuezhu)大佬和另一位不知道github链接的大佬构造的反例)\n\n```java\n-------------------- <Assign: void assign()> (constprop) --------------------\n[0@L4] nop;     {}\n[0@L4] x = 1;   {x=1}\n[1@L5] x = 2;   {x=2}\n[2@L6] x = 3;   {x=3}\n[3@L7] x = 4;   {x=4}\n[4@L8] y = x;   {x=4, y=4}\n[5@L8] return;  {x=4, y=4}\n\n```\n\n在这个例子中, `Entry outFact`初始化为`{}`(没有参数), 然而`Stmt0` 的 `outFact` 同样初始化为`{}`, 如果只添加`Entry`的后继`{Stmt0}`, 会导致worklist在分析完`Stmt0`后错误终止.\n\n## 总结\n\n本次实验应该是所有Assignment中代码量最多的一次, 细节也是让人头皮发麻, 还望能静下心来看代码和debug, 祝早日AC!\n","source":"_posts/SPA-A2.md","raw":"---\ntitle: NJU静态分析|A2-Constant Propagation\ndate: 2024-10-28 20:59:35\nhidden: false\ntags:\n- NJU\n- 静态分析\ncategories:\n- NJU静态分析实验记录\n---\n\n**NJU Static Program Analysis | Assignment-2 Constant Propagation & WorlistSolver.**\n\n<!--more-->\n\n## 实验信息与食用指南\n\n请翻阅[**[NJU静态分析|A1-Live Variable Analysis]**](https://la-pluma.github.io/2024/10/20/SPA-A1/#more).\n\n在此进行一点补充, 笔者的这份实验记录更像是Free Style版的**FAQ**. 因此请 ***确保*** 在理解了**理论知识**, **实验指南** 和 **框架代码** 后再参考本记录, 与A1相同, 本记录 ***不提供*** 源代码(~~或者说暂时没有~~).\n\n~~如果您对本实验记录中的内容感到困惑, 可能是因为笔者能力不足或您未能理解实验指南和框架代码, 同时本试验记录难以涵盖所有的坑, 还望海涵.~~\n\n## 实验目标\n\n基于**Tai-e**框架实现**常量传播算法**和**worklist求解器**.\n\n大致的框架代码如下:\n\n![pic1](SPA-A2/pic1.png)\n\n注意常量传播算法是**Forward & Must analysis**.\n\n## 部分重要框架代码带读\n\n~~我知道你们有些人肯定是不看框架代码的, 除非不得不用或者报错的时候.~~\n\n### IR & IRBuilder\n\nTai-e框架中的`IR`与课上教授的IR稍有不同, 以A2 test中的**Assign.java**为例,\n\n```java\n/*   From A2 test/Assign.java   */\nclass Assign {\n    void assign() {\n        int x = 1, y;\n        x = 2;\n        x = 3;\n        x = 4;\n        y = x;\n    }\n}\n```\n\n经过tai-e框架的分析后会得到\n\n```java\n-------------------- <Assign: void <init>()> (constprop) --------------------\n[0@L1] invokespecial %this.<java.lang.Object: void <init>()>(); {}\n[1@L1] return; {}\n\n-------------------- <Assign: void assign()> (constprop) --------------------\n[0@L4] x = 1;   {x=1}\n[1@L5] x = 2;   {x=2}\n[2@L6] x = 3;   {x=3}\n[3@L7] x = 4;   {x=4}\n[4@L8] y = x;   {x=4, y=4}\n[5@L8] return;  {x=4, y=4}\n\n```\n\n结合**IR** & **IRBuilder**(可翻阅[**[官方手册]**](https://tai-e.pascal-lab.net/docs/index.html)),\n\n![pic2](SPA-A2/pic2.png)\n\n~~IR我懒得贴了~~\n\n`IR`的基本单元是**method** (请意识到java是oop语言), `IRBuilder`提供了分析单个方法的API`buildIR(JMethod method)`和分析整个`class hierarchy`(不明白, 等到A4就明白了, 笑)中的所有方法的API`buildAll()`\n\n结合`Stmt` `Exp` 和 `CFG`, 我们可以得到这样的一个示意图(由于笔者未阅读全部的源码实现, 可能会有所出入, 但大致如此).\n\n![pic3](SPA-A2/pic3.png)\n\n> **Tips:** 严格来说`CFG`并不存储`Node`(本实验中指`Stmt`, 见A1试验记录说明), 只存储`Stmt`的关联信息, 但为了方便图示遂如此展示. 至于为何左值和右值都是`Exp`, 请翻阅A1官方实验指南中对`Exp`的图示表示部分.\n\n### DefinitionStmt\n\n尽管理论上不需要这个类也可以完成实验(`Stmt`中的顶层方法足以实现), 但既然框架提供了这么好用的API, 方便我们写出更优雅的代码, 为什么不用呢?\n\n![pic4.png](SPA-A2/pic4.png)\n\n`DefinitionStmt`为我们提供了两个非常好用的API, `getLValue()`和`getRValue`可以直接获取到左右式的`Exp`(希望你还记得`LValue`&`RValue` extends `Exp`), 而不需要像`Stmt`中的`getDef()` & `getUses()` 做较为繁琐的判断和筛选(如果对`getUses()`感到困惑, 也还请翻阅A1实验记录, 里面有解释和参考来源).\n\n需要注意的是, `getLValue()`可能会返回`null`.\n\n## ConstantPropagation\n\n与活跃变量分析类似, 我们需要完成5个API的功能.\n\n### newBoundaryFact() & newInitialFact()\n\n需要注意的是, 本次存储分析结果的数据结构是`CPFact`, 与A1相同, 在完成本次实验代码之前需要了解相关API的用法.\n\n既然是**Must Analysis**, 我们需要将初值赋为空, 但需要注意的是, 我们的**Analysis**仅分析语句, 在进入第一条语句之前, 是否有什么东西需要初始化?\n\n这个问题就对应了指南中为什么`BoundaryInit` 要通过 `getIR().getParas()`获取参数并赋值`NAC`的提示.\n\n在对`IR`的解释中我们提到过, `IR`的基本分析单元是**method**, 即函数, 函数就可能有传入的参数, 这些参数易见**不是Constant**, 因此要赋值为`NAC`\n\n> **Tips:** 如果是Constant干嘛还要传参, 即便真的这么做了, 我们的分析也可以满足**safe-approximation**.\n\n这部分是在方法体(函数语句)执行前就完成的初始化, 因此我们需要赋值给`Entry`的`outFact`.\n\n### meetValue() & meetInto()\n\n`meetValue()`的完成没有任何难点, 只需要照抄ppt中的规则即可.\n\n![pic5](SPA-A2/pic5.png)\n\n同样的, 完成这部分代码需要阅读`Class Value`的源码API和注释.\n\n关于`meetInto()`, 如果没有阅读`CPFact`中的`update()`方法注释, 就不知道可以写出如此优雅的代码来合并`Var`的`Value`值:\n\n```java\ntarget.update(var, meetValue(fact.get(var), target.get(var)));\n```\n\n![pic6](SPA-A2/pic6.png)\n\n### transferNode() & evaluate()\n\n毫无疑问, 这是本次实验中最难最核心的一部分, 细节非常多, 当被卡hidden test的时候, 大概率寄在这里.\n\n笔者建议在`transferNode()`中处理`Stmt`的左值def部分, 在`evaluate()`中处理右值exp部分. 这是比较符合功能分离的写法, 当然, 也可以选择在 `transferNode()`中处理`Var`和`IntLiteral`, `evaluate()`只负责处理`BinaryExp`的计算值. 笔者在此按第一种写法进行说明.\n\n#### transferNode()\n\n这个函数中你需要依次做(次流程可能存在可以优化的部分, 不必完全照做):\n\n- 保存`outFact`原值, 将`inFact`赋值给`outFact`.\n\n- 判断`Node`(`Stmt`)是否为`DefinitionStmt`\n\n- 判断是否拥有**合法**左值, 包括`def`的类型`Var`和`Var`中的`ValueType`是否为`Int`, 如果不是, 本次实验中可以认为是`nop`空操作. 不需要为这个`Stmt`做任何分析, 直接将`inFact` copy给 `outFact`即可.\n\n    > **Tips:** IDEA教给我一个很有意思的语法糖\n    >\n    ```java\n    if(stmt instanceof DefinitionStmt def_stmt){\n        LValue def = def_stmt.getLValue();\n        ...\n    }\n    ```\n    >\n    > 这个用法可以避开繁琐的类型转化, 在判断类型时便做了类型转化.\n\n- 计算`Stmt`的右值(通过`evaluate()`获得), 并更新`outFact`中的相应`Var def`(笔者在此并未使用`update`方法的返回值, 或许可从此处入手优化效率, 但笔者不能保证其正确性)\n\n- 比较`outFact`是否更新返回布尔值.\n\n#### evaluate()\n\n为了完成这个方法, 代码的大致框架应该是这个样子:\n\n```java\npublic static Value evaluate(Exp exp, CPFact in) {\n    if(exp instanceof Var){\n        ...\n        return /*Value*/\n    }\n    if(exp instanceof IntLiteral){\n        ...\n        return /*Value*/\n    }\n    if(exp instanceof BinaryExp binary_exp){\n        Value left = ...;\n        Value right = ...;\n        // Operand may not Int or may not Constant\n        // you'd better do it first\n        if(/*left HoldInt && right HoldInt*/){\n            //you can get Condition Info form ppt\n            if(/*left is Constant && right is constant*/){\n                if (binary_exp instanceof ArithmeticExp arithmetic_exp){\n                    ...\n                    switch(op){\n                        //also should attention to DIV 0 return Undef\n                        case ADD: ...\n                        ...\n                    }\n                }\n                if (binary_exp instanceof BitwiseExp bitwise_exp){\n                    ...\n                    switch(op){\n                        case AND: ...\n                        ...\n                    }\n                }\n                if(...)\n                ...\n            }\n            else if(/*left is NAC || right is NAC*/){\n                //you should do DIV & REM for 0 judgement there\n                ...\n            }\n            else if(/*other condition*/){\n                ...\n            }\n            else if(/*other condition*/){\n                ...\n            }\n            ...\n        }\n        //for over-approximation\n        return Value.getNAC();\n    }\n    //such as x = o.f()\n    //for over-approximation\n    return Value.getNAC(); \n}\n```\n\n其中二元表达式计算规则见ppt所示,\n\n![pic7](SPA-A2/pic7.png)\n\n笔者在此给出一些细节和边界条件, 也可以通过阅读上述代码框架获得细节提示:\n\n- `exp`中的操作数可能不是`IntType`, 所以你需要做一个`canHoldInt()`判断, 非法`exp`为了安全性应赋值为`NAC`\n\n- 实验指南中提到, 对于`/`和`%`的除零错误, 应当给出`Undef`, **即使**被除数是`NAC`.\n\n## Sovler & WorkListSolver\n\n### Sovler Init\n\n照着算法流程前三行写便是, 但这里要提到框架代码的\"**robustness**\".\n\n尽管从分析流程上来看, 我们不应该分析`Node Entry`, 但是框架代码允许我们这样做. 这时框架代码会认为`Node Entry`是一条`nop Stmt`, 不会做constant update, 因此只要在`Init`部分对`Entry`的`inFact`和`outFact`都赋上初值, 就不需要在worklist中考虑`Entry`的处理了.\n\n### WorkListSolver doSolveForward\n\n**worklist**是一种非常简单的算法, 笔者在此不对算法实现过多赘述. 注意在实现worklist的时候可以使用java自带的容器`Queue` & `ArrayList`.\n\n关于**worklist**的初始化问题, 需要注意的是应当为其加入所有的`Node`, 如果只加入`Entry`的后继, 会产生问题, 笔者在此给出一个例子. (感谢课程群中[**日居月诸**](https://github.com/rijuyuezhu)大佬和另一位不知道github链接的大佬构造的反例)\n\n```java\n-------------------- <Assign: void assign()> (constprop) --------------------\n[0@L4] nop;     {}\n[0@L4] x = 1;   {x=1}\n[1@L5] x = 2;   {x=2}\n[2@L6] x = 3;   {x=3}\n[3@L7] x = 4;   {x=4}\n[4@L8] y = x;   {x=4, y=4}\n[5@L8] return;  {x=4, y=4}\n\n```\n\n在这个例子中, `Entry outFact`初始化为`{}`(没有参数), 然而`Stmt0` 的 `outFact` 同样初始化为`{}`, 如果只添加`Entry`的后继`{Stmt0}`, 会导致worklist在分析完`Stmt0`后错误终止.\n\n## 总结\n\n本次实验应该是所有Assignment中代码量最多的一次, 细节也是让人头皮发麻, 还望能静下心来看代码和debug, 祝早日AC!\n","slug":"SPA-A2","published":1,"updated":"2024-10-28T16:46:51.367Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyul000qssilfre2d99x","content":"<p><strong>NJU Static Program Analysis | Assignment-2 Constant\r\nPropagation &amp; WorlistSolver.</strong></p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"实验信息与食用指南\">实验信息与食用指南</h2>\r\n<p>请翻阅<a\r\nhref=\"https://la-pluma.github.io/2024/10/20/SPA-A1/#more\"><strong>[NJU静态分析|A1-Live\r\nVariable Analysis]</strong></a>.</p>\r\n<p>在此进行一点补充, 笔者的这份实验记录更像是Free\r\nStyle版的<strong>FAQ</strong>. 因此请 <strong><em>确保</em></strong>\r\n在理解了<strong>理论知识</strong>, <strong>实验指南</strong> 和\r\n<strong>框架代码</strong> 后再参考本记录, 与A1相同, 本记录\r\n<strong><em>不提供</em></strong> 源代码(<del>或者说暂时没有</del>).</p>\r\n<p><del>如果您对本实验记录中的内容感到困惑,\r\n可能是因为笔者能力不足或您未能理解实验指南和框架代码,\r\n同时本试验记录难以涵盖所有的坑, 还望海涵.</del></p>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>Tai-e</strong>框架实现<strong>常量传播算法</strong>和<strong>worklist求解器</strong>.</p>\r\n<p>大致的框架代码如下:</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic1.png\" class=\"\" title=\"pic1\">\r\n<p>注意常量传播算法是<strong>Forward &amp; Must analysis</strong>.</p>\r\n<h2 id=\"部分重要框架代码带读\">部分重要框架代码带读</h2>\r\n<p><del>我知道你们有些人肯定是不看框架代码的,\r\n除非不得不用或者报错的时候.</del></p>\r\n<h3 id=\"ir-irbuilder\">IR &amp; IRBuilder</h3>\r\n<p>Tai-e框架中的<code>IR</code>与课上教授的IR稍有不同, 以A2\r\ntest中的<strong>Assign.java</strong>为例,</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*   From A2 test/Assign.java   */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Assign</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, y;</span><br><span class=\"line\">        x = <span class=\"number\">2</span>;</span><br><span class=\"line\">        x = <span class=\"number\">3</span>;</span><br><span class=\"line\">        x = <span class=\"number\">4</span>;</span><br><span class=\"line\">        y = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>经过tai-e框架的分析后会得到</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;Assign: <span class=\"keyword\">void</span> &lt;init&gt;()&gt; (constprop) --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L1</span>] invokespecial %<span class=\"built_in\">this</span>.&lt;java.lang.Object: <span class=\"keyword\">void</span> &lt;init&gt;()&gt;(); &#123;&#125;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L1</span>] <span class=\"keyword\">return</span>; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------- &lt;Assign: <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span>&gt; (constprop) --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;   &#123;x=<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] x = <span class=\"number\">2</span>;   &#123;x=<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L6</span>] x = <span class=\"number\">3</span>;   &#123;x=<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] x = <span class=\"number\">4</span>;   &#123;x=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L8</span>] y = x;   &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] <span class=\"keyword\">return</span>;  &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>结合<strong>IR</strong> &amp; <strong>IRBuilder</strong>(可翻阅<a\r\nhref=\"https://tai-e.pascal-lab.net/docs/index.html\"><strong>[官方手册]</strong></a>),</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic2.png\" class=\"\" title=\"pic2\">\r\n<p><del>IR我懒得贴了</del></p>\r\n<p><code>IR</code>的基本单元是<strong>method</strong>\r\n(请意识到java是oop语言),\r\n<code>IRBuilder</code>提供了分析单个方法的API<code>buildIR(JMethod method)</code>和分析整个<code>class hierarchy</code>(不明白,\r\n等到A4就明白了, 笑)中的所有方法的API<code>buildAll()</code></p>\r\n<p>结合<code>Stmt</code> <code>Exp</code> 和 <code>CFG</code>,\r\n我们可以得到这样的一个示意图(由于笔者未阅读全部的源码实现,\r\n可能会有所出入, 但大致如此).</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic3.png\" class=\"\" title=\"pic3\">\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n严格来说<code>CFG</code>并不存储<code>Node</code>(本实验中指<code>Stmt</code>,\r\n见A1试验记录说明), 只存储<code>Stmt</code>的关联信息,\r\n但为了方便图示遂如此展示. 至于为何左值和右值都是<code>Exp</code>,\r\n请翻阅A1官方实验指南中对<code>Exp</code>的图示表示部分.</p>\r\n</blockquote>\r\n<h3 id=\"definitionstmt\">DefinitionStmt</h3>\r\n<p>尽管理论上不需要这个类也可以完成实验(<code>Stmt</code>中的顶层方法足以实现),\r\n但既然框架提供了这么好用的API, 方便我们写出更优雅的代码,\r\n为什么不用呢?</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic4.png\" class=\"\" title=\"pic4.png\">\r\n<p><code>DefinitionStmt</code>为我们提供了两个非常好用的API,\r\n<code>getLValue()</code>和<code>getRValue</code>可以直接获取到左右式的<code>Exp</code>(希望你还记得<code>LValue</code>&amp;<code>RValue</code>\r\nextends <code>Exp</code>),\r\n而不需要像<code>Stmt</code>中的<code>getDef()</code> &amp;\r\n<code>getUses()</code>\r\n做较为繁琐的判断和筛选(如果对<code>getUses()</code>感到困惑,\r\n也还请翻阅A1实验记录, 里面有解释和参考来源).</p>\r\n<p>需要注意的是,\r\n<code>getLValue()</code>可能会返回<code>null</code>.</p>\r\n<h2 id=\"constantpropagation\">ConstantPropagation</h2>\r\n<p>与活跃变量分析类似, 我们需要完成5个API的功能.</p>\r\n<h3 id=\"newboundaryfact-newinitialfact\">newBoundaryFact() &amp;\r\nnewInitialFact()</h3>\r\n<p>需要注意的是, 本次存储分析结果的数据结构是<code>CPFact</code>,\r\n与A1相同, 在完成本次实验代码之前需要了解相关API的用法.</p>\r\n<p>既然是<strong>Must Analysis</strong>, 我们需要将初值赋为空,\r\n但需要注意的是, 我们的<strong>Analysis</strong>仅分析语句,\r\n在进入第一条语句之前, 是否有什么东西需要初始化?</p>\r\n<p>这个问题就对应了指南中为什么<code>BoundaryInit</code> 要通过\r\n<code>getIR().getParas()</code>获取参数并赋值<code>NAC</code>的提示.</p>\r\n<p>在对<code>IR</code>的解释中我们提到过,\r\n<code>IR</code>的基本分析单元是<strong>method</strong>, 即函数,\r\n函数就可能有传入的参数, 这些参数易见<strong>不是Constant</strong>,\r\n因此要赋值为<code>NAC</code></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 如果是Constant干嘛还要传参, 即便真的这么做了,\r\n我们的分析也可以满足<strong>safe-approximation</strong>.</p>\r\n</blockquote>\r\n<p>这部分是在方法体(函数语句)执行前就完成的初始化,\r\n因此我们需要赋值给<code>Entry</code>的<code>outFact</code>.</p>\r\n<h3 id=\"meetvalue-meetinto\">meetValue() &amp; meetInto()</h3>\r\n<p><code>meetValue()</code>的完成没有任何难点,\r\n只需要照抄ppt中的规则即可.</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic5.png\" class=\"\" title=\"pic5\">\r\n<p>同样的,\r\n完成这部分代码需要阅读<code>Class Value</code>的源码API和注释.</p>\r\n<p>关于<code>meetInto()</code>,\r\n如果没有阅读<code>CPFact</code>中的<code>update()</code>方法注释,\r\n就不知道可以写出如此优雅的代码来合并<code>Var</code>的<code>Value</code>值:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.update(<span class=\"keyword\">var</span>, meetValue(fact.get(<span class=\"keyword\">var</span>), target.get(<span class=\"keyword\">var</span>)));</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/10/28/SPA-A2/pic6.png\" class=\"\" title=\"pic6\">\r\n<h3 id=\"transfernode-evaluate\">transferNode() &amp; evaluate()</h3>\r\n<p>毫无疑问, 这是本次实验中最难最核心的一部分, 细节非常多, 当被卡hidden\r\ntest的时候, 大概率寄在这里.</p>\r\n<p>笔者建议在<code>transferNode()</code>中处理<code>Stmt</code>的左值def部分,\r\n在<code>evaluate()</code>中处理右值exp部分. 这是比较符合功能分离的写法,\r\n当然, 也可以选择在\r\n<code>transferNode()</code>中处理<code>Var</code>和<code>IntLiteral</code>,\r\n<code>evaluate()</code>只负责处理<code>BinaryExp</code>的计算值.\r\n笔者在此按第一种写法进行说明.</p>\r\n<h4 id=\"transfernode\">transferNode()</h4>\r\n<p>这个函数中你需要依次做(次流程可能存在可以优化的部分,\r\n不必完全照做):</p>\r\n<ul>\r\n<li><p>保存<code>outFact</code>原值,\r\n将<code>inFact</code>赋值给<code>outFact</code>.</p></li>\r\n<li><p>判断<code>Node</code>(<code>Stmt</code>)是否为<code>DefinitionStmt</code></p></li>\r\n<li><p>判断是否拥有<strong>合法</strong>左值,\r\n包括<code>def</code>的类型<code>Var</code>和<code>Var</code>中的<code>ValueType</code>是否为<code>Int</code>,\r\n如果不是, 本次实验中可以认为是<code>nop</code>空操作.\r\n不需要为这个<code>Stmt</code>做任何分析, 直接将<code>inFact</code>\r\ncopy给 <code>outFact</code>即可.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> IDEA教给我一个很有意思的语法糖</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> DefinitionStmt def_stmt)&#123;</span><br><span class=\"line\">    <span class=\"type\">LValue</span> <span class=\"variable\">def</span> <span class=\"operator\">=</span> def_stmt.getLValue();</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>这个用法可以避开繁琐的类型转化, 在判断类型时便做了类型转化.</p>\r\n</blockquote></li>\r\n<li><p>计算<code>Stmt</code>的右值(通过<code>evaluate()</code>获得),\r\n并更新<code>outFact</code>中的相应<code>Var def</code>(笔者在此并未使用<code>update</code>方法的返回值,\r\n或许可从此处入手优化效率, 但笔者不能保证其正确性)</p></li>\r\n<li><p>比较<code>outFact</code>是否更新返回布尔值.</p></li>\r\n</ul>\r\n<h4 id=\"evaluate\">evaluate()</h4>\r\n<p>为了完成这个方法, 代码的大致框架应该是这个样子:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Value <span class=\"title function_\">evaluate</span><span class=\"params\">(Exp exp, CPFact in)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exp <span class=\"keyword\">instanceof</span> Var)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">/*Value*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exp <span class=\"keyword\">instanceof</span> IntLiteral)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">/*Value*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exp <span class=\"keyword\">instanceof</span> BinaryExp binary_exp)&#123;</span><br><span class=\"line\">        <span class=\"type\">Value</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> ...;</span><br><span class=\"line\">        <span class=\"type\">Value</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> ...;</span><br><span class=\"line\">        <span class=\"comment\">// Operand may not Int or may not Constant</span></span><br><span class=\"line\">        <span class=\"comment\">// you&#x27;d better do it first</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"comment\">/*left HoldInt &amp;&amp; right HoldInt*/</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//you can get Condition Info form ppt</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"comment\">/*left is Constant &amp;&amp; right is constant*/</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binary_exp <span class=\"keyword\">instanceof</span> ArithmeticExp arithmetic_exp)&#123;</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span>(op)&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//also should attention to DIV 0 return Undef</span></span><br><span class=\"line\">                        <span class=\"keyword\">case</span> ADD: ...</span><br><span class=\"line\">                        ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binary_exp <span class=\"keyword\">instanceof</span> BitwiseExp bitwise_exp)&#123;</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span>(op)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> AND: ...</span><br><span class=\"line\">                        ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(...)</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"comment\">/*left is NAC || right is NAC*/</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//you should do DIV &amp; REM for 0 judgement there</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"comment\">/*other condition*/</span>)&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"comment\">/*other condition*/</span>)&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//for over-approximation</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Value.getNAC();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//such as x = o.f()</span></span><br><span class=\"line\">    <span class=\"comment\">//for over-approximation</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Value.getNAC(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>其中二元表达式计算规则见ppt所示,</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic7.png\" class=\"\" title=\"pic7\">\r\n<p>笔者在此给出一些细节和边界条件,\r\n也可以通过阅读上述代码框架获得细节提示:</p>\r\n<ul>\r\n<li><p><code>exp</code>中的操作数可能不是<code>IntType</code>,\r\n所以你需要做一个<code>canHoldInt()</code>判断,\r\n非法<code>exp</code>为了安全性应赋值为<code>NAC</code></p></li>\r\n<li><p>实验指南中提到, 对于<code>/</code>和<code>%</code>的除零错误,\r\n应当给出<code>Undef</code>,\r\n<strong>即使</strong>被除数是<code>NAC</code>.</p></li>\r\n</ul>\r\n<h2 id=\"sovler-worklistsolver\">Sovler &amp; WorkListSolver</h2>\r\n<h3 id=\"sovler-init\">Sovler Init</h3>\r\n<p>照着算法流程前三行写便是,\r\n但这里要提到框架代码的\"<strong>robustness</strong>\".</p>\r\n<p>尽管从分析流程上来看, 我们不应该分析<code>Node Entry</code>,\r\n但是框架代码允许我们这样做.\r\n这时框架代码会认为<code>Node Entry</code>是一条<code>nop Stmt</code>,\r\n不会做constant update,\r\n因此只要在<code>Init</code>部分对<code>Entry</code>的<code>inFact</code>和<code>outFact</code>都赋上初值,\r\n就不需要在worklist中考虑<code>Entry</code>的处理了.</p>\r\n<h3 id=\"worklistsolver-dosolveforward\">WorkListSolver\r\ndoSolveForward</h3>\r\n<p><strong>worklist</strong>是一种非常简单的算法,\r\n笔者在此不对算法实现过多赘述.\r\n注意在实现worklist的时候可以使用java自带的容器<code>Queue</code> &amp;\r\n<code>ArrayList</code>.</p>\r\n<p>关于<strong>worklist</strong>的初始化问题,\r\n需要注意的是应当为其加入所有的<code>Node</code>,\r\n如果只加入<code>Entry</code>的后继, 会产生问题, 笔者在此给出一个例子.\r\n(感谢课程群中<a\r\nhref=\"https://github.com/rijuyuezhu\"><strong>日居月诸</strong></a>大佬和另一位不知道github链接的大佬构造的反例)</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;Assign: <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span>&gt; (constprop) --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] nop;     &#123;&#125;</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;   &#123;x=<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] x = <span class=\"number\">2</span>;   &#123;x=<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L6</span>] x = <span class=\"number\">3</span>;   &#123;x=<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] x = <span class=\"number\">4</span>;   &#123;x=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L8</span>] y = x;   &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] <span class=\"keyword\">return</span>;  &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>在这个例子中,\r\n<code>Entry outFact</code>初始化为<code>&#123;&#125;</code>(没有参数),\r\n然而<code>Stmt0</code> 的 <code>outFact</code>\r\n同样初始化为<code>&#123;&#125;</code>,\r\n如果只添加<code>Entry</code>的后继<code>&#123;Stmt0&#125;</code>,\r\n会导致worklist在分析完<code>Stmt0</code>后错误终止.</p>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>本次实验应该是所有Assignment中代码量最多的一次, 细节也是让人头皮发麻,\r\n还望能静下心来看代码和debug, 祝早日AC!</p>\r\n","length":2117,"excerpt":"<p><strong>NJU Static Program Analysis | Assignment-2 Constant\r\nPropagation &amp; WorlistSolver.</strong></p>","more":"<h2 id=\"实验信息与食用指南\">实验信息与食用指南</h2>\r\n<p>请翻阅<a\r\nhref=\"https://la-pluma.github.io/2024/10/20/SPA-A1/#more\"><strong>[NJU静态分析|A1-Live\r\nVariable Analysis]</strong></a>.</p>\r\n<p>在此进行一点补充, 笔者的这份实验记录更像是Free\r\nStyle版的<strong>FAQ</strong>. 因此请 <strong><em>确保</em></strong>\r\n在理解了<strong>理论知识</strong>, <strong>实验指南</strong> 和\r\n<strong>框架代码</strong> 后再参考本记录, 与A1相同, 本记录\r\n<strong><em>不提供</em></strong> 源代码(<del>或者说暂时没有</del>).</p>\r\n<p><del>如果您对本实验记录中的内容感到困惑,\r\n可能是因为笔者能力不足或您未能理解实验指南和框架代码,\r\n同时本试验记录难以涵盖所有的坑, 还望海涵.</del></p>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>Tai-e</strong>框架实现<strong>常量传播算法</strong>和<strong>worklist求解器</strong>.</p>\r\n<p>大致的框架代码如下:</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic1.png\" class=\"\" title=\"pic1\">\r\n<p>注意常量传播算法是<strong>Forward &amp; Must analysis</strong>.</p>\r\n<h2 id=\"部分重要框架代码带读\">部分重要框架代码带读</h2>\r\n<p><del>我知道你们有些人肯定是不看框架代码的,\r\n除非不得不用或者报错的时候.</del></p>\r\n<h3 id=\"ir-irbuilder\">IR &amp; IRBuilder</h3>\r\n<p>Tai-e框架中的<code>IR</code>与课上教授的IR稍有不同, 以A2\r\ntest中的<strong>Assign.java</strong>为例,</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*   From A2 test/Assign.java   */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Assign</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, y;</span><br><span class=\"line\">        x = <span class=\"number\">2</span>;</span><br><span class=\"line\">        x = <span class=\"number\">3</span>;</span><br><span class=\"line\">        x = <span class=\"number\">4</span>;</span><br><span class=\"line\">        y = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>经过tai-e框架的分析后会得到</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;Assign: <span class=\"keyword\">void</span> &lt;init&gt;()&gt; (constprop) --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L1</span>] invokespecial %<span class=\"built_in\">this</span>.&lt;java.lang.Object: <span class=\"keyword\">void</span> &lt;init&gt;()&gt;(); &#123;&#125;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L1</span>] <span class=\"keyword\">return</span>; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------- &lt;Assign: <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span>&gt; (constprop) --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;   &#123;x=<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] x = <span class=\"number\">2</span>;   &#123;x=<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L6</span>] x = <span class=\"number\">3</span>;   &#123;x=<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] x = <span class=\"number\">4</span>;   &#123;x=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L8</span>] y = x;   &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] <span class=\"keyword\">return</span>;  &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>结合<strong>IR</strong> &amp; <strong>IRBuilder</strong>(可翻阅<a\r\nhref=\"https://tai-e.pascal-lab.net/docs/index.html\"><strong>[官方手册]</strong></a>),</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic2.png\" class=\"\" title=\"pic2\">\r\n<p><del>IR我懒得贴了</del></p>\r\n<p><code>IR</code>的基本单元是<strong>method</strong>\r\n(请意识到java是oop语言),\r\n<code>IRBuilder</code>提供了分析单个方法的API<code>buildIR(JMethod method)</code>和分析整个<code>class hierarchy</code>(不明白,\r\n等到A4就明白了, 笑)中的所有方法的API<code>buildAll()</code></p>\r\n<p>结合<code>Stmt</code> <code>Exp</code> 和 <code>CFG</code>,\r\n我们可以得到这样的一个示意图(由于笔者未阅读全部的源码实现,\r\n可能会有所出入, 但大致如此).</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic3.png\" class=\"\" title=\"pic3\">\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n严格来说<code>CFG</code>并不存储<code>Node</code>(本实验中指<code>Stmt</code>,\r\n见A1试验记录说明), 只存储<code>Stmt</code>的关联信息,\r\n但为了方便图示遂如此展示. 至于为何左值和右值都是<code>Exp</code>,\r\n请翻阅A1官方实验指南中对<code>Exp</code>的图示表示部分.</p>\r\n</blockquote>\r\n<h3 id=\"definitionstmt\">DefinitionStmt</h3>\r\n<p>尽管理论上不需要这个类也可以完成实验(<code>Stmt</code>中的顶层方法足以实现),\r\n但既然框架提供了这么好用的API, 方便我们写出更优雅的代码,\r\n为什么不用呢?</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic4.png\" class=\"\" title=\"pic4.png\">\r\n<p><code>DefinitionStmt</code>为我们提供了两个非常好用的API,\r\n<code>getLValue()</code>和<code>getRValue</code>可以直接获取到左右式的<code>Exp</code>(希望你还记得<code>LValue</code>&amp;<code>RValue</code>\r\nextends <code>Exp</code>),\r\n而不需要像<code>Stmt</code>中的<code>getDef()</code> &amp;\r\n<code>getUses()</code>\r\n做较为繁琐的判断和筛选(如果对<code>getUses()</code>感到困惑,\r\n也还请翻阅A1实验记录, 里面有解释和参考来源).</p>\r\n<p>需要注意的是,\r\n<code>getLValue()</code>可能会返回<code>null</code>.</p>\r\n<h2 id=\"constantpropagation\">ConstantPropagation</h2>\r\n<p>与活跃变量分析类似, 我们需要完成5个API的功能.</p>\r\n<h3 id=\"newboundaryfact-newinitialfact\">newBoundaryFact() &amp;\r\nnewInitialFact()</h3>\r\n<p>需要注意的是, 本次存储分析结果的数据结构是<code>CPFact</code>,\r\n与A1相同, 在完成本次实验代码之前需要了解相关API的用法.</p>\r\n<p>既然是<strong>Must Analysis</strong>, 我们需要将初值赋为空,\r\n但需要注意的是, 我们的<strong>Analysis</strong>仅分析语句,\r\n在进入第一条语句之前, 是否有什么东西需要初始化?</p>\r\n<p>这个问题就对应了指南中为什么<code>BoundaryInit</code> 要通过\r\n<code>getIR().getParas()</code>获取参数并赋值<code>NAC</code>的提示.</p>\r\n<p>在对<code>IR</code>的解释中我们提到过,\r\n<code>IR</code>的基本分析单元是<strong>method</strong>, 即函数,\r\n函数就可能有传入的参数, 这些参数易见<strong>不是Constant</strong>,\r\n因此要赋值为<code>NAC</code></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 如果是Constant干嘛还要传参, 即便真的这么做了,\r\n我们的分析也可以满足<strong>safe-approximation</strong>.</p>\r\n</blockquote>\r\n<p>这部分是在方法体(函数语句)执行前就完成的初始化,\r\n因此我们需要赋值给<code>Entry</code>的<code>outFact</code>.</p>\r\n<h3 id=\"meetvalue-meetinto\">meetValue() &amp; meetInto()</h3>\r\n<p><code>meetValue()</code>的完成没有任何难点,\r\n只需要照抄ppt中的规则即可.</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic5.png\" class=\"\" title=\"pic5\">\r\n<p>同样的,\r\n完成这部分代码需要阅读<code>Class Value</code>的源码API和注释.</p>\r\n<p>关于<code>meetInto()</code>,\r\n如果没有阅读<code>CPFact</code>中的<code>update()</code>方法注释,\r\n就不知道可以写出如此优雅的代码来合并<code>Var</code>的<code>Value</code>值:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.update(<span class=\"keyword\">var</span>, meetValue(fact.get(<span class=\"keyword\">var</span>), target.get(<span class=\"keyword\">var</span>)));</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/10/28/SPA-A2/pic6.png\" class=\"\" title=\"pic6\">\r\n<h3 id=\"transfernode-evaluate\">transferNode() &amp; evaluate()</h3>\r\n<p>毫无疑问, 这是本次实验中最难最核心的一部分, 细节非常多, 当被卡hidden\r\ntest的时候, 大概率寄在这里.</p>\r\n<p>笔者建议在<code>transferNode()</code>中处理<code>Stmt</code>的左值def部分,\r\n在<code>evaluate()</code>中处理右值exp部分. 这是比较符合功能分离的写法,\r\n当然, 也可以选择在\r\n<code>transferNode()</code>中处理<code>Var</code>和<code>IntLiteral</code>,\r\n<code>evaluate()</code>只负责处理<code>BinaryExp</code>的计算值.\r\n笔者在此按第一种写法进行说明.</p>\r\n<h4 id=\"transfernode\">transferNode()</h4>\r\n<p>这个函数中你需要依次做(次流程可能存在可以优化的部分,\r\n不必完全照做):</p>\r\n<ul>\r\n<li><p>保存<code>outFact</code>原值,\r\n将<code>inFact</code>赋值给<code>outFact</code>.</p></li>\r\n<li><p>判断<code>Node</code>(<code>Stmt</code>)是否为<code>DefinitionStmt</code></p></li>\r\n<li><p>判断是否拥有<strong>合法</strong>左值,\r\n包括<code>def</code>的类型<code>Var</code>和<code>Var</code>中的<code>ValueType</code>是否为<code>Int</code>,\r\n如果不是, 本次实验中可以认为是<code>nop</code>空操作.\r\n不需要为这个<code>Stmt</code>做任何分析, 直接将<code>inFact</code>\r\ncopy给 <code>outFact</code>即可.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> IDEA教给我一个很有意思的语法糖</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> DefinitionStmt def_stmt)&#123;</span><br><span class=\"line\">    <span class=\"type\">LValue</span> <span class=\"variable\">def</span> <span class=\"operator\">=</span> def_stmt.getLValue();</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>这个用法可以避开繁琐的类型转化, 在判断类型时便做了类型转化.</p>\r\n</blockquote></li>\r\n<li><p>计算<code>Stmt</code>的右值(通过<code>evaluate()</code>获得),\r\n并更新<code>outFact</code>中的相应<code>Var def</code>(笔者在此并未使用<code>update</code>方法的返回值,\r\n或许可从此处入手优化效率, 但笔者不能保证其正确性)</p></li>\r\n<li><p>比较<code>outFact</code>是否更新返回布尔值.</p></li>\r\n</ul>\r\n<h4 id=\"evaluate\">evaluate()</h4>\r\n<p>为了完成这个方法, 代码的大致框架应该是这个样子:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Value <span class=\"title function_\">evaluate</span><span class=\"params\">(Exp exp, CPFact in)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exp <span class=\"keyword\">instanceof</span> Var)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">/*Value*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exp <span class=\"keyword\">instanceof</span> IntLiteral)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">/*Value*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(exp <span class=\"keyword\">instanceof</span> BinaryExp binary_exp)&#123;</span><br><span class=\"line\">        <span class=\"type\">Value</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> ...;</span><br><span class=\"line\">        <span class=\"type\">Value</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> ...;</span><br><span class=\"line\">        <span class=\"comment\">// Operand may not Int or may not Constant</span></span><br><span class=\"line\">        <span class=\"comment\">// you&#x27;d better do it first</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"comment\">/*left HoldInt &amp;&amp; right HoldInt*/</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//you can get Condition Info form ppt</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"comment\">/*left is Constant &amp;&amp; right is constant*/</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binary_exp <span class=\"keyword\">instanceof</span> ArithmeticExp arithmetic_exp)&#123;</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span>(op)&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//also should attention to DIV 0 return Undef</span></span><br><span class=\"line\">                        <span class=\"keyword\">case</span> ADD: ...</span><br><span class=\"line\">                        ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binary_exp <span class=\"keyword\">instanceof</span> BitwiseExp bitwise_exp)&#123;</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span>(op)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> AND: ...</span><br><span class=\"line\">                        ...</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(...)</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"comment\">/*left is NAC || right is NAC*/</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//you should do DIV &amp; REM for 0 judgement there</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"comment\">/*other condition*/</span>)&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"comment\">/*other condition*/</span>)&#123;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//for over-approximation</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Value.getNAC();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//such as x = o.f()</span></span><br><span class=\"line\">    <span class=\"comment\">//for over-approximation</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Value.getNAC(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>其中二元表达式计算规则见ppt所示,</p>\r\n<img src=\"/2024/10/28/SPA-A2/pic7.png\" class=\"\" title=\"pic7\">\r\n<p>笔者在此给出一些细节和边界条件,\r\n也可以通过阅读上述代码框架获得细节提示:</p>\r\n<ul>\r\n<li><p><code>exp</code>中的操作数可能不是<code>IntType</code>,\r\n所以你需要做一个<code>canHoldInt()</code>判断,\r\n非法<code>exp</code>为了安全性应赋值为<code>NAC</code></p></li>\r\n<li><p>实验指南中提到, 对于<code>/</code>和<code>%</code>的除零错误,\r\n应当给出<code>Undef</code>,\r\n<strong>即使</strong>被除数是<code>NAC</code>.</p></li>\r\n</ul>\r\n<h2 id=\"sovler-worklistsolver\">Sovler &amp; WorkListSolver</h2>\r\n<h3 id=\"sovler-init\">Sovler Init</h3>\r\n<p>照着算法流程前三行写便是,\r\n但这里要提到框架代码的\"<strong>robustness</strong>\".</p>\r\n<p>尽管从分析流程上来看, 我们不应该分析<code>Node Entry</code>,\r\n但是框架代码允许我们这样做.\r\n这时框架代码会认为<code>Node Entry</code>是一条<code>nop Stmt</code>,\r\n不会做constant update,\r\n因此只要在<code>Init</code>部分对<code>Entry</code>的<code>inFact</code>和<code>outFact</code>都赋上初值,\r\n就不需要在worklist中考虑<code>Entry</code>的处理了.</p>\r\n<h3 id=\"worklistsolver-dosolveforward\">WorkListSolver\r\ndoSolveForward</h3>\r\n<p><strong>worklist</strong>是一种非常简单的算法,\r\n笔者在此不对算法实现过多赘述.\r\n注意在实现worklist的时候可以使用java自带的容器<code>Queue</code> &amp;\r\n<code>ArrayList</code>.</p>\r\n<p>关于<strong>worklist</strong>的初始化问题,\r\n需要注意的是应当为其加入所有的<code>Node</code>,\r\n如果只加入<code>Entry</code>的后继, 会产生问题, 笔者在此给出一个例子.\r\n(感谢课程群中<a\r\nhref=\"https://github.com/rijuyuezhu\"><strong>日居月诸</strong></a>大佬和另一位不知道github链接的大佬构造的反例)</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;Assign: <span class=\"keyword\">void</span> <span class=\"title function_\">assign</span><span class=\"params\">()</span>&gt; (constprop) --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] nop;     &#123;&#125;</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;   &#123;x=<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] x = <span class=\"number\">2</span>;   &#123;x=<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L6</span>] x = <span class=\"number\">3</span>;   &#123;x=<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] x = <span class=\"number\">4</span>;   &#123;x=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L8</span>] y = x;   &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] <span class=\"keyword\">return</span>;  &#123;x=<span class=\"number\">4</span>, y=<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>在这个例子中,\r\n<code>Entry outFact</code>初始化为<code>&#123;&#125;</code>(没有参数),\r\n然而<code>Stmt0</code> 的 <code>outFact</code>\r\n同样初始化为<code>&#123;&#125;</code>,\r\n如果只添加<code>Entry</code>的后继<code>&#123;Stmt0&#125;</code>,\r\n会导致worklist在分析完<code>Stmt0</code>后错误终止.</p>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>本次实验应该是所有Assignment中代码量最多的一次, 细节也是让人头皮发麻,\r\n还望能静下心来看代码和debug, 祝早日AC!</p>"},{"title":"NJU静态分析|A3-DeadCode Detection","date":"2024-11-02T14:45:04.000Z","hidden":false,"_content":"\n**NJU Static Program Analysis | Assignment-3 Dead-Code Detection.**\n\n<!--more-->\n\n2024.11.7已更新\n\n## 实验信息&食用指南\n\n见本博客A1 & A2\n\n**Tips:** 实验指南和框架代码仍然是最一手最正确的资料, 对于实验指南中已涉及的信息, 本记录不会过多赘述.\n\n## 实验目标\n\n基于**Tai-e** 框架实现一个 **死代码检测** 算法.\n\n## 实验简析\n\n实验指南没有给出实现的框架, 因此至此已有完成本次知识的全部基础知识(活跃变量分析 & 常量传播算法).\n\n故本次实验主要考察对A1, A2的实验理解, 有遗忘或有不清楚的读者还望移步至官方教学视频复习后再完成本次实验.\n\n- 死代码检测是一个**Must Analysis** , 允许漏报而不允许错报.\n\n- 由分支不可达的特性, 采用**Forward Analysis** 比较符合死代码检测的特性.\n\n- 为了走一遍**CFG** 便得到结果, 我们可以将全部`Stmt`加入`DeadCodeSet`中, 将不是死代码的`Stmt`删去. 留下的便是死代码.\n\n- 此处笔者采用**BFS**算法进行**CFG**遍历, 使用`Set Traveled`避免环路影响.\n\n### 伪代码框架\n\n死代码检测的大致框架伪代码如下:\n\n```java\nliveVarsResult <- LiveVarsAnalysis(IR)\nconstantResult <- ConstantAnalysis(IR)\nDeadcodeSet <- all stmt in IR\nTraveledSet <- empty\nBFSlist <- entry\nwhile(BFSlist is not empty){\n    pickup a stmt from BFSlist\n    TraveledSet <- stmt\n    //handle jump Stmt\n    if (stmt is if or switch){\n        DeadcodeSet remove stmt\n        // ConditionExp is Constant may cause Unreachable DeadCode\n        if (if/switch ConditionExp is Constant by ConstantResult){\n            BFSlist <- Target Stmt of Constant ConditionExp Path\n        }\n        else{\n            BFS <- succ of stmt not in Travaled\n        }\n    }\n    //handle Assign Deadcode\n    else if (stmt is AssignStmt){\n        if(stmt is not DeadAssign by LiveVarsResult || stmt has SideEffect){\n            DeadcodeSet remove stmt\n        }\n        BFSlist <- succ of stmt not in Travaled\n    }\n    //normal Stmt\n    else{\n        DeadCodeSet remove stmt\n        BFSlist <- succ of stmt not in Travaled\n    }\n}\n```\n\n---\n\n***更新:***\n\n> **Compare:** `ir.getStmts()` & `cfg.getNodes()`\n>\n> 笔者一开始未意识到这个问题, **IR** 中是不包含`Entry`和`Exit`的. 换句话说, `Entry`和`Exit`是由**CFG** 生成的. 因此, 在初始化时, 需要使用`ir.getStmts()`而不是`cfg.getNodes()`, 否则在面对**Infinity Loop** 时, `Exit`节点会错误的被当作`Dead Code`.\n\n---\n\n## CFG生成细节\n\n完成本实验最重要的部分莫过于**CFG** 的结构, 实验指南没有为我们提供所有的实现细节, 而且`CFGBuilder`部分的代码对我们来说是不公开的. 那我们该如何获取关于**CFG** 的细节?\n\n### 框架代码提供的接口\n\n好在**tai-e**框架为我们提供了`Class Assignment`来[**分析自测样例**](https://tai-e.pascal-lab.net/intro/selfmade-testcases.html), 输出`*.dot`文件到`./output/`目录下, 可以使用[**[Graphviz]**](https://graphviz.org/download/)可视化`*.dot`文件. 使用细节见上述链接中的官方文档.\n\n笔者所使用的**IDE** 为**JetBrian IDEA 2023.1.4 Community**版本, `Class Assignment`运行配置如下.\n\n![pic1](SPA-A3/pic1.png)\n\n在终端中进入工作目录(此处为`output/`)执行以下命令:\n\n```Shell\n$ dot -Tpng ClassMethod.dot -o ClassMethod.png\n```\n\n然后我们就可以得到`*.dot`文件的可视化**CFG** 结果.\n\n### 根据自测样例推测CFG的生成逻辑\n\n经过前两次的实验, 普通节点和跳转的关联顺序在**CFG** 中是简单的, `for`和`while`的循环结构在**tai-e**中转化为简单的`goto stmt`. 因此此处笔者着重说明`If`和`Switch`在**Tai-e** 框架中的处理方式.\n\n#### 控制流不可达代码\n\n源代码如下:\n\n```java\npublic class ControlFlowUnreachable {\n\n    static int foo() {\n        int x = 1;\n        return x;\n        dead(); // unreachable\n        x = 3; // unreachable\n    }\n\n    static void dead() {\n    }\n}\n```\n\n代码对应IR如下:\n\n```java\n-------------------- <ControlFlowUnreachable: int foo()> --------------------\n[0@L4] x = 1;\n[1@L5] return x;\n[2@L6] invokestatic <ControlFlowUnreachable: void dead()>();\n[3@L7] x = 3;\n```\n\n**CFG** 可视结果如下:\n\n![pic2](SPA-A3/pic2.png)\n\n> 不难发现, 控制流不可达代码在可视化图中的表示是独立于**Entry**到**Exit** 路径的子图\n\n#### If Stmt\n\n我们先来看看最基础的情况:\n\n```java\nclass UnreachableIfBranch {\n\n    int branch() {\n        int x = 10;\n        int y = 1;\n        int z;\n        if (x > y) {\n            z = 100;\n        } else {\n            z = 200; // unreachable branch\n        }\n        return z;\n    }\n}\n```\n\n```java\n-------------------- <UnreachableIfBranch: int branch()> --------------------\n[0@L4] x = 10;\n[1@L5] y = 1;\n[2@L7] if (x > y) goto 4;\n[3@L7] goto 7;\n[4@L7] nop;\n[5@L8] z = 100;\n[6@L7] goto 9;\n[7@L7] nop;\n[8@L10] z = 200;\n[9@L10] nop;\n[10@L12] return z;\n```\n\n![pic3](SPA-A3/pic3.png)\n\n> 可以从可视化**CFG** 中获取不少信息.\n>\n> - `[line]:if(ConditionExp) goto [line]` 是`if stmt`结构的入口(图中为`2: if(x > y) goto 4`), **tai-e**框架会为`if stmt`结构提供一个统一的`nop`出口(图中为`9: nop`).\n> - `if`结构会根据`ConditionExp`的**T/F**取值生成`Edge`, 分为`IF_FALSE`和`IF_TRUE`, `Edge Target`分别为**T/F** 的代码块. 可以观测到框架会为**T/F**的代码块添加一个`nop stmt`作为代码块的起始(图中为`4: nop`和`7: nop`).\n\n---\n\n如果我们不显式指定`else`结构:\n\n```java\nclass UnreachableIfBranch {\n\n    int branch() {\n        int x = 10;\n        int y = 1;\n        int z;\n        if (x > y) {\n            z = 100;\n        }\n        return z;\n    }\n}\n```\n\n```java\n-------------------- <UnreachableIfBranch: int branch()> --------------------\n[0@L4] x = 10;\n[1@L5] y = 1;\n[2@L7] if (x > y) goto 4;\n[3@L7] goto 6;\n[4@L7] nop;\n[5@L8] z = 100;\n[6@L8] nop;\n[7@L13] return z;\n```\n\n![pic4](SPA-A3/pic4.png)\n\n> - 可以看到`if`结构的`IF_FALSE`对应的代码块消失, `IF_FALSE`直接跳转到`if`结构的结束`nop`语句.(图中为`6: nop`)\n>\n> > **Tips:**\n> >\n> > 如果显式写出`else`但`else`为空体, **tai-e**框架会生成一条`nop`语句对应该`else`空体, 感兴趣的读者可以自行测试, 笔者在此不再赘述.\n> >\n> > 通过阅读框架代码中的`Class If extends JumpStmt`和`Class JumpStmt`可以知晓, `If`将`JumpStmt`的成员变量`target`和对应方法(如`getTarget()`)和`If`结构中的`IF_TRUE`对应起来, 因此此时的`Edge IF_FALSE`其实等价于`FALL_THROUGH`, `IF_FALSE`的`target`是一条指向真正**False代码块**的`goto stmt`. 通过阅读框架代码, 便不难理解为何**CFG** 要这样处理`IF`结构.\n\n---\n\n`if-else`的嵌套等价于普通的`if-else`的组合.\n\n```java\nclass UnreachableIfBranch {\n\n    int branch() {\n        int x = 10;\n        int y = 1;\n        int z;\n        if (x > y) {\n            z = 100;\n        }\n        else if(x < y) {\n            z = 200; // unreachable branch\n        }\n        else{\n            z = 300;\n        }\n        return z;\n    }\n}\n```\n\n```java\n-------------------- <UnreachableIfBranch: int branch()> --------------------\n[0@L4] x = 10;\n[1@L5] y = 1;\n[2@L7] if (x > y) goto 4;\n[3@L7] goto 7;\n[4@L7] nop;\n[5@L8] z = 100;\n[6@L7] goto 16;\n[7@L7] nop;\n[8@L10] if (x < y) goto 10;\n[9@L10] goto 13;\n[10@L10] nop;\n[11@L11] z = 200;\n[12@L10] goto 15;\n[13@L10] nop;\n[14@L14] z = 300;\n[15@L14] nop;\n[16@L14] nop;\n[17@L16] return z;\n```\n\n![pic5](SPA-A3/pic5.png)\n\n#### Switch Stmt\n\n与`If`一样, 我们先来看看一般情况:\n\n```java\nclass UnreachableSwitchBranch {\n\n    void lookupSwitch() {\n        int x = 1;\n        int y = x << 3;\n        int z;\n        switch (y) {\n            case 2:\n                z = 2;\n                break;\n            case 4:\n                z = 4;\n                break;\n            case 8:\n                z = 8;\n                break;\n            default:\n                z = 0;\n                break;\n        }\n    }\n}\n```\n\n```java\n-------------------- <UnreachableSwitchBranch: void lookupSwitch()> --------------------\n[0@L4] x = 1;\n[1@L5] %intconst0 = 3;\n[2@L5] y = x << %intconst0;\n[3@L7] goto 17;\n[4@L7] nop;\n[5@L9] z = 2;\n[6@L10] goto 20;\n[7@L10] nop;\n[8@L12] z = 4;\n[9@L13] goto 20;\n[10@L13] nop;\n[11@L15] z = 8;\n[12@L16] goto 20;\n[13@L16] nop;\n[14@L18] z = 0;\n[15@L19] goto 20;\n[16@L7] goto 20;\n[17@L7] nop;\n[18@L7] nop;\n[19@L7] lookupswitch (y) {2->4, 4->7, 8->10, default->13};\n[20@L7] nop;\n[21@L7] return;\n```\n\n![pic6](SPA-A3/pic6.png)\n\n> - 与`If`一致, `[line]: [method]switch([var]) {[branch]}`是`Switch`结构的起点(图中为`19: lookupswitch(y) {2->4, 4->7, 8->10, default->13}`). 同样会生成一条`nop stmt`表示`Switch`结构的出口.\n> - 经过笔者的多次测试, **tai-e**框架的`Switch`语句处理有些的微妙的奇怪之处. 与`If`不同, `Switch`语句的入口在`line num`上位于`Switch`结构的最后部分, 到达该入口需要经过两条`nop stmt`, 并且会在`CASE`和`DEFAULT`代码块之外添加一个到`Switch`结构出口的`goto stmt`. 然而由于`DEFAULT`一定存在(下文会解释), 因此这条`goto`语句一定为死代码, 不存在一条从`Entry`到该语句的路径.\n> \n> > **Tips:** 笔者认为这是一个非常奇怪的处理, 猜测可能跟Soot生成的字节码有关(**Tai-e**框架基于Soot搭建) **该猜想未证实**.\n>\n> - 笔者推测`CASE`和`DEFAULT`代码块中的第一条`nop`语句来源是`case 2:`和`default:`, 即**Tai-e**框架选择保留了原来的控制信息语句(控制信息在**CFG**中体现为`Edge`), 但将其替换成了`nop`语句(该推测在不显示指定`default`时得到部分证实).\n\n---\n\n不显式指定`default`时:\n\n```java\nclass UnreachableSwitchBranch {\n\n    void lookupSwitch() {\n        int x = 1;\n        int y = x << 3;\n        int z;\n        switch (y) {\n            case 2:\n                z = 2;\n                break;\n            case 4:\n                z = 4;\n                break;\n            case 8:\n                z = 8;\n                break;\n        }\n    }\n}\n```\n\n```java\n-------------------- <UnreachableSwitchBranch: void lookupSwitch()> --------------------\n[0@L4] x = 1;\n[1@L5] %intconst0 = 3;\n[2@L5] y = x << %intconst0;\n[3@L7] goto 14;\n[4@L7] nop;\n[5@L9] z = 2;\n[6@L10] goto 17;\n[7@L10] nop;\n[8@L12] z = 4;\n[9@L13] goto 17;\n[10@L13] nop;\n[11@L15] z = 8;\n[12@L16] goto 17;\n[13@L7] goto 17;\n[14@L7] nop;\n[15@L7] nop;\n[16@L7] lookupswitch (y) {2->4, 4->7, 8->10, default->17};\n[17@L7] nop;\n[18@L7] return;\n```\n\n![pic7](SPA-A3/pic7.png)\n\n> - 可以观测到**CFG** 会添加未被显式写出的`default`, 但不生成`default`指向的代码块(如果显示写出`default`但为空体, 会保留`nop`和`goto`跳转, 笔者在此不再赘述, 感兴趣的读者可以自行测试), 而是直接指向`Switch`结构的出口.\n\n#### case & break\n\n了解java语法性质的读者应该理解笔者在本小结的标题.\n\n我们来看看如下代码:\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int option = 2;\n        switch (option) {\n        case 1:\n            System.out.println(\"Selected 1\");\n        case 2:\n            System.out.println(\"Selected 2\");\n        case 3:\n            System.out.println(\"Selected 3\");\n        default:\n            System.out.println(\"Selected other\");\n        }\n    }\n}\n```\n\n与预期不同, 这段代码的输出如下:\n\n```Shell\n> java Main\nSelected 2\nSelected 3\nSelected other\n```\n\n当`switch`匹配2成功时, 如果不加`break`, 会顺次匹配在`case 2:`之后的所有`case`. 这称为`case`的**穿透性**.\n\n---\n\n我们来看看**CFG**是如何处理这种情况的:\n\n```java\nclass UnreachableSwitchBranch {\n\n    void lookupSwitch() {\n        int x = 1;\n        int y = x << 3;\n        int z;\n        switch (y) {\n            case 2:\n                z = 2;\n                break;  // unreachable case\n            case 4:\n                z = 4;\n                break; // unreachable case\n            case 8:\n                z = 8;\n                //break;\n            default:\n                z = 0;\n                break; // unreachable case\n        }\n    }\n}\n```\n\n```java\n-------------------- <UnreachableSwitchBranch: void lookupSwitch()> --------------------\n[0@L4] x = 1;\n[1@L5] %intconst0 = 3;\n[2@L5] y = x << %intconst0;\n[3@L7] goto 16;\n[4@L7] nop;\n[5@L9] z = 2;\n[6@L10] goto 19;\n[7@L10] nop;\n[8@L12] z = 4;\n[9@L13] goto 19;\n[10@L13] nop;\n[11@L15] z = 8;\n[12@L15] nop;\n[13@L18] z = 0;\n[14@L19] goto 19;\n[15@L7] goto 19;\n[16@L7] nop;\n[17@L7] nop;\n[18@L7] lookupswitch (y) {2->4, 4->7, 8->10, default->12};\n[19@L7] nop;\n[20@L7] return;\n```\n\n![pic8](SPA-A3/pic8.png)\n\n> - 这是一个符合预期的处理, 也是一个非常自然而然的想法.\n\n## DeadCodeDetection\n\n本次实验只需要完成`Class DeadCodeDetection`中的`analysis()`方法.\n\n### 准备工作\n\n将A1, A2中完成的**活跃变量分析**和**常量传播**代码copy到本次实验A3的工作目录中. 需要注意的是, 本次活跃变量分析部分不使用`IteratorSovler`而是使用`BackwardWorklist`, 此部分代码需要额外完成.\n\n> **Tips:** 不要过多的依赖诸如**ChatGPT**或**Copilot**的书写代码功能, 其生成的代码很可能存在潜在的不易发现的bug(~~你猜我为什么会加这个Tips~~). 实际上, `JetBrain IDEA`的成员变量和方法补全功能已经足够好使, 使用**Copilot**的代码补全反而可能造成一些不必要的麻烦.\n\n### 控制流不可达代码实现细节\n\n实验指南已写明该部分的具体原理, 此处涉及一些实现细节.\n\n- 通过恰当的维护`BFSlist`可以仅遍历可达代码(主要处理`If`和`Switch`), 因此初始化所有的`Stmt`为`DeadCode`, 遍历到即排除其为死代码是一个不错的选择.\n- 无论使用**BFS**还是**DFS**, 都要处理环路引起的**Infinity Loop**, 一个简单的方法是创建一个`Traveled Set`保证每个`Stmt`仅会被遍历到一次(同样的, 对于`BFSList`维护也可以通过类似的技巧提升效率).\n- 遍历一次就能得到结果依托于**不需要处理由删除死代码产生的死代码**(例子可见实验指南).\n- 关于图的遍历方式, 笔者在此推荐使用`CFG`的顶层方法`getSuccOf()`和`getOutEdge()`, 而不是`If Stmt`和`Switch Stmt`中的方法. 这两个跳转语句的实现因为继承自`JumpStmt`所以细节上可能与想象中有所差异, 如果一定要使用, 还请小心谨慎的阅读`API`注释以获取详细信息.\n- 关于`ConditionExp`的处理, 可以复用A2中实现的`evaluate()`方法.\n\n### 无用赋值代码实现细节\n\n同上, 原理部分请参见实验指南.\n\n- 继承`AssignStmt`的子类有足足十几个, 可以从lib反编译或者科研版代码中获取相关细节, 关于**副作用(Side Effect)**在框架代码中已给出`API`, 解释了哪些派生类可能引起副作用.\n\n```java\n/**\n* @return true if given RValue has no side effect, otherwise false.\n*/\nprivate static boolean hasNoSideEffect(RValue rvalue) {\n    // new expression modifies the heap\n    if (rvalue instanceof NewExp ||\n            // cast may trigger ClassCastException\n            rvalue instanceof CastExp ||\n            // static field access may trigger class initialization\n            // instance field access may trigger NPE\n            rvalue instanceof FieldAccess ||\n            // array access may trigger NPE(None Pointer Exception)\n            rvalue instanceof ArrayAccess) {\n        return false;\n    }\n    if (rvalue instanceof ArithmeticExp) {\n        ArithmeticExp.Op op = ((ArithmeticExp) rvalue).getOperator();\n        // may trigger DivideByZeroException\n        return op != ArithmeticExp.Op.DIV && op != ArithmeticExp.Op.REM;\n    }\n    return true;\n}\n```\n\n- 小心, 不要忘记判断`lValue`是否为`Var`, 与之前相同, 我们只需要处理`Var`类型的语句.\n\n## 总结\n\n本次实验难度某种意义上低于A1, 是一个比较简单的实验, 旨在考察对分析结果的应用能力. 祝早日AC!\n","source":"_posts/SPA-A3.md","raw":"---\ntitle: NJU静态分析|A3-DeadCode Detection\ndate: 2024-11-02 22:45:04\nhidden: false\ntags:\n- NJU\n- 静态分析\ncategories:\n- NJU静态分析实验记录\n---\n\n**NJU Static Program Analysis | Assignment-3 Dead-Code Detection.**\n\n<!--more-->\n\n2024.11.7已更新\n\n## 实验信息&食用指南\n\n见本博客A1 & A2\n\n**Tips:** 实验指南和框架代码仍然是最一手最正确的资料, 对于实验指南中已涉及的信息, 本记录不会过多赘述.\n\n## 实验目标\n\n基于**Tai-e** 框架实现一个 **死代码检测** 算法.\n\n## 实验简析\n\n实验指南没有给出实现的框架, 因此至此已有完成本次知识的全部基础知识(活跃变量分析 & 常量传播算法).\n\n故本次实验主要考察对A1, A2的实验理解, 有遗忘或有不清楚的读者还望移步至官方教学视频复习后再完成本次实验.\n\n- 死代码检测是一个**Must Analysis** , 允许漏报而不允许错报.\n\n- 由分支不可达的特性, 采用**Forward Analysis** 比较符合死代码检测的特性.\n\n- 为了走一遍**CFG** 便得到结果, 我们可以将全部`Stmt`加入`DeadCodeSet`中, 将不是死代码的`Stmt`删去. 留下的便是死代码.\n\n- 此处笔者采用**BFS**算法进行**CFG**遍历, 使用`Set Traveled`避免环路影响.\n\n### 伪代码框架\n\n死代码检测的大致框架伪代码如下:\n\n```java\nliveVarsResult <- LiveVarsAnalysis(IR)\nconstantResult <- ConstantAnalysis(IR)\nDeadcodeSet <- all stmt in IR\nTraveledSet <- empty\nBFSlist <- entry\nwhile(BFSlist is not empty){\n    pickup a stmt from BFSlist\n    TraveledSet <- stmt\n    //handle jump Stmt\n    if (stmt is if or switch){\n        DeadcodeSet remove stmt\n        // ConditionExp is Constant may cause Unreachable DeadCode\n        if (if/switch ConditionExp is Constant by ConstantResult){\n            BFSlist <- Target Stmt of Constant ConditionExp Path\n        }\n        else{\n            BFS <- succ of stmt not in Travaled\n        }\n    }\n    //handle Assign Deadcode\n    else if (stmt is AssignStmt){\n        if(stmt is not DeadAssign by LiveVarsResult || stmt has SideEffect){\n            DeadcodeSet remove stmt\n        }\n        BFSlist <- succ of stmt not in Travaled\n    }\n    //normal Stmt\n    else{\n        DeadCodeSet remove stmt\n        BFSlist <- succ of stmt not in Travaled\n    }\n}\n```\n\n---\n\n***更新:***\n\n> **Compare:** `ir.getStmts()` & `cfg.getNodes()`\n>\n> 笔者一开始未意识到这个问题, **IR** 中是不包含`Entry`和`Exit`的. 换句话说, `Entry`和`Exit`是由**CFG** 生成的. 因此, 在初始化时, 需要使用`ir.getStmts()`而不是`cfg.getNodes()`, 否则在面对**Infinity Loop** 时, `Exit`节点会错误的被当作`Dead Code`.\n\n---\n\n## CFG生成细节\n\n完成本实验最重要的部分莫过于**CFG** 的结构, 实验指南没有为我们提供所有的实现细节, 而且`CFGBuilder`部分的代码对我们来说是不公开的. 那我们该如何获取关于**CFG** 的细节?\n\n### 框架代码提供的接口\n\n好在**tai-e**框架为我们提供了`Class Assignment`来[**分析自测样例**](https://tai-e.pascal-lab.net/intro/selfmade-testcases.html), 输出`*.dot`文件到`./output/`目录下, 可以使用[**[Graphviz]**](https://graphviz.org/download/)可视化`*.dot`文件. 使用细节见上述链接中的官方文档.\n\n笔者所使用的**IDE** 为**JetBrian IDEA 2023.1.4 Community**版本, `Class Assignment`运行配置如下.\n\n![pic1](SPA-A3/pic1.png)\n\n在终端中进入工作目录(此处为`output/`)执行以下命令:\n\n```Shell\n$ dot -Tpng ClassMethod.dot -o ClassMethod.png\n```\n\n然后我们就可以得到`*.dot`文件的可视化**CFG** 结果.\n\n### 根据自测样例推测CFG的生成逻辑\n\n经过前两次的实验, 普通节点和跳转的关联顺序在**CFG** 中是简单的, `for`和`while`的循环结构在**tai-e**中转化为简单的`goto stmt`. 因此此处笔者着重说明`If`和`Switch`在**Tai-e** 框架中的处理方式.\n\n#### 控制流不可达代码\n\n源代码如下:\n\n```java\npublic class ControlFlowUnreachable {\n\n    static int foo() {\n        int x = 1;\n        return x;\n        dead(); // unreachable\n        x = 3; // unreachable\n    }\n\n    static void dead() {\n    }\n}\n```\n\n代码对应IR如下:\n\n```java\n-------------------- <ControlFlowUnreachable: int foo()> --------------------\n[0@L4] x = 1;\n[1@L5] return x;\n[2@L6] invokestatic <ControlFlowUnreachable: void dead()>();\n[3@L7] x = 3;\n```\n\n**CFG** 可视结果如下:\n\n![pic2](SPA-A3/pic2.png)\n\n> 不难发现, 控制流不可达代码在可视化图中的表示是独立于**Entry**到**Exit** 路径的子图\n\n#### If Stmt\n\n我们先来看看最基础的情况:\n\n```java\nclass UnreachableIfBranch {\n\n    int branch() {\n        int x = 10;\n        int y = 1;\n        int z;\n        if (x > y) {\n            z = 100;\n        } else {\n            z = 200; // unreachable branch\n        }\n        return z;\n    }\n}\n```\n\n```java\n-------------------- <UnreachableIfBranch: int branch()> --------------------\n[0@L4] x = 10;\n[1@L5] y = 1;\n[2@L7] if (x > y) goto 4;\n[3@L7] goto 7;\n[4@L7] nop;\n[5@L8] z = 100;\n[6@L7] goto 9;\n[7@L7] nop;\n[8@L10] z = 200;\n[9@L10] nop;\n[10@L12] return z;\n```\n\n![pic3](SPA-A3/pic3.png)\n\n> 可以从可视化**CFG** 中获取不少信息.\n>\n> - `[line]:if(ConditionExp) goto [line]` 是`if stmt`结构的入口(图中为`2: if(x > y) goto 4`), **tai-e**框架会为`if stmt`结构提供一个统一的`nop`出口(图中为`9: nop`).\n> - `if`结构会根据`ConditionExp`的**T/F**取值生成`Edge`, 分为`IF_FALSE`和`IF_TRUE`, `Edge Target`分别为**T/F** 的代码块. 可以观测到框架会为**T/F**的代码块添加一个`nop stmt`作为代码块的起始(图中为`4: nop`和`7: nop`).\n\n---\n\n如果我们不显式指定`else`结构:\n\n```java\nclass UnreachableIfBranch {\n\n    int branch() {\n        int x = 10;\n        int y = 1;\n        int z;\n        if (x > y) {\n            z = 100;\n        }\n        return z;\n    }\n}\n```\n\n```java\n-------------------- <UnreachableIfBranch: int branch()> --------------------\n[0@L4] x = 10;\n[1@L5] y = 1;\n[2@L7] if (x > y) goto 4;\n[3@L7] goto 6;\n[4@L7] nop;\n[5@L8] z = 100;\n[6@L8] nop;\n[7@L13] return z;\n```\n\n![pic4](SPA-A3/pic4.png)\n\n> - 可以看到`if`结构的`IF_FALSE`对应的代码块消失, `IF_FALSE`直接跳转到`if`结构的结束`nop`语句.(图中为`6: nop`)\n>\n> > **Tips:**\n> >\n> > 如果显式写出`else`但`else`为空体, **tai-e**框架会生成一条`nop`语句对应该`else`空体, 感兴趣的读者可以自行测试, 笔者在此不再赘述.\n> >\n> > 通过阅读框架代码中的`Class If extends JumpStmt`和`Class JumpStmt`可以知晓, `If`将`JumpStmt`的成员变量`target`和对应方法(如`getTarget()`)和`If`结构中的`IF_TRUE`对应起来, 因此此时的`Edge IF_FALSE`其实等价于`FALL_THROUGH`, `IF_FALSE`的`target`是一条指向真正**False代码块**的`goto stmt`. 通过阅读框架代码, 便不难理解为何**CFG** 要这样处理`IF`结构.\n\n---\n\n`if-else`的嵌套等价于普通的`if-else`的组合.\n\n```java\nclass UnreachableIfBranch {\n\n    int branch() {\n        int x = 10;\n        int y = 1;\n        int z;\n        if (x > y) {\n            z = 100;\n        }\n        else if(x < y) {\n            z = 200; // unreachable branch\n        }\n        else{\n            z = 300;\n        }\n        return z;\n    }\n}\n```\n\n```java\n-------------------- <UnreachableIfBranch: int branch()> --------------------\n[0@L4] x = 10;\n[1@L5] y = 1;\n[2@L7] if (x > y) goto 4;\n[3@L7] goto 7;\n[4@L7] nop;\n[5@L8] z = 100;\n[6@L7] goto 16;\n[7@L7] nop;\n[8@L10] if (x < y) goto 10;\n[9@L10] goto 13;\n[10@L10] nop;\n[11@L11] z = 200;\n[12@L10] goto 15;\n[13@L10] nop;\n[14@L14] z = 300;\n[15@L14] nop;\n[16@L14] nop;\n[17@L16] return z;\n```\n\n![pic5](SPA-A3/pic5.png)\n\n#### Switch Stmt\n\n与`If`一样, 我们先来看看一般情况:\n\n```java\nclass UnreachableSwitchBranch {\n\n    void lookupSwitch() {\n        int x = 1;\n        int y = x << 3;\n        int z;\n        switch (y) {\n            case 2:\n                z = 2;\n                break;\n            case 4:\n                z = 4;\n                break;\n            case 8:\n                z = 8;\n                break;\n            default:\n                z = 0;\n                break;\n        }\n    }\n}\n```\n\n```java\n-------------------- <UnreachableSwitchBranch: void lookupSwitch()> --------------------\n[0@L4] x = 1;\n[1@L5] %intconst0 = 3;\n[2@L5] y = x << %intconst0;\n[3@L7] goto 17;\n[4@L7] nop;\n[5@L9] z = 2;\n[6@L10] goto 20;\n[7@L10] nop;\n[8@L12] z = 4;\n[9@L13] goto 20;\n[10@L13] nop;\n[11@L15] z = 8;\n[12@L16] goto 20;\n[13@L16] nop;\n[14@L18] z = 0;\n[15@L19] goto 20;\n[16@L7] goto 20;\n[17@L7] nop;\n[18@L7] nop;\n[19@L7] lookupswitch (y) {2->4, 4->7, 8->10, default->13};\n[20@L7] nop;\n[21@L7] return;\n```\n\n![pic6](SPA-A3/pic6.png)\n\n> - 与`If`一致, `[line]: [method]switch([var]) {[branch]}`是`Switch`结构的起点(图中为`19: lookupswitch(y) {2->4, 4->7, 8->10, default->13}`). 同样会生成一条`nop stmt`表示`Switch`结构的出口.\n> - 经过笔者的多次测试, **tai-e**框架的`Switch`语句处理有些的微妙的奇怪之处. 与`If`不同, `Switch`语句的入口在`line num`上位于`Switch`结构的最后部分, 到达该入口需要经过两条`nop stmt`, 并且会在`CASE`和`DEFAULT`代码块之外添加一个到`Switch`结构出口的`goto stmt`. 然而由于`DEFAULT`一定存在(下文会解释), 因此这条`goto`语句一定为死代码, 不存在一条从`Entry`到该语句的路径.\n> \n> > **Tips:** 笔者认为这是一个非常奇怪的处理, 猜测可能跟Soot生成的字节码有关(**Tai-e**框架基于Soot搭建) **该猜想未证实**.\n>\n> - 笔者推测`CASE`和`DEFAULT`代码块中的第一条`nop`语句来源是`case 2:`和`default:`, 即**Tai-e**框架选择保留了原来的控制信息语句(控制信息在**CFG**中体现为`Edge`), 但将其替换成了`nop`语句(该推测在不显示指定`default`时得到部分证实).\n\n---\n\n不显式指定`default`时:\n\n```java\nclass UnreachableSwitchBranch {\n\n    void lookupSwitch() {\n        int x = 1;\n        int y = x << 3;\n        int z;\n        switch (y) {\n            case 2:\n                z = 2;\n                break;\n            case 4:\n                z = 4;\n                break;\n            case 8:\n                z = 8;\n                break;\n        }\n    }\n}\n```\n\n```java\n-------------------- <UnreachableSwitchBranch: void lookupSwitch()> --------------------\n[0@L4] x = 1;\n[1@L5] %intconst0 = 3;\n[2@L5] y = x << %intconst0;\n[3@L7] goto 14;\n[4@L7] nop;\n[5@L9] z = 2;\n[6@L10] goto 17;\n[7@L10] nop;\n[8@L12] z = 4;\n[9@L13] goto 17;\n[10@L13] nop;\n[11@L15] z = 8;\n[12@L16] goto 17;\n[13@L7] goto 17;\n[14@L7] nop;\n[15@L7] nop;\n[16@L7] lookupswitch (y) {2->4, 4->7, 8->10, default->17};\n[17@L7] nop;\n[18@L7] return;\n```\n\n![pic7](SPA-A3/pic7.png)\n\n> - 可以观测到**CFG** 会添加未被显式写出的`default`, 但不生成`default`指向的代码块(如果显示写出`default`但为空体, 会保留`nop`和`goto`跳转, 笔者在此不再赘述, 感兴趣的读者可以自行测试), 而是直接指向`Switch`结构的出口.\n\n#### case & break\n\n了解java语法性质的读者应该理解笔者在本小结的标题.\n\n我们来看看如下代码:\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        int option = 2;\n        switch (option) {\n        case 1:\n            System.out.println(\"Selected 1\");\n        case 2:\n            System.out.println(\"Selected 2\");\n        case 3:\n            System.out.println(\"Selected 3\");\n        default:\n            System.out.println(\"Selected other\");\n        }\n    }\n}\n```\n\n与预期不同, 这段代码的输出如下:\n\n```Shell\n> java Main\nSelected 2\nSelected 3\nSelected other\n```\n\n当`switch`匹配2成功时, 如果不加`break`, 会顺次匹配在`case 2:`之后的所有`case`. 这称为`case`的**穿透性**.\n\n---\n\n我们来看看**CFG**是如何处理这种情况的:\n\n```java\nclass UnreachableSwitchBranch {\n\n    void lookupSwitch() {\n        int x = 1;\n        int y = x << 3;\n        int z;\n        switch (y) {\n            case 2:\n                z = 2;\n                break;  // unreachable case\n            case 4:\n                z = 4;\n                break; // unreachable case\n            case 8:\n                z = 8;\n                //break;\n            default:\n                z = 0;\n                break; // unreachable case\n        }\n    }\n}\n```\n\n```java\n-------------------- <UnreachableSwitchBranch: void lookupSwitch()> --------------------\n[0@L4] x = 1;\n[1@L5] %intconst0 = 3;\n[2@L5] y = x << %intconst0;\n[3@L7] goto 16;\n[4@L7] nop;\n[5@L9] z = 2;\n[6@L10] goto 19;\n[7@L10] nop;\n[8@L12] z = 4;\n[9@L13] goto 19;\n[10@L13] nop;\n[11@L15] z = 8;\n[12@L15] nop;\n[13@L18] z = 0;\n[14@L19] goto 19;\n[15@L7] goto 19;\n[16@L7] nop;\n[17@L7] nop;\n[18@L7] lookupswitch (y) {2->4, 4->7, 8->10, default->12};\n[19@L7] nop;\n[20@L7] return;\n```\n\n![pic8](SPA-A3/pic8.png)\n\n> - 这是一个符合预期的处理, 也是一个非常自然而然的想法.\n\n## DeadCodeDetection\n\n本次实验只需要完成`Class DeadCodeDetection`中的`analysis()`方法.\n\n### 准备工作\n\n将A1, A2中完成的**活跃变量分析**和**常量传播**代码copy到本次实验A3的工作目录中. 需要注意的是, 本次活跃变量分析部分不使用`IteratorSovler`而是使用`BackwardWorklist`, 此部分代码需要额外完成.\n\n> **Tips:** 不要过多的依赖诸如**ChatGPT**或**Copilot**的书写代码功能, 其生成的代码很可能存在潜在的不易发现的bug(~~你猜我为什么会加这个Tips~~). 实际上, `JetBrain IDEA`的成员变量和方法补全功能已经足够好使, 使用**Copilot**的代码补全反而可能造成一些不必要的麻烦.\n\n### 控制流不可达代码实现细节\n\n实验指南已写明该部分的具体原理, 此处涉及一些实现细节.\n\n- 通过恰当的维护`BFSlist`可以仅遍历可达代码(主要处理`If`和`Switch`), 因此初始化所有的`Stmt`为`DeadCode`, 遍历到即排除其为死代码是一个不错的选择.\n- 无论使用**BFS**还是**DFS**, 都要处理环路引起的**Infinity Loop**, 一个简单的方法是创建一个`Traveled Set`保证每个`Stmt`仅会被遍历到一次(同样的, 对于`BFSList`维护也可以通过类似的技巧提升效率).\n- 遍历一次就能得到结果依托于**不需要处理由删除死代码产生的死代码**(例子可见实验指南).\n- 关于图的遍历方式, 笔者在此推荐使用`CFG`的顶层方法`getSuccOf()`和`getOutEdge()`, 而不是`If Stmt`和`Switch Stmt`中的方法. 这两个跳转语句的实现因为继承自`JumpStmt`所以细节上可能与想象中有所差异, 如果一定要使用, 还请小心谨慎的阅读`API`注释以获取详细信息.\n- 关于`ConditionExp`的处理, 可以复用A2中实现的`evaluate()`方法.\n\n### 无用赋值代码实现细节\n\n同上, 原理部分请参见实验指南.\n\n- 继承`AssignStmt`的子类有足足十几个, 可以从lib反编译或者科研版代码中获取相关细节, 关于**副作用(Side Effect)**在框架代码中已给出`API`, 解释了哪些派生类可能引起副作用.\n\n```java\n/**\n* @return true if given RValue has no side effect, otherwise false.\n*/\nprivate static boolean hasNoSideEffect(RValue rvalue) {\n    // new expression modifies the heap\n    if (rvalue instanceof NewExp ||\n            // cast may trigger ClassCastException\n            rvalue instanceof CastExp ||\n            // static field access may trigger class initialization\n            // instance field access may trigger NPE\n            rvalue instanceof FieldAccess ||\n            // array access may trigger NPE(None Pointer Exception)\n            rvalue instanceof ArrayAccess) {\n        return false;\n    }\n    if (rvalue instanceof ArithmeticExp) {\n        ArithmeticExp.Op op = ((ArithmeticExp) rvalue).getOperator();\n        // may trigger DivideByZeroException\n        return op != ArithmeticExp.Op.DIV && op != ArithmeticExp.Op.REM;\n    }\n    return true;\n}\n```\n\n- 小心, 不要忘记判断`lValue`是否为`Var`, 与之前相同, 我们只需要处理`Var`类型的语句.\n\n## 总结\n\n本次实验难度某种意义上低于A1, 是一个比较简单的实验, 旨在考察对分析结果的应用能力. 祝早日AC!\n","slug":"SPA-A3","published":1,"updated":"2024-11-07T09:59:28.527Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyum000ussilcx3r044d","content":"<p><strong>NJU Static Program Analysis | Assignment-3 Dead-Code\r\nDetection.</strong></p>\r\n<span id=\"more\"></span>\r\n<p>2024.11.7已更新</p>\r\n<h2 id=\"实验信息食用指南\">实验信息&amp;食用指南</h2>\r\n<p>见本博客A1 &amp; A2</p>\r\n<p><strong>Tips:</strong> 实验指南和框架代码仍然是最一手最正确的资料,\r\n对于实验指南中已涉及的信息, 本记录不会过多赘述.</p>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>Tai-e</strong> 框架实现一个 <strong>死代码检测</strong>\r\n算法.</p>\r\n<h2 id=\"实验简析\">实验简析</h2>\r\n<p>实验指南没有给出实现的框架,\r\n因此至此已有完成本次知识的全部基础知识(活跃变量分析 &amp;\r\n常量传播算法).</p>\r\n<p>故本次实验主要考察对A1, A2的实验理解,\r\n有遗忘或有不清楚的读者还望移步至官方教学视频复习后再完成本次实验.</p>\r\n<ul>\r\n<li><p>死代码检测是一个<strong>Must Analysis</strong> ,\r\n允许漏报而不允许错报.</p></li>\r\n<li><p>由分支不可达的特性, 采用<strong>Forward Analysis</strong>\r\n比较符合死代码检测的特性.</p></li>\r\n<li><p>为了走一遍<strong>CFG</strong> 便得到结果,\r\n我们可以将全部<code>Stmt</code>加入<code>DeadCodeSet</code>中,\r\n将不是死代码的<code>Stmt</code>删去. 留下的便是死代码.</p></li>\r\n<li><p>此处笔者采用<strong>BFS</strong>算法进行<strong>CFG</strong>遍历,\r\n使用<code>Set Traveled</code>避免环路影响.</p></li>\r\n</ul>\r\n<h3 id=\"伪代码框架\">伪代码框架</h3>\r\n<p>死代码检测的大致框架伪代码如下:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liveVarsResult &lt;- LiveVarsAnalysis(IR)</span><br><span class=\"line\">constantResult &lt;- ConstantAnalysis(IR)</span><br><span class=\"line\">DeadcodeSet &lt;- all stmt in IR</span><br><span class=\"line\">TraveledSet &lt;- empty</span><br><span class=\"line\">BFSlist &lt;- entry</span><br><span class=\"line\"><span class=\"title function_\">while</span><span class=\"params\">(BFSlist is not empty)</span>&#123;</span><br><span class=\"line\">    pickup a stmt from BFSlist</span><br><span class=\"line\">    TraveledSet &lt;- stmt</span><br><span class=\"line\">    <span class=\"comment\">//handle jump Stmt</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stmt is <span class=\"keyword\">if</span> or <span class=\"keyword\">switch</span>)&#123;</span><br><span class=\"line\">        DeadcodeSet remove stmt</span><br><span class=\"line\">        <span class=\"comment\">// ConditionExp is Constant may cause Unreachable DeadCode</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">if</span>/<span class=\"keyword\">switch</span> ConditionExp is Constant by ConstantResult)&#123;</span><br><span class=\"line\">            BFSlist &lt;- Target Stmt of Constant ConditionExp Path</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            BFS &lt;- succ of stmt not in Travaled</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//handle Assign Deadcode</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stmt is AssignStmt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stmt is not DeadAssign by LiveVarsResult || stmt has SideEffect)&#123;</span><br><span class=\"line\">            DeadcodeSet remove stmt</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        BFSlist &lt;- succ of stmt not in Travaled</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//normal Stmt</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        DeadCodeSet remove stmt</span><br><span class=\"line\">        BFSlist &lt;- succ of stmt not in Travaled</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<p><strong><em>更新:</em></strong></p>\r\n<blockquote>\r\n<p><strong>Compare:</strong> <code>ir.getStmts()</code> &amp;\r\n<code>cfg.getNodes()</code></p>\r\n<p>笔者一开始未意识到这个问题, <strong>IR</strong>\r\n中是不包含<code>Entry</code>和<code>Exit</code>的. 换句话说,\r\n<code>Entry</code>和<code>Exit</code>是由<strong>CFG</strong> 生成的.\r\n因此, 在初始化时,\r\n需要使用<code>ir.getStmts()</code>而不是<code>cfg.getNodes()</code>,\r\n否则在面对<strong>Infinity Loop</strong> 时,\r\n<code>Exit</code>节点会错误的被当作<code>Dead Code</code>.</p>\r\n</blockquote>\r\n<hr />\r\n<h2 id=\"cfg生成细节\">CFG生成细节</h2>\r\n<p>完成本实验最重要的部分莫过于<strong>CFG</strong> 的结构,\r\n实验指南没有为我们提供所有的实现细节,\r\n而且<code>CFGBuilder</code>部分的代码对我们来说是不公开的.\r\n那我们该如何获取关于<strong>CFG</strong> 的细节?</p>\r\n<h3 id=\"框架代码提供的接口\">框架代码提供的接口</h3>\r\n<p>好在<strong>tai-e</strong>框架为我们提供了<code>Class Assignment</code>来<a\r\nhref=\"https://tai-e.pascal-lab.net/intro/selfmade-testcases.html\"><strong>分析自测样例</strong></a>,\r\n输出<code>*.dot</code>文件到<code>./output/</code>目录下, 可以使用<a\r\nhref=\"https://graphviz.org/download/\"><strong>[Graphviz]</strong></a>可视化<code>*.dot</code>文件.\r\n使用细节见上述链接中的官方文档.</p>\r\n<p>笔者所使用的<strong>IDE</strong> 为<strong>JetBrian IDEA 2023.1.4\r\nCommunity</strong>版本, <code>Class Assignment</code>运行配置如下.</p>\r\n<img src=\"/2024/11/02/SPA-A3/pic1.png\" class=\"\" title=\"pic1\">\r\n<p>在终端中进入工作目录(此处为<code>output/</code>)执行以下命令:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">dot -Tpng ClassMethod.dot -o ClassMethod.png</span></span><br></pre></td></tr></table></figure>\r\n<p>然后我们就可以得到<code>*.dot</code>文件的可视化<strong>CFG</strong>\r\n结果.</p>\r\n<h3\r\nid=\"根据自测样例推测cfg的生成逻辑\">根据自测样例推测CFG的生成逻辑</h3>\r\n<p>经过前两次的实验, 普通节点和跳转的关联顺序在<strong>CFG</strong>\r\n中是简单的,\r\n<code>for</code>和<code>while</code>的循环结构在<strong>tai-e</strong>中转化为简单的<code>goto stmt</code>.\r\n因此此处笔者着重说明<code>If</code>和<code>Switch</code>在<strong>Tai-e</strong>\r\n框架中的处理方式.</p>\r\n<h4 id=\"控制流不可达代码\">控制流不可达代码</h4>\r\n<p>源代码如下:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ControlFlowUnreachable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        dead(); <span class=\"comment\">// unreachable</span></span><br><span class=\"line\">        x = <span class=\"number\">3</span>; <span class=\"comment\">// unreachable</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dead</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>代码对应IR如下:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;ControlFlowUnreachable: <span class=\"type\">int</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L6</span>] invokestatic &lt;ControlFlowUnreachable: <span class=\"keyword\">void</span> <span class=\"title function_\">dead</span><span class=\"params\">()</span>&gt;();</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] x = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\r\n<p><strong>CFG</strong> 可视结果如下:</p>\r\n<img src=\"/2024/11/02/SPA-A3/pic2.png\" class=\"\" title=\"pic2\">\r\n<blockquote>\r\n<p>不难发现,\r\n控制流不可达代码在可视化图中的表示是独立于<strong>Entry</strong>到<strong>Exit</strong>\r\n路径的子图</p>\r\n</blockquote>\r\n<h4 id=\"if-stmt\">If Stmt</h4>\r\n<p>我们先来看看最基础的情况:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnreachableIfBranch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">branch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">            z = <span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            z = <span class=\"number\">200</span>; <span class=\"comment\">// unreachable branch</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;UnreachableIfBranch: <span class=\"type\">int</span> <span class=\"title function_\">branch</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">10</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] y = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">if</span> (x &gt; y) <span class=\"keyword\">goto</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">7</span>;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] z = <span class=\"number\">100</span>;</span><br><span class=\"line\">[<span class=\"number\">6</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">9</span>;</span><br><span class=\"line\">[<span class=\"number\">7</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">8</span><span class=\"meta\">@L10</span>] z = <span class=\"number\">200</span>;</span><br><span class=\"line\">[<span class=\"number\">9</span><span class=\"meta\">@L10</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"meta\">@L12</span>] <span class=\"keyword\">return</span> z;</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/02/SPA-A3/pic3.png\" class=\"\" title=\"pic3\">\r\n<blockquote>\r\n<p>可以从可视化<strong>CFG</strong> 中获取不少信息.</p>\r\n<ul>\r\n<li><code>[line]:if(ConditionExp) goto [line]</code>\r\n是<code>if stmt</code>结构的入口(图中为<code>2: if(x &gt; y) goto 4</code>),\r\n<strong>tai-e</strong>框架会为<code>if stmt</code>结构提供一个统一的<code>nop</code>出口(图中为<code>9: nop</code>).</li>\r\n<li><code>if</code>结构会根据<code>ConditionExp</code>的<strong>T/F</strong>取值生成<code>Edge</code>,\r\n分为<code>IF_FALSE</code>和<code>IF_TRUE</code>,\r\n<code>Edge Target</code>分别为<strong>T/F</strong> 的代码块.\r\n可以观测到框架会为<strong>T/F</strong>的代码块添加一个<code>nop stmt</code>作为代码块的起始(图中为<code>4: nop</code>和<code>7: nop</code>).</li>\r\n</ul>\r\n</blockquote>\r\n<hr />\r\n<p>如果我们不显式指定<code>else</code>结构:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnreachableIfBranch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">branch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">            z = <span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;UnreachableIfBranch: <span class=\"type\">int</span> <span class=\"title function_\">branch</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">10</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] y = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">if</span> (x &gt; y) <span class=\"keyword\">goto</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] z = <span class=\"number\">100</span>;</span><br><span class=\"line\">[<span class=\"number\">6</span><span class=\"meta\">@L8</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">7</span><span class=\"meta\">@L13</span>] <span class=\"keyword\">return</span> z;</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/02/SPA-A3/pic4.png\" class=\"\" title=\"pic4\">\r\n<blockquote>\r\n<ul>\r\n<li>可以看到<code>if</code>结构的<code>IF_FALSE</code>对应的代码块消失,\r\n<code>IF_FALSE</code>直接跳转到<code>if</code>结构的结束<code>nop</code>语句.(图中为<code>6: nop</code>)</li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips:</strong></p>\r\n<p>如果显式写出<code>else</code>但<code>else</code>为空体,\r\n<strong>tai-e</strong>框架会生成一条<code>nop</code>语句对应该<code>else</code>空体,\r\n感兴趣的读者可以自行测试, 笔者在此不再赘述.</p>\r\n<p>通过阅读框架代码中的<code>Class If extends JumpStmt</code>和<code>Class JumpStmt</code>可以知晓,\r\n<code>If</code>将<code>JumpStmt</code>的成员变量<code>target</code>和对应方法(如<code>getTarget()</code>)和<code>If</code>结构中的<code>IF_TRUE</code>对应起来,\r\n因此此时的<code>Edge IF_FALSE</code>其实等价于<code>FALL_THROUGH</code>,\r\n<code>IF_FALSE</code>的<code>target</code>是一条指向真正<strong>False代码块</strong>的<code>goto stmt</code>.\r\n通过阅读框架代码, 便不难理解为何<strong>CFG</strong>\r\n要这样处理<code>IF</code>结构.</p>\r\n</blockquote>\r\n</blockquote>\r\n<hr />\r\n<p><code>if-else</code>的嵌套等价于普通的<code>if-else</code>的组合.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnreachableIfBranch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">branch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">            z = <span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &lt; y) &#123;</span><br><span class=\"line\">            z = <span class=\"number\">200</span>; <span class=\"comment\">// unreachable branch</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            z = <span class=\"number\">300</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;UnreachableIfBranch: <span class=\"type\">int</span> <span class=\"title function_\">branch</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">10</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] y = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">if</span> (x &gt; y) <span class=\"keyword\">goto</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">7</span>;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] z = <span class=\"number\">100</span>;</span><br><span class=\"line\">[<span class=\"number\">6</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">16</span>;</span><br><span class=\"line\">[<span class=\"number\">7</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">8</span><span class=\"meta\">@L10</span>] <span class=\"keyword\">if</span> (x &lt; y) <span class=\"keyword\">goto</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">[<span class=\"number\">9</span><span class=\"meta\">@L10</span>] <span class=\"keyword\">goto</span> <span class=\"number\">13</span>;</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"meta\">@L10</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">11</span><span class=\"meta\">@L11</span>] z = <span class=\"number\">200</span>;</span><br><span class=\"line\">[<span class=\"number\">12</span><span class=\"meta\">@L10</span>] <span class=\"keyword\">goto</span> <span class=\"number\">15</span>;</span><br><span class=\"line\">[<span class=\"number\">13</span><span class=\"meta\">@L10</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">14</span><span class=\"meta\">@L14</span>] z = <span class=\"number\">300</span>;</span><br><span class=\"line\">[<span class=\"number\">15</span><span class=\"meta\">@L14</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">16</span><span class=\"meta\">@L14</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">17</span><span class=\"meta\">@L16</span>] <span class=\"keyword\">return</span> z;</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/02/SPA-A3/pic5.png\" class=\"\" title=\"pic5\">\r\n<h4 id=\"switch-stmt\">Switch Stmt</h4>\r\n<p>与<code>If</code>一样, 我们先来看看一般情况:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnreachableSwitchBranch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lookupSwitch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> x &lt;&lt; <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                z = <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                z = <span class=\"number\">4</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">                z = <span class=\"number\">8</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                z = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;UnreachableSwitchBranch: <span class=\"keyword\">void</span> <span class=\"title function_\">lookupSwitch</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] %intconst0 = <span class=\"number\">3</span>;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L5</span>] y = x &lt;&lt; %intconst0;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">17</span>;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L9</span>] z = <span class=\"number\">2</span>;</span><br><span class=\"line\">[<span class=\"number\">6</span><span class=\"meta\">@L10</span>] <span class=\"keyword\">goto</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">[<span class=\"number\">7</span><span class=\"meta\">@L10</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">8</span><span class=\"meta\">@L12</span>] z = <span class=\"number\">4</span>;</span><br><span class=\"line\">[<span class=\"number\">9</span><span class=\"meta\">@L13</span>] <span class=\"keyword\">goto</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"meta\">@L13</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">11</span><span class=\"meta\">@L15</span>] z = <span class=\"number\">8</span>;</span><br><span class=\"line\">[<span class=\"number\">12</span><span class=\"meta\">@L16</span>] <span class=\"keyword\">goto</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">[<span class=\"number\">13</span><span class=\"meta\">@L16</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">14</span><span class=\"meta\">@L18</span>] z = <span class=\"number\">0</span>;</span><br><span class=\"line\">[<span class=\"number\">15</span><span class=\"meta\">@L19</span>] <span class=\"keyword\">goto</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">[<span class=\"number\">16</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">[<span class=\"number\">17</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">18</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">19</span><span class=\"meta\">@L7</span>] lookupswitch (y) &#123;<span class=\"number\">2</span>-&gt;<span class=\"number\">4</span>, <span class=\"number\">4</span>-&gt;<span class=\"number\">7</span>, <span class=\"number\">8</span>-&gt;<span class=\"number\">10</span>, <span class=\"keyword\">default</span>-&gt;<span class=\"number\">13</span>&#125;;</span><br><span class=\"line\">[<span class=\"number\">20</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">21</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">return</span>;</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/02/SPA-A3/pic6.png\" class=\"\" title=\"pic6\">\r\n<blockquote>\r\n<ul>\r\n<li>与<code>If</code>一致,\r\n<code>[line]: [method]switch([var]) &#123;[branch]&#125;</code>是<code>Switch</code>结构的起点(图中为<code>19: lookupswitch(y) &#123;2-&gt;4, 4-&gt;7, 8-&gt;10, default-&gt;13&#125;</code>).\r\n同样会生成一条<code>nop stmt</code>表示<code>Switch</code>结构的出口.</li>\r\n<li>经过笔者的多次测试,\r\n<strong>tai-e</strong>框架的<code>Switch</code>语句处理有些的微妙的奇怪之处.\r\n与<code>If</code>不同,\r\n<code>Switch</code>语句的入口在<code>line num</code>上位于<code>Switch</code>结构的最后部分,\r\n到达该入口需要经过两条<code>nop stmt</code>,\r\n并且会在<code>CASE</code>和<code>DEFAULT</code>代码块之外添加一个到<code>Switch</code>结构出口的<code>goto stmt</code>.\r\n然而由于<code>DEFAULT</code>一定存在(下文会解释),\r\n因此这条<code>goto</code>语句一定为死代码,\r\n不存在一条从<code>Entry</code>到该语句的路径.</li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 笔者认为这是一个非常奇怪的处理,\r\n猜测可能跟Soot生成的字节码有关(<strong>Tai-e</strong>框架基于Soot搭建)\r\n<strong>该猜想未证实</strong>.</p>\r\n</blockquote>\r\n<ul>\r\n<li>笔者推测<code>CASE</code>和<code>DEFAULT</code>代码块中的第一条<code>nop</code>语句来源是<code>case 2:</code>和<code>default:</code>,\r\n即<strong>Tai-e</strong>框架选择保留了原来的控制信息语句(控制信息在<strong>CFG</strong>中体现为<code>Edge</code>),\r\n但将其替换成了<code>nop</code>语句(该推测在不显示指定<code>default</code>时得到部分证实).</li>\r\n</ul>\r\n</blockquote>\r\n<hr />\r\n<p>不显式指定<code>default</code>时:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnreachableSwitchBranch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lookupSwitch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> x &lt;&lt; <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                z = <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                z = <span class=\"number\">4</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">                z = <span class=\"number\">8</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;UnreachableSwitchBranch: <span class=\"keyword\">void</span> <span class=\"title function_\">lookupSwitch</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] %intconst0 = <span class=\"number\">3</span>;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L5</span>] y = x &lt;&lt; %intconst0;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">14</span>;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L9</span>] z = <span class=\"number\">2</span>;</span><br><span class=\"line\">[<span class=\"number\">6</span><span class=\"meta\">@L10</span>] <span class=\"keyword\">goto</span> <span class=\"number\">17</span>;</span><br><span class=\"line\">[<span class=\"number\">7</span><span class=\"meta\">@L10</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">8</span><span class=\"meta\">@L12</span>] z = <span class=\"number\">4</span>;</span><br><span class=\"line\">[<span class=\"number\">9</span><span class=\"meta\">@L13</span>] <span class=\"keyword\">goto</span> <span class=\"number\">17</span>;</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"meta\">@L13</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">11</span><span class=\"meta\">@L15</span>] z = <span class=\"number\">8</span>;</span><br><span class=\"line\">[<span class=\"number\">12</span><span class=\"meta\">@L16</span>] <span class=\"keyword\">goto</span> <span class=\"number\">17</span>;</span><br><span class=\"line\">[<span class=\"number\">13</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">17</span>;</span><br><span class=\"line\">[<span class=\"number\">14</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">15</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">16</span><span class=\"meta\">@L7</span>] lookupswitch (y) &#123;<span class=\"number\">2</span>-&gt;<span class=\"number\">4</span>, <span class=\"number\">4</span>-&gt;<span class=\"number\">7</span>, <span class=\"number\">8</span>-&gt;<span class=\"number\">10</span>, <span class=\"keyword\">default</span>-&gt;<span class=\"number\">17</span>&#125;;</span><br><span class=\"line\">[<span class=\"number\">17</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">18</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">return</span>;</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/02/SPA-A3/pic7.png\" class=\"\" title=\"pic7\">\r\n<blockquote>\r\n<ul>\r\n<li>可以观测到<strong>CFG</strong>\r\n会添加未被显式写出的<code>default</code>,\r\n但不生成<code>default</code>指向的代码块(如果显示写出<code>default</code>但为空体,\r\n会保留<code>nop</code>和<code>goto</code>跳转, 笔者在此不再赘述,\r\n感兴趣的读者可以自行测试),\r\n而是直接指向<code>Switch</code>结构的出口.</li>\r\n</ul>\r\n</blockquote>\r\n<h4 id=\"case-break\">case &amp; break</h4>\r\n<p>了解java语法性质的读者应该理解笔者在本小结的标题.</p>\r\n<p>我们来看看如下代码:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">option</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (option) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Selected 1&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Selected 2&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Selected 3&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Selected other&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>与预期不同, 这段代码的输出如下:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">java Main</span></span><br><span class=\"line\">Selected 2</span><br><span class=\"line\">Selected 3</span><br><span class=\"line\">Selected other</span><br></pre></td></tr></table></figure>\r\n<p>当<code>switch</code>匹配2成功时, 如果不加<code>break</code>,\r\n会顺次匹配在<code>case 2:</code>之后的所有<code>case</code>.\r\n这称为<code>case</code>的<strong>穿透性</strong>.</p>\r\n<hr />\r\n<p>我们来看看<strong>CFG</strong>是如何处理这种情况的:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnreachableSwitchBranch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lookupSwitch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> x &lt;&lt; <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                z = <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;  <span class=\"comment\">// unreachable case</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                z = <span class=\"number\">4</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">// unreachable case</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">                z = <span class=\"number\">8</span>;</span><br><span class=\"line\">                <span class=\"comment\">//break;</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                z = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">// unreachable case</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;UnreachableSwitchBranch: <span class=\"keyword\">void</span> <span class=\"title function_\">lookupSwitch</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] %intconst0 = <span class=\"number\">3</span>;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L5</span>] y = x &lt;&lt; %intconst0;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">16</span>;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L9</span>] z = <span class=\"number\">2</span>;</span><br><span class=\"line\">[<span class=\"number\">6</span><span class=\"meta\">@L10</span>] <span class=\"keyword\">goto</span> <span class=\"number\">19</span>;</span><br><span class=\"line\">[<span class=\"number\">7</span><span class=\"meta\">@L10</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">8</span><span class=\"meta\">@L12</span>] z = <span class=\"number\">4</span>;</span><br><span class=\"line\">[<span class=\"number\">9</span><span class=\"meta\">@L13</span>] <span class=\"keyword\">goto</span> <span class=\"number\">19</span>;</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"meta\">@L13</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">11</span><span class=\"meta\">@L15</span>] z = <span class=\"number\">8</span>;</span><br><span class=\"line\">[<span class=\"number\">12</span><span class=\"meta\">@L15</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">13</span><span class=\"meta\">@L18</span>] z = <span class=\"number\">0</span>;</span><br><span class=\"line\">[<span class=\"number\">14</span><span class=\"meta\">@L19</span>] <span class=\"keyword\">goto</span> <span class=\"number\">19</span>;</span><br><span class=\"line\">[<span class=\"number\">15</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">19</span>;</span><br><span class=\"line\">[<span class=\"number\">16</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">17</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">18</span><span class=\"meta\">@L7</span>] lookupswitch (y) &#123;<span class=\"number\">2</span>-&gt;<span class=\"number\">4</span>, <span class=\"number\">4</span>-&gt;<span class=\"number\">7</span>, <span class=\"number\">8</span>-&gt;<span class=\"number\">10</span>, <span class=\"keyword\">default</span>-&gt;<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">[<span class=\"number\">19</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">20</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">return</span>;</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/02/SPA-A3/pic8.png\" class=\"\" title=\"pic8\">\r\n<blockquote>\r\n<ul>\r\n<li>这是一个符合预期的处理, 也是一个非常自然而然的想法.</li>\r\n</ul>\r\n</blockquote>\r\n<h2 id=\"deadcodedetection\">DeadCodeDetection</h2>\r\n<p>本次实验只需要完成<code>Class DeadCodeDetection</code>中的<code>analysis()</code>方法.</p>\r\n<h3 id=\"准备工作\">准备工作</h3>\r\n<p>将A1,\r\nA2中完成的<strong>活跃变量分析</strong>和<strong>常量传播</strong>代码copy到本次实验A3的工作目录中.\r\n需要注意的是,\r\n本次活跃变量分析部分不使用<code>IteratorSovler</code>而是使用<code>BackwardWorklist</code>,\r\n此部分代码需要额外完成.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n不要过多的依赖诸如<strong>ChatGPT</strong>或<strong>Copilot</strong>的书写代码功能,\r\n其生成的代码很可能存在潜在的不易发现的bug(<del>你猜我为什么会加这个Tips</del>).\r\n实际上, <code>JetBrain IDEA</code>的成员变量和方法补全功能已经足够好使,\r\n使用<strong>Copilot</strong>的代码补全反而可能造成一些不必要的麻烦.</p>\r\n</blockquote>\r\n<h3 id=\"控制流不可达代码实现细节\">控制流不可达代码实现细节</h3>\r\n<p>实验指南已写明该部分的具体原理, 此处涉及一些实现细节.</p>\r\n<ul>\r\n<li>通过恰当的维护<code>BFSlist</code>可以仅遍历可达代码(主要处理<code>If</code>和<code>Switch</code>),\r\n因此初始化所有的<code>Stmt</code>为<code>DeadCode</code>,\r\n遍历到即排除其为死代码是一个不错的选择.</li>\r\n<li>无论使用<strong>BFS</strong>还是<strong>DFS</strong>,\r\n都要处理环路引起的<strong>Infinity Loop</strong>,\r\n一个简单的方法是创建一个<code>Traveled Set</code>保证每个<code>Stmt</code>仅会被遍历到一次(同样的,\r\n对于<code>BFSList</code>维护也可以通过类似的技巧提升效率).</li>\r\n<li>遍历一次就能得到结果依托于<strong>不需要处理由删除死代码产生的死代码</strong>(例子可见实验指南).</li>\r\n<li>关于图的遍历方式,\r\n笔者在此推荐使用<code>CFG</code>的顶层方法<code>getSuccOf()</code>和<code>getOutEdge()</code>,\r\n而不是<code>If Stmt</code>和<code>Switch Stmt</code>中的方法.\r\n这两个跳转语句的实现因为继承自<code>JumpStmt</code>所以细节上可能与想象中有所差异,\r\n如果一定要使用,\r\n还请小心谨慎的阅读<code>API</code>注释以获取详细信息.</li>\r\n<li>关于<code>ConditionExp</code>的处理,\r\n可以复用A2中实现的<code>evaluate()</code>方法.</li>\r\n</ul>\r\n<h3 id=\"无用赋值代码实现细节\">无用赋值代码实现细节</h3>\r\n<p>同上, 原理部分请参见实验指南.</p>\r\n<ul>\r\n<li>继承<code>AssignStmt</code>的子类有足足十几个,\r\n可以从lib反编译或者科研版代码中获取相关细节, 关于<strong>副作用(Side\r\nEffect)</strong>在框架代码中已给出<code>API</code>,\r\n解释了哪些派生类可能引起副作用.</li>\r\n</ul>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> true if given RValue has no side effect, otherwise false.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNoSideEffect</span><span class=\"params\">(RValue rvalue)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// new expression modifies the heap</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rvalue <span class=\"keyword\">instanceof</span> NewExp ||</span><br><span class=\"line\">            <span class=\"comment\">// cast may trigger ClassCastException</span></span><br><span class=\"line\">            rvalue <span class=\"keyword\">instanceof</span> CastExp ||</span><br><span class=\"line\">            <span class=\"comment\">// static field access may trigger class initialization</span></span><br><span class=\"line\">            <span class=\"comment\">// instance field access may trigger NPE</span></span><br><span class=\"line\">            rvalue <span class=\"keyword\">instanceof</span> FieldAccess ||</span><br><span class=\"line\">            <span class=\"comment\">// array access may trigger NPE(None Pointer Exception)</span></span><br><span class=\"line\">            rvalue <span class=\"keyword\">instanceof</span> ArrayAccess) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rvalue <span class=\"keyword\">instanceof</span> ArithmeticExp) &#123;</span><br><span class=\"line\">        ArithmeticExp.<span class=\"type\">Op</span> <span class=\"variable\">op</span> <span class=\"operator\">=</span> ((ArithmeticExp) rvalue).getOperator();</span><br><span class=\"line\">        <span class=\"comment\">// may trigger DivideByZeroException</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> op != ArithmeticExp.Op.DIV &amp;&amp; op != ArithmeticExp.Op.REM;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>小心, 不要忘记判断<code>lValue</code>是否为<code>Var</code>,\r\n与之前相同, 我们只需要处理<code>Var</code>类型的语句.</li>\r\n</ul>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>本次实验难度某种意义上低于A1, 是一个比较简单的实验,\r\n旨在考察对分析结果的应用能力. 祝早日AC!</p>\r\n","length":3192,"excerpt":"<p><strong>NJU Static Program Analysis | Assignment-3 Dead-Code\r\nDetection.</strong></p>","more":"<p>2024.11.7已更新</p>\r\n<h2 id=\"实验信息食用指南\">实验信息&amp;食用指南</h2>\r\n<p>见本博客A1 &amp; A2</p>\r\n<p><strong>Tips:</strong> 实验指南和框架代码仍然是最一手最正确的资料,\r\n对于实验指南中已涉及的信息, 本记录不会过多赘述.</p>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>Tai-e</strong> 框架实现一个 <strong>死代码检测</strong>\r\n算法.</p>\r\n<h2 id=\"实验简析\">实验简析</h2>\r\n<p>实验指南没有给出实现的框架,\r\n因此至此已有完成本次知识的全部基础知识(活跃变量分析 &amp;\r\n常量传播算法).</p>\r\n<p>故本次实验主要考察对A1, A2的实验理解,\r\n有遗忘或有不清楚的读者还望移步至官方教学视频复习后再完成本次实验.</p>\r\n<ul>\r\n<li><p>死代码检测是一个<strong>Must Analysis</strong> ,\r\n允许漏报而不允许错报.</p></li>\r\n<li><p>由分支不可达的特性, 采用<strong>Forward Analysis</strong>\r\n比较符合死代码检测的特性.</p></li>\r\n<li><p>为了走一遍<strong>CFG</strong> 便得到结果,\r\n我们可以将全部<code>Stmt</code>加入<code>DeadCodeSet</code>中,\r\n将不是死代码的<code>Stmt</code>删去. 留下的便是死代码.</p></li>\r\n<li><p>此处笔者采用<strong>BFS</strong>算法进行<strong>CFG</strong>遍历,\r\n使用<code>Set Traveled</code>避免环路影响.</p></li>\r\n</ul>\r\n<h3 id=\"伪代码框架\">伪代码框架</h3>\r\n<p>死代码检测的大致框架伪代码如下:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liveVarsResult &lt;- LiveVarsAnalysis(IR)</span><br><span class=\"line\">constantResult &lt;- ConstantAnalysis(IR)</span><br><span class=\"line\">DeadcodeSet &lt;- all stmt in IR</span><br><span class=\"line\">TraveledSet &lt;- empty</span><br><span class=\"line\">BFSlist &lt;- entry</span><br><span class=\"line\"><span class=\"title function_\">while</span><span class=\"params\">(BFSlist is not empty)</span>&#123;</span><br><span class=\"line\">    pickup a stmt from BFSlist</span><br><span class=\"line\">    TraveledSet &lt;- stmt</span><br><span class=\"line\">    <span class=\"comment\">//handle jump Stmt</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stmt is <span class=\"keyword\">if</span> or <span class=\"keyword\">switch</span>)&#123;</span><br><span class=\"line\">        DeadcodeSet remove stmt</span><br><span class=\"line\">        <span class=\"comment\">// ConditionExp is Constant may cause Unreachable DeadCode</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">if</span>/<span class=\"keyword\">switch</span> ConditionExp is Constant by ConstantResult)&#123;</span><br><span class=\"line\">            BFSlist &lt;- Target Stmt of Constant ConditionExp Path</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            BFS &lt;- succ of stmt not in Travaled</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//handle Assign Deadcode</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stmt is AssignStmt)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stmt is not DeadAssign by LiveVarsResult || stmt has SideEffect)&#123;</span><br><span class=\"line\">            DeadcodeSet remove stmt</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        BFSlist &lt;- succ of stmt not in Travaled</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//normal Stmt</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        DeadCodeSet remove stmt</span><br><span class=\"line\">        BFSlist &lt;- succ of stmt not in Travaled</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<p><strong><em>更新:</em></strong></p>\r\n<blockquote>\r\n<p><strong>Compare:</strong> <code>ir.getStmts()</code> &amp;\r\n<code>cfg.getNodes()</code></p>\r\n<p>笔者一开始未意识到这个问题, <strong>IR</strong>\r\n中是不包含<code>Entry</code>和<code>Exit</code>的. 换句话说,\r\n<code>Entry</code>和<code>Exit</code>是由<strong>CFG</strong> 生成的.\r\n因此, 在初始化时,\r\n需要使用<code>ir.getStmts()</code>而不是<code>cfg.getNodes()</code>,\r\n否则在面对<strong>Infinity Loop</strong> 时,\r\n<code>Exit</code>节点会错误的被当作<code>Dead Code</code>.</p>\r\n</blockquote>\r\n<hr />\r\n<h2 id=\"cfg生成细节\">CFG生成细节</h2>\r\n<p>完成本实验最重要的部分莫过于<strong>CFG</strong> 的结构,\r\n实验指南没有为我们提供所有的实现细节,\r\n而且<code>CFGBuilder</code>部分的代码对我们来说是不公开的.\r\n那我们该如何获取关于<strong>CFG</strong> 的细节?</p>\r\n<h3 id=\"框架代码提供的接口\">框架代码提供的接口</h3>\r\n<p>好在<strong>tai-e</strong>框架为我们提供了<code>Class Assignment</code>来<a\r\nhref=\"https://tai-e.pascal-lab.net/intro/selfmade-testcases.html\"><strong>分析自测样例</strong></a>,\r\n输出<code>*.dot</code>文件到<code>./output/</code>目录下, 可以使用<a\r\nhref=\"https://graphviz.org/download/\"><strong>[Graphviz]</strong></a>可视化<code>*.dot</code>文件.\r\n使用细节见上述链接中的官方文档.</p>\r\n<p>笔者所使用的<strong>IDE</strong> 为<strong>JetBrian IDEA 2023.1.4\r\nCommunity</strong>版本, <code>Class Assignment</code>运行配置如下.</p>\r\n<img src=\"/2024/11/02/SPA-A3/pic1.png\" class=\"\" title=\"pic1\">\r\n<p>在终端中进入工作目录(此处为<code>output/</code>)执行以下命令:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">dot -Tpng ClassMethod.dot -o ClassMethod.png</span></span><br></pre></td></tr></table></figure>\r\n<p>然后我们就可以得到<code>*.dot</code>文件的可视化<strong>CFG</strong>\r\n结果.</p>\r\n<h3\r\nid=\"根据自测样例推测cfg的生成逻辑\">根据自测样例推测CFG的生成逻辑</h3>\r\n<p>经过前两次的实验, 普通节点和跳转的关联顺序在<strong>CFG</strong>\r\n中是简单的,\r\n<code>for</code>和<code>while</code>的循环结构在<strong>tai-e</strong>中转化为简单的<code>goto stmt</code>.\r\n因此此处笔者着重说明<code>If</code>和<code>Switch</code>在<strong>Tai-e</strong>\r\n框架中的处理方式.</p>\r\n<h4 id=\"控制流不可达代码\">控制流不可达代码</h4>\r\n<p>源代码如下:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ControlFlowUnreachable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        dead(); <span class=\"comment\">// unreachable</span></span><br><span class=\"line\">        x = <span class=\"number\">3</span>; <span class=\"comment\">// unreachable</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dead</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>代码对应IR如下:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;ControlFlowUnreachable: <span class=\"type\">int</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L6</span>] invokestatic &lt;ControlFlowUnreachable: <span class=\"keyword\">void</span> <span class=\"title function_\">dead</span><span class=\"params\">()</span>&gt;();</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] x = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\r\n<p><strong>CFG</strong> 可视结果如下:</p>\r\n<img src=\"/2024/11/02/SPA-A3/pic2.png\" class=\"\" title=\"pic2\">\r\n<blockquote>\r\n<p>不难发现,\r\n控制流不可达代码在可视化图中的表示是独立于<strong>Entry</strong>到<strong>Exit</strong>\r\n路径的子图</p>\r\n</blockquote>\r\n<h4 id=\"if-stmt\">If Stmt</h4>\r\n<p>我们先来看看最基础的情况:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnreachableIfBranch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">branch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">            z = <span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            z = <span class=\"number\">200</span>; <span class=\"comment\">// unreachable branch</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;UnreachableIfBranch: <span class=\"type\">int</span> <span class=\"title function_\">branch</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">10</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] y = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">if</span> (x &gt; y) <span class=\"keyword\">goto</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">7</span>;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] z = <span class=\"number\">100</span>;</span><br><span class=\"line\">[<span class=\"number\">6</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">9</span>;</span><br><span class=\"line\">[<span class=\"number\">7</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">8</span><span class=\"meta\">@L10</span>] z = <span class=\"number\">200</span>;</span><br><span class=\"line\">[<span class=\"number\">9</span><span class=\"meta\">@L10</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"meta\">@L12</span>] <span class=\"keyword\">return</span> z;</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/02/SPA-A3/pic3.png\" class=\"\" title=\"pic3\">\r\n<blockquote>\r\n<p>可以从可视化<strong>CFG</strong> 中获取不少信息.</p>\r\n<ul>\r\n<li><code>[line]:if(ConditionExp) goto [line]</code>\r\n是<code>if stmt</code>结构的入口(图中为<code>2: if(x &gt; y) goto 4</code>),\r\n<strong>tai-e</strong>框架会为<code>if stmt</code>结构提供一个统一的<code>nop</code>出口(图中为<code>9: nop</code>).</li>\r\n<li><code>if</code>结构会根据<code>ConditionExp</code>的<strong>T/F</strong>取值生成<code>Edge</code>,\r\n分为<code>IF_FALSE</code>和<code>IF_TRUE</code>,\r\n<code>Edge Target</code>分别为<strong>T/F</strong> 的代码块.\r\n可以观测到框架会为<strong>T/F</strong>的代码块添加一个<code>nop stmt</code>作为代码块的起始(图中为<code>4: nop</code>和<code>7: nop</code>).</li>\r\n</ul>\r\n</blockquote>\r\n<hr />\r\n<p>如果我们不显式指定<code>else</code>结构:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnreachableIfBranch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">branch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">            z = <span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;UnreachableIfBranch: <span class=\"type\">int</span> <span class=\"title function_\">branch</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">10</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] y = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">if</span> (x &gt; y) <span class=\"keyword\">goto</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] z = <span class=\"number\">100</span>;</span><br><span class=\"line\">[<span class=\"number\">6</span><span class=\"meta\">@L8</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">7</span><span class=\"meta\">@L13</span>] <span class=\"keyword\">return</span> z;</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/02/SPA-A3/pic4.png\" class=\"\" title=\"pic4\">\r\n<blockquote>\r\n<ul>\r\n<li>可以看到<code>if</code>结构的<code>IF_FALSE</code>对应的代码块消失,\r\n<code>IF_FALSE</code>直接跳转到<code>if</code>结构的结束<code>nop</code>语句.(图中为<code>6: nop</code>)</li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips:</strong></p>\r\n<p>如果显式写出<code>else</code>但<code>else</code>为空体,\r\n<strong>tai-e</strong>框架会生成一条<code>nop</code>语句对应该<code>else</code>空体,\r\n感兴趣的读者可以自行测试, 笔者在此不再赘述.</p>\r\n<p>通过阅读框架代码中的<code>Class If extends JumpStmt</code>和<code>Class JumpStmt</code>可以知晓,\r\n<code>If</code>将<code>JumpStmt</code>的成员变量<code>target</code>和对应方法(如<code>getTarget()</code>)和<code>If</code>结构中的<code>IF_TRUE</code>对应起来,\r\n因此此时的<code>Edge IF_FALSE</code>其实等价于<code>FALL_THROUGH</code>,\r\n<code>IF_FALSE</code>的<code>target</code>是一条指向真正<strong>False代码块</strong>的<code>goto stmt</code>.\r\n通过阅读框架代码, 便不难理解为何<strong>CFG</strong>\r\n要这样处理<code>IF</code>结构.</p>\r\n</blockquote>\r\n</blockquote>\r\n<hr />\r\n<p><code>if-else</code>的嵌套等价于普通的<code>if-else</code>的组合.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnreachableIfBranch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">branch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">            z = <span class=\"number\">100</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &lt; y) &#123;</span><br><span class=\"line\">            z = <span class=\"number\">200</span>; <span class=\"comment\">// unreachable branch</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            z = <span class=\"number\">300</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;UnreachableIfBranch: <span class=\"type\">int</span> <span class=\"title function_\">branch</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">10</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] y = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">if</span> (x &gt; y) <span class=\"keyword\">goto</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">7</span>;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L8</span>] z = <span class=\"number\">100</span>;</span><br><span class=\"line\">[<span class=\"number\">6</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">16</span>;</span><br><span class=\"line\">[<span class=\"number\">7</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">8</span><span class=\"meta\">@L10</span>] <span class=\"keyword\">if</span> (x &lt; y) <span class=\"keyword\">goto</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">[<span class=\"number\">9</span><span class=\"meta\">@L10</span>] <span class=\"keyword\">goto</span> <span class=\"number\">13</span>;</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"meta\">@L10</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">11</span><span class=\"meta\">@L11</span>] z = <span class=\"number\">200</span>;</span><br><span class=\"line\">[<span class=\"number\">12</span><span class=\"meta\">@L10</span>] <span class=\"keyword\">goto</span> <span class=\"number\">15</span>;</span><br><span class=\"line\">[<span class=\"number\">13</span><span class=\"meta\">@L10</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">14</span><span class=\"meta\">@L14</span>] z = <span class=\"number\">300</span>;</span><br><span class=\"line\">[<span class=\"number\">15</span><span class=\"meta\">@L14</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">16</span><span class=\"meta\">@L14</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">17</span><span class=\"meta\">@L16</span>] <span class=\"keyword\">return</span> z;</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/02/SPA-A3/pic5.png\" class=\"\" title=\"pic5\">\r\n<h4 id=\"switch-stmt\">Switch Stmt</h4>\r\n<p>与<code>If</code>一样, 我们先来看看一般情况:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnreachableSwitchBranch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lookupSwitch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> x &lt;&lt; <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                z = <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                z = <span class=\"number\">4</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">                z = <span class=\"number\">8</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                z = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;UnreachableSwitchBranch: <span class=\"keyword\">void</span> <span class=\"title function_\">lookupSwitch</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] %intconst0 = <span class=\"number\">3</span>;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L5</span>] y = x &lt;&lt; %intconst0;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">17</span>;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L9</span>] z = <span class=\"number\">2</span>;</span><br><span class=\"line\">[<span class=\"number\">6</span><span class=\"meta\">@L10</span>] <span class=\"keyword\">goto</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">[<span class=\"number\">7</span><span class=\"meta\">@L10</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">8</span><span class=\"meta\">@L12</span>] z = <span class=\"number\">4</span>;</span><br><span class=\"line\">[<span class=\"number\">9</span><span class=\"meta\">@L13</span>] <span class=\"keyword\">goto</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"meta\">@L13</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">11</span><span class=\"meta\">@L15</span>] z = <span class=\"number\">8</span>;</span><br><span class=\"line\">[<span class=\"number\">12</span><span class=\"meta\">@L16</span>] <span class=\"keyword\">goto</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">[<span class=\"number\">13</span><span class=\"meta\">@L16</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">14</span><span class=\"meta\">@L18</span>] z = <span class=\"number\">0</span>;</span><br><span class=\"line\">[<span class=\"number\">15</span><span class=\"meta\">@L19</span>] <span class=\"keyword\">goto</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">[<span class=\"number\">16</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">[<span class=\"number\">17</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">18</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">19</span><span class=\"meta\">@L7</span>] lookupswitch (y) &#123;<span class=\"number\">2</span>-&gt;<span class=\"number\">4</span>, <span class=\"number\">4</span>-&gt;<span class=\"number\">7</span>, <span class=\"number\">8</span>-&gt;<span class=\"number\">10</span>, <span class=\"keyword\">default</span>-&gt;<span class=\"number\">13</span>&#125;;</span><br><span class=\"line\">[<span class=\"number\">20</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">21</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">return</span>;</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/02/SPA-A3/pic6.png\" class=\"\" title=\"pic6\">\r\n<blockquote>\r\n<ul>\r\n<li>与<code>If</code>一致,\r\n<code>[line]: [method]switch([var]) &#123;[branch]&#125;</code>是<code>Switch</code>结构的起点(图中为<code>19: lookupswitch(y) &#123;2-&gt;4, 4-&gt;7, 8-&gt;10, default-&gt;13&#125;</code>).\r\n同样会生成一条<code>nop stmt</code>表示<code>Switch</code>结构的出口.</li>\r\n<li>经过笔者的多次测试,\r\n<strong>tai-e</strong>框架的<code>Switch</code>语句处理有些的微妙的奇怪之处.\r\n与<code>If</code>不同,\r\n<code>Switch</code>语句的入口在<code>line num</code>上位于<code>Switch</code>结构的最后部分,\r\n到达该入口需要经过两条<code>nop stmt</code>,\r\n并且会在<code>CASE</code>和<code>DEFAULT</code>代码块之外添加一个到<code>Switch</code>结构出口的<code>goto stmt</code>.\r\n然而由于<code>DEFAULT</code>一定存在(下文会解释),\r\n因此这条<code>goto</code>语句一定为死代码,\r\n不存在一条从<code>Entry</code>到该语句的路径.</li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 笔者认为这是一个非常奇怪的处理,\r\n猜测可能跟Soot生成的字节码有关(<strong>Tai-e</strong>框架基于Soot搭建)\r\n<strong>该猜想未证实</strong>.</p>\r\n</blockquote>\r\n<ul>\r\n<li>笔者推测<code>CASE</code>和<code>DEFAULT</code>代码块中的第一条<code>nop</code>语句来源是<code>case 2:</code>和<code>default:</code>,\r\n即<strong>Tai-e</strong>框架选择保留了原来的控制信息语句(控制信息在<strong>CFG</strong>中体现为<code>Edge</code>),\r\n但将其替换成了<code>nop</code>语句(该推测在不显示指定<code>default</code>时得到部分证实).</li>\r\n</ul>\r\n</blockquote>\r\n<hr />\r\n<p>不显式指定<code>default</code>时:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnreachableSwitchBranch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lookupSwitch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> x &lt;&lt; <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                z = <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                z = <span class=\"number\">4</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">                z = <span class=\"number\">8</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;UnreachableSwitchBranch: <span class=\"keyword\">void</span> <span class=\"title function_\">lookupSwitch</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] %intconst0 = <span class=\"number\">3</span>;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L5</span>] y = x &lt;&lt; %intconst0;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">14</span>;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L9</span>] z = <span class=\"number\">2</span>;</span><br><span class=\"line\">[<span class=\"number\">6</span><span class=\"meta\">@L10</span>] <span class=\"keyword\">goto</span> <span class=\"number\">17</span>;</span><br><span class=\"line\">[<span class=\"number\">7</span><span class=\"meta\">@L10</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">8</span><span class=\"meta\">@L12</span>] z = <span class=\"number\">4</span>;</span><br><span class=\"line\">[<span class=\"number\">9</span><span class=\"meta\">@L13</span>] <span class=\"keyword\">goto</span> <span class=\"number\">17</span>;</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"meta\">@L13</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">11</span><span class=\"meta\">@L15</span>] z = <span class=\"number\">8</span>;</span><br><span class=\"line\">[<span class=\"number\">12</span><span class=\"meta\">@L16</span>] <span class=\"keyword\">goto</span> <span class=\"number\">17</span>;</span><br><span class=\"line\">[<span class=\"number\">13</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">17</span>;</span><br><span class=\"line\">[<span class=\"number\">14</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">15</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">16</span><span class=\"meta\">@L7</span>] lookupswitch (y) &#123;<span class=\"number\">2</span>-&gt;<span class=\"number\">4</span>, <span class=\"number\">4</span>-&gt;<span class=\"number\">7</span>, <span class=\"number\">8</span>-&gt;<span class=\"number\">10</span>, <span class=\"keyword\">default</span>-&gt;<span class=\"number\">17</span>&#125;;</span><br><span class=\"line\">[<span class=\"number\">17</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">18</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">return</span>;</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/02/SPA-A3/pic7.png\" class=\"\" title=\"pic7\">\r\n<blockquote>\r\n<ul>\r\n<li>可以观测到<strong>CFG</strong>\r\n会添加未被显式写出的<code>default</code>,\r\n但不生成<code>default</code>指向的代码块(如果显示写出<code>default</code>但为空体,\r\n会保留<code>nop</code>和<code>goto</code>跳转, 笔者在此不再赘述,\r\n感兴趣的读者可以自行测试),\r\n而是直接指向<code>Switch</code>结构的出口.</li>\r\n</ul>\r\n</blockquote>\r\n<h4 id=\"case-break\">case &amp; break</h4>\r\n<p>了解java语法性质的读者应该理解笔者在本小结的标题.</p>\r\n<p>我们来看看如下代码:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">option</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (option) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Selected 1&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Selected 2&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Selected 3&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Selected other&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>与预期不同, 这段代码的输出如下:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">java Main</span></span><br><span class=\"line\">Selected 2</span><br><span class=\"line\">Selected 3</span><br><span class=\"line\">Selected other</span><br></pre></td></tr></table></figure>\r\n<p>当<code>switch</code>匹配2成功时, 如果不加<code>break</code>,\r\n会顺次匹配在<code>case 2:</code>之后的所有<code>case</code>.\r\n这称为<code>case</code>的<strong>穿透性</strong>.</p>\r\n<hr />\r\n<p>我们来看看<strong>CFG</strong>是如何处理这种情况的:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UnreachableSwitchBranch</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lookupSwitch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> x &lt;&lt; <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                z = <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;  <span class=\"comment\">// unreachable case</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                z = <span class=\"number\">4</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">// unreachable case</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">                z = <span class=\"number\">8</span>;</span><br><span class=\"line\">                <span class=\"comment\">//break;</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                z = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">// unreachable case</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------- &lt;UnreachableSwitchBranch: <span class=\"keyword\">void</span> <span class=\"title function_\">lookupSwitch</span><span class=\"params\">()</span>&gt; --------------------</span><br><span class=\"line\">[<span class=\"number\">0</span><span class=\"meta\">@L4</span>] x = <span class=\"number\">1</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span><span class=\"meta\">@L5</span>] %intconst0 = <span class=\"number\">3</span>;</span><br><span class=\"line\">[<span class=\"number\">2</span><span class=\"meta\">@L5</span>] y = x &lt;&lt; %intconst0;</span><br><span class=\"line\">[<span class=\"number\">3</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">16</span>;</span><br><span class=\"line\">[<span class=\"number\">4</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">5</span><span class=\"meta\">@L9</span>] z = <span class=\"number\">2</span>;</span><br><span class=\"line\">[<span class=\"number\">6</span><span class=\"meta\">@L10</span>] <span class=\"keyword\">goto</span> <span class=\"number\">19</span>;</span><br><span class=\"line\">[<span class=\"number\">7</span><span class=\"meta\">@L10</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">8</span><span class=\"meta\">@L12</span>] z = <span class=\"number\">4</span>;</span><br><span class=\"line\">[<span class=\"number\">9</span><span class=\"meta\">@L13</span>] <span class=\"keyword\">goto</span> <span class=\"number\">19</span>;</span><br><span class=\"line\">[<span class=\"number\">10</span><span class=\"meta\">@L13</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">11</span><span class=\"meta\">@L15</span>] z = <span class=\"number\">8</span>;</span><br><span class=\"line\">[<span class=\"number\">12</span><span class=\"meta\">@L15</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">13</span><span class=\"meta\">@L18</span>] z = <span class=\"number\">0</span>;</span><br><span class=\"line\">[<span class=\"number\">14</span><span class=\"meta\">@L19</span>] <span class=\"keyword\">goto</span> <span class=\"number\">19</span>;</span><br><span class=\"line\">[<span class=\"number\">15</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">goto</span> <span class=\"number\">19</span>;</span><br><span class=\"line\">[<span class=\"number\">16</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">17</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">18</span><span class=\"meta\">@L7</span>] lookupswitch (y) &#123;<span class=\"number\">2</span>-&gt;<span class=\"number\">4</span>, <span class=\"number\">4</span>-&gt;<span class=\"number\">7</span>, <span class=\"number\">8</span>-&gt;<span class=\"number\">10</span>, <span class=\"keyword\">default</span>-&gt;<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">[<span class=\"number\">19</span><span class=\"meta\">@L7</span>] nop;</span><br><span class=\"line\">[<span class=\"number\">20</span><span class=\"meta\">@L7</span>] <span class=\"keyword\">return</span>;</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/02/SPA-A3/pic8.png\" class=\"\" title=\"pic8\">\r\n<blockquote>\r\n<ul>\r\n<li>这是一个符合预期的处理, 也是一个非常自然而然的想法.</li>\r\n</ul>\r\n</blockquote>\r\n<h2 id=\"deadcodedetection\">DeadCodeDetection</h2>\r\n<p>本次实验只需要完成<code>Class DeadCodeDetection</code>中的<code>analysis()</code>方法.</p>\r\n<h3 id=\"准备工作\">准备工作</h3>\r\n<p>将A1,\r\nA2中完成的<strong>活跃变量分析</strong>和<strong>常量传播</strong>代码copy到本次实验A3的工作目录中.\r\n需要注意的是,\r\n本次活跃变量分析部分不使用<code>IteratorSovler</code>而是使用<code>BackwardWorklist</code>,\r\n此部分代码需要额外完成.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n不要过多的依赖诸如<strong>ChatGPT</strong>或<strong>Copilot</strong>的书写代码功能,\r\n其生成的代码很可能存在潜在的不易发现的bug(<del>你猜我为什么会加这个Tips</del>).\r\n实际上, <code>JetBrain IDEA</code>的成员变量和方法补全功能已经足够好使,\r\n使用<strong>Copilot</strong>的代码补全反而可能造成一些不必要的麻烦.</p>\r\n</blockquote>\r\n<h3 id=\"控制流不可达代码实现细节\">控制流不可达代码实现细节</h3>\r\n<p>实验指南已写明该部分的具体原理, 此处涉及一些实现细节.</p>\r\n<ul>\r\n<li>通过恰当的维护<code>BFSlist</code>可以仅遍历可达代码(主要处理<code>If</code>和<code>Switch</code>),\r\n因此初始化所有的<code>Stmt</code>为<code>DeadCode</code>,\r\n遍历到即排除其为死代码是一个不错的选择.</li>\r\n<li>无论使用<strong>BFS</strong>还是<strong>DFS</strong>,\r\n都要处理环路引起的<strong>Infinity Loop</strong>,\r\n一个简单的方法是创建一个<code>Traveled Set</code>保证每个<code>Stmt</code>仅会被遍历到一次(同样的,\r\n对于<code>BFSList</code>维护也可以通过类似的技巧提升效率).</li>\r\n<li>遍历一次就能得到结果依托于<strong>不需要处理由删除死代码产生的死代码</strong>(例子可见实验指南).</li>\r\n<li>关于图的遍历方式,\r\n笔者在此推荐使用<code>CFG</code>的顶层方法<code>getSuccOf()</code>和<code>getOutEdge()</code>,\r\n而不是<code>If Stmt</code>和<code>Switch Stmt</code>中的方法.\r\n这两个跳转语句的实现因为继承自<code>JumpStmt</code>所以细节上可能与想象中有所差异,\r\n如果一定要使用,\r\n还请小心谨慎的阅读<code>API</code>注释以获取详细信息.</li>\r\n<li>关于<code>ConditionExp</code>的处理,\r\n可以复用A2中实现的<code>evaluate()</code>方法.</li>\r\n</ul>\r\n<h3 id=\"无用赋值代码实现细节\">无用赋值代码实现细节</h3>\r\n<p>同上, 原理部分请参见实验指南.</p>\r\n<ul>\r\n<li>继承<code>AssignStmt</code>的子类有足足十几个,\r\n可以从lib反编译或者科研版代码中获取相关细节, 关于<strong>副作用(Side\r\nEffect)</strong>在框架代码中已给出<code>API</code>,\r\n解释了哪些派生类可能引起副作用.</li>\r\n</ul>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> true if given RValue has no side effect, otherwise false.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNoSideEffect</span><span class=\"params\">(RValue rvalue)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// new expression modifies the heap</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rvalue <span class=\"keyword\">instanceof</span> NewExp ||</span><br><span class=\"line\">            <span class=\"comment\">// cast may trigger ClassCastException</span></span><br><span class=\"line\">            rvalue <span class=\"keyword\">instanceof</span> CastExp ||</span><br><span class=\"line\">            <span class=\"comment\">// static field access may trigger class initialization</span></span><br><span class=\"line\">            <span class=\"comment\">// instance field access may trigger NPE</span></span><br><span class=\"line\">            rvalue <span class=\"keyword\">instanceof</span> FieldAccess ||</span><br><span class=\"line\">            <span class=\"comment\">// array access may trigger NPE(None Pointer Exception)</span></span><br><span class=\"line\">            rvalue <span class=\"keyword\">instanceof</span> ArrayAccess) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rvalue <span class=\"keyword\">instanceof</span> ArithmeticExp) &#123;</span><br><span class=\"line\">        ArithmeticExp.<span class=\"type\">Op</span> <span class=\"variable\">op</span> <span class=\"operator\">=</span> ((ArithmeticExp) rvalue).getOperator();</span><br><span class=\"line\">        <span class=\"comment\">// may trigger DivideByZeroException</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> op != ArithmeticExp.Op.DIV &amp;&amp; op != ArithmeticExp.Op.REM;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>小心, 不要忘记判断<code>lValue</code>是否为<code>Var</code>,\r\n与之前相同, 我们只需要处理<code>Var</code>类型的语句.</li>\r\n</ul>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>本次实验难度某种意义上低于A1, 是一个比较简单的实验,\r\n旨在考察对分析结果的应用能力. 祝早日AC!</p>"},{"title":"NJU静态分析|A4-CHA & Inter Constant Propagation","date":"2024-11-18T08:10:38.000Z","hidden":false,"_content":"\n**NJU Static Program Analysis | Assignment-4 Class Hierarchy Analysis & Interprocedural Constant Propagation.**\n\n<!--more-->\n\n## 实验信息&食用指南\n\n见本博客A1-A3.\n\n> **手册的手册不能替代手册, 看不懂的话请回去看手册. ——** [**RicoloveFeng|SPA-Freestyle-Guidance**](https://github.com/RicoloveFeng)\n\n## 实验目标\n\n基于**Tai-e** 框架实现 **CHA** & **Inter Constprop**.\n\n~~真的还有必要在记录里补充这个吗~~\n\n## 实验简析\n\n其实没什么好说的, 课程 & ppt & 指南已经讲的比较明确了, 笔者在此补充一些手册写的不明确或是略去的部分.\n\n**不过本次实验涉及不少新东西, 烦请耐心阅读相关代码API.**\n\n## Preparation\n\n从Assignment2中将`ConstPropogation.java` copy到本次实验目录对应位置.\n\n**需要注意的是, A2中不完全正确的实现可能会影响本次实验的本地测试.**\n\n## CHABuilder\n\n这部分tt老师贴心的在ppt中给好了算法框架, 对应本次的框架代码复刻即可.\n\n需要注意的是, 只有在完成了该部分后, **Tai-e**框架才能正确构建`ICFG`, 否则使用`Assignment`分析的结果只会为空.\n\n推荐完成顺序 `dispatch` -> `resolve` -> `buildCallGraph`\n\n### dispatch()\n\n可以选择递归或者循环完成该部分.\n\n- `dispatch()`可能会失败, 此时可以返回`null`, 但要确保`resolve()`中可以正确处理这一情况.\n\n    > **Additional:** 为什么可能会失败?\n    >\n    > `resolve()`中, 假设我们要处理一个`Interface`或者`Abstract`类型声明的类方法, 首先我们需要`dispatch`这个声明类本身, 易见此时应当得到`null`(接口中的方法和抽象方法无法被实例化)\n\n- `dispatch()`得到的`JMethod`如果是`Abstract`, 同样需要返回`null`.\n\n    > **Tips:** 由于OOP的机制, 当`JMethod`是`Abstract`时, 不需要继续`dispatch`了. 如果对此感到困惑可以去查阅相关的OOP资料.\n\n### resolve()\n\n- 遍历的方式自选, 笔者采用较好实现的BFS.\n\n- 尽管课上将`Interface`归入了**Virtual Invoke**, 但按照代码框架, 这部分单独作为一个需要处理的`CallKind`. 不过处理起来也并非难事, 因为处理方式和`VIRTUAL`没有实质性区别.\n\n- 需要注意的是, 框架中处理**Interface**和**Class**分别有专门的API方法, 具体使用什么API, 可以阅读`ClassHierarachy`, `CHABuilder`中也提供了访问`ClassHierarachy`的成员`private ClassHierarchy hierarchy`.\n\n- `STATIC`方法的获取在框架中没有专门的API, 但可以使用`dispatch()`获取, 因此`STATIC`和`SPRECIAL`也可以一起处理.\n\n### buildCallGraph()\n\n实现和ppt中的算法没有区别.\n\n- 判断是否可达在框架中集成到了`Class CallGraph`的`addReachableMethod()`方法中了, 可以阅读API注释获取更详细的信息.\n\n- 得到`callSite`, `callKind`的方法也可以通过`Class CallGraph`获取.~~(我看看是谁不想去读API注释)~~\n\n## InterSovler\n\n由于框架代码在`InterSovler`这一部分进行了较大幅度的重构, 因此笔者推荐先完成该部分使得对`InterConstantPropopagation`有一个自顶向下的认识.\n\n同手册所说, 该部分比起A2的`worklistSovler`没有太大的区别, 跟着手册做即可.\n\n**注意:** 该部分实例化的`private final InterDataflowAnalysis<Node, Fact> analysis`继承自`Class AbstractInterDataflowAnalysis`, 该部分的源码阅读是必不可少的.~~(这里不读在完成InterConstantPropopagation的时候也要读)~~\n\n### initialize()\n\n- 除去icfg的入口方法使用`BoundaryInit`外, 其余节点均使用`NormalInit`. 可以通过`icfg.entryMethods()`方法获取入口方法.\n\n> **Tips:** 需要注意的是`icfg.entryMethods()`返回的是`Stream`类型, 遍历该类型可以使用`forEach`. 更多关于`forEach`的信息可以查阅java的文档.\n\n```java\nicfg.entryMethods().forEach(method -> {\n    ...\n});\n```\n\n> **Confusion:** 笔者在此比较困惑为何可能会出现多个入口, 虽然在网络上查询得知java中可能不止一个`main()`方法, 但不知如何在tai-e框架中复现, 以及本次实验中的\"多个入口\"是否对应该特性.\n\n### dosolve()\n\n与A2相比, 只需要修改处理`pred Node`部分为`pred Edge`, 可以通过`getInEdgesOf()`方法获得`pred Edge`信息, 与`analysis.transferNode()`对应, 可通过`analysis.transferEdge()`来处理`pred Edge`.\n\n## InterConstantPropopagation\n\n部分API在框架中已经给出了实现, 在该部分只需要实现6个API即可.\n\n**善用A2中完成部分进行本次实验, 过程间常量传播并不影响计算常量的逻辑.**\n\n### transferCallNode() & transferNonCallNode()\n\n含义同方法名, 如果这个`Node`(即`Stmt`)是`Invoke`, 就称该`Node`为`CallNode`, 否则为`NonCallNode`.\n\n- 需要注意的是, 过程间处理的大部分操作都在`Edge`上而非`Node`上, 因此我们在`transferCallNode()`中并不会进行 add/kill def 的操作. 这一点与指南上的图片逻辑相同.\n\n![pic4-1](SPA-A4/pic4-1.png)\n\n> 如图片所示, `Node 2`在经过`transferCallNode()`后并没有把`b`添加进`outFact`.\n>\n> 尽管我们可以在这里处理, ~~但这样有可能会让你过不去oj~~, 但这样会造成逻辑上的混乱, 所有的**interprocedural** 操作都在`Edge`上进行在逻辑上是一致的. 接下来对四种`transferEdge`的处理中会解释这一点.\n\n- 所以对于非call Node, 可以直接使用过程内分析的`transferNode()`方法, 对于call Node, `transferCallNode()`只需要把`inFact` 赋值给 `outFact`即可.\n\n### transfer**Edge\n\n在完成该部分前, 要先知道该部分会在什么地方使用, 通过阅读`Class AbstractInterDataflowAnalysis`的源码API, 可以发现四种`transfer**Edge` 统一为了一个方法`transferEdge()`.(如果阅读的足够仔细, 会发现两个`NodeTransfer`的方法也被统一为了`transferNode()`)\n\n**注意:** 如手册所言, 由于java的引用机制, 不应当对第二个参数`CPFact out`做任何修改. 返回值也不应是第二个参数本身, 需要深拷贝一个`out`或者`new CPFact()`.\n\n#### transferNormalEdge()\n\n对于普通节点, 不需要对`OutFact`中的内容做修改, 直接传给`Edge`的`target`即可.\n\n> 对应上文图片中的**黑色实线**.\n\n#### transferCallToReturnEdge()\n\n在这里要处理**def kill**工作, 根据框架代码, 这里的`Stmt`一定是`Invoke`, 请阅读源码API获取使用信息.\n\n- `Invoke`继承自`DefinitionStmt`, 如何获取`def`在之前的实验中已有涉及.\n\n> 对应上文图片中的**黑色虚线**.\n\n#### transferCallEdge()\n\n负责传参中的`Var`转换.\n\n- 对于`Invoke invoke`, 可以通过`invoke.getInvokeExp().getArgs()`获取传入**实参**的信息.\n\n- 对于`JMethod callee`, 可以通过`callee.getIR().getParams()`获取调用方法的**形参**信息.\n\n- 在tai-e框架中, 保证上述形参与实参列表顺序是一一对应的. 可以根据这一特性维护传参的转换过程.\n\n> 对应上文图片中的**蓝色虚线**.\n\n#### transferReturnEdge()\n\n负责将调用方法的返回值传回`callSite`.\n\n- `Class ReturnEdge`的`getReturnVars()`的API说明讲明了为什么可能有多个返回值, 需要注意的是, 如果有多个返回值, 需要使用`cp.meetValue()`.\n\n> 对应上文图片中的**红色虚线**.\n\n## 总结\n\n过程间常量传播的思想还是比较巧妙的, 值得细心品味.\n","source":"_posts/SPA-A4.md","raw":"---\ntitle: NJU静态分析|A4-CHA & Inter Constant Propagation\ndate: 2024-11-18 16:10:38\nhidden: false\ntags:\n- NJU\n- 静态分析\ncategories:\n- NJU静态分析实验记录\n---\n\n**NJU Static Program Analysis | Assignment-4 Class Hierarchy Analysis & Interprocedural Constant Propagation.**\n\n<!--more-->\n\n## 实验信息&食用指南\n\n见本博客A1-A3.\n\n> **手册的手册不能替代手册, 看不懂的话请回去看手册. ——** [**RicoloveFeng|SPA-Freestyle-Guidance**](https://github.com/RicoloveFeng)\n\n## 实验目标\n\n基于**Tai-e** 框架实现 **CHA** & **Inter Constprop**.\n\n~~真的还有必要在记录里补充这个吗~~\n\n## 实验简析\n\n其实没什么好说的, 课程 & ppt & 指南已经讲的比较明确了, 笔者在此补充一些手册写的不明确或是略去的部分.\n\n**不过本次实验涉及不少新东西, 烦请耐心阅读相关代码API.**\n\n## Preparation\n\n从Assignment2中将`ConstPropogation.java` copy到本次实验目录对应位置.\n\n**需要注意的是, A2中不完全正确的实现可能会影响本次实验的本地测试.**\n\n## CHABuilder\n\n这部分tt老师贴心的在ppt中给好了算法框架, 对应本次的框架代码复刻即可.\n\n需要注意的是, 只有在完成了该部分后, **Tai-e**框架才能正确构建`ICFG`, 否则使用`Assignment`分析的结果只会为空.\n\n推荐完成顺序 `dispatch` -> `resolve` -> `buildCallGraph`\n\n### dispatch()\n\n可以选择递归或者循环完成该部分.\n\n- `dispatch()`可能会失败, 此时可以返回`null`, 但要确保`resolve()`中可以正确处理这一情况.\n\n    > **Additional:** 为什么可能会失败?\n    >\n    > `resolve()`中, 假设我们要处理一个`Interface`或者`Abstract`类型声明的类方法, 首先我们需要`dispatch`这个声明类本身, 易见此时应当得到`null`(接口中的方法和抽象方法无法被实例化)\n\n- `dispatch()`得到的`JMethod`如果是`Abstract`, 同样需要返回`null`.\n\n    > **Tips:** 由于OOP的机制, 当`JMethod`是`Abstract`时, 不需要继续`dispatch`了. 如果对此感到困惑可以去查阅相关的OOP资料.\n\n### resolve()\n\n- 遍历的方式自选, 笔者采用较好实现的BFS.\n\n- 尽管课上将`Interface`归入了**Virtual Invoke**, 但按照代码框架, 这部分单独作为一个需要处理的`CallKind`. 不过处理起来也并非难事, 因为处理方式和`VIRTUAL`没有实质性区别.\n\n- 需要注意的是, 框架中处理**Interface**和**Class**分别有专门的API方法, 具体使用什么API, 可以阅读`ClassHierarachy`, `CHABuilder`中也提供了访问`ClassHierarachy`的成员`private ClassHierarchy hierarchy`.\n\n- `STATIC`方法的获取在框架中没有专门的API, 但可以使用`dispatch()`获取, 因此`STATIC`和`SPRECIAL`也可以一起处理.\n\n### buildCallGraph()\n\n实现和ppt中的算法没有区别.\n\n- 判断是否可达在框架中集成到了`Class CallGraph`的`addReachableMethod()`方法中了, 可以阅读API注释获取更详细的信息.\n\n- 得到`callSite`, `callKind`的方法也可以通过`Class CallGraph`获取.~~(我看看是谁不想去读API注释)~~\n\n## InterSovler\n\n由于框架代码在`InterSovler`这一部分进行了较大幅度的重构, 因此笔者推荐先完成该部分使得对`InterConstantPropopagation`有一个自顶向下的认识.\n\n同手册所说, 该部分比起A2的`worklistSovler`没有太大的区别, 跟着手册做即可.\n\n**注意:** 该部分实例化的`private final InterDataflowAnalysis<Node, Fact> analysis`继承自`Class AbstractInterDataflowAnalysis`, 该部分的源码阅读是必不可少的.~~(这里不读在完成InterConstantPropopagation的时候也要读)~~\n\n### initialize()\n\n- 除去icfg的入口方法使用`BoundaryInit`外, 其余节点均使用`NormalInit`. 可以通过`icfg.entryMethods()`方法获取入口方法.\n\n> **Tips:** 需要注意的是`icfg.entryMethods()`返回的是`Stream`类型, 遍历该类型可以使用`forEach`. 更多关于`forEach`的信息可以查阅java的文档.\n\n```java\nicfg.entryMethods().forEach(method -> {\n    ...\n});\n```\n\n> **Confusion:** 笔者在此比较困惑为何可能会出现多个入口, 虽然在网络上查询得知java中可能不止一个`main()`方法, 但不知如何在tai-e框架中复现, 以及本次实验中的\"多个入口\"是否对应该特性.\n\n### dosolve()\n\n与A2相比, 只需要修改处理`pred Node`部分为`pred Edge`, 可以通过`getInEdgesOf()`方法获得`pred Edge`信息, 与`analysis.transferNode()`对应, 可通过`analysis.transferEdge()`来处理`pred Edge`.\n\n## InterConstantPropopagation\n\n部分API在框架中已经给出了实现, 在该部分只需要实现6个API即可.\n\n**善用A2中完成部分进行本次实验, 过程间常量传播并不影响计算常量的逻辑.**\n\n### transferCallNode() & transferNonCallNode()\n\n含义同方法名, 如果这个`Node`(即`Stmt`)是`Invoke`, 就称该`Node`为`CallNode`, 否则为`NonCallNode`.\n\n- 需要注意的是, 过程间处理的大部分操作都在`Edge`上而非`Node`上, 因此我们在`transferCallNode()`中并不会进行 add/kill def 的操作. 这一点与指南上的图片逻辑相同.\n\n![pic4-1](SPA-A4/pic4-1.png)\n\n> 如图片所示, `Node 2`在经过`transferCallNode()`后并没有把`b`添加进`outFact`.\n>\n> 尽管我们可以在这里处理, ~~但这样有可能会让你过不去oj~~, 但这样会造成逻辑上的混乱, 所有的**interprocedural** 操作都在`Edge`上进行在逻辑上是一致的. 接下来对四种`transferEdge`的处理中会解释这一点.\n\n- 所以对于非call Node, 可以直接使用过程内分析的`transferNode()`方法, 对于call Node, `transferCallNode()`只需要把`inFact` 赋值给 `outFact`即可.\n\n### transfer**Edge\n\n在完成该部分前, 要先知道该部分会在什么地方使用, 通过阅读`Class AbstractInterDataflowAnalysis`的源码API, 可以发现四种`transfer**Edge` 统一为了一个方法`transferEdge()`.(如果阅读的足够仔细, 会发现两个`NodeTransfer`的方法也被统一为了`transferNode()`)\n\n**注意:** 如手册所言, 由于java的引用机制, 不应当对第二个参数`CPFact out`做任何修改. 返回值也不应是第二个参数本身, 需要深拷贝一个`out`或者`new CPFact()`.\n\n#### transferNormalEdge()\n\n对于普通节点, 不需要对`OutFact`中的内容做修改, 直接传给`Edge`的`target`即可.\n\n> 对应上文图片中的**黑色实线**.\n\n#### transferCallToReturnEdge()\n\n在这里要处理**def kill**工作, 根据框架代码, 这里的`Stmt`一定是`Invoke`, 请阅读源码API获取使用信息.\n\n- `Invoke`继承自`DefinitionStmt`, 如何获取`def`在之前的实验中已有涉及.\n\n> 对应上文图片中的**黑色虚线**.\n\n#### transferCallEdge()\n\n负责传参中的`Var`转换.\n\n- 对于`Invoke invoke`, 可以通过`invoke.getInvokeExp().getArgs()`获取传入**实参**的信息.\n\n- 对于`JMethod callee`, 可以通过`callee.getIR().getParams()`获取调用方法的**形参**信息.\n\n- 在tai-e框架中, 保证上述形参与实参列表顺序是一一对应的. 可以根据这一特性维护传参的转换过程.\n\n> 对应上文图片中的**蓝色虚线**.\n\n#### transferReturnEdge()\n\n负责将调用方法的返回值传回`callSite`.\n\n- `Class ReturnEdge`的`getReturnVars()`的API说明讲明了为什么可能有多个返回值, 需要注意的是, 如果有多个返回值, 需要使用`cp.meetValue()`.\n\n> 对应上文图片中的**红色虚线**.\n\n## 总结\n\n过程间常量传播的思想还是比较巧妙的, 值得细心品味.\n","slug":"SPA-A4","published":1,"updated":"2024-11-18T12:00:06.297Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyun000wssil4q7y9g8y","content":"<p><strong>NJU Static Program Analysis | Assignment-4 Class Hierarchy\r\nAnalysis &amp; Interprocedural Constant Propagation.</strong></p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"实验信息食用指南\">实验信息&amp;食用指南</h2>\r\n<p>见本博客A1-A3.</p>\r\n<blockquote>\r\n<p><strong>手册的手册不能替代手册, 看不懂的话请回去看手册. ——</strong>\r\n<a\r\nhref=\"https://github.com/RicoloveFeng\"><strong>RicoloveFeng|SPA-Freestyle-Guidance</strong></a></p>\r\n</blockquote>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>Tai-e</strong> 框架实现 <strong>CHA</strong> &amp;\r\n<strong>Inter Constprop</strong>.</p>\r\n<p><del>真的还有必要在记录里补充这个吗</del></p>\r\n<h2 id=\"实验简析\">实验简析</h2>\r\n<p>其实没什么好说的, 课程 &amp; ppt &amp; 指南已经讲的比较明确了,\r\n笔者在此补充一些手册写的不明确或是略去的部分.</p>\r\n<p><strong>不过本次实验涉及不少新东西,\r\n烦请耐心阅读相关代码API.</strong></p>\r\n<h2 id=\"preparation\">Preparation</h2>\r\n<p>从Assignment2中将<code>ConstPropogation.java</code>\r\ncopy到本次实验目录对应位置.</p>\r\n<p><strong>需要注意的是,\r\nA2中不完全正确的实现可能会影响本次实验的本地测试.</strong></p>\r\n<h2 id=\"chabuilder\">CHABuilder</h2>\r\n<p>这部分tt老师贴心的在ppt中给好了算法框架,\r\n对应本次的框架代码复刻即可.</p>\r\n<p>需要注意的是, 只有在完成了该部分后,\r\n<strong>Tai-e</strong>框架才能正确构建<code>ICFG</code>,\r\n否则使用<code>Assignment</code>分析的结果只会为空.</p>\r\n<p>推荐完成顺序 <code>dispatch</code> -&gt; <code>resolve</code> -&gt;\r\n<code>buildCallGraph</code></p>\r\n<h3 id=\"dispatch\">dispatch()</h3>\r\n<p>可以选择递归或者循环完成该部分.</p>\r\n<ul>\r\n<li><p><code>dispatch()</code>可能会失败, 此时可以返回<code>null</code>,\r\n但要确保<code>resolve()</code>中可以正确处理这一情况.</p>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 为什么可能会失败?</p>\r\n<p><code>resolve()</code>中,\r\n假设我们要处理一个<code>Interface</code>或者<code>Abstract</code>类型声明的类方法,\r\n首先我们需要<code>dispatch</code>这个声明类本身,\r\n易见此时应当得到<code>null</code>(接口中的方法和抽象方法无法被实例化)</p>\r\n</blockquote></li>\r\n<li><p><code>dispatch()</code>得到的<code>JMethod</code>如果是<code>Abstract</code>,\r\n同样需要返回<code>null</code>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 由于OOP的机制,\r\n当<code>JMethod</code>是<code>Abstract</code>时,\r\n不需要继续<code>dispatch</code>了.\r\n如果对此感到困惑可以去查阅相关的OOP资料.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"resolve\">resolve()</h3>\r\n<ul>\r\n<li><p>遍历的方式自选, 笔者采用较好实现的BFS.</p></li>\r\n<li><p>尽管课上将<code>Interface</code>归入了<strong>Virtual\r\nInvoke</strong>, 但按照代码框架,\r\n这部分单独作为一个需要处理的<code>CallKind</code>.\r\n不过处理起来也并非难事,\r\n因为处理方式和<code>VIRTUAL</code>没有实质性区别.</p></li>\r\n<li><p>需要注意的是,\r\n框架中处理<strong>Interface</strong>和<strong>Class</strong>分别有专门的API方法,\r\n具体使用什么API, 可以阅读<code>ClassHierarachy</code>,\r\n<code>CHABuilder</code>中也提供了访问<code>ClassHierarachy</code>的成员<code>private ClassHierarchy hierarchy</code>.</p></li>\r\n<li><p><code>STATIC</code>方法的获取在框架中没有专门的API,\r\n但可以使用<code>dispatch()</code>获取,\r\n因此<code>STATIC</code>和<code>SPRECIAL</code>也可以一起处理.</p></li>\r\n</ul>\r\n<h3 id=\"buildcallgraph\">buildCallGraph()</h3>\r\n<p>实现和ppt中的算法没有区别.</p>\r\n<ul>\r\n<li><p>判断是否可达在框架中集成到了<code>Class CallGraph</code>的<code>addReachableMethod()</code>方法中了,\r\n可以阅读API注释获取更详细的信息.</p></li>\r\n<li><p>得到<code>callSite</code>,\r\n<code>callKind</code>的方法也可以通过<code>Class CallGraph</code>获取.<del>(我看看是谁不想去读API注释)</del></p></li>\r\n</ul>\r\n<h2 id=\"intersovler\">InterSovler</h2>\r\n<p>由于框架代码在<code>InterSovler</code>这一部分进行了较大幅度的重构,\r\n因此笔者推荐先完成该部分使得对<code>InterConstantPropopagation</code>有一个自顶向下的认识.</p>\r\n<p>同手册所说, 该部分比起A2的<code>worklistSovler</code>没有太大的区别,\r\n跟着手册做即可.</p>\r\n<p><strong>注意:</strong>\r\n该部分实例化的<code>private final InterDataflowAnalysis&lt;Node, Fact&gt; analysis</code>继承自<code>Class AbstractInterDataflowAnalysis</code>,\r\n该部分的源码阅读是必不可少的.<del>(这里不读在完成InterConstantPropopagation的时候也要读)</del></p>\r\n<h3 id=\"initialize\">initialize()</h3>\r\n<ul>\r\n<li>除去icfg的入口方法使用<code>BoundaryInit</code>外,\r\n其余节点均使用<code>NormalInit</code>.\r\n可以通过<code>icfg.entryMethods()</code>方法获取入口方法.</li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n需要注意的是<code>icfg.entryMethods()</code>返回的是<code>Stream</code>类型,\r\n遍历该类型可以使用<code>forEach</code>.\r\n更多关于<code>forEach</code>的信息可以查阅java的文档.</p>\r\n</blockquote>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">icfg.entryMethods().forEach(method -&gt; &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Confusion:</strong> 笔者在此比较困惑为何可能会出现多个入口,\r\n虽然在网络上查询得知java中可能不止一个<code>main()</code>方法,\r\n但不知如何在tai-e框架中复现,\r\n以及本次实验中的\"多个入口\"是否对应该特性.</p>\r\n</blockquote>\r\n<h3 id=\"dosolve\">dosolve()</h3>\r\n<p>与A2相比,\r\n只需要修改处理<code>pred Node</code>部分为<code>pred Edge</code>,\r\n可以通过<code>getInEdgesOf()</code>方法获得<code>pred Edge</code>信息,\r\n与<code>analysis.transferNode()</code>对应,\r\n可通过<code>analysis.transferEdge()</code>来处理<code>pred Edge</code>.</p>\r\n<h2 id=\"interconstantpropopagation\">InterConstantPropopagation</h2>\r\n<p>部分API在框架中已经给出了实现, 在该部分只需要实现6个API即可.</p>\r\n<p><strong>善用A2中完成部分进行本次实验,\r\n过程间常量传播并不影响计算常量的逻辑.</strong></p>\r\n<h3 id=\"transfercallnode-transfernoncallnode\">transferCallNode() &amp;\r\ntransferNonCallNode()</h3>\r\n<p>含义同方法名,\r\n如果这个<code>Node</code>(即<code>Stmt</code>)是<code>Invoke</code>,\r\n就称该<code>Node</code>为<code>CallNode</code>,\r\n否则为<code>NonCallNode</code>.</p>\r\n<ul>\r\n<li>需要注意的是,\r\n过程间处理的大部分操作都在<code>Edge</code>上而非<code>Node</code>上,\r\n因此我们在<code>transferCallNode()</code>中并不会进行 add/kill def\r\n的操作. 这一点与指南上的图片逻辑相同.</li>\r\n</ul>\r\n<img src=\"/2024/11/18/SPA-A4/pic4-1.png\" class=\"\" title=\"pic4-1\">\r\n<blockquote>\r\n<p>如图片所示,\r\n<code>Node 2</code>在经过<code>transferCallNode()</code>后并没有把<code>b</code>添加进<code>outFact</code>.</p>\r\n<p>尽管我们可以在这里处理, <del>但这样有可能会让你过不去oj</del>,\r\n但这样会造成逻辑上的混乱, 所有的<strong>interprocedural</strong>\r\n操作都在<code>Edge</code>上进行在逻辑上是一致的.\r\n接下来对四种<code>transferEdge</code>的处理中会解释这一点.</p>\r\n</blockquote>\r\n<ul>\r\n<li>所以对于非call Node,\r\n可以直接使用过程内分析的<code>transferNode()</code>方法, 对于call Node,\r\n<code>transferCallNode()</code>只需要把<code>inFact</code> 赋值给\r\n<code>outFact</code>即可.</li>\r\n</ul>\r\n<h3 id=\"transferedge\">transfer**Edge</h3>\r\n<p>在完成该部分前, 要先知道该部分会在什么地方使用,\r\n通过阅读<code>Class AbstractInterDataflowAnalysis</code>的源码API,\r\n可以发现四种<code>transfer**Edge</code>\r\n统一为了一个方法<code>transferEdge()</code>.(如果阅读的足够仔细,\r\n会发现两个<code>NodeTransfer</code>的方法也被统一为了<code>transferNode()</code>)</p>\r\n<p><strong>注意:</strong> 如手册所言, 由于java的引用机制,\r\n不应当对第二个参数<code>CPFact out</code>做任何修改.\r\n返回值也不应是第二个参数本身,\r\n需要深拷贝一个<code>out</code>或者<code>new CPFact()</code>.</p>\r\n<h4 id=\"transfernormaledge\">transferNormalEdge()</h4>\r\n<p>对于普通节点, 不需要对<code>OutFact</code>中的内容做修改,\r\n直接传给<code>Edge</code>的<code>target</code>即可.</p>\r\n<blockquote>\r\n<p>对应上文图片中的<strong>黑色实线</strong>.</p>\r\n</blockquote>\r\n<h4 id=\"transfercalltoreturnedge\">transferCallToReturnEdge()</h4>\r\n<p>在这里要处理<strong>def kill</strong>工作, 根据框架代码,\r\n这里的<code>Stmt</code>一定是<code>Invoke</code>,\r\n请阅读源码API获取使用信息.</p>\r\n<ul>\r\n<li><code>Invoke</code>继承自<code>DefinitionStmt</code>,\r\n如何获取<code>def</code>在之前的实验中已有涉及.</li>\r\n</ul>\r\n<blockquote>\r\n<p>对应上文图片中的<strong>黑色虚线</strong>.</p>\r\n</blockquote>\r\n<h4 id=\"transfercalledge\">transferCallEdge()</h4>\r\n<p>负责传参中的<code>Var</code>转换.</p>\r\n<ul>\r\n<li><p>对于<code>Invoke invoke</code>,\r\n可以通过<code>invoke.getInvokeExp().getArgs()</code>获取传入<strong>实参</strong>的信息.</p></li>\r\n<li><p>对于<code>JMethod callee</code>,\r\n可以通过<code>callee.getIR().getParams()</code>获取调用方法的<strong>形参</strong>信息.</p></li>\r\n<li><p>在tai-e框架中, 保证上述形参与实参列表顺序是一一对应的.\r\n可以根据这一特性维护传参的转换过程.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p>对应上文图片中的<strong>蓝色虚线</strong>.</p>\r\n</blockquote>\r\n<h4 id=\"transferreturnedge\">transferReturnEdge()</h4>\r\n<p>负责将调用方法的返回值传回<code>callSite</code>.</p>\r\n<ul>\r\n<li><code>Class ReturnEdge</code>的<code>getReturnVars()</code>的API说明讲明了为什么可能有多个返回值,\r\n需要注意的是, 如果有多个返回值,\r\n需要使用<code>cp.meetValue()</code>.</li>\r\n</ul>\r\n<blockquote>\r\n<p>对应上文图片中的<strong>红色虚线</strong>.</p>\r\n</blockquote>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>过程间常量传播的思想还是比较巧妙的, 值得细心品味.</p>\r\n","length":1738,"excerpt":"<p><strong>NJU Static Program Analysis | Assignment-4 Class Hierarchy\r\nAnalysis &amp; Interprocedural Constant Propagation.</strong></p>","more":"<h2 id=\"实验信息食用指南\">实验信息&amp;食用指南</h2>\r\n<p>见本博客A1-A3.</p>\r\n<blockquote>\r\n<p><strong>手册的手册不能替代手册, 看不懂的话请回去看手册. ——</strong>\r\n<a\r\nhref=\"https://github.com/RicoloveFeng\"><strong>RicoloveFeng|SPA-Freestyle-Guidance</strong></a></p>\r\n</blockquote>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>Tai-e</strong> 框架实现 <strong>CHA</strong> &amp;\r\n<strong>Inter Constprop</strong>.</p>\r\n<p><del>真的还有必要在记录里补充这个吗</del></p>\r\n<h2 id=\"实验简析\">实验简析</h2>\r\n<p>其实没什么好说的, 课程 &amp; ppt &amp; 指南已经讲的比较明确了,\r\n笔者在此补充一些手册写的不明确或是略去的部分.</p>\r\n<p><strong>不过本次实验涉及不少新东西,\r\n烦请耐心阅读相关代码API.</strong></p>\r\n<h2 id=\"preparation\">Preparation</h2>\r\n<p>从Assignment2中将<code>ConstPropogation.java</code>\r\ncopy到本次实验目录对应位置.</p>\r\n<p><strong>需要注意的是,\r\nA2中不完全正确的实现可能会影响本次实验的本地测试.</strong></p>\r\n<h2 id=\"chabuilder\">CHABuilder</h2>\r\n<p>这部分tt老师贴心的在ppt中给好了算法框架,\r\n对应本次的框架代码复刻即可.</p>\r\n<p>需要注意的是, 只有在完成了该部分后,\r\n<strong>Tai-e</strong>框架才能正确构建<code>ICFG</code>,\r\n否则使用<code>Assignment</code>分析的结果只会为空.</p>\r\n<p>推荐完成顺序 <code>dispatch</code> -&gt; <code>resolve</code> -&gt;\r\n<code>buildCallGraph</code></p>\r\n<h3 id=\"dispatch\">dispatch()</h3>\r\n<p>可以选择递归或者循环完成该部分.</p>\r\n<ul>\r\n<li><p><code>dispatch()</code>可能会失败, 此时可以返回<code>null</code>,\r\n但要确保<code>resolve()</code>中可以正确处理这一情况.</p>\r\n<blockquote>\r\n<p><strong>Additional:</strong> 为什么可能会失败?</p>\r\n<p><code>resolve()</code>中,\r\n假设我们要处理一个<code>Interface</code>或者<code>Abstract</code>类型声明的类方法,\r\n首先我们需要<code>dispatch</code>这个声明类本身,\r\n易见此时应当得到<code>null</code>(接口中的方法和抽象方法无法被实例化)</p>\r\n</blockquote></li>\r\n<li><p><code>dispatch()</code>得到的<code>JMethod</code>如果是<code>Abstract</code>,\r\n同样需要返回<code>null</code>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 由于OOP的机制,\r\n当<code>JMethod</code>是<code>Abstract</code>时,\r\n不需要继续<code>dispatch</code>了.\r\n如果对此感到困惑可以去查阅相关的OOP资料.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"resolve\">resolve()</h3>\r\n<ul>\r\n<li><p>遍历的方式自选, 笔者采用较好实现的BFS.</p></li>\r\n<li><p>尽管课上将<code>Interface</code>归入了<strong>Virtual\r\nInvoke</strong>, 但按照代码框架,\r\n这部分单独作为一个需要处理的<code>CallKind</code>.\r\n不过处理起来也并非难事,\r\n因为处理方式和<code>VIRTUAL</code>没有实质性区别.</p></li>\r\n<li><p>需要注意的是,\r\n框架中处理<strong>Interface</strong>和<strong>Class</strong>分别有专门的API方法,\r\n具体使用什么API, 可以阅读<code>ClassHierarachy</code>,\r\n<code>CHABuilder</code>中也提供了访问<code>ClassHierarachy</code>的成员<code>private ClassHierarchy hierarchy</code>.</p></li>\r\n<li><p><code>STATIC</code>方法的获取在框架中没有专门的API,\r\n但可以使用<code>dispatch()</code>获取,\r\n因此<code>STATIC</code>和<code>SPRECIAL</code>也可以一起处理.</p></li>\r\n</ul>\r\n<h3 id=\"buildcallgraph\">buildCallGraph()</h3>\r\n<p>实现和ppt中的算法没有区别.</p>\r\n<ul>\r\n<li><p>判断是否可达在框架中集成到了<code>Class CallGraph</code>的<code>addReachableMethod()</code>方法中了,\r\n可以阅读API注释获取更详细的信息.</p></li>\r\n<li><p>得到<code>callSite</code>,\r\n<code>callKind</code>的方法也可以通过<code>Class CallGraph</code>获取.<del>(我看看是谁不想去读API注释)</del></p></li>\r\n</ul>\r\n<h2 id=\"intersovler\">InterSovler</h2>\r\n<p>由于框架代码在<code>InterSovler</code>这一部分进行了较大幅度的重构,\r\n因此笔者推荐先完成该部分使得对<code>InterConstantPropopagation</code>有一个自顶向下的认识.</p>\r\n<p>同手册所说, 该部分比起A2的<code>worklistSovler</code>没有太大的区别,\r\n跟着手册做即可.</p>\r\n<p><strong>注意:</strong>\r\n该部分实例化的<code>private final InterDataflowAnalysis&lt;Node, Fact&gt; analysis</code>继承自<code>Class AbstractInterDataflowAnalysis</code>,\r\n该部分的源码阅读是必不可少的.<del>(这里不读在完成InterConstantPropopagation的时候也要读)</del></p>\r\n<h3 id=\"initialize\">initialize()</h3>\r\n<ul>\r\n<li>除去icfg的入口方法使用<code>BoundaryInit</code>外,\r\n其余节点均使用<code>NormalInit</code>.\r\n可以通过<code>icfg.entryMethods()</code>方法获取入口方法.</li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n需要注意的是<code>icfg.entryMethods()</code>返回的是<code>Stream</code>类型,\r\n遍历该类型可以使用<code>forEach</code>.\r\n更多关于<code>forEach</code>的信息可以查阅java的文档.</p>\r\n</blockquote>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">icfg.entryMethods().forEach(method -&gt; &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Confusion:</strong> 笔者在此比较困惑为何可能会出现多个入口,\r\n虽然在网络上查询得知java中可能不止一个<code>main()</code>方法,\r\n但不知如何在tai-e框架中复现,\r\n以及本次实验中的\"多个入口\"是否对应该特性.</p>\r\n</blockquote>\r\n<h3 id=\"dosolve\">dosolve()</h3>\r\n<p>与A2相比,\r\n只需要修改处理<code>pred Node</code>部分为<code>pred Edge</code>,\r\n可以通过<code>getInEdgesOf()</code>方法获得<code>pred Edge</code>信息,\r\n与<code>analysis.transferNode()</code>对应,\r\n可通过<code>analysis.transferEdge()</code>来处理<code>pred Edge</code>.</p>\r\n<h2 id=\"interconstantpropopagation\">InterConstantPropopagation</h2>\r\n<p>部分API在框架中已经给出了实现, 在该部分只需要实现6个API即可.</p>\r\n<p><strong>善用A2中完成部分进行本次实验,\r\n过程间常量传播并不影响计算常量的逻辑.</strong></p>\r\n<h3 id=\"transfercallnode-transfernoncallnode\">transferCallNode() &amp;\r\ntransferNonCallNode()</h3>\r\n<p>含义同方法名,\r\n如果这个<code>Node</code>(即<code>Stmt</code>)是<code>Invoke</code>,\r\n就称该<code>Node</code>为<code>CallNode</code>,\r\n否则为<code>NonCallNode</code>.</p>\r\n<ul>\r\n<li>需要注意的是,\r\n过程间处理的大部分操作都在<code>Edge</code>上而非<code>Node</code>上,\r\n因此我们在<code>transferCallNode()</code>中并不会进行 add/kill def\r\n的操作. 这一点与指南上的图片逻辑相同.</li>\r\n</ul>\r\n<img src=\"/2024/11/18/SPA-A4/pic4-1.png\" class=\"\" title=\"pic4-1\">\r\n<blockquote>\r\n<p>如图片所示,\r\n<code>Node 2</code>在经过<code>transferCallNode()</code>后并没有把<code>b</code>添加进<code>outFact</code>.</p>\r\n<p>尽管我们可以在这里处理, <del>但这样有可能会让你过不去oj</del>,\r\n但这样会造成逻辑上的混乱, 所有的<strong>interprocedural</strong>\r\n操作都在<code>Edge</code>上进行在逻辑上是一致的.\r\n接下来对四种<code>transferEdge</code>的处理中会解释这一点.</p>\r\n</blockquote>\r\n<ul>\r\n<li>所以对于非call Node,\r\n可以直接使用过程内分析的<code>transferNode()</code>方法, 对于call Node,\r\n<code>transferCallNode()</code>只需要把<code>inFact</code> 赋值给\r\n<code>outFact</code>即可.</li>\r\n</ul>\r\n<h3 id=\"transferedge\">transfer**Edge</h3>\r\n<p>在完成该部分前, 要先知道该部分会在什么地方使用,\r\n通过阅读<code>Class AbstractInterDataflowAnalysis</code>的源码API,\r\n可以发现四种<code>transfer**Edge</code>\r\n统一为了一个方法<code>transferEdge()</code>.(如果阅读的足够仔细,\r\n会发现两个<code>NodeTransfer</code>的方法也被统一为了<code>transferNode()</code>)</p>\r\n<p><strong>注意:</strong> 如手册所言, 由于java的引用机制,\r\n不应当对第二个参数<code>CPFact out</code>做任何修改.\r\n返回值也不应是第二个参数本身,\r\n需要深拷贝一个<code>out</code>或者<code>new CPFact()</code>.</p>\r\n<h4 id=\"transfernormaledge\">transferNormalEdge()</h4>\r\n<p>对于普通节点, 不需要对<code>OutFact</code>中的内容做修改,\r\n直接传给<code>Edge</code>的<code>target</code>即可.</p>\r\n<blockquote>\r\n<p>对应上文图片中的<strong>黑色实线</strong>.</p>\r\n</blockquote>\r\n<h4 id=\"transfercalltoreturnedge\">transferCallToReturnEdge()</h4>\r\n<p>在这里要处理<strong>def kill</strong>工作, 根据框架代码,\r\n这里的<code>Stmt</code>一定是<code>Invoke</code>,\r\n请阅读源码API获取使用信息.</p>\r\n<ul>\r\n<li><code>Invoke</code>继承自<code>DefinitionStmt</code>,\r\n如何获取<code>def</code>在之前的实验中已有涉及.</li>\r\n</ul>\r\n<blockquote>\r\n<p>对应上文图片中的<strong>黑色虚线</strong>.</p>\r\n</blockquote>\r\n<h4 id=\"transfercalledge\">transferCallEdge()</h4>\r\n<p>负责传参中的<code>Var</code>转换.</p>\r\n<ul>\r\n<li><p>对于<code>Invoke invoke</code>,\r\n可以通过<code>invoke.getInvokeExp().getArgs()</code>获取传入<strong>实参</strong>的信息.</p></li>\r\n<li><p>对于<code>JMethod callee</code>,\r\n可以通过<code>callee.getIR().getParams()</code>获取调用方法的<strong>形参</strong>信息.</p></li>\r\n<li><p>在tai-e框架中, 保证上述形参与实参列表顺序是一一对应的.\r\n可以根据这一特性维护传参的转换过程.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p>对应上文图片中的<strong>蓝色虚线</strong>.</p>\r\n</blockquote>\r\n<h4 id=\"transferreturnedge\">transferReturnEdge()</h4>\r\n<p>负责将调用方法的返回值传回<code>callSite</code>.</p>\r\n<ul>\r\n<li><code>Class ReturnEdge</code>的<code>getReturnVars()</code>的API说明讲明了为什么可能有多个返回值,\r\n需要注意的是, 如果有多个返回值,\r\n需要使用<code>cp.meetValue()</code>.</li>\r\n</ul>\r\n<blockquote>\r\n<p>对应上文图片中的<strong>红色虚线</strong>.</p>\r\n</blockquote>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>过程间常量传播的思想还是比较巧妙的, 值得细心品味.</p>"},{"title":"NJU静态分析|A5-Context Insensitive Pointer Analysis","date":"2024-11-27T06:38:06.000Z","hidden":false,"_content":"\n**NJU Static Program Analysis | Assignment-5 Context Insensitive Pointer Analysis.**\n\n<!--more-->\n\n> 这些规则与你在课上所学到的规则非常相似 **（甚至更简单）**.  ——A5实验指南\n\n对......对吗？\n\n## 实验目标\n\n基于**tai-e**框架实现非上下文敏感的指针分析.\n\n## Preparation\n\n**Hint:** A5和A6不再像之前的实验般友好, 没有理解上课时所讲算法, 实验指南或框架代码的人会被这两次实验狠狠地拷打.(笔者已感到有些汗流浃背了)\n\n## 算法理论\n\n### 算法伪代码\n\n![pic1-1](SPA-A5/pic1-1.png)\n\n![pic1-2](SPA-A5/pic1-2.png)\n\n### 规则形式化表述\n\n#### 分析语句类型\n\n![pic1-3](SPA-A5/pic1-3.png)\n\n#### 符号体系\n\n![pic1-4](SPA-A5/pic1-4.png)\n\n#### 对象传递规则\n\n|Kind|Stmt|Rule|PFG Edge|\n|:---:|:---:|:---:|:---:|\n|New|`i : x = new T()`|$\\dfrac{}{o_i \\in pt(x)}$|$\\text{N/A}$|\n|Assign|`x = y`|$\\dfrac{o_i \\in pt(y)}{o_i \\in pt(x)}$|$x \\leftarrow y$|\n|Field Store|`x.f = y`|$\\dfrac{o_i \\in pt(x),\\ o_j \\in pt(y)}{o_j \\in pt(o_i.f)}$|$y \\leftarrow o_i.f$|\n|Field Load|`y = x.f`|$\\dfrac{o_i \\in pt(x),\\ o_j \\in pt(o_i.f)}{o_j \\in pt(y)}$|$y \\leftarrow o_i.f$|\n|Static Store|`T.f = y`|$\\dfrac{o_i \\in pt(y)}{o_i \\in pt(T.f)}$|$T.f \\leftarrow y$|\n|Static Load|`y = T.f`|$\\dfrac{o_i \\in pt(T.f)}{o_i \\in pt(y)}$|$y \\leftarrow T.f$|\n|Array Store|`x[i] = y`|$\\dfrac{o_u \\in pt(x),\\ i_v \\in pt(y)}{o_v \\in pt(o_u[*])}$|$o_u[*] \\leftarrow y$|\n|Array Load|`y = x[i]`|$\\dfrac{o_u \\in pt(x),\\ o_v \\in pt(o_u[*])}{o_v \\in pt(y)}$|$y \\leftarrow o_u[*]$|\n|Call|`l : r = x.k(a1, ..., an)`|$\\dfrac{\\begin{array}{c} o_i \\in pt(x),\\ m = Dispatch(o_i,\\ k),\\\\ o_u \\in pt(aj),\\ i \\leq j \\leq n,\\\\ o_v \\in pt(m_{ret})\\end{array}}{\\begin{array}{c} o_i \\in pt(m_{this}),\\\\ o_u \\in pt(m_{pj}),\\ 1 \\leq j \\leq n,\\\\ o_v \\in pt(r)\\end{array}}$|$\\begin{array}{c}a1 \\rightarrow m_{p1} \\\\ ... \\\\ an \\rightarrow m_{pn} \\\\ r \\leftarrow m_{ret}\\end{array}$|\n|Static Call|`r = T.k(a1, ..., an)`|$\\dfrac{\\begin{array}{c} o_u \\in pt(aj),\\ i \\leq j \\leq n,\\\\ o_v \\in pt(m_{ret}) \\end{array}}{\\begin{array}{c} o_u \\in pt(m_{pj}),\\ 1 \\leq j \\leq n,\\\\ o_v \\in pt(r) \\end{array}}$|$\\begin{array}{c} a1 \\rightarrow m_{p1} \\\\ ... \\\\ an \\rightarrow m_{pn} \\\\ r \\leftarrow m_{ret} \\end{array}$|\n\n## 部分框架代码带读\n\n该部分是为分析实际伪代码的书写, 因为课程上的算法和框架中的实现不完全一致, 主要体现在 **Stmt in Method** 这一部分. 笔者就部分关键框架代码进行讲解.\n\n### 概览\n\n`graph.callgraph`, `ir`包中的大部分文件在先前的实验中已经了解, 如有遗忘或模糊可以参考先前的实验指南或自行阅读相关框架代码.\n\n**着重注意** `Stmt`的层次结构和`Stmt`中包含的信息类型的继承关系(如`Var`, `LValue`等), 以及`JMethod`和`IR`相关信息, 较为重要的是在A4中如何获取形参和实参.\n\n新的文件主要集中在`pta`包中, 笔者在此着重介绍该部分.\n\n### Pointer & PointsToSet\n\n指针分析中最重要的两个类型, 前者是在指针流图中的节点, 后者存储指向信息.\n\n在框架代码中, 每个`Pointer`包含一个`PointsToSet`实例, 包含该指针指向的对象信息.\n\n通过阅读`pointsToSet`源码, 不难看出是由基本的`Set`实例化得到, 支持`Set`的常规基本操作.\n\n#### VarPtr & InstanceField & StaticField & ArrayIndex\n\n代表了四种指针类型, 均继承自`Pointer`.\n\n与`Pointer`相比没有太大的不同, 仅根据类型不同添加了如何获取指针信息的API.\n\n### PointerFlowGraph\n\n本次实验中最重要的类之一, 存储了指针分析过程中的指针流信息.\n\n其实现运用了多个`Map`, 其提供的API包括两类:\n\n- 图结构的`addEdge()`和`getSuccOf()`, 这两个API可以修改和遍历**PFG**.\n\n- 图信息的四种`get`方法, 由于`JMethod`,`IR`以及`Obj`与`Pointer`并不是直接关联, 该类方法提供了一个获取对应类型指针的API.\n    > **Tips:** 举个例子, 对于`Stmt`类型的Assign语句`x = y`, 可以解析得到`Var`类型的`x`和`y`, 通过`getVarPtr()`方法就可以得到`Var`类型的`x`,`y`在**PFG**中对应的指针.\n\n### CIPTA & CIPTAResult & ResultProcessor\n\n这些类与实现的核心逻辑联系不大, 这三个类负责处理指针分析算法的前后工作, 提供了初始化, 执行指针分析和解析指针分析结果的API. 更具体的信息可以阅读框架代码.\n\n### HeapModel & Obj\n\n该部分对应了指针分析原理中的**堆抽象**部分.\n\n内部涉及的API比较简单, 且大多数不需要关注, 需要注意的是\n\n```java\nclass HeapModel{\n    ...\n    /**\n     * @return the abstract object for given new statement.\n     */\n    Obj getObj(New allocSite);\n    ...\n}\n```\n\n该方法提供了获取`Stmt New`语句创建的对象的API.\n\n> **Tips:** 指针分析中最特殊的语句便是`New`, 只有`New`语句可以创建对象, 指针流图中所有的对象均是由`New`方法创建出来的. 因此只有`New`语句需要通过与**抽象堆**交互获取对象, 其余语句获取对象均由**PFG**中传递得到.\n\n### Stmt Package\n\n本次实验所涉及的`Stmt`类型继承关系为`Stmt->AbstractStmt->DefinitionStmt->AssignStmt->(FieldStmt)`\n\n其中大部分API在之前的实验中已经熟悉了. 以下介绍一些本实验中可能涉及的细节.\n\n#### FieldStmt\n\n该类提供了`getFieldAccess()`和`getFieldRef()`, 其中后者比较重要, 可以通过`fieldStmt.getFieldRef().resolve()`获得`JField field`.(实验指南中已指出)\n\n#### accept() *可选\n\n详见[**StmtVisitor**](#stmtvisitor-可选)\n\n### WorkList\n\n对应算法伪代码中的WorkList. (笔者较为疑惑为何其内部节点称为`Entry`)\n\n### CallGraph & AbstractCallGraph & DefaultCallGraph\n\nCallGraph在实验A4中已经接触过了, 笔者在此不再赘述.\n\n### StmtVisitor *可选\n\n访问者模式不是完成本实验必要的部分, 如果不打算使用访问者模式, 可以跳过这一部分.\n\n`Solver`中的`class StmtProcessor`继承自该类, 用以实现**访问者设计模式**. 内部重载了多个`visit()`方法, 用以访问不同的类型.\n\n需要注意的是, 访问者模式需要被访问的类支持这一设计, 具体表现为其包含`accept()`方法.\n\n访问者用以优雅地替代大量`instanceof`的判断, 由**访问类**(本次实验中为`class StmtProcessor`)的函数重载巧妙地避开大量的类型判定.\n\n笔者在此以`New`,`Copy`和`StmtProcessor`为例具体说明.\n\n在本次实验中, `addReachable()`需要遍历新方法中的所有语句, 对不同语句做不同处理.\n\n![pic1-5](SPA-A5/pic1-5.png)\n\n显然这些处理从封装的角度看不应当嵌入到`New`和`Assign`类的内部, 而是应当放在外部进行处理, 那么如果不使用访问者模式, 写出来的代码大概是长这样的:\n\n```java\nfor(Stmt stmt : method.getIR().getStmts()){\n    if (stmt instanceof New newStmt){\n        ...\n    }\n    else if(stmt instanceof Assign assignStmt){\n        ...\n    }\n    else{\n        ...\n    }\n}\n```\n\n这样的代码一点也不优雅, 充斥着大量的冗余判断. 访问者模式可以很好的解决这个问题.\n\n```java\nclass New{\n    ...\n\n    public <T> T accept(StmtVisitor<T> visitor) {\n        return visitor.visit(this);\n    }\n}\n//此处略去Assign\npublic interface StmtVisitor<T> {\n    T visit(New stmt);\n    T visit(Assign stmt);\n    ...\n}\nclass StmtProcessor implements StmtVisitor<Void>{\n    Void visit(New stmt){\n        //handle new stmt\n    }\n    Void visit(Assign stmt){\n        //handle assign stmt\n    }\n}\n```\n\n此时将遍历`Stmt`的代码改为\n\n```java\nfor(Stmt stmt : method.getIR().getStmts()){\n    stmt.accept(stmtProcessor); // 已经实例化过了\n}\n```\n\n这段代码的逻辑应该是不难理解的, 在`instanceof`实现的遍历中, 就好像是一个提供多种服务的公司, 挨个询问客户购买的是什么服务然后提供服务(在这里简单假设每家只购买了一种服务).而访问者模式中, 客户向公司发送\"请求\", 公司从多个服务中选择正确的为客户进行服务(函数重载).\n\n在访问者模式中, `New`和`Assign`通过`accept()`方法向`StmtProcessor`提供了自己的类型, 并在该方法中调用来自`StmtProcessor`的处理方法`visit()`. 从面向对象设计角度来看, 是一种优于前者的设计模式.\n\n## 框架代码中的算法\n\n### S & S_m\n\n> 这里部分参考了[**RicoloveFeng|SPA-Freestyle-Guidance**](https://github.com/RicoloveFeng)中的内容.\n\n这里是与课上讲述的算法区别最大的地方. 阅读`Sovler`中的代码, 发现该部分是不存在对应关系的.\n\n重读定义`Var`的文件, 会发现一些之前没有用到的函数在本次实验中利用了起来, 如`addLoadField()`, `getLoadFields()`.\n\n这些方法就是\"隐式\"维护S和S_m的API(说**隐式**是因为对于完成实验来说, 该部分不需要详细了解).\n\n这部分实现了S和S_m的\"自动\"维护, 即通过生成**IR**, 和`CallGraph`中的`addMethod()`进行维护. 具体的细节可以阅读源码.\n\n对于完成本次实验来说, 只需要知道不需要处理有关S和S_m的工作了, 在需要获取相关信息时, 直接通过`Var`中的`getXXX()`获取即可.\n\n### 基于框架代码的算法伪代码\n\n**Tips:** 该部分的代码不会严格遵循框架代码中的API, 仅作示例.\n\n**推荐完成顺序:** 优先实现顶层方法`analysis()`\n\n#### analysis()\n\n```java\nvoid analysis(){\n    // 所有的初始化工作框架代码中已经完成, 包括添加Entry Method\n    // 这里只需要处理while WorkList NOT Empty即可\n    while(WorkList.isNotEmpty()){\n        <n, pts> = WorkList.poll() // <Pointer, PointsToSet>\n        delta_pts = propagate(n, pts)\n        if(n instanceof VarPtr x){\n            foreach oi in delta_pts do{\n                foreach x.getStoreFields() do\n                    // x.f = y\n                    addEdge(y, oi.f)\n                foreach x.getLoadFields() do\n                    // y = x.f\n                    addEdge(oi.f, y)\n                foreach x.getStoreArrays() do\n                    // x[i] = y\n                    addEdge(y, oi[*])\n                foreach x.getLoadArrays() do\n                    // y = x[i]\n                    addEdge(oi[*], y)\n\n                processCall(x, oi);\n            }\n        }\n    }\n}\n```\n\n该部分的逻辑比较简单, 照着算法写就行, 获取跟`Var x`相关的`Stmt`的方法在[**S & S_m**](#s--s_m)部分已经讲过, 此处不再赘述.\n\n不要忘记依手册在此处完成对Array的处理.\n\n#### addPFGEdge()\n\n```java\nvoid addPFGEdge(Pointer source, Pointer target){\n    if (pointerFlowGraph.addEdge(source, target)){\n        // form API: true mean not include\n        if (source.getPointsToSet().isNotEmpty()){\n            WorkList.add(<target, source_pts>) // <Pointer, PointsToSet>\n        }\n    }\n}\n```\n\n同样是照着算法写即可.\n\n#### propagate()\n\n```java\nPointsToSet propagate(Pointer pointer, PointsToSet pointsToSet){\n    delta_pts = pointsToSet - pointer.getPointsToSet();\n\n    pointer_pts += delta_pts;\n\n    foreach pointerpointerFlowGraph.getSuccsOf(pointer) do\n        //succ of pointer node\n        WorkList.add(<succ, delta_pts>) // <Pointer, PointsToSet>\n}\n```\n\n#### processCall\n\n```java\nvoid processCall(Var var, Obj recv) {\n    foreach var.var.getInvokes() do\n        // [invoke] l: r = x.k(a1,..., an)\n        JMethod method = resolveCallee(recv, invoke)\n        if(method thisVar is not empty){\n            //means is not Static\n            //also can use !invoke.isStatic()\n            workList.add(<method_this, recv>);\n            if(callGraph.addEdge(new Edge(callKind, invoke, method))){\n                //transfer paramters & return Var\n                foreach paramters : addEdge();\n                returnVar : addEdge();\n            }\n        }\n}\n```\n\n有一些细节需要注意:\n\n- 如何处理`JMethod`在A4中已经接触过了, 可以通过`method.getIR().getThis()`获取该方法的this Var, 然后再通过**PFG**就能获取this Pointer了. 如果还有印象的话, A4中通过`CallGraphs.getCallKind()`来获取`CallKind`, 在本次实验沿用该方法即可.\n- 在这里不处理Static Call, 通过判断是否存在this指针, `isStatic()`方法都可以判断(尽管从实际上分析, 此处不应该也不可能出现Static Call)\n- 之后的处理参数和返回值同A4, 同样需要注意返回值是否被丢弃或有复数个返回值.\n\n#### addReachable()\n\n如果不使用访问者模式:\n\n```java\nvoid addReachable(JMethod method) {\n    if (callGraph.addReachableMethod(method)){\n        //form API : true means not include\n        for(Stmt stmt : method.getIR().getStmts()){\n            if(stmt instanceof New){\n                WorkList.add(stmt_def, obj)\n            }\n            if(stmt instanceof Assign){\n                addEdge(right, left)\n            }\n            if(stmt instanceof StoreField && isStatic){\n                addEdge(right, left)\n            }\n            if(stmt instanceof LoadField && isStatic){\n                addEdge(right, left)\n            }\n            if(stmt instanceof Invoke && isStatic){\n                //same as processCall\n                //except do not need to add <this, obj> to workList\n            }\n        }\n    }\n}\n```\n\n如果使用访问者模式:\n\n```java\nvoid addReachable(JMethod method) {\n    if (callGraph.addReachableMethod(method)){\n        for(Stmt stmt : method.getIR().getStmts()){\n            stmt.accept(stmtProcessor);\n        }\n    }\n}\n```\n\n逻辑同不使用访问模式的`instanceof`成立后执行的方法. 将这些方法写进`StmtProcessor`中的`visit()`即可.\n\n> **Tips:** 为什么要在这里处理静态方法和字段?\n>\n> 在回答这个问题之前, 不妨思考一下为什么非静态指针要在`analysis()`中如此处理. 因为不论是字段还是方法, 都需要\"resolve\"到一个确定的结果时, 才能进行分析和对象传递. 而静态方法和静态字段的对象是唯一确定的, 在遍历到一个新方法时只需要处理一次.\n\n- 框架代码中的`CallGraph`包含了`RM`, 阅读相关API以获取详细信息.\n- 如何根据`Stmt`信息获取指针`Pointer`的方法在上文框架代码分析中已经指出. 如果该方法在后期完成, 此时应当已经知道如何获取所需参数和类型.\n- 需要注意的是在此仍然需要通过`resolveCallee()`方法获得静态方法, 参数设置为`recv = null`即可.\n\n## 总结\n\n指针分析还是相当硬核的, 尽管实验框架已经化简了其中部分内容, 这仍然是一个较困难的实验.\n","source":"_posts/SPA-A5.md","raw":"---\ntitle: NJU静态分析|A5-Context Insensitive Pointer Analysis\ndate: 2024-11-27 14:38:06\nhidden: false\ntags:\n- NJU\n- 静态分析\ncategories:\n- NJU静态分析实验记录\n---\n\n**NJU Static Program Analysis | Assignment-5 Context Insensitive Pointer Analysis.**\n\n<!--more-->\n\n> 这些规则与你在课上所学到的规则非常相似 **（甚至更简单）**.  ——A5实验指南\n\n对......对吗？\n\n## 实验目标\n\n基于**tai-e**框架实现非上下文敏感的指针分析.\n\n## Preparation\n\n**Hint:** A5和A6不再像之前的实验般友好, 没有理解上课时所讲算法, 实验指南或框架代码的人会被这两次实验狠狠地拷打.(笔者已感到有些汗流浃背了)\n\n## 算法理论\n\n### 算法伪代码\n\n![pic1-1](SPA-A5/pic1-1.png)\n\n![pic1-2](SPA-A5/pic1-2.png)\n\n### 规则形式化表述\n\n#### 分析语句类型\n\n![pic1-3](SPA-A5/pic1-3.png)\n\n#### 符号体系\n\n![pic1-4](SPA-A5/pic1-4.png)\n\n#### 对象传递规则\n\n|Kind|Stmt|Rule|PFG Edge|\n|:---:|:---:|:---:|:---:|\n|New|`i : x = new T()`|$\\dfrac{}{o_i \\in pt(x)}$|$\\text{N/A}$|\n|Assign|`x = y`|$\\dfrac{o_i \\in pt(y)}{o_i \\in pt(x)}$|$x \\leftarrow y$|\n|Field Store|`x.f = y`|$\\dfrac{o_i \\in pt(x),\\ o_j \\in pt(y)}{o_j \\in pt(o_i.f)}$|$y \\leftarrow o_i.f$|\n|Field Load|`y = x.f`|$\\dfrac{o_i \\in pt(x),\\ o_j \\in pt(o_i.f)}{o_j \\in pt(y)}$|$y \\leftarrow o_i.f$|\n|Static Store|`T.f = y`|$\\dfrac{o_i \\in pt(y)}{o_i \\in pt(T.f)}$|$T.f \\leftarrow y$|\n|Static Load|`y = T.f`|$\\dfrac{o_i \\in pt(T.f)}{o_i \\in pt(y)}$|$y \\leftarrow T.f$|\n|Array Store|`x[i] = y`|$\\dfrac{o_u \\in pt(x),\\ i_v \\in pt(y)}{o_v \\in pt(o_u[*])}$|$o_u[*] \\leftarrow y$|\n|Array Load|`y = x[i]`|$\\dfrac{o_u \\in pt(x),\\ o_v \\in pt(o_u[*])}{o_v \\in pt(y)}$|$y \\leftarrow o_u[*]$|\n|Call|`l : r = x.k(a1, ..., an)`|$\\dfrac{\\begin{array}{c} o_i \\in pt(x),\\ m = Dispatch(o_i,\\ k),\\\\ o_u \\in pt(aj),\\ i \\leq j \\leq n,\\\\ o_v \\in pt(m_{ret})\\end{array}}{\\begin{array}{c} o_i \\in pt(m_{this}),\\\\ o_u \\in pt(m_{pj}),\\ 1 \\leq j \\leq n,\\\\ o_v \\in pt(r)\\end{array}}$|$\\begin{array}{c}a1 \\rightarrow m_{p1} \\\\ ... \\\\ an \\rightarrow m_{pn} \\\\ r \\leftarrow m_{ret}\\end{array}$|\n|Static Call|`r = T.k(a1, ..., an)`|$\\dfrac{\\begin{array}{c} o_u \\in pt(aj),\\ i \\leq j \\leq n,\\\\ o_v \\in pt(m_{ret}) \\end{array}}{\\begin{array}{c} o_u \\in pt(m_{pj}),\\ 1 \\leq j \\leq n,\\\\ o_v \\in pt(r) \\end{array}}$|$\\begin{array}{c} a1 \\rightarrow m_{p1} \\\\ ... \\\\ an \\rightarrow m_{pn} \\\\ r \\leftarrow m_{ret} \\end{array}$|\n\n## 部分框架代码带读\n\n该部分是为分析实际伪代码的书写, 因为课程上的算法和框架中的实现不完全一致, 主要体现在 **Stmt in Method** 这一部分. 笔者就部分关键框架代码进行讲解.\n\n### 概览\n\n`graph.callgraph`, `ir`包中的大部分文件在先前的实验中已经了解, 如有遗忘或模糊可以参考先前的实验指南或自行阅读相关框架代码.\n\n**着重注意** `Stmt`的层次结构和`Stmt`中包含的信息类型的继承关系(如`Var`, `LValue`等), 以及`JMethod`和`IR`相关信息, 较为重要的是在A4中如何获取形参和实参.\n\n新的文件主要集中在`pta`包中, 笔者在此着重介绍该部分.\n\n### Pointer & PointsToSet\n\n指针分析中最重要的两个类型, 前者是在指针流图中的节点, 后者存储指向信息.\n\n在框架代码中, 每个`Pointer`包含一个`PointsToSet`实例, 包含该指针指向的对象信息.\n\n通过阅读`pointsToSet`源码, 不难看出是由基本的`Set`实例化得到, 支持`Set`的常规基本操作.\n\n#### VarPtr & InstanceField & StaticField & ArrayIndex\n\n代表了四种指针类型, 均继承自`Pointer`.\n\n与`Pointer`相比没有太大的不同, 仅根据类型不同添加了如何获取指针信息的API.\n\n### PointerFlowGraph\n\n本次实验中最重要的类之一, 存储了指针分析过程中的指针流信息.\n\n其实现运用了多个`Map`, 其提供的API包括两类:\n\n- 图结构的`addEdge()`和`getSuccOf()`, 这两个API可以修改和遍历**PFG**.\n\n- 图信息的四种`get`方法, 由于`JMethod`,`IR`以及`Obj`与`Pointer`并不是直接关联, 该类方法提供了一个获取对应类型指针的API.\n    > **Tips:** 举个例子, 对于`Stmt`类型的Assign语句`x = y`, 可以解析得到`Var`类型的`x`和`y`, 通过`getVarPtr()`方法就可以得到`Var`类型的`x`,`y`在**PFG**中对应的指针.\n\n### CIPTA & CIPTAResult & ResultProcessor\n\n这些类与实现的核心逻辑联系不大, 这三个类负责处理指针分析算法的前后工作, 提供了初始化, 执行指针分析和解析指针分析结果的API. 更具体的信息可以阅读框架代码.\n\n### HeapModel & Obj\n\n该部分对应了指针分析原理中的**堆抽象**部分.\n\n内部涉及的API比较简单, 且大多数不需要关注, 需要注意的是\n\n```java\nclass HeapModel{\n    ...\n    /**\n     * @return the abstract object for given new statement.\n     */\n    Obj getObj(New allocSite);\n    ...\n}\n```\n\n该方法提供了获取`Stmt New`语句创建的对象的API.\n\n> **Tips:** 指针分析中最特殊的语句便是`New`, 只有`New`语句可以创建对象, 指针流图中所有的对象均是由`New`方法创建出来的. 因此只有`New`语句需要通过与**抽象堆**交互获取对象, 其余语句获取对象均由**PFG**中传递得到.\n\n### Stmt Package\n\n本次实验所涉及的`Stmt`类型继承关系为`Stmt->AbstractStmt->DefinitionStmt->AssignStmt->(FieldStmt)`\n\n其中大部分API在之前的实验中已经熟悉了. 以下介绍一些本实验中可能涉及的细节.\n\n#### FieldStmt\n\n该类提供了`getFieldAccess()`和`getFieldRef()`, 其中后者比较重要, 可以通过`fieldStmt.getFieldRef().resolve()`获得`JField field`.(实验指南中已指出)\n\n#### accept() *可选\n\n详见[**StmtVisitor**](#stmtvisitor-可选)\n\n### WorkList\n\n对应算法伪代码中的WorkList. (笔者较为疑惑为何其内部节点称为`Entry`)\n\n### CallGraph & AbstractCallGraph & DefaultCallGraph\n\nCallGraph在实验A4中已经接触过了, 笔者在此不再赘述.\n\n### StmtVisitor *可选\n\n访问者模式不是完成本实验必要的部分, 如果不打算使用访问者模式, 可以跳过这一部分.\n\n`Solver`中的`class StmtProcessor`继承自该类, 用以实现**访问者设计模式**. 内部重载了多个`visit()`方法, 用以访问不同的类型.\n\n需要注意的是, 访问者模式需要被访问的类支持这一设计, 具体表现为其包含`accept()`方法.\n\n访问者用以优雅地替代大量`instanceof`的判断, 由**访问类**(本次实验中为`class StmtProcessor`)的函数重载巧妙地避开大量的类型判定.\n\n笔者在此以`New`,`Copy`和`StmtProcessor`为例具体说明.\n\n在本次实验中, `addReachable()`需要遍历新方法中的所有语句, 对不同语句做不同处理.\n\n![pic1-5](SPA-A5/pic1-5.png)\n\n显然这些处理从封装的角度看不应当嵌入到`New`和`Assign`类的内部, 而是应当放在外部进行处理, 那么如果不使用访问者模式, 写出来的代码大概是长这样的:\n\n```java\nfor(Stmt stmt : method.getIR().getStmts()){\n    if (stmt instanceof New newStmt){\n        ...\n    }\n    else if(stmt instanceof Assign assignStmt){\n        ...\n    }\n    else{\n        ...\n    }\n}\n```\n\n这样的代码一点也不优雅, 充斥着大量的冗余判断. 访问者模式可以很好的解决这个问题.\n\n```java\nclass New{\n    ...\n\n    public <T> T accept(StmtVisitor<T> visitor) {\n        return visitor.visit(this);\n    }\n}\n//此处略去Assign\npublic interface StmtVisitor<T> {\n    T visit(New stmt);\n    T visit(Assign stmt);\n    ...\n}\nclass StmtProcessor implements StmtVisitor<Void>{\n    Void visit(New stmt){\n        //handle new stmt\n    }\n    Void visit(Assign stmt){\n        //handle assign stmt\n    }\n}\n```\n\n此时将遍历`Stmt`的代码改为\n\n```java\nfor(Stmt stmt : method.getIR().getStmts()){\n    stmt.accept(stmtProcessor); // 已经实例化过了\n}\n```\n\n这段代码的逻辑应该是不难理解的, 在`instanceof`实现的遍历中, 就好像是一个提供多种服务的公司, 挨个询问客户购买的是什么服务然后提供服务(在这里简单假设每家只购买了一种服务).而访问者模式中, 客户向公司发送\"请求\", 公司从多个服务中选择正确的为客户进行服务(函数重载).\n\n在访问者模式中, `New`和`Assign`通过`accept()`方法向`StmtProcessor`提供了自己的类型, 并在该方法中调用来自`StmtProcessor`的处理方法`visit()`. 从面向对象设计角度来看, 是一种优于前者的设计模式.\n\n## 框架代码中的算法\n\n### S & S_m\n\n> 这里部分参考了[**RicoloveFeng|SPA-Freestyle-Guidance**](https://github.com/RicoloveFeng)中的内容.\n\n这里是与课上讲述的算法区别最大的地方. 阅读`Sovler`中的代码, 发现该部分是不存在对应关系的.\n\n重读定义`Var`的文件, 会发现一些之前没有用到的函数在本次实验中利用了起来, 如`addLoadField()`, `getLoadFields()`.\n\n这些方法就是\"隐式\"维护S和S_m的API(说**隐式**是因为对于完成实验来说, 该部分不需要详细了解).\n\n这部分实现了S和S_m的\"自动\"维护, 即通过生成**IR**, 和`CallGraph`中的`addMethod()`进行维护. 具体的细节可以阅读源码.\n\n对于完成本次实验来说, 只需要知道不需要处理有关S和S_m的工作了, 在需要获取相关信息时, 直接通过`Var`中的`getXXX()`获取即可.\n\n### 基于框架代码的算法伪代码\n\n**Tips:** 该部分的代码不会严格遵循框架代码中的API, 仅作示例.\n\n**推荐完成顺序:** 优先实现顶层方法`analysis()`\n\n#### analysis()\n\n```java\nvoid analysis(){\n    // 所有的初始化工作框架代码中已经完成, 包括添加Entry Method\n    // 这里只需要处理while WorkList NOT Empty即可\n    while(WorkList.isNotEmpty()){\n        <n, pts> = WorkList.poll() // <Pointer, PointsToSet>\n        delta_pts = propagate(n, pts)\n        if(n instanceof VarPtr x){\n            foreach oi in delta_pts do{\n                foreach x.getStoreFields() do\n                    // x.f = y\n                    addEdge(y, oi.f)\n                foreach x.getLoadFields() do\n                    // y = x.f\n                    addEdge(oi.f, y)\n                foreach x.getStoreArrays() do\n                    // x[i] = y\n                    addEdge(y, oi[*])\n                foreach x.getLoadArrays() do\n                    // y = x[i]\n                    addEdge(oi[*], y)\n\n                processCall(x, oi);\n            }\n        }\n    }\n}\n```\n\n该部分的逻辑比较简单, 照着算法写就行, 获取跟`Var x`相关的`Stmt`的方法在[**S & S_m**](#s--s_m)部分已经讲过, 此处不再赘述.\n\n不要忘记依手册在此处完成对Array的处理.\n\n#### addPFGEdge()\n\n```java\nvoid addPFGEdge(Pointer source, Pointer target){\n    if (pointerFlowGraph.addEdge(source, target)){\n        // form API: true mean not include\n        if (source.getPointsToSet().isNotEmpty()){\n            WorkList.add(<target, source_pts>) // <Pointer, PointsToSet>\n        }\n    }\n}\n```\n\n同样是照着算法写即可.\n\n#### propagate()\n\n```java\nPointsToSet propagate(Pointer pointer, PointsToSet pointsToSet){\n    delta_pts = pointsToSet - pointer.getPointsToSet();\n\n    pointer_pts += delta_pts;\n\n    foreach pointerpointerFlowGraph.getSuccsOf(pointer) do\n        //succ of pointer node\n        WorkList.add(<succ, delta_pts>) // <Pointer, PointsToSet>\n}\n```\n\n#### processCall\n\n```java\nvoid processCall(Var var, Obj recv) {\n    foreach var.var.getInvokes() do\n        // [invoke] l: r = x.k(a1,..., an)\n        JMethod method = resolveCallee(recv, invoke)\n        if(method thisVar is not empty){\n            //means is not Static\n            //also can use !invoke.isStatic()\n            workList.add(<method_this, recv>);\n            if(callGraph.addEdge(new Edge(callKind, invoke, method))){\n                //transfer paramters & return Var\n                foreach paramters : addEdge();\n                returnVar : addEdge();\n            }\n        }\n}\n```\n\n有一些细节需要注意:\n\n- 如何处理`JMethod`在A4中已经接触过了, 可以通过`method.getIR().getThis()`获取该方法的this Var, 然后再通过**PFG**就能获取this Pointer了. 如果还有印象的话, A4中通过`CallGraphs.getCallKind()`来获取`CallKind`, 在本次实验沿用该方法即可.\n- 在这里不处理Static Call, 通过判断是否存在this指针, `isStatic()`方法都可以判断(尽管从实际上分析, 此处不应该也不可能出现Static Call)\n- 之后的处理参数和返回值同A4, 同样需要注意返回值是否被丢弃或有复数个返回值.\n\n#### addReachable()\n\n如果不使用访问者模式:\n\n```java\nvoid addReachable(JMethod method) {\n    if (callGraph.addReachableMethod(method)){\n        //form API : true means not include\n        for(Stmt stmt : method.getIR().getStmts()){\n            if(stmt instanceof New){\n                WorkList.add(stmt_def, obj)\n            }\n            if(stmt instanceof Assign){\n                addEdge(right, left)\n            }\n            if(stmt instanceof StoreField && isStatic){\n                addEdge(right, left)\n            }\n            if(stmt instanceof LoadField && isStatic){\n                addEdge(right, left)\n            }\n            if(stmt instanceof Invoke && isStatic){\n                //same as processCall\n                //except do not need to add <this, obj> to workList\n            }\n        }\n    }\n}\n```\n\n如果使用访问者模式:\n\n```java\nvoid addReachable(JMethod method) {\n    if (callGraph.addReachableMethod(method)){\n        for(Stmt stmt : method.getIR().getStmts()){\n            stmt.accept(stmtProcessor);\n        }\n    }\n}\n```\n\n逻辑同不使用访问模式的`instanceof`成立后执行的方法. 将这些方法写进`StmtProcessor`中的`visit()`即可.\n\n> **Tips:** 为什么要在这里处理静态方法和字段?\n>\n> 在回答这个问题之前, 不妨思考一下为什么非静态指针要在`analysis()`中如此处理. 因为不论是字段还是方法, 都需要\"resolve\"到一个确定的结果时, 才能进行分析和对象传递. 而静态方法和静态字段的对象是唯一确定的, 在遍历到一个新方法时只需要处理一次.\n\n- 框架代码中的`CallGraph`包含了`RM`, 阅读相关API以获取详细信息.\n- 如何根据`Stmt`信息获取指针`Pointer`的方法在上文框架代码分析中已经指出. 如果该方法在后期完成, 此时应当已经知道如何获取所需参数和类型.\n- 需要注意的是在此仍然需要通过`resolveCallee()`方法获得静态方法, 参数设置为`recv = null`即可.\n\n## 总结\n\n指针分析还是相当硬核的, 尽管实验框架已经化简了其中部分内容, 这仍然是一个较困难的实验.\n","slug":"SPA-A5","published":1,"updated":"2024-12-02T07:44:50.413Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyuo0011ssilcx0ghqwz","content":"<p><strong>NJU Static Program Analysis | Assignment-5 Context\r\nInsensitive Pointer Analysis.</strong></p>\r\n<span id=\"more\"></span>\r\n<blockquote>\r\n<p>这些规则与你在课上所学到的规则非常相似\r\n<strong>（甚至更简单）</strong>. ——A5实验指南</p>\r\n</blockquote>\r\n<p>对......对吗？</p>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>tai-e</strong>框架实现非上下文敏感的指针分析.</p>\r\n<h2 id=\"preparation\">Preparation</h2>\r\n<p><strong>Hint:</strong> A5和A6不再像之前的实验般友好,\r\n没有理解上课时所讲算法,\r\n实验指南或框架代码的人会被这两次实验狠狠地拷打.(笔者已感到有些汗流浃背了)</p>\r\n<h2 id=\"算法理论\">算法理论</h2>\r\n<h3 id=\"算法伪代码\">算法伪代码</h3>\r\n<img src=\"/2024/11/27/SPA-A5/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<img src=\"/2024/11/27/SPA-A5/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<h3 id=\"规则形式化表述\">规则形式化表述</h3>\r\n<h4 id=\"分析语句类型\">分析语句类型</h4>\r\n<img src=\"/2024/11/27/SPA-A5/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n<h4 id=\"符号体系\">符号体系</h4>\r\n<img src=\"/2024/11/27/SPA-A5/pic1-4.png\" class=\"\" title=\"pic1-4\">\r\n<h4 id=\"对象传递规则\">对象传递规则</h4>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 25%\" />\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align: center;\">Kind</th>\r\n<th style=\"text-align: center;\">Stmt</th>\r\n<th style=\"text-align: center;\">Rule</th>\r\n<th style=\"text-align: center;\">PFG Edge</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: center;\">New</td>\r\n<td style=\"text-align: center;\"><code>i : x = new T()</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{}{o_i\r\n\\in pt(x)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(\\text{N/A}\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Assign</td>\r\n<td style=\"text-align: center;\"><code>x = y</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_i\r\n\\in pt(y)}{o_i \\in pt(x)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(x \\leftarrow\r\ny\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Field Store</td>\r\n<td style=\"text-align: center;\"><code>x.f = y</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_i\r\n\\in pt(x),\\ o_j \\in pt(y)}{o_j \\in pt(o_i.f)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(y \\leftarrow\r\no_i.f\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Field Load</td>\r\n<td style=\"text-align: center;\"><code>y = x.f</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_i\r\n\\in pt(x),\\ o_j \\in pt(o_i.f)}{o_j \\in pt(y)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(y \\leftarrow\r\no_i.f\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Static Store</td>\r\n<td style=\"text-align: center;\"><code>T.f = y</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_i\r\n\\in pt(y)}{o_i \\in pt(T.f)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(T.f\r\n\\leftarrow y\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Static Load</td>\r\n<td style=\"text-align: center;\"><code>y = T.f</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_i\r\n\\in pt(T.f)}{o_i \\in pt(y)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(y \\leftarrow\r\nT.f\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Array Store</td>\r\n<td style=\"text-align: center;\"><code>x[i] = y</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_u\r\n\\in pt(x),\\ i_v \\in pt(y)}{o_v \\in pt(o_u[*])}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(o_u[*]\r\n\\leftarrow y\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Array Load</td>\r\n<td style=\"text-align: center;\"><code>y = x[i]</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_u\r\n\\in pt(x),\\ o_v \\in pt(o_u[*])}{o_v \\in pt(y)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(y \\leftarrow\r\no_u[*]\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Call</td>\r\n<td\r\nstyle=\"text-align: center;\"><code>l : r = x.k(a1, ..., an)</code></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(\\dfrac{\\begin{array}{c} o_i \\in pt(x),\\ m =\r\nDispatch(o_i,\\ k),\\\\ o_u \\in pt(aj),\\ i \\leq j \\leq n,\\\\ o_v \\in\r\npt(m_{ret})\\end{array}}{\\begin{array}{c} o_i \\in pt(m_{this}),\\\\ o_u \\in\r\npt(m_{pj}),\\ 1 \\leq j \\leq n,\\\\ o_v \\in pt(r)\\end{array}}\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(\\begin{array}{c}a1 \\rightarrow m_{p1} \\\\ ... \\\\ an\r\n\\rightarrow m_{pn} \\\\ r \\leftarrow m_{ret}\\end{array}\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Static Call</td>\r\n<td style=\"text-align: center;\"><code>r = T.k(a1, ..., an)</code></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(\\dfrac{\\begin{array}{c} o_u \\in pt(aj),\\ i \\leq j\r\n\\leq n,\\\\ o_v \\in pt(m_{ret}) \\end{array}}{\\begin{array}{c} o_u \\in\r\npt(m_{pj}),\\ 1 \\leq j \\leq n,\\\\ o_v \\in pt(r) \\end{array}}\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(\\begin{array}{c} a1 \\rightarrow m_{p1} \\\\ ... \\\\\r\nan \\rightarrow m_{pn} \\\\ r \\leftarrow m_{ret} \\end{array}\\)</span></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"部分框架代码带读\">部分框架代码带读</h2>\r\n<p>该部分是为分析实际伪代码的书写,\r\n因为课程上的算法和框架中的实现不完全一致, 主要体现在 <strong>Stmt in\r\nMethod</strong> 这一部分. 笔者就部分关键框架代码进行讲解.</p>\r\n<h3 id=\"概览\">概览</h3>\r\n<p><code>graph.callgraph</code>,\r\n<code>ir</code>包中的大部分文件在先前的实验中已经了解,\r\n如有遗忘或模糊可以参考先前的实验指南或自行阅读相关框架代码.</p>\r\n<p><strong>着重注意</strong>\r\n<code>Stmt</code>的层次结构和<code>Stmt</code>中包含的信息类型的继承关系(如<code>Var</code>,\r\n<code>LValue</code>等),\r\n以及<code>JMethod</code>和<code>IR</code>相关信息,\r\n较为重要的是在A4中如何获取形参和实参.</p>\r\n<p>新的文件主要集中在<code>pta</code>包中, 笔者在此着重介绍该部分.</p>\r\n<h3 id=\"pointer-pointstoset\">Pointer &amp; PointsToSet</h3>\r\n<p>指针分析中最重要的两个类型, 前者是在指针流图中的节点,\r\n后者存储指向信息.</p>\r\n<p>在框架代码中,\r\n每个<code>Pointer</code>包含一个<code>PointsToSet</code>实例,\r\n包含该指针指向的对象信息.</p>\r\n<p>通过阅读<code>pointsToSet</code>源码,\r\n不难看出是由基本的<code>Set</code>实例化得到,\r\n支持<code>Set</code>的常规基本操作.</p>\r\n<h4 id=\"varptr-instancefield-staticfield-arrayindex\">VarPtr &amp;\r\nInstanceField &amp; StaticField &amp; ArrayIndex</h4>\r\n<p>代表了四种指针类型, 均继承自<code>Pointer</code>.</p>\r\n<p>与<code>Pointer</code>相比没有太大的不同,\r\n仅根据类型不同添加了如何获取指针信息的API.</p>\r\n<h3 id=\"pointerflowgraph\">PointerFlowGraph</h3>\r\n<p>本次实验中最重要的类之一, 存储了指针分析过程中的指针流信息.</p>\r\n<p>其实现运用了多个<code>Map</code>, 其提供的API包括两类:</p>\r\n<ul>\r\n<li><p>图结构的<code>addEdge()</code>和<code>getSuccOf()</code>,\r\n这两个API可以修改和遍历<strong>PFG</strong>.</p></li>\r\n<li><p>图信息的四种<code>get</code>方法,\r\n由于<code>JMethod</code>,<code>IR</code>以及<code>Obj</code>与<code>Pointer</code>并不是直接关联,\r\n该类方法提供了一个获取对应类型指针的API. &gt; <strong>Tips:</strong>\r\n举个例子, 对于<code>Stmt</code>类型的Assign语句<code>x = y</code>,\r\n可以解析得到<code>Var</code>类型的<code>x</code>和<code>y</code>,\r\n通过<code>getVarPtr()</code>方法就可以得到<code>Var</code>类型的<code>x</code>,<code>y</code>在<strong>PFG</strong>中对应的指针.</p></li>\r\n</ul>\r\n<h3 id=\"cipta-ciptaresult-resultprocessor\">CIPTA &amp; CIPTAResult &amp;\r\nResultProcessor</h3>\r\n<p>这些类与实现的核心逻辑联系不大,\r\n这三个类负责处理指针分析算法的前后工作, 提供了初始化,\r\n执行指针分析和解析指针分析结果的API. 更具体的信息可以阅读框架代码.</p>\r\n<h3 id=\"heapmodel-obj\">HeapModel &amp; Obj</h3>\r\n<p>该部分对应了指针分析原理中的<strong>堆抽象</strong>部分.</p>\r\n<p>内部涉及的API比较简单, 且大多数不需要关注, 需要注意的是</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HeapModel</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the abstract object for given new statement.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Obj <span class=\"title function_\">getObj</span><span class=\"params\">(New allocSite)</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>该方法提供了获取<code>Stmt New</code>语句创建的对象的API.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 指针分析中最特殊的语句便是<code>New</code>,\r\n只有<code>New</code>语句可以创建对象,\r\n指针流图中所有的对象均是由<code>New</code>方法创建出来的.\r\n因此只有<code>New</code>语句需要通过与<strong>抽象堆</strong>交互获取对象,\r\n其余语句获取对象均由<strong>PFG</strong>中传递得到.</p>\r\n</blockquote>\r\n<h3 id=\"stmt-package\">Stmt Package</h3>\r\n<p>本次实验所涉及的<code>Stmt</code>类型继承关系为<code>Stmt-&gt;AbstractStmt-&gt;DefinitionStmt-&gt;AssignStmt-&gt;(FieldStmt)</code></p>\r\n<p>其中大部分API在之前的实验中已经熟悉了.\r\n以下介绍一些本实验中可能涉及的细节.</p>\r\n<h4 id=\"fieldstmt\">FieldStmt</h4>\r\n<p>该类提供了<code>getFieldAccess()</code>和<code>getFieldRef()</code>,\r\n其中后者比较重要,\r\n可以通过<code>fieldStmt.getFieldRef().resolve()</code>获得<code>JField field</code>.(实验指南中已指出)</p>\r\n<h4 id=\"accept-可选\">accept() *可选</h4>\r\n<p>详见<a href=\"#stmtvisitor-可选\"><strong>StmtVisitor</strong></a></p>\r\n<h3 id=\"worklist\">WorkList</h3>\r\n<p>对应算法伪代码中的WorkList.\r\n(笔者较为疑惑为何其内部节点称为<code>Entry</code>)</p>\r\n<h3 id=\"callgraph-abstractcallgraph-defaultcallgraph\">CallGraph &amp;\r\nAbstractCallGraph &amp; DefaultCallGraph</h3>\r\n<p>CallGraph在实验A4中已经接触过了, 笔者在此不再赘述.</p>\r\n<h3 id=\"stmtvisitor-可选\">StmtVisitor *可选</h3>\r\n<p>访问者模式不是完成本实验必要的部分, 如果不打算使用访问者模式,\r\n可以跳过这一部分.</p>\r\n<p><code>Solver</code>中的<code>class StmtProcessor</code>继承自该类,\r\n用以实现<strong>访问者设计模式</strong>.\r\n内部重载了多个<code>visit()</code>方法, 用以访问不同的类型.</p>\r\n<p>需要注意的是, 访问者模式需要被访问的类支持这一设计,\r\n具体表现为其包含<code>accept()</code>方法.</p>\r\n<p>访问者用以优雅地替代大量<code>instanceof</code>的判断,\r\n由<strong>访问类</strong>(本次实验中为<code>class StmtProcessor</code>)的函数重载巧妙地避开大量的类型判定.</p>\r\n<p>笔者在此以<code>New</code>,<code>Copy</code>和<code>StmtProcessor</code>为例具体说明.</p>\r\n<p>在本次实验中, <code>addReachable()</code>需要遍历新方法中的所有语句,\r\n对不同语句做不同处理.</p>\r\n<img src=\"/2024/11/27/SPA-A5/pic1-5.png\" class=\"\" title=\"pic1-5\">\r\n<p>显然这些处理从封装的角度看不应当嵌入到<code>New</code>和<code>Assign</code>类的内部,\r\n而是应当放在外部进行处理, 那么如果不使用访问者模式,\r\n写出来的代码大概是长这样的:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(Stmt stmt : method.getIR().getStmts())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stmt <span class=\"keyword\">instanceof</span> New newStmt)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> Assign assignStmt)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>这样的代码一点也不优雅, 充斥着大量的冗余判断.\r\n访问者模式可以很好的解决这个问题.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">New</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">accept</span><span class=\"params\">(StmtVisitor&lt;T&gt; visitor)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> visitor.visit(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//此处略去Assign</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">StmtVisitor</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    T <span class=\"title function_\">visit</span><span class=\"params\">(New stmt)</span>;</span><br><span class=\"line\">    T <span class=\"title function_\">visit</span><span class=\"params\">(Assign stmt)</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StmtProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">StmtVisitor</span>&lt;Void&gt;&#123;</span><br><span class=\"line\">    Void <span class=\"title function_\">visit</span><span class=\"params\">(New stmt)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle new stmt</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Void <span class=\"title function_\">visit</span><span class=\"params\">(Assign stmt)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle assign stmt</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>此时将遍历<code>Stmt</code>的代码改为</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(Stmt stmt : method.getIR().getStmts())&#123;</span><br><span class=\"line\">    stmt.accept(stmtProcessor); <span class=\"comment\">// 已经实例化过了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>这段代码的逻辑应该是不难理解的,\r\n在<code>instanceof</code>实现的遍历中, 就好像是一个提供多种服务的公司,\r\n挨个询问客户购买的是什么服务然后提供服务(在这里简单假设每家只购买了一种服务).而访问者模式中,\r\n客户向公司发送\"请求\",\r\n公司从多个服务中选择正确的为客户进行服务(函数重载).</p>\r\n<p>在访问者模式中,\r\n<code>New</code>和<code>Assign</code>通过<code>accept()</code>方法向<code>StmtProcessor</code>提供了自己的类型,\r\n并在该方法中调用来自<code>StmtProcessor</code>的处理方法<code>visit()</code>.\r\n从面向对象设计角度来看, 是一种优于前者的设计模式.</p>\r\n<h2 id=\"框架代码中的算法\">框架代码中的算法</h2>\r\n<h3 id=\"s-s_m\">S &amp; S_m</h3>\r\n<blockquote>\r\n<p>这里部分参考了<a\r\nhref=\"https://github.com/RicoloveFeng\"><strong>RicoloveFeng|SPA-Freestyle-Guidance</strong></a>中的内容.</p>\r\n</blockquote>\r\n<p>这里是与课上讲述的算法区别最大的地方.\r\n阅读<code>Sovler</code>中的代码, 发现该部分是不存在对应关系的.</p>\r\n<p>重读定义<code>Var</code>的文件,\r\n会发现一些之前没有用到的函数在本次实验中利用了起来,\r\n如<code>addLoadField()</code>, <code>getLoadFields()</code>.</p>\r\n<p>这些方法就是\"隐式\"维护S和S_m的API(说<strong>隐式</strong>是因为对于完成实验来说,\r\n该部分不需要详细了解).</p>\r\n<p>这部分实现了S和S_m的\"自动\"维护, 即通过生成<strong>IR</strong>,\r\n和<code>CallGraph</code>中的<code>addMethod()</code>进行维护.\r\n具体的细节可以阅读源码.</p>\r\n<p>对于完成本次实验来说, 只需要知道不需要处理有关S和S_m的工作了,\r\n在需要获取相关信息时,\r\n直接通过<code>Var</code>中的<code>getXXX()</code>获取即可.</p>\r\n<h3 id=\"基于框架代码的算法伪代码\">基于框架代码的算法伪代码</h3>\r\n<p><strong>Tips:</strong> 该部分的代码不会严格遵循框架代码中的API,\r\n仅作示例.</p>\r\n<p><strong>推荐完成顺序:</strong>\r\n优先实现顶层方法<code>analysis()</code></p>\r\n<h4 id=\"analysis\">analysis()</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">analysis</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所有的初始化工作框架代码中已经完成, 包括添加Entry Method</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里只需要处理while WorkList NOT Empty即可</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(WorkList.isNotEmpty())&#123;</span><br><span class=\"line\">        &lt;n, pts&gt; = WorkList.poll() <span class=\"comment\">// &lt;Pointer, PointsToSet&gt;</span></span><br><span class=\"line\">        delta_pts = propagate(n, pts)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n <span class=\"keyword\">instanceof</span> VarPtr x)&#123;</span><br><span class=\"line\">            foreach oi in delta_pts <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">                foreach x.getStoreFields() <span class=\"keyword\">do</span></span><br><span class=\"line\">                    <span class=\"comment\">// x.f = y</span></span><br><span class=\"line\">                    addEdge(y, oi.f)</span><br><span class=\"line\">                foreach x.getLoadFields() <span class=\"keyword\">do</span></span><br><span class=\"line\">                    <span class=\"comment\">// y = x.f</span></span><br><span class=\"line\">                    addEdge(oi.f, y)</span><br><span class=\"line\">                foreach x.getStoreArrays() <span class=\"keyword\">do</span></span><br><span class=\"line\">                    <span class=\"comment\">// x[i] = y</span></span><br><span class=\"line\">                    addEdge(y, oi[*])</span><br><span class=\"line\">                foreach x.getLoadArrays() <span class=\"keyword\">do</span></span><br><span class=\"line\">                    <span class=\"comment\">// y = x[i]</span></span><br><span class=\"line\">                    addEdge(oi[*], y)</span><br><span class=\"line\"></span><br><span class=\"line\">                processCall(x, oi);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>该部分的逻辑比较简单, 照着算法写就行,\r\n获取跟<code>Var x</code>相关的<code>Stmt</code>的方法在<a\r\nhref=\"#s--s_m\"><strong>S &amp; S_m</strong></a>部分已经讲过,\r\n此处不再赘述.</p>\r\n<p>不要忘记依手册在此处完成对Array的处理.</p>\r\n<h4 id=\"addpfgedge\">addPFGEdge()</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">addPFGEdge</span><span class=\"params\">(Pointer source, Pointer target)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pointerFlowGraph.addEdge(source, target))&#123;</span><br><span class=\"line\">        <span class=\"comment\">// form API: true mean not include</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (source.getPointsToSet().isNotEmpty())&#123;</span><br><span class=\"line\">            WorkList.add(&lt;target, source_pts&gt;) <span class=\"comment\">// &lt;Pointer, PointsToSet&gt;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>同样是照着算法写即可.</p>\r\n<h4 id=\"propagate\">propagate()</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PointsToSet <span class=\"title function_\">propagate</span><span class=\"params\">(Pointer pointer, PointsToSet pointsToSet)</span>&#123;</span><br><span class=\"line\">    delta_pts = pointsToSet - pointer.getPointsToSet();</span><br><span class=\"line\"></span><br><span class=\"line\">    pointer_pts += delta_pts;</span><br><span class=\"line\"></span><br><span class=\"line\">    foreach pointerpointerFlowGraph.getSuccsOf(pointer) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"comment\">//succ of pointer node</span></span><br><span class=\"line\">        WorkList.add(&lt;succ, delta_pts&gt;) <span class=\"comment\">// &lt;Pointer, PointsToSet&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"processcall\">processCall</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">processCall</span><span class=\"params\">(Var <span class=\"keyword\">var</span>, Obj recv)</span> &#123;</span><br><span class=\"line\">    foreach <span class=\"keyword\">var</span>.<span class=\"keyword\">var</span>.getInvokes() <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"comment\">// [invoke] l: r = x.k(a1,..., an)</span></span><br><span class=\"line\">        <span class=\"type\">JMethod</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> resolveCallee(recv, invoke)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(method thisVar is not empty)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//means is not Static</span></span><br><span class=\"line\">            <span class=\"comment\">//also can use !invoke.isStatic()</span></span><br><span class=\"line\">            workList.add(&lt;method_this, recv&gt;);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(callGraph.addEdge(<span class=\"keyword\">new</span> <span class=\"title class_\">Edge</span>(callKind, invoke, method)))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//transfer paramters &amp; return Var</span></span><br><span class=\"line\">                foreach paramters : addEdge();</span><br><span class=\"line\">                returnVar : addEdge();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>有一些细节需要注意:</p>\r\n<ul>\r\n<li>如何处理<code>JMethod</code>在A4中已经接触过了,\r\n可以通过<code>method.getIR().getThis()</code>获取该方法的this Var,\r\n然后再通过<strong>PFG</strong>就能获取this Pointer了. 如果还有印象的话,\r\nA4中通过<code>CallGraphs.getCallKind()</code>来获取<code>CallKind</code>,\r\n在本次实验沿用该方法即可.</li>\r\n<li>在这里不处理Static Call, 通过判断是否存在this指针,\r\n<code>isStatic()</code>方法都可以判断(尽管从实际上分析,\r\n此处不应该也不可能出现Static Call)</li>\r\n<li>之后的处理参数和返回值同A4,\r\n同样需要注意返回值是否被丢弃或有复数个返回值.</li>\r\n</ul>\r\n<h4 id=\"addreachable\">addReachable()</h4>\r\n<p>如果不使用访问者模式:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">addReachable</span><span class=\"params\">(JMethod method)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callGraph.addReachableMethod(method))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//form API : true means not include</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Stmt stmt : method.getIR().getStmts())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> New)&#123;</span><br><span class=\"line\">                WorkList.add(stmt_def, obj)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> Assign)&#123;</span><br><span class=\"line\">                addEdge(right, left)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> StoreField &amp;&amp; isStatic)&#123;</span><br><span class=\"line\">                addEdge(right, left)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> LoadField &amp;&amp; isStatic)&#123;</span><br><span class=\"line\">                addEdge(right, left)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> Invoke &amp;&amp; isStatic)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//same as processCall</span></span><br><span class=\"line\">                <span class=\"comment\">//except do not need to add &lt;this, obj&gt; to workList</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>如果使用访问者模式:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">addReachable</span><span class=\"params\">(JMethod method)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callGraph.addReachableMethod(method))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Stmt stmt : method.getIR().getStmts())&#123;</span><br><span class=\"line\">            stmt.accept(stmtProcessor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>逻辑同不使用访问模式的<code>instanceof</code>成立后执行的方法.\r\n将这些方法写进<code>StmtProcessor</code>中的<code>visit()</code>即可.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 为什么要在这里处理静态方法和字段?</p>\r\n<p>在回答这个问题之前,\r\n不妨思考一下为什么非静态指针要在<code>analysis()</code>中如此处理.\r\n因为不论是字段还是方法, 都需要\"resolve\"到一个确定的结果时,\r\n才能进行分析和对象传递. 而静态方法和静态字段的对象是唯一确定的,\r\n在遍历到一个新方法时只需要处理一次.</p>\r\n</blockquote>\r\n<ul>\r\n<li>框架代码中的<code>CallGraph</code>包含了<code>RM</code>,\r\n阅读相关API以获取详细信息.</li>\r\n<li>如何根据<code>Stmt</code>信息获取指针<code>Pointer</code>的方法在上文框架代码分析中已经指出.\r\n如果该方法在后期完成, 此时应当已经知道如何获取所需参数和类型.</li>\r\n<li>需要注意的是在此仍然需要通过<code>resolveCallee()</code>方法获得静态方法,\r\n参数设置为<code>recv = null</code>即可.</li>\r\n</ul>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>指针分析还是相当硬核的, 尽管实验框架已经化简了其中部分内容,\r\n这仍然是一个较困难的实验.</p>\r\n","length":3055,"excerpt":"<p><strong>NJU Static Program Analysis | Assignment-5 Context\r\nInsensitive Pointer Analysis.</strong></p>","more":"<blockquote>\r\n<p>这些规则与你在课上所学到的规则非常相似\r\n<strong>（甚至更简单）</strong>. ——A5实验指南</p>\r\n</blockquote>\r\n<p>对......对吗？</p>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>tai-e</strong>框架实现非上下文敏感的指针分析.</p>\r\n<h2 id=\"preparation\">Preparation</h2>\r\n<p><strong>Hint:</strong> A5和A6不再像之前的实验般友好,\r\n没有理解上课时所讲算法,\r\n实验指南或框架代码的人会被这两次实验狠狠地拷打.(笔者已感到有些汗流浃背了)</p>\r\n<h2 id=\"算法理论\">算法理论</h2>\r\n<h3 id=\"算法伪代码\">算法伪代码</h3>\r\n<img src=\"/2024/11/27/SPA-A5/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<img src=\"/2024/11/27/SPA-A5/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<h3 id=\"规则形式化表述\">规则形式化表述</h3>\r\n<h4 id=\"分析语句类型\">分析语句类型</h4>\r\n<img src=\"/2024/11/27/SPA-A5/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n<h4 id=\"符号体系\">符号体系</h4>\r\n<img src=\"/2024/11/27/SPA-A5/pic1-4.png\" class=\"\" title=\"pic1-4\">\r\n<h4 id=\"对象传递规则\">对象传递规则</h4>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 25%\" />\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align: center;\">Kind</th>\r\n<th style=\"text-align: center;\">Stmt</th>\r\n<th style=\"text-align: center;\">Rule</th>\r\n<th style=\"text-align: center;\">PFG Edge</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: center;\">New</td>\r\n<td style=\"text-align: center;\"><code>i : x = new T()</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{}{o_i\r\n\\in pt(x)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(\\text{N/A}\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Assign</td>\r\n<td style=\"text-align: center;\"><code>x = y</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_i\r\n\\in pt(y)}{o_i \\in pt(x)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(x \\leftarrow\r\ny\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Field Store</td>\r\n<td style=\"text-align: center;\"><code>x.f = y</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_i\r\n\\in pt(x),\\ o_j \\in pt(y)}{o_j \\in pt(o_i.f)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(y \\leftarrow\r\no_i.f\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Field Load</td>\r\n<td style=\"text-align: center;\"><code>y = x.f</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_i\r\n\\in pt(x),\\ o_j \\in pt(o_i.f)}{o_j \\in pt(y)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(y \\leftarrow\r\no_i.f\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Static Store</td>\r\n<td style=\"text-align: center;\"><code>T.f = y</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_i\r\n\\in pt(y)}{o_i \\in pt(T.f)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(T.f\r\n\\leftarrow y\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Static Load</td>\r\n<td style=\"text-align: center;\"><code>y = T.f</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_i\r\n\\in pt(T.f)}{o_i \\in pt(y)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(y \\leftarrow\r\nT.f\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Array Store</td>\r\n<td style=\"text-align: center;\"><code>x[i] = y</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_u\r\n\\in pt(x),\\ i_v \\in pt(y)}{o_v \\in pt(o_u[*])}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(o_u[*]\r\n\\leftarrow y\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Array Load</td>\r\n<td style=\"text-align: center;\"><code>y = x[i]</code></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\dfrac{o_u\r\n\\in pt(x),\\ o_v \\in pt(o_u[*])}{o_v \\in pt(y)}\\)</span></td>\r\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(y \\leftarrow\r\no_u[*]\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Call</td>\r\n<td\r\nstyle=\"text-align: center;\"><code>l : r = x.k(a1, ..., an)</code></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(\\dfrac{\\begin{array}{c} o_i \\in pt(x),\\ m =\r\nDispatch(o_i,\\ k),\\\\ o_u \\in pt(aj),\\ i \\leq j \\leq n,\\\\ o_v \\in\r\npt(m_{ret})\\end{array}}{\\begin{array}{c} o_i \\in pt(m_{this}),\\\\ o_u \\in\r\npt(m_{pj}),\\ 1 \\leq j \\leq n,\\\\ o_v \\in pt(r)\\end{array}}\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(\\begin{array}{c}a1 \\rightarrow m_{p1} \\\\ ... \\\\ an\r\n\\rightarrow m_{pn} \\\\ r \\leftarrow m_{ret}\\end{array}\\)</span></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">Static Call</td>\r\n<td style=\"text-align: center;\"><code>r = T.k(a1, ..., an)</code></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(\\dfrac{\\begin{array}{c} o_u \\in pt(aj),\\ i \\leq j\r\n\\leq n,\\\\ o_v \\in pt(m_{ret}) \\end{array}}{\\begin{array}{c} o_u \\in\r\npt(m_{pj}),\\ 1 \\leq j \\leq n,\\\\ o_v \\in pt(r) \\end{array}}\\)</span></td>\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(\\begin{array}{c} a1 \\rightarrow m_{p1} \\\\ ... \\\\\r\nan \\rightarrow m_{pn} \\\\ r \\leftarrow m_{ret} \\end{array}\\)</span></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"部分框架代码带读\">部分框架代码带读</h2>\r\n<p>该部分是为分析实际伪代码的书写,\r\n因为课程上的算法和框架中的实现不完全一致, 主要体现在 <strong>Stmt in\r\nMethod</strong> 这一部分. 笔者就部分关键框架代码进行讲解.</p>\r\n<h3 id=\"概览\">概览</h3>\r\n<p><code>graph.callgraph</code>,\r\n<code>ir</code>包中的大部分文件在先前的实验中已经了解,\r\n如有遗忘或模糊可以参考先前的实验指南或自行阅读相关框架代码.</p>\r\n<p><strong>着重注意</strong>\r\n<code>Stmt</code>的层次结构和<code>Stmt</code>中包含的信息类型的继承关系(如<code>Var</code>,\r\n<code>LValue</code>等),\r\n以及<code>JMethod</code>和<code>IR</code>相关信息,\r\n较为重要的是在A4中如何获取形参和实参.</p>\r\n<p>新的文件主要集中在<code>pta</code>包中, 笔者在此着重介绍该部分.</p>\r\n<h3 id=\"pointer-pointstoset\">Pointer &amp; PointsToSet</h3>\r\n<p>指针分析中最重要的两个类型, 前者是在指针流图中的节点,\r\n后者存储指向信息.</p>\r\n<p>在框架代码中,\r\n每个<code>Pointer</code>包含一个<code>PointsToSet</code>实例,\r\n包含该指针指向的对象信息.</p>\r\n<p>通过阅读<code>pointsToSet</code>源码,\r\n不难看出是由基本的<code>Set</code>实例化得到,\r\n支持<code>Set</code>的常规基本操作.</p>\r\n<h4 id=\"varptr-instancefield-staticfield-arrayindex\">VarPtr &amp;\r\nInstanceField &amp; StaticField &amp; ArrayIndex</h4>\r\n<p>代表了四种指针类型, 均继承自<code>Pointer</code>.</p>\r\n<p>与<code>Pointer</code>相比没有太大的不同,\r\n仅根据类型不同添加了如何获取指针信息的API.</p>\r\n<h3 id=\"pointerflowgraph\">PointerFlowGraph</h3>\r\n<p>本次实验中最重要的类之一, 存储了指针分析过程中的指针流信息.</p>\r\n<p>其实现运用了多个<code>Map</code>, 其提供的API包括两类:</p>\r\n<ul>\r\n<li><p>图结构的<code>addEdge()</code>和<code>getSuccOf()</code>,\r\n这两个API可以修改和遍历<strong>PFG</strong>.</p></li>\r\n<li><p>图信息的四种<code>get</code>方法,\r\n由于<code>JMethod</code>,<code>IR</code>以及<code>Obj</code>与<code>Pointer</code>并不是直接关联,\r\n该类方法提供了一个获取对应类型指针的API. &gt; <strong>Tips:</strong>\r\n举个例子, 对于<code>Stmt</code>类型的Assign语句<code>x = y</code>,\r\n可以解析得到<code>Var</code>类型的<code>x</code>和<code>y</code>,\r\n通过<code>getVarPtr()</code>方法就可以得到<code>Var</code>类型的<code>x</code>,<code>y</code>在<strong>PFG</strong>中对应的指针.</p></li>\r\n</ul>\r\n<h3 id=\"cipta-ciptaresult-resultprocessor\">CIPTA &amp; CIPTAResult &amp;\r\nResultProcessor</h3>\r\n<p>这些类与实现的核心逻辑联系不大,\r\n这三个类负责处理指针分析算法的前后工作, 提供了初始化,\r\n执行指针分析和解析指针分析结果的API. 更具体的信息可以阅读框架代码.</p>\r\n<h3 id=\"heapmodel-obj\">HeapModel &amp; Obj</h3>\r\n<p>该部分对应了指针分析原理中的<strong>堆抽象</strong>部分.</p>\r\n<p>内部涉及的API比较简单, 且大多数不需要关注, 需要注意的是</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HeapModel</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the abstract object for given new statement.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Obj <span class=\"title function_\">getObj</span><span class=\"params\">(New allocSite)</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>该方法提供了获取<code>Stmt New</code>语句创建的对象的API.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 指针分析中最特殊的语句便是<code>New</code>,\r\n只有<code>New</code>语句可以创建对象,\r\n指针流图中所有的对象均是由<code>New</code>方法创建出来的.\r\n因此只有<code>New</code>语句需要通过与<strong>抽象堆</strong>交互获取对象,\r\n其余语句获取对象均由<strong>PFG</strong>中传递得到.</p>\r\n</blockquote>\r\n<h3 id=\"stmt-package\">Stmt Package</h3>\r\n<p>本次实验所涉及的<code>Stmt</code>类型继承关系为<code>Stmt-&gt;AbstractStmt-&gt;DefinitionStmt-&gt;AssignStmt-&gt;(FieldStmt)</code></p>\r\n<p>其中大部分API在之前的实验中已经熟悉了.\r\n以下介绍一些本实验中可能涉及的细节.</p>\r\n<h4 id=\"fieldstmt\">FieldStmt</h4>\r\n<p>该类提供了<code>getFieldAccess()</code>和<code>getFieldRef()</code>,\r\n其中后者比较重要,\r\n可以通过<code>fieldStmt.getFieldRef().resolve()</code>获得<code>JField field</code>.(实验指南中已指出)</p>\r\n<h4 id=\"accept-可选\">accept() *可选</h4>\r\n<p>详见<a href=\"#stmtvisitor-可选\"><strong>StmtVisitor</strong></a></p>\r\n<h3 id=\"worklist\">WorkList</h3>\r\n<p>对应算法伪代码中的WorkList.\r\n(笔者较为疑惑为何其内部节点称为<code>Entry</code>)</p>\r\n<h3 id=\"callgraph-abstractcallgraph-defaultcallgraph\">CallGraph &amp;\r\nAbstractCallGraph &amp; DefaultCallGraph</h3>\r\n<p>CallGraph在实验A4中已经接触过了, 笔者在此不再赘述.</p>\r\n<h3 id=\"stmtvisitor-可选\">StmtVisitor *可选</h3>\r\n<p>访问者模式不是完成本实验必要的部分, 如果不打算使用访问者模式,\r\n可以跳过这一部分.</p>\r\n<p><code>Solver</code>中的<code>class StmtProcessor</code>继承自该类,\r\n用以实现<strong>访问者设计模式</strong>.\r\n内部重载了多个<code>visit()</code>方法, 用以访问不同的类型.</p>\r\n<p>需要注意的是, 访问者模式需要被访问的类支持这一设计,\r\n具体表现为其包含<code>accept()</code>方法.</p>\r\n<p>访问者用以优雅地替代大量<code>instanceof</code>的判断,\r\n由<strong>访问类</strong>(本次实验中为<code>class StmtProcessor</code>)的函数重载巧妙地避开大量的类型判定.</p>\r\n<p>笔者在此以<code>New</code>,<code>Copy</code>和<code>StmtProcessor</code>为例具体说明.</p>\r\n<p>在本次实验中, <code>addReachable()</code>需要遍历新方法中的所有语句,\r\n对不同语句做不同处理.</p>\r\n<img src=\"/2024/11/27/SPA-A5/pic1-5.png\" class=\"\" title=\"pic1-5\">\r\n<p>显然这些处理从封装的角度看不应当嵌入到<code>New</code>和<code>Assign</code>类的内部,\r\n而是应当放在外部进行处理, 那么如果不使用访问者模式,\r\n写出来的代码大概是长这样的:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(Stmt stmt : method.getIR().getStmts())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stmt <span class=\"keyword\">instanceof</span> New newStmt)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> Assign assignStmt)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>这样的代码一点也不优雅, 充斥着大量的冗余判断.\r\n访问者模式可以很好的解决这个问题.</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">New</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">accept</span><span class=\"params\">(StmtVisitor&lt;T&gt; visitor)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> visitor.visit(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//此处略去Assign</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">StmtVisitor</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    T <span class=\"title function_\">visit</span><span class=\"params\">(New stmt)</span>;</span><br><span class=\"line\">    T <span class=\"title function_\">visit</span><span class=\"params\">(Assign stmt)</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StmtProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">StmtVisitor</span>&lt;Void&gt;&#123;</span><br><span class=\"line\">    Void <span class=\"title function_\">visit</span><span class=\"params\">(New stmt)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle new stmt</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Void <span class=\"title function_\">visit</span><span class=\"params\">(Assign stmt)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle assign stmt</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>此时将遍历<code>Stmt</code>的代码改为</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(Stmt stmt : method.getIR().getStmts())&#123;</span><br><span class=\"line\">    stmt.accept(stmtProcessor); <span class=\"comment\">// 已经实例化过了</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>这段代码的逻辑应该是不难理解的,\r\n在<code>instanceof</code>实现的遍历中, 就好像是一个提供多种服务的公司,\r\n挨个询问客户购买的是什么服务然后提供服务(在这里简单假设每家只购买了一种服务).而访问者模式中,\r\n客户向公司发送\"请求\",\r\n公司从多个服务中选择正确的为客户进行服务(函数重载).</p>\r\n<p>在访问者模式中,\r\n<code>New</code>和<code>Assign</code>通过<code>accept()</code>方法向<code>StmtProcessor</code>提供了自己的类型,\r\n并在该方法中调用来自<code>StmtProcessor</code>的处理方法<code>visit()</code>.\r\n从面向对象设计角度来看, 是一种优于前者的设计模式.</p>\r\n<h2 id=\"框架代码中的算法\">框架代码中的算法</h2>\r\n<h3 id=\"s-s_m\">S &amp; S_m</h3>\r\n<blockquote>\r\n<p>这里部分参考了<a\r\nhref=\"https://github.com/RicoloveFeng\"><strong>RicoloveFeng|SPA-Freestyle-Guidance</strong></a>中的内容.</p>\r\n</blockquote>\r\n<p>这里是与课上讲述的算法区别最大的地方.\r\n阅读<code>Sovler</code>中的代码, 发现该部分是不存在对应关系的.</p>\r\n<p>重读定义<code>Var</code>的文件,\r\n会发现一些之前没有用到的函数在本次实验中利用了起来,\r\n如<code>addLoadField()</code>, <code>getLoadFields()</code>.</p>\r\n<p>这些方法就是\"隐式\"维护S和S_m的API(说<strong>隐式</strong>是因为对于完成实验来说,\r\n该部分不需要详细了解).</p>\r\n<p>这部分实现了S和S_m的\"自动\"维护, 即通过生成<strong>IR</strong>,\r\n和<code>CallGraph</code>中的<code>addMethod()</code>进行维护.\r\n具体的细节可以阅读源码.</p>\r\n<p>对于完成本次实验来说, 只需要知道不需要处理有关S和S_m的工作了,\r\n在需要获取相关信息时,\r\n直接通过<code>Var</code>中的<code>getXXX()</code>获取即可.</p>\r\n<h3 id=\"基于框架代码的算法伪代码\">基于框架代码的算法伪代码</h3>\r\n<p><strong>Tips:</strong> 该部分的代码不会严格遵循框架代码中的API,\r\n仅作示例.</p>\r\n<p><strong>推荐完成顺序:</strong>\r\n优先实现顶层方法<code>analysis()</code></p>\r\n<h4 id=\"analysis\">analysis()</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">analysis</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 所有的初始化工作框架代码中已经完成, 包括添加Entry Method</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里只需要处理while WorkList NOT Empty即可</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(WorkList.isNotEmpty())&#123;</span><br><span class=\"line\">        &lt;n, pts&gt; = WorkList.poll() <span class=\"comment\">// &lt;Pointer, PointsToSet&gt;</span></span><br><span class=\"line\">        delta_pts = propagate(n, pts)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n <span class=\"keyword\">instanceof</span> VarPtr x)&#123;</span><br><span class=\"line\">            foreach oi in delta_pts <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">                foreach x.getStoreFields() <span class=\"keyword\">do</span></span><br><span class=\"line\">                    <span class=\"comment\">// x.f = y</span></span><br><span class=\"line\">                    addEdge(y, oi.f)</span><br><span class=\"line\">                foreach x.getLoadFields() <span class=\"keyword\">do</span></span><br><span class=\"line\">                    <span class=\"comment\">// y = x.f</span></span><br><span class=\"line\">                    addEdge(oi.f, y)</span><br><span class=\"line\">                foreach x.getStoreArrays() <span class=\"keyword\">do</span></span><br><span class=\"line\">                    <span class=\"comment\">// x[i] = y</span></span><br><span class=\"line\">                    addEdge(y, oi[*])</span><br><span class=\"line\">                foreach x.getLoadArrays() <span class=\"keyword\">do</span></span><br><span class=\"line\">                    <span class=\"comment\">// y = x[i]</span></span><br><span class=\"line\">                    addEdge(oi[*], y)</span><br><span class=\"line\"></span><br><span class=\"line\">                processCall(x, oi);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>该部分的逻辑比较简单, 照着算法写就行,\r\n获取跟<code>Var x</code>相关的<code>Stmt</code>的方法在<a\r\nhref=\"#s--s_m\"><strong>S &amp; S_m</strong></a>部分已经讲过,\r\n此处不再赘述.</p>\r\n<p>不要忘记依手册在此处完成对Array的处理.</p>\r\n<h4 id=\"addpfgedge\">addPFGEdge()</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">addPFGEdge</span><span class=\"params\">(Pointer source, Pointer target)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pointerFlowGraph.addEdge(source, target))&#123;</span><br><span class=\"line\">        <span class=\"comment\">// form API: true mean not include</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (source.getPointsToSet().isNotEmpty())&#123;</span><br><span class=\"line\">            WorkList.add(&lt;target, source_pts&gt;) <span class=\"comment\">// &lt;Pointer, PointsToSet&gt;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>同样是照着算法写即可.</p>\r\n<h4 id=\"propagate\">propagate()</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PointsToSet <span class=\"title function_\">propagate</span><span class=\"params\">(Pointer pointer, PointsToSet pointsToSet)</span>&#123;</span><br><span class=\"line\">    delta_pts = pointsToSet - pointer.getPointsToSet();</span><br><span class=\"line\"></span><br><span class=\"line\">    pointer_pts += delta_pts;</span><br><span class=\"line\"></span><br><span class=\"line\">    foreach pointerpointerFlowGraph.getSuccsOf(pointer) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"comment\">//succ of pointer node</span></span><br><span class=\"line\">        WorkList.add(&lt;succ, delta_pts&gt;) <span class=\"comment\">// &lt;Pointer, PointsToSet&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"processcall\">processCall</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">processCall</span><span class=\"params\">(Var <span class=\"keyword\">var</span>, Obj recv)</span> &#123;</span><br><span class=\"line\">    foreach <span class=\"keyword\">var</span>.<span class=\"keyword\">var</span>.getInvokes() <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"comment\">// [invoke] l: r = x.k(a1,..., an)</span></span><br><span class=\"line\">        <span class=\"type\">JMethod</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> resolveCallee(recv, invoke)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(method thisVar is not empty)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//means is not Static</span></span><br><span class=\"line\">            <span class=\"comment\">//also can use !invoke.isStatic()</span></span><br><span class=\"line\">            workList.add(&lt;method_this, recv&gt;);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(callGraph.addEdge(<span class=\"keyword\">new</span> <span class=\"title class_\">Edge</span>(callKind, invoke, method)))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//transfer paramters &amp; return Var</span></span><br><span class=\"line\">                foreach paramters : addEdge();</span><br><span class=\"line\">                returnVar : addEdge();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>有一些细节需要注意:</p>\r\n<ul>\r\n<li>如何处理<code>JMethod</code>在A4中已经接触过了,\r\n可以通过<code>method.getIR().getThis()</code>获取该方法的this Var,\r\n然后再通过<strong>PFG</strong>就能获取this Pointer了. 如果还有印象的话,\r\nA4中通过<code>CallGraphs.getCallKind()</code>来获取<code>CallKind</code>,\r\n在本次实验沿用该方法即可.</li>\r\n<li>在这里不处理Static Call, 通过判断是否存在this指针,\r\n<code>isStatic()</code>方法都可以判断(尽管从实际上分析,\r\n此处不应该也不可能出现Static Call)</li>\r\n<li>之后的处理参数和返回值同A4,\r\n同样需要注意返回值是否被丢弃或有复数个返回值.</li>\r\n</ul>\r\n<h4 id=\"addreachable\">addReachable()</h4>\r\n<p>如果不使用访问者模式:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">addReachable</span><span class=\"params\">(JMethod method)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callGraph.addReachableMethod(method))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//form API : true means not include</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Stmt stmt : method.getIR().getStmts())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> New)&#123;</span><br><span class=\"line\">                WorkList.add(stmt_def, obj)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> Assign)&#123;</span><br><span class=\"line\">                addEdge(right, left)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> StoreField &amp;&amp; isStatic)&#123;</span><br><span class=\"line\">                addEdge(right, left)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> LoadField &amp;&amp; isStatic)&#123;</span><br><span class=\"line\">                addEdge(right, left)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(stmt <span class=\"keyword\">instanceof</span> Invoke &amp;&amp; isStatic)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//same as processCall</span></span><br><span class=\"line\">                <span class=\"comment\">//except do not need to add &lt;this, obj&gt; to workList</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>如果使用访问者模式:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">addReachable</span><span class=\"params\">(JMethod method)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callGraph.addReachableMethod(method))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Stmt stmt : method.getIR().getStmts())&#123;</span><br><span class=\"line\">            stmt.accept(stmtProcessor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>逻辑同不使用访问模式的<code>instanceof</code>成立后执行的方法.\r\n将这些方法写进<code>StmtProcessor</code>中的<code>visit()</code>即可.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 为什么要在这里处理静态方法和字段?</p>\r\n<p>在回答这个问题之前,\r\n不妨思考一下为什么非静态指针要在<code>analysis()</code>中如此处理.\r\n因为不论是字段还是方法, 都需要\"resolve\"到一个确定的结果时,\r\n才能进行分析和对象传递. 而静态方法和静态字段的对象是唯一确定的,\r\n在遍历到一个新方法时只需要处理一次.</p>\r\n</blockquote>\r\n<ul>\r\n<li>框架代码中的<code>CallGraph</code>包含了<code>RM</code>,\r\n阅读相关API以获取详细信息.</li>\r\n<li>如何根据<code>Stmt</code>信息获取指针<code>Pointer</code>的方法在上文框架代码分析中已经指出.\r\n如果该方法在后期完成, 此时应当已经知道如何获取所需参数和类型.</li>\r\n<li>需要注意的是在此仍然需要通过<code>resolveCallee()</code>方法获得静态方法,\r\n参数设置为<code>recv = null</code>即可.</li>\r\n</ul>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>指针分析还是相当硬核的, 尽管实验框架已经化简了其中部分内容,\r\n这仍然是一个较困难的实验.</p>"},{"title":"NJU静态分析|A6-Context Sensitive Pointer Analysis","date":"2024-12-01T13:52:02.000Z","hidden":false,"_content":"\n**NJU Static Program Analysis | Assignment-6 Context Sensitive Pointer Analysis.**\n\n<!--more-->\n\n笔者写该实验写了一个下午之后注意力涣散了😇(†升天†)\n\n> **Tips:** 本次实验的指南中存在省略, 因此Debug过程可能会包含一些困难.\n\n## 实验目标\n\n基于**tai-e**框架实现上下文敏感的指针分析.\n\n## Preparation\n\n- **确保**理解了CI和CS的指针分析理论部分知识, 笔者不负责讲解课程中已经讲述过的理论知识.\n\n- **确保**理解了实验指南中的注意事项和框架中新增以及修改的源码, 否则在阅读本实验记录可能会遇到\"共识\"缺失的问题.\n\n## 理论部分\n\n总体来说, 上下文敏感指针分析算法和理论与上下文非敏感指针分析区别不大, 大体框架是一致的. 笔者不再像A5中整理, 不同的部分会在下文需要时给出.\n\n## 框架代码\n\n比起A5的框架代码变动并不大, 笔者在此简要解释一些要点.\n\n![pic1-1](SPA-A6/pic1-1.png)\n\n- 手册中该部分提及了上下文敏感指针分析中最重要的部分之一, `CSElement`和`Pointer`是本次实验主要操作的对象.\n\n- 在正式写实验之前请思考这两者间的不同, 如有混淆可能会影响实验的完成.(明晰两者的区别才知道该去哪里找API, 该调用什么方法, 毕竟ppt上的算法是类型\"模糊\"的)\n\n- 与A5相同, `Pointer`与`Obj`相对独立, 但请注意这里的`CSElement`与`Element`同样相对独立, `Element`与`Context`组合形成了`CSElement`, 因此许多API需要先取出`Context`或`Element`才能使用. 具体如何取出请参阅框架代码.\n\n- `PointsToSets`的实例化需要调用`PointsToSetsFactory`, 这点与A5不尽相同.\n\n- 上下文敏感指针信息不再通过`PointerFlowGraph`获取而是`CSManager`.\n\n- `Solver`中提供了`private final ContextSelector contextSelector`来获取算法中的`select()`方法, 该部分的实现对应实验指南的**Task2**. 对于**Task1**, 只需要知道可以调用其中的方法获取$c^t$上下文即可.\n\n## Task1 实现上下文敏感指针分析\n\n与A5相同, 推荐先完成顶层方法`analysis()`.\n\n> **Tips:** 在写代码时**一定一定**要注意上下文, 变量命名时要有区分度, 否则**DEBUG**时会充满痛苦.\n\n**重要:** 虽然`Stmt`中不包含上下文信息, 但框架代码中提供了丰富的API来根据`Stmt`的信息获取上下文信息. 同时可以确定的已知的相同上下文可以直接拿过来使用. 框架代码和算法原理确保了上述两点都是正确的.\n\n### analysis()\n\n- 逻辑上与上下文非敏感一致, 区别在于需要做例如`Var`与`CSVar`的转化, 传入`addPFGEdge()`的参数需要附上上下文, 可通过`csManager.getXXX()`获取.\n- 别忘了处理**Array Store/Load**, 以及判断`Field`是否为静态字段.\n\n### addPFGEdge()\n\n- 该函数内不涉及对上下文的关注, 与A5中的`addPFGEdge()`字符级一致, 可以直接`Crtl + C/V`.\n\n### propagate()\n\n- 同样不关注上下文信息, 逻辑一致, 但不同的是`PointsToSet`的实例化, 需要通过`PointsToSetFactory`完成.\n\n### processCall()\n\n- 注意该过程涉及三个不同的上下文: `CSVar recv`的上下文$c$, `CSObj recvObj`的上下文$c'$, 和通过`select`选择出的上下文$c^t$. 在使用上下文时请确保使用的是正确的上下文.\n- 上下文$c^t$的获取可通过`contextSelector.selectContext()`方法获取.\n- Callee的`thisVar`以及参数和返回值的获取在A4, A5中已经指出, 如有遗忘请进行复习.\n- `callGraph.addEdge()`中需要新建`Edge`, 其中参数`CallKind`可以通过`CallGraphs.getCallKind()`获取(通过A4了解). 需要注意的是, `CallGraphs`类虽然在本次实验中并未显式放在`src\\`目录下, 但仍然可以使用.\n- 其余要点在A4和A5中已经提到过, 在此不再赘述.\n\n### addReachable()\n\n- 使用访问者模式时代码依旧简洁, 但是需要注意的是此次使用`StmtProcessor`类时需要为每个方法实例化一个`StmtProcessor`.\n\n    > **Tips:** 原因比较直接, 为了区分上下文信息. 本次实验中处理语句需要用到`CSMethod`的上下文信息.\n\n#### Class StmtProcessor\n\n实现访问者模式的类, 在完成该部分时存在一些注意事项.\n\n- `Copy`, `Static StoreField`和`Static LoadField`与A5几乎没有区别, 注意传入的参数转换为带上下文的即可.\n- 算法伪代码中对`New`的处理和实际代码略有出入, 主要体现在上下文$c$上. `Obj`的上下文要通过`contextSelector.selectHeapContext()`获取.\n\n    > 笔者在此简要的解释一下.\n    >\n    > ![pic1-2](SPA-A6/pic1-2.png)\n    >\n    > 算法中将$x$和$o_i$的上下文均描述成$c$, 这其实表明$x$和$o_i$的上下文来源相同, 而不代表这两个$c$是一致的, 主要原因是限制两者的`k`不一定相同.为了区分, 令其为$c_x$和$c_o$, 笔者通过一个例子说明原因.\n    >\n    > 假设使用**CallSite敏感**策略, `k = 2`, 令堆上下文为`k - 1 = 1`. 那么传入的`c:method`的上下文为`[3, 9]`, 在该Method中有`15: y = new T()`, 对于`y`, 其上下文为`[3, 9]`, 但对于`o15`, 其上下文为`[9]`. 即二者上下文均来自`c:method`的上下文$c$, 但由于层数不同, 上下文也可能是不同的.\n\n- 对于**静态**`Stmt Invoke`的处理, 最好调用`Context selectContext(CSCallSite, JMethod)`而不是`Context selectContext(CSCallSite, CSObj, JMethod)`, 这是更符合框架代码API的描述的用法. 当然, 也可以选择在Task2中的后者加入静态调用的处理, 这样就可以在`Solver`中统一使用同一个方法.\n\n## Task2 实现常见的上下文敏感策略\n\n![pic1-3](SPA-A6/pic1-3.png)\n\n- 注意手册上的要求和明确根据**哪个参数**获取上下文即可. 该部分并不难实现.\n\n- 另外需要注意的是框架中将四个参数合并为三个, `CSCallSite`中包含了`Context`和`Invoke`两个参数.\n\n- 注意手册中对静态方法的处理要求, **CallSite**和**Object**, **Type**的要求并不一致.\n\n- 对于`selectContext()`处理方法调用的上下文, 需要根据参数新生成一层; 但对于`selectHeapContext()`处理堆的上下文, 则直接根据参数截取即可.\n\n### \\_1CallSelector & \\_2CallSelector\n\n对于**CallSite敏感**策略, 上下文自然在参数`CSCallSite callSite`中获取.\n\n如果`k = 2`, 枚举`Context`的层数选择最后一个和新上下文组合即可.\n\n### \\_1ObjSelector & \\_2ObjSelector\n\n对于**Object敏感**策略, 上下文需要在`CSObj recv`中获取.\n\n### \\_1TypeSelector & \\_2TypeSelector\n\n对于**Type敏感**策略, 上下文也需要在`CSObj recv`中获取. (想一想`Type`上下文选取是如何来的)\n\n根据**Type敏感**的定义, 可以在框架代码中找到一个对应的API: `Obj.getContainerType()`. 通过该方法获取`Type`即可.\n\n## 总结\n\n如果理解了CI指针分析, 本次CS指针分析实验的原理和逻辑就不难理解, 但细节处理上比A5要麻烦很多, 还请小心仔细.","source":"_posts/SPA-A6.md","raw":"---\ntitle: NJU静态分析|A6-Context Sensitive Pointer Analysis\ndate: 2024-12-01 21:52:02\nhidden: false\ntags:\n- NJU\n- 静态分析\ncategories:\n- NJU静态分析实验记录\n---\n\n**NJU Static Program Analysis | Assignment-6 Context Sensitive Pointer Analysis.**\n\n<!--more-->\n\n笔者写该实验写了一个下午之后注意力涣散了😇(†升天†)\n\n> **Tips:** 本次实验的指南中存在省略, 因此Debug过程可能会包含一些困难.\n\n## 实验目标\n\n基于**tai-e**框架实现上下文敏感的指针分析.\n\n## Preparation\n\n- **确保**理解了CI和CS的指针分析理论部分知识, 笔者不负责讲解课程中已经讲述过的理论知识.\n\n- **确保**理解了实验指南中的注意事项和框架中新增以及修改的源码, 否则在阅读本实验记录可能会遇到\"共识\"缺失的问题.\n\n## 理论部分\n\n总体来说, 上下文敏感指针分析算法和理论与上下文非敏感指针分析区别不大, 大体框架是一致的. 笔者不再像A5中整理, 不同的部分会在下文需要时给出.\n\n## 框架代码\n\n比起A5的框架代码变动并不大, 笔者在此简要解释一些要点.\n\n![pic1-1](SPA-A6/pic1-1.png)\n\n- 手册中该部分提及了上下文敏感指针分析中最重要的部分之一, `CSElement`和`Pointer`是本次实验主要操作的对象.\n\n- 在正式写实验之前请思考这两者间的不同, 如有混淆可能会影响实验的完成.(明晰两者的区别才知道该去哪里找API, 该调用什么方法, 毕竟ppt上的算法是类型\"模糊\"的)\n\n- 与A5相同, `Pointer`与`Obj`相对独立, 但请注意这里的`CSElement`与`Element`同样相对独立, `Element`与`Context`组合形成了`CSElement`, 因此许多API需要先取出`Context`或`Element`才能使用. 具体如何取出请参阅框架代码.\n\n- `PointsToSets`的实例化需要调用`PointsToSetsFactory`, 这点与A5不尽相同.\n\n- 上下文敏感指针信息不再通过`PointerFlowGraph`获取而是`CSManager`.\n\n- `Solver`中提供了`private final ContextSelector contextSelector`来获取算法中的`select()`方法, 该部分的实现对应实验指南的**Task2**. 对于**Task1**, 只需要知道可以调用其中的方法获取$c^t$上下文即可.\n\n## Task1 实现上下文敏感指针分析\n\n与A5相同, 推荐先完成顶层方法`analysis()`.\n\n> **Tips:** 在写代码时**一定一定**要注意上下文, 变量命名时要有区分度, 否则**DEBUG**时会充满痛苦.\n\n**重要:** 虽然`Stmt`中不包含上下文信息, 但框架代码中提供了丰富的API来根据`Stmt`的信息获取上下文信息. 同时可以确定的已知的相同上下文可以直接拿过来使用. 框架代码和算法原理确保了上述两点都是正确的.\n\n### analysis()\n\n- 逻辑上与上下文非敏感一致, 区别在于需要做例如`Var`与`CSVar`的转化, 传入`addPFGEdge()`的参数需要附上上下文, 可通过`csManager.getXXX()`获取.\n- 别忘了处理**Array Store/Load**, 以及判断`Field`是否为静态字段.\n\n### addPFGEdge()\n\n- 该函数内不涉及对上下文的关注, 与A5中的`addPFGEdge()`字符级一致, 可以直接`Crtl + C/V`.\n\n### propagate()\n\n- 同样不关注上下文信息, 逻辑一致, 但不同的是`PointsToSet`的实例化, 需要通过`PointsToSetFactory`完成.\n\n### processCall()\n\n- 注意该过程涉及三个不同的上下文: `CSVar recv`的上下文$c$, `CSObj recvObj`的上下文$c'$, 和通过`select`选择出的上下文$c^t$. 在使用上下文时请确保使用的是正确的上下文.\n- 上下文$c^t$的获取可通过`contextSelector.selectContext()`方法获取.\n- Callee的`thisVar`以及参数和返回值的获取在A4, A5中已经指出, 如有遗忘请进行复习.\n- `callGraph.addEdge()`中需要新建`Edge`, 其中参数`CallKind`可以通过`CallGraphs.getCallKind()`获取(通过A4了解). 需要注意的是, `CallGraphs`类虽然在本次实验中并未显式放在`src\\`目录下, 但仍然可以使用.\n- 其余要点在A4和A5中已经提到过, 在此不再赘述.\n\n### addReachable()\n\n- 使用访问者模式时代码依旧简洁, 但是需要注意的是此次使用`StmtProcessor`类时需要为每个方法实例化一个`StmtProcessor`.\n\n    > **Tips:** 原因比较直接, 为了区分上下文信息. 本次实验中处理语句需要用到`CSMethod`的上下文信息.\n\n#### Class StmtProcessor\n\n实现访问者模式的类, 在完成该部分时存在一些注意事项.\n\n- `Copy`, `Static StoreField`和`Static LoadField`与A5几乎没有区别, 注意传入的参数转换为带上下文的即可.\n- 算法伪代码中对`New`的处理和实际代码略有出入, 主要体现在上下文$c$上. `Obj`的上下文要通过`contextSelector.selectHeapContext()`获取.\n\n    > 笔者在此简要的解释一下.\n    >\n    > ![pic1-2](SPA-A6/pic1-2.png)\n    >\n    > 算法中将$x$和$o_i$的上下文均描述成$c$, 这其实表明$x$和$o_i$的上下文来源相同, 而不代表这两个$c$是一致的, 主要原因是限制两者的`k`不一定相同.为了区分, 令其为$c_x$和$c_o$, 笔者通过一个例子说明原因.\n    >\n    > 假设使用**CallSite敏感**策略, `k = 2`, 令堆上下文为`k - 1 = 1`. 那么传入的`c:method`的上下文为`[3, 9]`, 在该Method中有`15: y = new T()`, 对于`y`, 其上下文为`[3, 9]`, 但对于`o15`, 其上下文为`[9]`. 即二者上下文均来自`c:method`的上下文$c$, 但由于层数不同, 上下文也可能是不同的.\n\n- 对于**静态**`Stmt Invoke`的处理, 最好调用`Context selectContext(CSCallSite, JMethod)`而不是`Context selectContext(CSCallSite, CSObj, JMethod)`, 这是更符合框架代码API的描述的用法. 当然, 也可以选择在Task2中的后者加入静态调用的处理, 这样就可以在`Solver`中统一使用同一个方法.\n\n## Task2 实现常见的上下文敏感策略\n\n![pic1-3](SPA-A6/pic1-3.png)\n\n- 注意手册上的要求和明确根据**哪个参数**获取上下文即可. 该部分并不难实现.\n\n- 另外需要注意的是框架中将四个参数合并为三个, `CSCallSite`中包含了`Context`和`Invoke`两个参数.\n\n- 注意手册中对静态方法的处理要求, **CallSite**和**Object**, **Type**的要求并不一致.\n\n- 对于`selectContext()`处理方法调用的上下文, 需要根据参数新生成一层; 但对于`selectHeapContext()`处理堆的上下文, 则直接根据参数截取即可.\n\n### \\_1CallSelector & \\_2CallSelector\n\n对于**CallSite敏感**策略, 上下文自然在参数`CSCallSite callSite`中获取.\n\n如果`k = 2`, 枚举`Context`的层数选择最后一个和新上下文组合即可.\n\n### \\_1ObjSelector & \\_2ObjSelector\n\n对于**Object敏感**策略, 上下文需要在`CSObj recv`中获取.\n\n### \\_1TypeSelector & \\_2TypeSelector\n\n对于**Type敏感**策略, 上下文也需要在`CSObj recv`中获取. (想一想`Type`上下文选取是如何来的)\n\n根据**Type敏感**的定义, 可以在框架代码中找到一个对应的API: `Obj.getContainerType()`. 通过该方法获取`Type`即可.\n\n## 总结\n\n如果理解了CI指针分析, 本次CS指针分析实验的原理和逻辑就不难理解, 但细节处理上比A5要麻烦很多, 还请小心仔细.","slug":"SPA-A6","published":1,"updated":"2024-12-03T13:08:48.339Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyv0002pssil0dqndob4","content":"<p><strong>NJU Static Program Analysis | Assignment-6 Context Sensitive\r\nPointer Analysis.</strong></p>\r\n<span id=\"more\"></span>\r\n<p>笔者写该实验写了一个下午之后注意力涣散了😇(†升天†)</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 本次实验的指南中存在省略,\r\n因此Debug过程可能会包含一些困难.</p>\r\n</blockquote>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>tai-e</strong>框架实现上下文敏感的指针分析.</p>\r\n<h2 id=\"preparation\">Preparation</h2>\r\n<ul>\r\n<li><p><strong>确保</strong>理解了CI和CS的指针分析理论部分知识,\r\n笔者不负责讲解课程中已经讲述过的理论知识.</p></li>\r\n<li><p><strong>确保</strong>理解了实验指南中的注意事项和框架中新增以及修改的源码,\r\n否则在阅读本实验记录可能会遇到\"共识\"缺失的问题.</p></li>\r\n</ul>\r\n<h2 id=\"理论部分\">理论部分</h2>\r\n<p>总体来说, 上下文敏感指针分析算法和理论与上下文非敏感指针分析区别不大,\r\n大体框架是一致的. 笔者不再像A5中整理, 不同的部分会在下文需要时给出.</p>\r\n<h2 id=\"框架代码\">框架代码</h2>\r\n<p>比起A5的框架代码变动并不大, 笔者在此简要解释一些要点.</p>\r\n<img src=\"/2024/12/01/SPA-A6/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<ul>\r\n<li><p>手册中该部分提及了上下文敏感指针分析中最重要的部分之一,\r\n<code>CSElement</code>和<code>Pointer</code>是本次实验主要操作的对象.</p></li>\r\n<li><p>在正式写实验之前请思考这两者间的不同,\r\n如有混淆可能会影响实验的完成.(明晰两者的区别才知道该去哪里找API,\r\n该调用什么方法, 毕竟ppt上的算法是类型\"模糊\"的)</p></li>\r\n<li><p>与A5相同, <code>Pointer</code>与<code>Obj</code>相对独立,\r\n但请注意这里的<code>CSElement</code>与<code>Element</code>同样相对独立,\r\n<code>Element</code>与<code>Context</code>组合形成了<code>CSElement</code>,\r\n因此许多API需要先取出<code>Context</code>或<code>Element</code>才能使用.\r\n具体如何取出请参阅框架代码.</p></li>\r\n<li><p><code>PointsToSets</code>的实例化需要调用<code>PointsToSetsFactory</code>,\r\n这点与A5不尽相同.</p></li>\r\n<li><p>上下文敏感指针信息不再通过<code>PointerFlowGraph</code>获取而是<code>CSManager</code>.</p></li>\r\n<li><p><code>Solver</code>中提供了<code>private final ContextSelector contextSelector</code>来获取算法中的<code>select()</code>方法,\r\n该部分的实现对应实验指南的<strong>Task2</strong>.\r\n对于<strong>Task1</strong>, 只需要知道可以调用其中的方法获取<span\r\nclass=\"math inline\">\\(c^t\\)</span>上下文即可.</p></li>\r\n</ul>\r\n<h2 id=\"task1-实现上下文敏感指针分析\">Task1 实现上下文敏感指针分析</h2>\r\n<p>与A5相同, 推荐先完成顶层方法<code>analysis()</code>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n在写代码时<strong>一定一定</strong>要注意上下文, 变量命名时要有区分度,\r\n否则<strong>DEBUG</strong>时会充满痛苦.</p>\r\n</blockquote>\r\n<p><strong>重要:</strong> 虽然<code>Stmt</code>中不包含上下文信息,\r\n但框架代码中提供了丰富的API来根据<code>Stmt</code>的信息获取上下文信息.\r\n同时可以确定的已知的相同上下文可以直接拿过来使用.\r\n框架代码和算法原理确保了上述两点都是正确的.</p>\r\n<h3 id=\"analysis\">analysis()</h3>\r\n<ul>\r\n<li>逻辑上与上下文非敏感一致,\r\n区别在于需要做例如<code>Var</code>与<code>CSVar</code>的转化,\r\n传入<code>addPFGEdge()</code>的参数需要附上上下文,\r\n可通过<code>csManager.getXXX()</code>获取.</li>\r\n<li>别忘了处理<strong>Array Store/Load</strong>,\r\n以及判断<code>Field</code>是否为静态字段.</li>\r\n</ul>\r\n<h3 id=\"addpfgedge\">addPFGEdge()</h3>\r\n<ul>\r\n<li>该函数内不涉及对上下文的关注,\r\n与A5中的<code>addPFGEdge()</code>字符级一致,\r\n可以直接<code>Crtl + C/V</code>.</li>\r\n</ul>\r\n<h3 id=\"propagate\">propagate()</h3>\r\n<ul>\r\n<li>同样不关注上下文信息, 逻辑一致,\r\n但不同的是<code>PointsToSet</code>的实例化,\r\n需要通过<code>PointsToSetFactory</code>完成.</li>\r\n</ul>\r\n<h3 id=\"processcall\">processCall()</h3>\r\n<ul>\r\n<li>注意该过程涉及三个不同的上下文: <code>CSVar recv</code>的上下文<span\r\nclass=\"math inline\">\\(c\\)</span>,\r\n<code>CSObj recvObj</code>的上下文<span\r\nclass=\"math inline\">\\(c&#39;\\)</span>,\r\n和通过<code>select</code>选择出的上下文<span\r\nclass=\"math inline\">\\(c^t\\)</span>.\r\n在使用上下文时请确保使用的是正确的上下文.</li>\r\n<li>上下文<span\r\nclass=\"math inline\">\\(c^t\\)</span>的获取可通过<code>contextSelector.selectContext()</code>方法获取.</li>\r\n<li>Callee的<code>thisVar</code>以及参数和返回值的获取在A4,\r\nA5中已经指出, 如有遗忘请进行复习.</li>\r\n<li><code>callGraph.addEdge()</code>中需要新建<code>Edge</code>,\r\n其中参数<code>CallKind</code>可以通过<code>CallGraphs.getCallKind()</code>获取(通过A4了解).\r\n需要注意的是,\r\n<code>CallGraphs</code>类虽然在本次实验中并未显式放在<code>src\\</code>目录下,\r\n但仍然可以使用.</li>\r\n<li>其余要点在A4和A5中已经提到过, 在此不再赘述.</li>\r\n</ul>\r\n<h3 id=\"addreachable\">addReachable()</h3>\r\n<ul>\r\n<li><p>使用访问者模式时代码依旧简洁,\r\n但是需要注意的是此次使用<code>StmtProcessor</code>类时需要为每个方法实例化一个<code>StmtProcessor</code>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 原因比较直接, 为了区分上下文信息.\r\n本次实验中处理语句需要用到<code>CSMethod</code>的上下文信息.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h4 id=\"class-stmtprocessor\">Class StmtProcessor</h4>\r\n<p>实现访问者模式的类, 在完成该部分时存在一些注意事项.</p>\r\n<ul>\r\n<li><p><code>Copy</code>,\r\n<code>Static StoreField</code>和<code>Static LoadField</code>与A5几乎没有区别,\r\n注意传入的参数转换为带上下文的即可.</p></li>\r\n<li><p>算法伪代码中对<code>New</code>的处理和实际代码略有出入,\r\n主要体现在上下文<span class=\"math inline\">\\(c\\)</span>上.\r\n<code>Obj</code>的上下文要通过<code>contextSelector.selectHeapContext()</code>获取.</p>\r\n<blockquote>\r\n<p>笔者在此简要的解释一下.</p>\r\n<img src=\"/2024/12/01/SPA-A6/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<p>算法中将<span class=\"math inline\">\\(x\\)</span>和<span\r\nclass=\"math inline\">\\(o_i\\)</span>的上下文均描述成<span\r\nclass=\"math inline\">\\(c\\)</span>, 这其实表明<span\r\nclass=\"math inline\">\\(x\\)</span>和<span\r\nclass=\"math inline\">\\(o_i\\)</span>的上下文来源相同, 而不代表这两个<span\r\nclass=\"math inline\">\\(c\\)</span>是一致的,\r\n主要原因是限制两者的<code>k</code>不一定相同.为了区分, 令其为<span\r\nclass=\"math inline\">\\(c_x\\)</span>和<span\r\nclass=\"math inline\">\\(c_o\\)</span>, 笔者通过一个例子说明原因.</p>\r\n<p>假设使用<strong>CallSite敏感</strong>策略, <code>k = 2</code>,\r\n令堆上下文为<code>k - 1 = 1</code>.\r\n那么传入的<code>c:method</code>的上下文为<code>[3, 9]</code>,\r\n在该Method中有<code>15: y = new T()</code>, 对于<code>y</code>,\r\n其上下文为<code>[3, 9]</code>, 但对于<code>o15</code>,\r\n其上下文为<code>[9]</code>.\r\n即二者上下文均来自<code>c:method</code>的上下文<span\r\nclass=\"math inline\">\\(c\\)</span>, 但由于层数不同,\r\n上下文也可能是不同的.</p>\r\n</blockquote></li>\r\n<li><p>对于<strong>静态</strong><code>Stmt Invoke</code>的处理,\r\n最好调用<code>Context selectContext(CSCallSite, JMethod)</code>而不是<code>Context selectContext(CSCallSite, CSObj, JMethod)</code>,\r\n这是更符合框架代码API的描述的用法. 当然,\r\n也可以选择在Task2中的后者加入静态调用的处理,\r\n这样就可以在<code>Solver</code>中统一使用同一个方法.</p></li>\r\n</ul>\r\n<h2 id=\"task2-实现常见的上下文敏感策略\">Task2\r\n实现常见的上下文敏感策略</h2>\r\n<img src=\"/2024/12/01/SPA-A6/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n<ul>\r\n<li><p>注意手册上的要求和明确根据<strong>哪个参数</strong>获取上下文即可.\r\n该部分并不难实现.</p></li>\r\n<li><p>另外需要注意的是框架中将四个参数合并为三个,\r\n<code>CSCallSite</code>中包含了<code>Context</code>和<code>Invoke</code>两个参数.</p></li>\r\n<li><p>注意手册中对静态方法的处理要求,\r\n<strong>CallSite</strong>和<strong>Object</strong>,\r\n<strong>Type</strong>的要求并不一致.</p></li>\r\n<li><p>对于<code>selectContext()</code>处理方法调用的上下文,\r\n需要根据参数新生成一层;\r\n但对于<code>selectHeapContext()</code>处理堆的上下文,\r\n则直接根据参数截取即可.</p></li>\r\n</ul>\r\n<h3 id=\"callselector-_2callselector\">_1CallSelector &amp;\r\n_2CallSelector</h3>\r\n<p>对于<strong>CallSite敏感</strong>策略,\r\n上下文自然在参数<code>CSCallSite callSite</code>中获取.</p>\r\n<p>如果<code>k = 2</code>,\r\n枚举<code>Context</code>的层数选择最后一个和新上下文组合即可.</p>\r\n<h3 id=\"objselector-_2objselector\">_1ObjSelector &amp;\r\n_2ObjSelector</h3>\r\n<p>对于<strong>Object敏感</strong>策略,\r\n上下文需要在<code>CSObj recv</code>中获取.</p>\r\n<h3 id=\"typeselector-_2typeselector\">_1TypeSelector &amp;\r\n_2TypeSelector</h3>\r\n<p>对于<strong>Type敏感</strong>策略,\r\n上下文也需要在<code>CSObj recv</code>中获取.\r\n(想一想<code>Type</code>上下文选取是如何来的)</p>\r\n<p>根据<strong>Type敏感</strong>的定义,\r\n可以在框架代码中找到一个对应的API: <code>Obj.getContainerType()</code>.\r\n通过该方法获取<code>Type</code>即可.</p>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>如果理解了CI指针分析, 本次CS指针分析实验的原理和逻辑就不难理解,\r\n但细节处理上比A5要麻烦很多, 还请小心仔细.</p>\r\n","length":1794,"excerpt":"<p><strong>NJU Static Program Analysis | Assignment-6 Context Sensitive\r\nPointer Analysis.</strong></p>","more":"<p>笔者写该实验写了一个下午之后注意力涣散了😇(†升天†)</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 本次实验的指南中存在省略,\r\n因此Debug过程可能会包含一些困难.</p>\r\n</blockquote>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>tai-e</strong>框架实现上下文敏感的指针分析.</p>\r\n<h2 id=\"preparation\">Preparation</h2>\r\n<ul>\r\n<li><p><strong>确保</strong>理解了CI和CS的指针分析理论部分知识,\r\n笔者不负责讲解课程中已经讲述过的理论知识.</p></li>\r\n<li><p><strong>确保</strong>理解了实验指南中的注意事项和框架中新增以及修改的源码,\r\n否则在阅读本实验记录可能会遇到\"共识\"缺失的问题.</p></li>\r\n</ul>\r\n<h2 id=\"理论部分\">理论部分</h2>\r\n<p>总体来说, 上下文敏感指针分析算法和理论与上下文非敏感指针分析区别不大,\r\n大体框架是一致的. 笔者不再像A5中整理, 不同的部分会在下文需要时给出.</p>\r\n<h2 id=\"框架代码\">框架代码</h2>\r\n<p>比起A5的框架代码变动并不大, 笔者在此简要解释一些要点.</p>\r\n<img src=\"/2024/12/01/SPA-A6/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<ul>\r\n<li><p>手册中该部分提及了上下文敏感指针分析中最重要的部分之一,\r\n<code>CSElement</code>和<code>Pointer</code>是本次实验主要操作的对象.</p></li>\r\n<li><p>在正式写实验之前请思考这两者间的不同,\r\n如有混淆可能会影响实验的完成.(明晰两者的区别才知道该去哪里找API,\r\n该调用什么方法, 毕竟ppt上的算法是类型\"模糊\"的)</p></li>\r\n<li><p>与A5相同, <code>Pointer</code>与<code>Obj</code>相对独立,\r\n但请注意这里的<code>CSElement</code>与<code>Element</code>同样相对独立,\r\n<code>Element</code>与<code>Context</code>组合形成了<code>CSElement</code>,\r\n因此许多API需要先取出<code>Context</code>或<code>Element</code>才能使用.\r\n具体如何取出请参阅框架代码.</p></li>\r\n<li><p><code>PointsToSets</code>的实例化需要调用<code>PointsToSetsFactory</code>,\r\n这点与A5不尽相同.</p></li>\r\n<li><p>上下文敏感指针信息不再通过<code>PointerFlowGraph</code>获取而是<code>CSManager</code>.</p></li>\r\n<li><p><code>Solver</code>中提供了<code>private final ContextSelector contextSelector</code>来获取算法中的<code>select()</code>方法,\r\n该部分的实现对应实验指南的<strong>Task2</strong>.\r\n对于<strong>Task1</strong>, 只需要知道可以调用其中的方法获取<span\r\nclass=\"math inline\">\\(c^t\\)</span>上下文即可.</p></li>\r\n</ul>\r\n<h2 id=\"task1-实现上下文敏感指针分析\">Task1 实现上下文敏感指针分析</h2>\r\n<p>与A5相同, 推荐先完成顶层方法<code>analysis()</code>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n在写代码时<strong>一定一定</strong>要注意上下文, 变量命名时要有区分度,\r\n否则<strong>DEBUG</strong>时会充满痛苦.</p>\r\n</blockquote>\r\n<p><strong>重要:</strong> 虽然<code>Stmt</code>中不包含上下文信息,\r\n但框架代码中提供了丰富的API来根据<code>Stmt</code>的信息获取上下文信息.\r\n同时可以确定的已知的相同上下文可以直接拿过来使用.\r\n框架代码和算法原理确保了上述两点都是正确的.</p>\r\n<h3 id=\"analysis\">analysis()</h3>\r\n<ul>\r\n<li>逻辑上与上下文非敏感一致,\r\n区别在于需要做例如<code>Var</code>与<code>CSVar</code>的转化,\r\n传入<code>addPFGEdge()</code>的参数需要附上上下文,\r\n可通过<code>csManager.getXXX()</code>获取.</li>\r\n<li>别忘了处理<strong>Array Store/Load</strong>,\r\n以及判断<code>Field</code>是否为静态字段.</li>\r\n</ul>\r\n<h3 id=\"addpfgedge\">addPFGEdge()</h3>\r\n<ul>\r\n<li>该函数内不涉及对上下文的关注,\r\n与A5中的<code>addPFGEdge()</code>字符级一致,\r\n可以直接<code>Crtl + C/V</code>.</li>\r\n</ul>\r\n<h3 id=\"propagate\">propagate()</h3>\r\n<ul>\r\n<li>同样不关注上下文信息, 逻辑一致,\r\n但不同的是<code>PointsToSet</code>的实例化,\r\n需要通过<code>PointsToSetFactory</code>完成.</li>\r\n</ul>\r\n<h3 id=\"processcall\">processCall()</h3>\r\n<ul>\r\n<li>注意该过程涉及三个不同的上下文: <code>CSVar recv</code>的上下文<span\r\nclass=\"math inline\">\\(c\\)</span>,\r\n<code>CSObj recvObj</code>的上下文<span\r\nclass=\"math inline\">\\(c&#39;\\)</span>,\r\n和通过<code>select</code>选择出的上下文<span\r\nclass=\"math inline\">\\(c^t\\)</span>.\r\n在使用上下文时请确保使用的是正确的上下文.</li>\r\n<li>上下文<span\r\nclass=\"math inline\">\\(c^t\\)</span>的获取可通过<code>contextSelector.selectContext()</code>方法获取.</li>\r\n<li>Callee的<code>thisVar</code>以及参数和返回值的获取在A4,\r\nA5中已经指出, 如有遗忘请进行复习.</li>\r\n<li><code>callGraph.addEdge()</code>中需要新建<code>Edge</code>,\r\n其中参数<code>CallKind</code>可以通过<code>CallGraphs.getCallKind()</code>获取(通过A4了解).\r\n需要注意的是,\r\n<code>CallGraphs</code>类虽然在本次实验中并未显式放在<code>src\\</code>目录下,\r\n但仍然可以使用.</li>\r\n<li>其余要点在A4和A5中已经提到过, 在此不再赘述.</li>\r\n</ul>\r\n<h3 id=\"addreachable\">addReachable()</h3>\r\n<ul>\r\n<li><p>使用访问者模式时代码依旧简洁,\r\n但是需要注意的是此次使用<code>StmtProcessor</code>类时需要为每个方法实例化一个<code>StmtProcessor</code>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 原因比较直接, 为了区分上下文信息.\r\n本次实验中处理语句需要用到<code>CSMethod</code>的上下文信息.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h4 id=\"class-stmtprocessor\">Class StmtProcessor</h4>\r\n<p>实现访问者模式的类, 在完成该部分时存在一些注意事项.</p>\r\n<ul>\r\n<li><p><code>Copy</code>,\r\n<code>Static StoreField</code>和<code>Static LoadField</code>与A5几乎没有区别,\r\n注意传入的参数转换为带上下文的即可.</p></li>\r\n<li><p>算法伪代码中对<code>New</code>的处理和实际代码略有出入,\r\n主要体现在上下文<span class=\"math inline\">\\(c\\)</span>上.\r\n<code>Obj</code>的上下文要通过<code>contextSelector.selectHeapContext()</code>获取.</p>\r\n<blockquote>\r\n<p>笔者在此简要的解释一下.</p>\r\n<img src=\"/2024/12/01/SPA-A6/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<p>算法中将<span class=\"math inline\">\\(x\\)</span>和<span\r\nclass=\"math inline\">\\(o_i\\)</span>的上下文均描述成<span\r\nclass=\"math inline\">\\(c\\)</span>, 这其实表明<span\r\nclass=\"math inline\">\\(x\\)</span>和<span\r\nclass=\"math inline\">\\(o_i\\)</span>的上下文来源相同, 而不代表这两个<span\r\nclass=\"math inline\">\\(c\\)</span>是一致的,\r\n主要原因是限制两者的<code>k</code>不一定相同.为了区分, 令其为<span\r\nclass=\"math inline\">\\(c_x\\)</span>和<span\r\nclass=\"math inline\">\\(c_o\\)</span>, 笔者通过一个例子说明原因.</p>\r\n<p>假设使用<strong>CallSite敏感</strong>策略, <code>k = 2</code>,\r\n令堆上下文为<code>k - 1 = 1</code>.\r\n那么传入的<code>c:method</code>的上下文为<code>[3, 9]</code>,\r\n在该Method中有<code>15: y = new T()</code>, 对于<code>y</code>,\r\n其上下文为<code>[3, 9]</code>, 但对于<code>o15</code>,\r\n其上下文为<code>[9]</code>.\r\n即二者上下文均来自<code>c:method</code>的上下文<span\r\nclass=\"math inline\">\\(c\\)</span>, 但由于层数不同,\r\n上下文也可能是不同的.</p>\r\n</blockquote></li>\r\n<li><p>对于<strong>静态</strong><code>Stmt Invoke</code>的处理,\r\n最好调用<code>Context selectContext(CSCallSite, JMethod)</code>而不是<code>Context selectContext(CSCallSite, CSObj, JMethod)</code>,\r\n这是更符合框架代码API的描述的用法. 当然,\r\n也可以选择在Task2中的后者加入静态调用的处理,\r\n这样就可以在<code>Solver</code>中统一使用同一个方法.</p></li>\r\n</ul>\r\n<h2 id=\"task2-实现常见的上下文敏感策略\">Task2\r\n实现常见的上下文敏感策略</h2>\r\n<img src=\"/2024/12/01/SPA-A6/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n<ul>\r\n<li><p>注意手册上的要求和明确根据<strong>哪个参数</strong>获取上下文即可.\r\n该部分并不难实现.</p></li>\r\n<li><p>另外需要注意的是框架中将四个参数合并为三个,\r\n<code>CSCallSite</code>中包含了<code>Context</code>和<code>Invoke</code>两个参数.</p></li>\r\n<li><p>注意手册中对静态方法的处理要求,\r\n<strong>CallSite</strong>和<strong>Object</strong>,\r\n<strong>Type</strong>的要求并不一致.</p></li>\r\n<li><p>对于<code>selectContext()</code>处理方法调用的上下文,\r\n需要根据参数新生成一层;\r\n但对于<code>selectHeapContext()</code>处理堆的上下文,\r\n则直接根据参数截取即可.</p></li>\r\n</ul>\r\n<h3 id=\"callselector-_2callselector\">_1CallSelector &amp;\r\n_2CallSelector</h3>\r\n<p>对于<strong>CallSite敏感</strong>策略,\r\n上下文自然在参数<code>CSCallSite callSite</code>中获取.</p>\r\n<p>如果<code>k = 2</code>,\r\n枚举<code>Context</code>的层数选择最后一个和新上下文组合即可.</p>\r\n<h3 id=\"objselector-_2objselector\">_1ObjSelector &amp;\r\n_2ObjSelector</h3>\r\n<p>对于<strong>Object敏感</strong>策略,\r\n上下文需要在<code>CSObj recv</code>中获取.</p>\r\n<h3 id=\"typeselector-_2typeselector\">_1TypeSelector &amp;\r\n_2TypeSelector</h3>\r\n<p>对于<strong>Type敏感</strong>策略,\r\n上下文也需要在<code>CSObj recv</code>中获取.\r\n(想一想<code>Type</code>上下文选取是如何来的)</p>\r\n<p>根据<strong>Type敏感</strong>的定义,\r\n可以在框架代码中找到一个对应的API: <code>Obj.getContainerType()</code>.\r\n通过该方法获取<code>Type</code>即可.</p>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>如果理解了CI指针分析, 本次CS指针分析实验的原理和逻辑就不难理解,\r\n但细节处理上比A5要麻烦很多, 还请小心仔细.</p>"},{"title":"NJU静态分析|A7-Alias-Aware Interprocedural Constant Propagation","date":"2024-12-09T02:06:40.000Z","hidden":false,"_content":"\n**NJU Static Program Analysis | Assignment-7 Alias-Aware Interprocedural Constant Propagation.**\n\n<!--more-->\n\n## 实验目标\n\n基于**tai-e**框架实现带别名分析的过程间常量传播.\n\n## Preparation\n\n- 将`A2/.../ConstantPropagation`复制到`A7/.../ConstantPropagation`\n- 将`A4/.../InterConstantPropagation`复制到`A7/.../InterConstantPropagation`\n- 将`A4/.../InterSolver`复制到`A7/InterSolver`\n- 将`A6/.../cs/Solver`复制到`A7/.../cs/Solver`\n- 将`A6/.../_2ObjSelector`复制到`A7/.../_2ObjSelector`\n\n    > **Tips:** `plan.yml`已经配置好了`cs: 2-obj`, 如果本地测试中想要使用其他策略, 需要将对应`Selector`复制到本次实验目录, 并配置`plan.yml`(方法已在A6实验指南中给出)\n\n***注意:*** 除去指针分析的部分作为结果查询字段指向外, 其余文件都可以是本次实验的更改范围.\n\n## Review\n\n由于要设计算法, 不妨先复习一下A2和A4中常量传播算法和应用范围.\n\n- 常量传播算法是**Forward & Must Analysis**. 迭代至收敛至\"最大\"不动点.\n\n    > **Additional:**\n    >\n    > 迭代算法框架如下:\n    >\n    > ![pic1-1](SPA-A7/pic1-1.png)\n    >\n    > 活跃变量分析的迭代示例:\n    >\n    > ![pic1-2](SPA-A7/pic1-2.png)\n\n- 常量传播算法中对数值的抽象为`UNDEF->CONST->NAC`.\n\n- 由于数据流动的\"单调性\", **Meet**要满足\n\n    > ![pic1-3](SPA-A7/pic1-3.png)\n\n- 语句处理的**Transfer Function**\n\n    > ![pic1-4](SPA-A7/pic1-4.png)\n\n> 在A2中, 处理范围仅限于`DefinitionStmt`中的变量和表达式部分, 对于诸如**字段, 数组**部分采取保守策略, 赋值为`NAC`; 分析范围仅局限于**过程内分析**, 此时为方法调用的返回值采取保守策略, 赋值为`NAC`.\n>\n> 在A4中, 同样只处理变量, 但分析范围扩展为过程间分析, 需要完成对方法调用传参, 传返回值, 为了完成过程间的数据流传递, 加入了**Transfer Edge**.\n>\n> 由于方法调用的**动态时确认**, 需要知道在这个调用点`callsite`, 真正的`callee`是什么, 因此建立**CallGraph**为**ICFG(inter-procedural control-flow graph)** 提供调用图信息.(你应该还记得在A4的`CHABuilder`完成前, `Assignment`不会输出任何ICFG信息)\n>\n> ![pic1-5](SPA-A7/pic1-5.png)\n\n## Requirement & Analysis\n\n现在来看看实验要求和手上的工具, 看看如何处理新需求.\n\n### 常量处理范围\n\n在之前的实验中, 忽略了**字段Field**和**数组Array**的分析, 原因在本次实验已经指出, 是**别名Alias**所引起的, 由于多个变量(指针)可以指向同一个对象, 只有当明确指针所指向对象时, 才能为其赋值**常量Constant**.\n\n需要指出的是, 本次实验仍然**只需要处理int类型的变量**. A2中已经提供了足够好用的`canHoldInt()`.\n\n另外, 指南上讲述了实验框架中会忽略**静态字段的初始化**的情况, 因其在控制流图中不可达, 不需要对其进行额外的处理.\n\n### 域分析范围\n\nA4开始采用了一种精度较低的方法CHA构建**CallGraph**; A5, A6使用了精度更高的指针分析技术构建**CallGraph**.\n\n本次实验仍然是处理**过程间常量传播**, 由于**CallGraph**更加精确, 分析精度相较于A4也会更进一步. 同时, 在Tai-e框架下完成实验不需要关注**ICFG**如何获得**CG**信息(如有兴趣可自行阅读框架代码).\n\n### PointerAnalysisResult\n\n框架代码提供了`class PointerAnalysisResult`用来获取指针分析的结果, 该部分的初始化在`InterConstantPropagation`中的`initial()`中完成.\n\n其中包含的API说明都较为清晰, 笔者在此不过多赘述.\n\n### 别名分析\n\n该部分实验指南已经给出了一个比较简单的实现方法, **Pointer指向的PointsToSet存在交集, 则认为二者互为别名.**\n\n换个说法, **存在两个或两个以上Pointer指向同一个Obj, 则认为二者互为别名.**\n\n实验指南中讲述了为什么只需要`Pointer`而不是`CSPointer`的原因\n\n笔者在此给出两个简单的算法思路:\n\n- 遍历所有的`Pointer1`与`Pointer2`, 获取`PointsToSet`, 如果有交集就加入`Multiple Map`中, 简单地以`<Var, Var>`的形式维护alias信息.\n\n- 遍历所有的`Pointer`和对应的`PointsToSet`, 维护一个`<Obj, Var>`结构, 对于`<Obj, Var1>`和`<Obj, Var2>`, `Var1`和`Var2`互为别名.\n\n> **Tips: 框架代码的做法**\n>\n> 如果你有阅读过框架代码或者\"意外\"跳转到`class Maps`, 便会发现, Tai-e框架中已经配置了好了获取基本数据结构的API(被TT深不可测的代码力所折服). 可以通过简单的`Maps.newMultiMap()`获取实例化数据结构. 当然, 也可以选择自己实例化Map的结构.\n>\n> 不过需要注意的是, 该部分代码**不是显式给出的**, 而是封装在`tai-e-assignment.jar`中, 可以选择阅读科研版doc或者阅读反编译后的源码(该部分结构简单, 即便无注释也可以理解)\n\n### Field处理\n\n在这里会遇到第一个头疼的点: **ConstPropagation是流敏感的, 但PointerAnalysis是流不敏感的.**\n\n尽管别名信息不依赖于常量传播, 但对象存储的值来源常量传播. 因此, 需要先理清楚如何处理`Load`和`Store`.(**注意:** 笔者以下论述基于InstanceField, SaticField的处理只会比InstanceField简单)\n\n> **Try: 先收集所有的Store再更新给Load?**\n>\n> 这是符合流不敏感的思路, 但是在ConstPropagation的流敏感框架中非常难以实现. 在迭代过程中, Store的**右值**可能会改变, Store的变化也会引起非Field和Array变量的变化. 所以, Field和Array的更新也需要采用流敏感框架中的迭代方法.\n\n现在来分析如何用迭代的方法处理Field.\n\n- 对于Load, 因为迭代的缘故, 可以先假设后续的处理会正确的广播到此处, 更新Load的值. 因此只需要简单的传播到def即可.\n\n- 对于Store, 假设已经有了一个对应的Load结构, Store产生了更新该如何广播? worklist加入`Load Stmt`迭代即可.\n\n- 同时, 需要注意InstanceFiled的特性, 考虑别名信息进行更新即可.\n\n### Array处理\n\nArray可以理解成一种特殊的InstanceField, 不过需要注意何时互为别名, 只有在互为别名的情况下才考虑广播.\n\n### 小结\n\n至此已经有了一个对完成本次实验的一个基本思路了, 接下来开始考虑一些完成实验的细节.\n\n## 算法设计\n\n> **Tips:** 笔者在此章节不详谈实现上的细节, 该部分在[拾遗](#拾遗-tai-e-faq-you-need-to-know)章节分点给出. 并且, 由于框架代码的特性, 算法的实现可能与思路有所出入.\n\n> **Question: 这次新写的代码和A4冲突吗?**\n>\n> 这个问题实际上是在问: Field和Array的传播是否会影响到过程间常量传播的**EdgeTransfer**.\n>\n> 答案自然是否定的, Field和Array可以理解成一种特殊的Var, 尽管其结果不需要呈现在`DataFlowResult`中. 可以自然地得出结论: 加入Field和Array并不会改变A4的算法框架.\n>\n> 也即, 本次实验所设计的算法是对**TransferNonCallNode(A2-IntraConstPropagation)**的补全.\n\n所以, 本次算法的基本框架可以表示为:\n\n```java\nboolean transferNonCallNode(Stmt stmt, CPFact in, CPFact out){\n    if (stmt instanceof LoadField){\n        //handle\n    }\n    if (stmt instanceof StoreFiled){\n        //handle\n    }\n    if (stmt instanceof LoadArray){\n        //handle\n    }\n    if (stmt instanceof StoreArray){\n        //handle\n    }\n    else{\n        cp.transferNode(); //form A2\n    }\n}\n```\n\n当然, 你也可以选择将这些语句的处理直接整合进`ConstantPropagation`(前提是A2的实现最好确保是正确的).\n\n> **Tips:** 还记得在A5和A6中是如何优雅地处理繁杂的`instanceof`判断吗? 对, 就是**访问者模式**, 在本次实验中, 仍然可以选择这样的方法实现算法. 所有的`Stmt`类中都已经内置了`accept()`API可供访问, 只需要新的访问类继承自`StmtVisitor`即可.\n\n### `<Field, Value>`的存储和广播\n\n> **Tips:** 在Tai-e框架中, 将Array等效抽象成Field, 并不对**Index**做具体的区分(对`a[i]`和`a[j]`的store操作视为对同一对象`a[...]`的store操作). 尽管如此, index信息也有助于分区`a[i]`和`a[j]`是否为别名, 从而决定是否需要广播. 因此, Array的维护会比Field更复杂, 但基本原理一致, 笔者在此章节**不再**赘述Array应如何处理.\n\n在之前的分析中已经获知了[Alias信息](#别名分析), 该部分算法的实现依赖于别名信息.\n\n笔者在此给出两个算法思路抛砖引玉:\n\n#### 只考虑Alias层\n\n这是个朴实但简单的想法: 所有的`y = x.f`来自也只来自`x.f = z`, 这句\"废话\"意味着什么?\n\n**意味着其实根本就不需要考虑`x.f`或者说`oi.f`的取值, 如果想知道`y`可能的value值, 只需要`meet`所有的`z`就可以了.**\n\n根据这个思路, 有:\n\n- 对于`LoadField`, 找到所有与`x.f`相关的`x'.f = z`, 其中`x'`是`x`的别名, **meet** `z`的`value`值. 如果`y = meet(foreach(z))`有更新, 将其后续`Node`加入`workList`.\n\n- 对于`StoreField`, 找到所有与`x.f`相关的`y = x'.f`, 其中`x'`是`x`的别名, 将这些`StoreField`加入`workList`.\n\n这个算法的优点是实现简单, 但缺点是效率低, 展现着独属于暴力的美学魅力.\n\n其关键在于如何维护`<Field, Stmt>`的结构, 框架代码中有不少细节需要关注.\n\n#### 考虑`Map<Obj, Value>`\n\n`x.f`中的`x`是`Pointer`, 真正存储Value值的是`Obj`, 因此可以考虑维护`<Var, Obj>`和`<Obj.field, Value>`两个Map, `Load`和`Store`均对Map进行操作.\n\n该思路避免了之前算法中的大量冗余计算(笔者自测跑完本地测试需要近30s), 提高了效率, 但Map的维护较为复杂.\n\n具体处理`LoadField`和`StoreField`时, 只需要将信息更新到`Map<Obj.field, Value>`即可, 广播逻辑与之前相同.\n\n不过需要注意的是, 由于指针分析结果是流不敏感的, 对于`Store`操作只使用`meet`而不是`kill`.\n\n> **Question: Store语句应该在何时广播?**\n>\n> 答案是当`outFact`改变的时候广播, 或者具体来说,是`x.f = y`的`y`的value值改变时进行广播.\n\n## 拾遗: Tai-e FAQ You Need to Know\n\n### CS & CI Pointer Analysis\n\nCallGraph建立的ICFG是没有上下文的, 这和常量传播不关注上下文的行为一致. 但对`Pointer`指向信息可以使用带上下文的分析结果以获取更高的精度, 这与ICFG并不冲突.\n\n### IR\n\nIR的使用为本次实验做了大量简化, 你可能会疑惑, 对于`x.f = y.g`这样的操作, 上述算法框架可以覆盖到该语句吗?\n\n实际上, `x.f = y.g`在IR中会被转化为:\n\n```java\n[21@L16] temp$8 = x.<X: int f>;\n[22@L16] y.<Y: int g> = temp$8;\n```\n\n与之类似的, `Invoke`, `BinaryExp`也具有相同的特性.\n\n如果不确定某条语句在框架中如何表示, 可以自己设计测试样例通过Assignment分析其结果.\n\n回到这次实验, 可以简单认为**所有`AssignStmt`的左值和右值中最多只有一个是Field/Array, 另外一个是Var**.\n\n### InterSolver与InterConstPropagation\n\nInterConstPropagation的字段可以简单的通过参数的方式进行传递, 但InterSolver与InterConstPropagation间该如何通信?\n\n注意到`InterConstantPropagation extends AbstractInterDataflowAnalysis`, 其父类中含有字段`InterSolver solver`, 可以通过`solver.xxx`实现通信.\n\n对于其中的`private`和`protected`字段, 可以为其编写一个`public XType getX()`API提供访问接口.(如`result`, `worklist`等).\n\n### 数据结构Map\n\n本次实验中存在大量\"一对多\"的联系, 可以考虑选取`MultiMap`进行维护. 其中提供了不少相当便捷的API.\n\n### relevantStmt\n\n如果能把字段中的Var取出, 可以使用其中的API`var.getStoreField()`等API方便的获取有关语句, 不过对Static就没有太好的方法了, 笔者采用的是遍历`icfg.getNodes()`.\n\n### FieldStmt, FieldAccesss, FiledRef & JField\n\nTai-e框架中的Field的处理要比Array复杂不少, 笔者在此做简要解释.\n\n- JField的结构是`<Type: FieldName>`, 可以使用`FieldStmt.getRef().resolve()`得到. 当使用Stmt解析出JField进行比较时会获取更高的精度. (笔者因为这个卡了hidden test)\n\n- 如果想获取Field的Obj(即base部分), 可以使用`FieldStmt.getFieldAccess().getBase()`. 不过需要先转换为`InstanceFieldAccess`类型才能使用`getBase()`的API.\n\n    > **Tips:** 笔者在此吐槽一句, 为何关于Field的API都封装在了`tai-e-Assignemnt.jar`中而不是显式的给出, 增大了如何处理Field的学习成本.\n\n### ArrayStmt\n\nArray的结构相对简单一点, 通过`getAccess()`就可以简单的`access.getBase/Index()`获取需要的信息.\n\n## 总结\n\n恭喜挺过了本学期SPA的实验大魔王, 自己设计算法还是颇有难度的, 接下来迎接较为轻松的A8吧. \\(^_^\\)\n","source":"_posts/SPA-A7.md","raw":"---\ntitle: NJU静态分析|A7-Alias-Aware Interprocedural Constant Propagation\ndate: 2024-12-09 10:06:40\nhidden: false\ntags:\n- NJU\n- 静态分析\ncategories:\n- NJU静态分析实验记录\n---\n\n**NJU Static Program Analysis | Assignment-7 Alias-Aware Interprocedural Constant Propagation.**\n\n<!--more-->\n\n## 实验目标\n\n基于**tai-e**框架实现带别名分析的过程间常量传播.\n\n## Preparation\n\n- 将`A2/.../ConstantPropagation`复制到`A7/.../ConstantPropagation`\n- 将`A4/.../InterConstantPropagation`复制到`A7/.../InterConstantPropagation`\n- 将`A4/.../InterSolver`复制到`A7/InterSolver`\n- 将`A6/.../cs/Solver`复制到`A7/.../cs/Solver`\n- 将`A6/.../_2ObjSelector`复制到`A7/.../_2ObjSelector`\n\n    > **Tips:** `plan.yml`已经配置好了`cs: 2-obj`, 如果本地测试中想要使用其他策略, 需要将对应`Selector`复制到本次实验目录, 并配置`plan.yml`(方法已在A6实验指南中给出)\n\n***注意:*** 除去指针分析的部分作为结果查询字段指向外, 其余文件都可以是本次实验的更改范围.\n\n## Review\n\n由于要设计算法, 不妨先复习一下A2和A4中常量传播算法和应用范围.\n\n- 常量传播算法是**Forward & Must Analysis**. 迭代至收敛至\"最大\"不动点.\n\n    > **Additional:**\n    >\n    > 迭代算法框架如下:\n    >\n    > ![pic1-1](SPA-A7/pic1-1.png)\n    >\n    > 活跃变量分析的迭代示例:\n    >\n    > ![pic1-2](SPA-A7/pic1-2.png)\n\n- 常量传播算法中对数值的抽象为`UNDEF->CONST->NAC`.\n\n- 由于数据流动的\"单调性\", **Meet**要满足\n\n    > ![pic1-3](SPA-A7/pic1-3.png)\n\n- 语句处理的**Transfer Function**\n\n    > ![pic1-4](SPA-A7/pic1-4.png)\n\n> 在A2中, 处理范围仅限于`DefinitionStmt`中的变量和表达式部分, 对于诸如**字段, 数组**部分采取保守策略, 赋值为`NAC`; 分析范围仅局限于**过程内分析**, 此时为方法调用的返回值采取保守策略, 赋值为`NAC`.\n>\n> 在A4中, 同样只处理变量, 但分析范围扩展为过程间分析, 需要完成对方法调用传参, 传返回值, 为了完成过程间的数据流传递, 加入了**Transfer Edge**.\n>\n> 由于方法调用的**动态时确认**, 需要知道在这个调用点`callsite`, 真正的`callee`是什么, 因此建立**CallGraph**为**ICFG(inter-procedural control-flow graph)** 提供调用图信息.(你应该还记得在A4的`CHABuilder`完成前, `Assignment`不会输出任何ICFG信息)\n>\n> ![pic1-5](SPA-A7/pic1-5.png)\n\n## Requirement & Analysis\n\n现在来看看实验要求和手上的工具, 看看如何处理新需求.\n\n### 常量处理范围\n\n在之前的实验中, 忽略了**字段Field**和**数组Array**的分析, 原因在本次实验已经指出, 是**别名Alias**所引起的, 由于多个变量(指针)可以指向同一个对象, 只有当明确指针所指向对象时, 才能为其赋值**常量Constant**.\n\n需要指出的是, 本次实验仍然**只需要处理int类型的变量**. A2中已经提供了足够好用的`canHoldInt()`.\n\n另外, 指南上讲述了实验框架中会忽略**静态字段的初始化**的情况, 因其在控制流图中不可达, 不需要对其进行额外的处理.\n\n### 域分析范围\n\nA4开始采用了一种精度较低的方法CHA构建**CallGraph**; A5, A6使用了精度更高的指针分析技术构建**CallGraph**.\n\n本次实验仍然是处理**过程间常量传播**, 由于**CallGraph**更加精确, 分析精度相较于A4也会更进一步. 同时, 在Tai-e框架下完成实验不需要关注**ICFG**如何获得**CG**信息(如有兴趣可自行阅读框架代码).\n\n### PointerAnalysisResult\n\n框架代码提供了`class PointerAnalysisResult`用来获取指针分析的结果, 该部分的初始化在`InterConstantPropagation`中的`initial()`中完成.\n\n其中包含的API说明都较为清晰, 笔者在此不过多赘述.\n\n### 别名分析\n\n该部分实验指南已经给出了一个比较简单的实现方法, **Pointer指向的PointsToSet存在交集, 则认为二者互为别名.**\n\n换个说法, **存在两个或两个以上Pointer指向同一个Obj, 则认为二者互为别名.**\n\n实验指南中讲述了为什么只需要`Pointer`而不是`CSPointer`的原因\n\n笔者在此给出两个简单的算法思路:\n\n- 遍历所有的`Pointer1`与`Pointer2`, 获取`PointsToSet`, 如果有交集就加入`Multiple Map`中, 简单地以`<Var, Var>`的形式维护alias信息.\n\n- 遍历所有的`Pointer`和对应的`PointsToSet`, 维护一个`<Obj, Var>`结构, 对于`<Obj, Var1>`和`<Obj, Var2>`, `Var1`和`Var2`互为别名.\n\n> **Tips: 框架代码的做法**\n>\n> 如果你有阅读过框架代码或者\"意外\"跳转到`class Maps`, 便会发现, Tai-e框架中已经配置了好了获取基本数据结构的API(被TT深不可测的代码力所折服). 可以通过简单的`Maps.newMultiMap()`获取实例化数据结构. 当然, 也可以选择自己实例化Map的结构.\n>\n> 不过需要注意的是, 该部分代码**不是显式给出的**, 而是封装在`tai-e-assignment.jar`中, 可以选择阅读科研版doc或者阅读反编译后的源码(该部分结构简单, 即便无注释也可以理解)\n\n### Field处理\n\n在这里会遇到第一个头疼的点: **ConstPropagation是流敏感的, 但PointerAnalysis是流不敏感的.**\n\n尽管别名信息不依赖于常量传播, 但对象存储的值来源常量传播. 因此, 需要先理清楚如何处理`Load`和`Store`.(**注意:** 笔者以下论述基于InstanceField, SaticField的处理只会比InstanceField简单)\n\n> **Try: 先收集所有的Store再更新给Load?**\n>\n> 这是符合流不敏感的思路, 但是在ConstPropagation的流敏感框架中非常难以实现. 在迭代过程中, Store的**右值**可能会改变, Store的变化也会引起非Field和Array变量的变化. 所以, Field和Array的更新也需要采用流敏感框架中的迭代方法.\n\n现在来分析如何用迭代的方法处理Field.\n\n- 对于Load, 因为迭代的缘故, 可以先假设后续的处理会正确的广播到此处, 更新Load的值. 因此只需要简单的传播到def即可.\n\n- 对于Store, 假设已经有了一个对应的Load结构, Store产生了更新该如何广播? worklist加入`Load Stmt`迭代即可.\n\n- 同时, 需要注意InstanceFiled的特性, 考虑别名信息进行更新即可.\n\n### Array处理\n\nArray可以理解成一种特殊的InstanceField, 不过需要注意何时互为别名, 只有在互为别名的情况下才考虑广播.\n\n### 小结\n\n至此已经有了一个对完成本次实验的一个基本思路了, 接下来开始考虑一些完成实验的细节.\n\n## 算法设计\n\n> **Tips:** 笔者在此章节不详谈实现上的细节, 该部分在[拾遗](#拾遗-tai-e-faq-you-need-to-know)章节分点给出. 并且, 由于框架代码的特性, 算法的实现可能与思路有所出入.\n\n> **Question: 这次新写的代码和A4冲突吗?**\n>\n> 这个问题实际上是在问: Field和Array的传播是否会影响到过程间常量传播的**EdgeTransfer**.\n>\n> 答案自然是否定的, Field和Array可以理解成一种特殊的Var, 尽管其结果不需要呈现在`DataFlowResult`中. 可以自然地得出结论: 加入Field和Array并不会改变A4的算法框架.\n>\n> 也即, 本次实验所设计的算法是对**TransferNonCallNode(A2-IntraConstPropagation)**的补全.\n\n所以, 本次算法的基本框架可以表示为:\n\n```java\nboolean transferNonCallNode(Stmt stmt, CPFact in, CPFact out){\n    if (stmt instanceof LoadField){\n        //handle\n    }\n    if (stmt instanceof StoreFiled){\n        //handle\n    }\n    if (stmt instanceof LoadArray){\n        //handle\n    }\n    if (stmt instanceof StoreArray){\n        //handle\n    }\n    else{\n        cp.transferNode(); //form A2\n    }\n}\n```\n\n当然, 你也可以选择将这些语句的处理直接整合进`ConstantPropagation`(前提是A2的实现最好确保是正确的).\n\n> **Tips:** 还记得在A5和A6中是如何优雅地处理繁杂的`instanceof`判断吗? 对, 就是**访问者模式**, 在本次实验中, 仍然可以选择这样的方法实现算法. 所有的`Stmt`类中都已经内置了`accept()`API可供访问, 只需要新的访问类继承自`StmtVisitor`即可.\n\n### `<Field, Value>`的存储和广播\n\n> **Tips:** 在Tai-e框架中, 将Array等效抽象成Field, 并不对**Index**做具体的区分(对`a[i]`和`a[j]`的store操作视为对同一对象`a[...]`的store操作). 尽管如此, index信息也有助于分区`a[i]`和`a[j]`是否为别名, 从而决定是否需要广播. 因此, Array的维护会比Field更复杂, 但基本原理一致, 笔者在此章节**不再**赘述Array应如何处理.\n\n在之前的分析中已经获知了[Alias信息](#别名分析), 该部分算法的实现依赖于别名信息.\n\n笔者在此给出两个算法思路抛砖引玉:\n\n#### 只考虑Alias层\n\n这是个朴实但简单的想法: 所有的`y = x.f`来自也只来自`x.f = z`, 这句\"废话\"意味着什么?\n\n**意味着其实根本就不需要考虑`x.f`或者说`oi.f`的取值, 如果想知道`y`可能的value值, 只需要`meet`所有的`z`就可以了.**\n\n根据这个思路, 有:\n\n- 对于`LoadField`, 找到所有与`x.f`相关的`x'.f = z`, 其中`x'`是`x`的别名, **meet** `z`的`value`值. 如果`y = meet(foreach(z))`有更新, 将其后续`Node`加入`workList`.\n\n- 对于`StoreField`, 找到所有与`x.f`相关的`y = x'.f`, 其中`x'`是`x`的别名, 将这些`StoreField`加入`workList`.\n\n这个算法的优点是实现简单, 但缺点是效率低, 展现着独属于暴力的美学魅力.\n\n其关键在于如何维护`<Field, Stmt>`的结构, 框架代码中有不少细节需要关注.\n\n#### 考虑`Map<Obj, Value>`\n\n`x.f`中的`x`是`Pointer`, 真正存储Value值的是`Obj`, 因此可以考虑维护`<Var, Obj>`和`<Obj.field, Value>`两个Map, `Load`和`Store`均对Map进行操作.\n\n该思路避免了之前算法中的大量冗余计算(笔者自测跑完本地测试需要近30s), 提高了效率, 但Map的维护较为复杂.\n\n具体处理`LoadField`和`StoreField`时, 只需要将信息更新到`Map<Obj.field, Value>`即可, 广播逻辑与之前相同.\n\n不过需要注意的是, 由于指针分析结果是流不敏感的, 对于`Store`操作只使用`meet`而不是`kill`.\n\n> **Question: Store语句应该在何时广播?**\n>\n> 答案是当`outFact`改变的时候广播, 或者具体来说,是`x.f = y`的`y`的value值改变时进行广播.\n\n## 拾遗: Tai-e FAQ You Need to Know\n\n### CS & CI Pointer Analysis\n\nCallGraph建立的ICFG是没有上下文的, 这和常量传播不关注上下文的行为一致. 但对`Pointer`指向信息可以使用带上下文的分析结果以获取更高的精度, 这与ICFG并不冲突.\n\n### IR\n\nIR的使用为本次实验做了大量简化, 你可能会疑惑, 对于`x.f = y.g`这样的操作, 上述算法框架可以覆盖到该语句吗?\n\n实际上, `x.f = y.g`在IR中会被转化为:\n\n```java\n[21@L16] temp$8 = x.<X: int f>;\n[22@L16] y.<Y: int g> = temp$8;\n```\n\n与之类似的, `Invoke`, `BinaryExp`也具有相同的特性.\n\n如果不确定某条语句在框架中如何表示, 可以自己设计测试样例通过Assignment分析其结果.\n\n回到这次实验, 可以简单认为**所有`AssignStmt`的左值和右值中最多只有一个是Field/Array, 另外一个是Var**.\n\n### InterSolver与InterConstPropagation\n\nInterConstPropagation的字段可以简单的通过参数的方式进行传递, 但InterSolver与InterConstPropagation间该如何通信?\n\n注意到`InterConstantPropagation extends AbstractInterDataflowAnalysis`, 其父类中含有字段`InterSolver solver`, 可以通过`solver.xxx`实现通信.\n\n对于其中的`private`和`protected`字段, 可以为其编写一个`public XType getX()`API提供访问接口.(如`result`, `worklist`等).\n\n### 数据结构Map\n\n本次实验中存在大量\"一对多\"的联系, 可以考虑选取`MultiMap`进行维护. 其中提供了不少相当便捷的API.\n\n### relevantStmt\n\n如果能把字段中的Var取出, 可以使用其中的API`var.getStoreField()`等API方便的获取有关语句, 不过对Static就没有太好的方法了, 笔者采用的是遍历`icfg.getNodes()`.\n\n### FieldStmt, FieldAccesss, FiledRef & JField\n\nTai-e框架中的Field的处理要比Array复杂不少, 笔者在此做简要解释.\n\n- JField的结构是`<Type: FieldName>`, 可以使用`FieldStmt.getRef().resolve()`得到. 当使用Stmt解析出JField进行比较时会获取更高的精度. (笔者因为这个卡了hidden test)\n\n- 如果想获取Field的Obj(即base部分), 可以使用`FieldStmt.getFieldAccess().getBase()`. 不过需要先转换为`InstanceFieldAccess`类型才能使用`getBase()`的API.\n\n    > **Tips:** 笔者在此吐槽一句, 为何关于Field的API都封装在了`tai-e-Assignemnt.jar`中而不是显式的给出, 增大了如何处理Field的学习成本.\n\n### ArrayStmt\n\nArray的结构相对简单一点, 通过`getAccess()`就可以简单的`access.getBase/Index()`获取需要的信息.\n\n## 总结\n\n恭喜挺过了本学期SPA的实验大魔王, 自己设计算法还是颇有难度的, 接下来迎接较为轻松的A8吧. \\(^_^\\)\n","slug":"SPA-A7","published":1,"updated":"2024-12-17T17:51:20.283Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyv1002qssil1v7r5ak3","content":"<p><strong>NJU Static Program Analysis | Assignment-7 Alias-Aware\r\nInterprocedural Constant Propagation.</strong></p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>tai-e</strong>框架实现带别名分析的过程间常量传播.</p>\r\n<h2 id=\"preparation\">Preparation</h2>\r\n<ul>\r\n<li><p>将<code>A2/.../ConstantPropagation</code>复制到<code>A7/.../ConstantPropagation</code></p></li>\r\n<li><p>将<code>A4/.../InterConstantPropagation</code>复制到<code>A7/.../InterConstantPropagation</code></p></li>\r\n<li><p>将<code>A4/.../InterSolver</code>复制到<code>A7/InterSolver</code></p></li>\r\n<li><p>将<code>A6/.../cs/Solver</code>复制到<code>A7/.../cs/Solver</code></p></li>\r\n<li><p>将<code>A6/.../_2ObjSelector</code>复制到<code>A7/.../_2ObjSelector</code></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n<code>plan.yml</code>已经配置好了<code>cs: 2-obj</code>,\r\n如果本地测试中想要使用其他策略,\r\n需要将对应<code>Selector</code>复制到本次实验目录,\r\n并配置<code>plan.yml</code>(方法已在A6实验指南中给出)</p>\r\n</blockquote></li>\r\n</ul>\r\n<p><strong><em>注意:</em></strong>\r\n除去指针分析的部分作为结果查询字段指向外,\r\n其余文件都可以是本次实验的更改范围.</p>\r\n<h2 id=\"review\">Review</h2>\r\n<p>由于要设计算法, 不妨先复习一下A2和A4中常量传播算法和应用范围.</p>\r\n<ul>\r\n<li><p>常量传播算法是<strong>Forward &amp; Must Analysis</strong>.\r\n迭代至收敛至\"最大\"不动点.</p>\r\n<blockquote>\r\n<p><strong>Additional:</strong></p>\r\n<p>迭代算法框架如下:</p>\r\n<img src=\"/2024/12/09/SPA-A7/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<p>活跃变量分析的迭代示例:</p>\r\n<img src=\"/2024/12/09/SPA-A7/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n</blockquote></li>\r\n<li><p>常量传播算法中对数值的抽象为<code>UNDEF-&gt;CONST-&gt;NAC</code>.</p></li>\r\n<li><p>由于数据流动的\"单调性\", <strong>Meet</strong>要满足</p>\r\n<blockquote>\r\n<img src=\"/2024/12/09/SPA-A7/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n</blockquote></li>\r\n<li><p>语句处理的<strong>Transfer Function</strong></p>\r\n<blockquote>\r\n<img src=\"/2024/12/09/SPA-A7/pic1-4.png\" class=\"\" title=\"pic1-4\">\r\n</blockquote></li>\r\n</ul>\r\n<blockquote>\r\n<p>在A2中,\r\n处理范围仅限于<code>DefinitionStmt</code>中的变量和表达式部分,\r\n对于诸如<strong>字段, 数组</strong>部分采取保守策略,\r\n赋值为<code>NAC</code>; 分析范围仅局限于<strong>过程内分析</strong>,\r\n此时为方法调用的返回值采取保守策略, 赋值为<code>NAC</code>.</p>\r\n<p>在A4中, 同样只处理变量, 但分析范围扩展为过程间分析,\r\n需要完成对方法调用传参, 传返回值, 为了完成过程间的数据流传递,\r\n加入了<strong>Transfer Edge</strong>.</p>\r\n<p>由于方法调用的<strong>动态时确认</strong>,\r\n需要知道在这个调用点<code>callsite</code>,\r\n真正的<code>callee</code>是什么,\r\n因此建立<strong>CallGraph</strong>为<strong>ICFG(inter-procedural\r\ncontrol-flow graph)</strong>\r\n提供调用图信息.(你应该还记得在A4的<code>CHABuilder</code>完成前,\r\n<code>Assignment</code>不会输出任何ICFG信息)</p>\r\n<img src=\"/2024/12/09/SPA-A7/pic1-5.png\" class=\"\" title=\"pic1-5\">\r\n</blockquote>\r\n<h2 id=\"requirement-analysis\">Requirement &amp; Analysis</h2>\r\n<p>现在来看看实验要求和手上的工具, 看看如何处理新需求.</p>\r\n<h3 id=\"常量处理范围\">常量处理范围</h3>\r\n<p>在之前的实验中,\r\n忽略了<strong>字段Field</strong>和<strong>数组Array</strong>的分析,\r\n原因在本次实验已经指出, 是<strong>别名Alias</strong>所引起的,\r\n由于多个变量(指针)可以指向同一个对象, 只有当明确指针所指向对象时,\r\n才能为其赋值<strong>常量Constant</strong>.</p>\r\n<p>需要指出的是, 本次实验仍然<strong>只需要处理int类型的变量</strong>.\r\nA2中已经提供了足够好用的<code>canHoldInt()</code>.</p>\r\n<p>另外,\r\n指南上讲述了实验框架中会忽略<strong>静态字段的初始化</strong>的情况,\r\n因其在控制流图中不可达, 不需要对其进行额外的处理.</p>\r\n<h3 id=\"域分析范围\">域分析范围</h3>\r\n<p>A4开始采用了一种精度较低的方法CHA构建<strong>CallGraph</strong>; A5,\r\nA6使用了精度更高的指针分析技术构建<strong>CallGraph</strong>.</p>\r\n<p>本次实验仍然是处理<strong>过程间常量传播</strong>,\r\n由于<strong>CallGraph</strong>更加精确, 分析精度相较于A4也会更进一步.\r\n同时,\r\n在Tai-e框架下完成实验不需要关注<strong>ICFG</strong>如何获得<strong>CG</strong>信息(如有兴趣可自行阅读框架代码).</p>\r\n<h3 id=\"pointeranalysisresult\">PointerAnalysisResult</h3>\r\n<p>框架代码提供了<code>class PointerAnalysisResult</code>用来获取指针分析的结果,\r\n该部分的初始化在<code>InterConstantPropagation</code>中的<code>initial()</code>中完成.</p>\r\n<p>其中包含的API说明都较为清晰, 笔者在此不过多赘述.</p>\r\n<h3 id=\"别名分析\">别名分析</h3>\r\n<p>该部分实验指南已经给出了一个比较简单的实现方法,\r\n<strong>Pointer指向的PointsToSet存在交集,\r\n则认为二者互为别名.</strong></p>\r\n<p>换个说法, <strong>存在两个或两个以上Pointer指向同一个Obj,\r\n则认为二者互为别名.</strong></p>\r\n<p>实验指南中讲述了为什么只需要<code>Pointer</code>而不是<code>CSPointer</code>的原因</p>\r\n<p>笔者在此给出两个简单的算法思路:</p>\r\n<ul>\r\n<li><p>遍历所有的<code>Pointer1</code>与<code>Pointer2</code>,\r\n获取<code>PointsToSet</code>,\r\n如果有交集就加入<code>Multiple Map</code>中,\r\n简单地以<code>&lt;Var, Var&gt;</code>的形式维护alias信息.</p></li>\r\n<li><p>遍历所有的<code>Pointer</code>和对应的<code>PointsToSet</code>,\r\n维护一个<code>&lt;Obj, Var&gt;</code>结构,\r\n对于<code>&lt;Obj, Var1&gt;</code>和<code>&lt;Obj, Var2&gt;</code>,\r\n<code>Var1</code>和<code>Var2</code>互为别名.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips: 框架代码的做法</strong></p>\r\n<p>如果你有阅读过框架代码或者\"意外\"跳转到<code>class Maps</code>,\r\n便会发现,\r\nTai-e框架中已经配置了好了获取基本数据结构的API(被TT深不可测的代码力所折服).\r\n可以通过简单的<code>Maps.newMultiMap()</code>获取实例化数据结构. 当然,\r\n也可以选择自己实例化Map的结构.</p>\r\n<p>不过需要注意的是, 该部分代码<strong>不是显式给出的</strong>,\r\n而是封装在<code>tai-e-assignment.jar</code>中,\r\n可以选择阅读科研版doc或者阅读反编译后的源码(该部分结构简单,\r\n即便无注释也可以理解)</p>\r\n</blockquote>\r\n<h3 id=\"field处理\">Field处理</h3>\r\n<p>在这里会遇到第一个头疼的点: <strong>ConstPropagation是流敏感的,\r\n但PointerAnalysis是流不敏感的.</strong></p>\r\n<p>尽管别名信息不依赖于常量传播, 但对象存储的值来源常量传播. 因此,\r\n需要先理清楚如何处理<code>Load</code>和<code>Store</code>.(<strong>注意:</strong>\r\n笔者以下论述基于InstanceField,\r\nSaticField的处理只会比InstanceField简单)</p>\r\n<blockquote>\r\n<p><strong>Try: 先收集所有的Store再更新给Load?</strong></p>\r\n<p>这是符合流不敏感的思路,\r\n但是在ConstPropagation的流敏感框架中非常难以实现. 在迭代过程中,\r\nStore的<strong>右值</strong>可能会改变,\r\nStore的变化也会引起非Field和Array变量的变化. 所以,\r\nField和Array的更新也需要采用流敏感框架中的迭代方法.</p>\r\n</blockquote>\r\n<p>现在来分析如何用迭代的方法处理Field.</p>\r\n<ul>\r\n<li><p>对于Load, 因为迭代的缘故, 可以先假设后续的处理会正确的广播到此处,\r\n更新Load的值. 因此只需要简单的传播到def即可.</p></li>\r\n<li><p>对于Store, 假设已经有了一个对应的Load结构,\r\nStore产生了更新该如何广播?\r\nworklist加入<code>Load Stmt</code>迭代即可.</p></li>\r\n<li><p>同时, 需要注意InstanceFiled的特性,\r\n考虑别名信息进行更新即可.</p></li>\r\n</ul>\r\n<h3 id=\"array处理\">Array处理</h3>\r\n<p>Array可以理解成一种特殊的InstanceField, 不过需要注意何时互为别名,\r\n只有在互为别名的情况下才考虑广播.</p>\r\n<h3 id=\"小结\">小结</h3>\r\n<p>至此已经有了一个对完成本次实验的一个基本思路了,\r\n接下来开始考虑一些完成实验的细节.</p>\r\n<h2 id=\"算法设计\">算法设计</h2>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 笔者在此章节不详谈实现上的细节, 该部分在<a\r\nhref=\"#拾遗-tai-e-faq-you-need-to-know\">拾遗</a>章节分点给出. 并且,\r\n由于框架代码的特性, 算法的实现可能与思路有所出入.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>Question: 这次新写的代码和A4冲突吗?</strong></p>\r\n<p>这个问题实际上是在问:\r\nField和Array的传播是否会影响到过程间常量传播的<strong>EdgeTransfer</strong>.</p>\r\n<p>答案自然是否定的, Field和Array可以理解成一种特殊的Var,\r\n尽管其结果不需要呈现在<code>DataFlowResult</code>中. 可以自然地得出结论:\r\n加入Field和Array并不会改变A4的算法框架.</p>\r\n<p>也即,\r\n本次实验所设计的算法是对<strong>TransferNonCallNode(A2-IntraConstPropagation)</strong>的补全.</p>\r\n</blockquote>\r\n<p>所以, 本次算法的基本框架可以表示为:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">transferNonCallNode</span><span class=\"params\">(Stmt stmt, CPFact in, CPFact out)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stmt <span class=\"keyword\">instanceof</span> LoadField)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stmt <span class=\"keyword\">instanceof</span> StoreFiled)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stmt <span class=\"keyword\">instanceof</span> LoadArray)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stmt <span class=\"keyword\">instanceof</span> StoreArray)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        cp.transferNode(); <span class=\"comment\">//form A2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>当然,\r\n你也可以选择将这些语句的处理直接整合进<code>ConstantPropagation</code>(前提是A2的实现最好确保是正确的).</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n还记得在A5和A6中是如何优雅地处理繁杂的<code>instanceof</code>判断吗? 对,\r\n就是<strong>访问者模式</strong>, 在本次实验中,\r\n仍然可以选择这样的方法实现算法.\r\n所有的<code>Stmt</code>类中都已经内置了<code>accept()</code>API可供访问,\r\n只需要新的访问类继承自<code>StmtVisitor</code>即可.</p>\r\n</blockquote>\r\n<h3\r\nid=\"field-value的存储和广播\"><code>&lt;Field, Value&gt;</code>的存储和广播</h3>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 在Tai-e框架中, 将Array等效抽象成Field,\r\n并不对<strong>Index</strong>做具体的区分(对<code>a[i]</code>和<code>a[j]</code>的store操作视为对同一对象<code>a[...]</code>的store操作).\r\n尽管如此,\r\nindex信息也有助于分区<code>a[i]</code>和<code>a[j]</code>是否为别名,\r\n从而决定是否需要广播. 因此, Array的维护会比Field更复杂, 但基本原理一致,\r\n笔者在此章节<strong>不再</strong>赘述Array应如何处理.</p>\r\n</blockquote>\r\n<p>在之前的分析中已经获知了<a href=\"#别名分析\">Alias信息</a>,\r\n该部分算法的实现依赖于别名信息.</p>\r\n<p>笔者在此给出两个算法思路抛砖引玉:</p>\r\n<h4 id=\"只考虑alias层\">只考虑Alias层</h4>\r\n<p>这是个朴实但简单的想法:\r\n所有的<code>y = x.f</code>来自也只来自<code>x.f = z</code>,\r\n这句\"废话\"意味着什么?</p>\r\n<p><strong>意味着其实根本就不需要考虑<code>x.f</code>或者说<code>oi.f</code>的取值,\r\n如果想知道<code>y</code>可能的value值,\r\n只需要<code>meet</code>所有的<code>z</code>就可以了.</strong></p>\r\n<p>根据这个思路, 有:</p>\r\n<ul>\r\n<li><p>对于<code>LoadField</code>,\r\n找到所有与<code>x.f</code>相关的<code>x'.f = z</code>,\r\n其中<code>x'</code>是<code>x</code>的别名, <strong>meet</strong>\r\n<code>z</code>的<code>value</code>值.\r\n如果<code>y = meet(foreach(z))</code>有更新,\r\n将其后续<code>Node</code>加入<code>workList</code>.</p></li>\r\n<li><p>对于<code>StoreField</code>,\r\n找到所有与<code>x.f</code>相关的<code>y = x'.f</code>,\r\n其中<code>x'</code>是<code>x</code>的别名,\r\n将这些<code>StoreField</code>加入<code>workList</code>.</p></li>\r\n</ul>\r\n<p>这个算法的优点是实现简单, 但缺点是效率低,\r\n展现着独属于暴力的美学魅力.</p>\r\n<p>其关键在于如何维护<code>&lt;Field, Stmt&gt;</code>的结构,\r\n框架代码中有不少细节需要关注.</p>\r\n<h4 id=\"考虑mapobj-value\">考虑<code>Map&lt;Obj, Value&gt;</code></h4>\r\n<p><code>x.f</code>中的<code>x</code>是<code>Pointer</code>,\r\n真正存储Value值的是<code>Obj</code>,\r\n因此可以考虑维护<code>&lt;Var, Obj&gt;</code>和<code>&lt;Obj.field, Value&gt;</code>两个Map,\r\n<code>Load</code>和<code>Store</code>均对Map进行操作.</p>\r\n<p>该思路避免了之前算法中的大量冗余计算(笔者自测跑完本地测试需要近30s),\r\n提高了效率, 但Map的维护较为复杂.</p>\r\n<p>具体处理<code>LoadField</code>和<code>StoreField</code>时,\r\n只需要将信息更新到<code>Map&lt;Obj.field, Value&gt;</code>即可,\r\n广播逻辑与之前相同.</p>\r\n<p>不过需要注意的是, 由于指针分析结果是流不敏感的,\r\n对于<code>Store</code>操作只使用<code>meet</code>而不是<code>kill</code>.</p>\r\n<blockquote>\r\n<p><strong>Question: Store语句应该在何时广播?</strong></p>\r\n<p>答案是当<code>outFact</code>改变的时候广播,\r\n或者具体来说,是<code>x.f = y</code>的<code>y</code>的value值改变时进行广播.</p>\r\n</blockquote>\r\n<h2 id=\"拾遗-tai-e-faq-you-need-to-know\">拾遗: Tai-e FAQ You Need to\r\nKnow</h2>\r\n<h3 id=\"cs-ci-pointer-analysis\">CS &amp; CI Pointer Analysis</h3>\r\n<p>CallGraph建立的ICFG是没有上下文的,\r\n这和常量传播不关注上下文的行为一致.\r\n但对<code>Pointer</code>指向信息可以使用带上下文的分析结果以获取更高的精度,\r\n这与ICFG并不冲突.</p>\r\n<h3 id=\"ir\">IR</h3>\r\n<p>IR的使用为本次实验做了大量简化, 你可能会疑惑,\r\n对于<code>x.f = y.g</code>这样的操作,\r\n上述算法框架可以覆盖到该语句吗?</p>\r\n<p>实际上, <code>x.f = y.g</code>在IR中会被转化为:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">21</span><span class=\"meta\">@L16</span>] temp$<span class=\"number\">8</span> = x.&lt;X: <span class=\"type\">int</span> f&gt;;</span><br><span class=\"line\">[<span class=\"number\">22</span><span class=\"meta\">@L16</span>] y.&lt;Y: <span class=\"type\">int</span> g&gt; = temp$<span class=\"number\">8</span>;</span><br></pre></td></tr></table></figure>\r\n<p>与之类似的, <code>Invoke</code>,\r\n<code>BinaryExp</code>也具有相同的特性.</p>\r\n<p>如果不确定某条语句在框架中如何表示,\r\n可以自己设计测试样例通过Assignment分析其结果.</p>\r\n<p>回到这次实验,\r\n可以简单认为<strong>所有<code>AssignStmt</code>的左值和右值中最多只有一个是Field/Array,\r\n另外一个是Var</strong>.</p>\r\n<h3\r\nid=\"intersolver与interconstpropagation\">InterSolver与InterConstPropagation</h3>\r\n<p>InterConstPropagation的字段可以简单的通过参数的方式进行传递,\r\n但InterSolver与InterConstPropagation间该如何通信?</p>\r\n<p>注意到<code>InterConstantPropagation extends AbstractInterDataflowAnalysis</code>,\r\n其父类中含有字段<code>InterSolver solver</code>,\r\n可以通过<code>solver.xxx</code>实现通信.</p>\r\n<p>对于其中的<code>private</code>和<code>protected</code>字段,\r\n可以为其编写一个<code>public XType getX()</code>API提供访问接口.(如<code>result</code>,\r\n<code>worklist</code>等).</p>\r\n<h3 id=\"数据结构map\">数据结构Map</h3>\r\n<p>本次实验中存在大量\"一对多\"的联系,\r\n可以考虑选取<code>MultiMap</code>进行维护.\r\n其中提供了不少相当便捷的API.</p>\r\n<h3 id=\"relevantstmt\">relevantStmt</h3>\r\n<p>如果能把字段中的Var取出,\r\n可以使用其中的API<code>var.getStoreField()</code>等API方便的获取有关语句,\r\n不过对Static就没有太好的方法了,\r\n笔者采用的是遍历<code>icfg.getNodes()</code>.</p>\r\n<h3 id=\"fieldstmt-fieldaccesss-filedref-jfield\">FieldStmt, FieldAccesss,\r\nFiledRef &amp; JField</h3>\r\n<p>Tai-e框架中的Field的处理要比Array复杂不少, 笔者在此做简要解释.</p>\r\n<ul>\r\n<li><p>JField的结构是<code>&lt;Type: FieldName&gt;</code>,\r\n可以使用<code>FieldStmt.getRef().resolve()</code>得到.\r\n当使用Stmt解析出JField进行比较时会获取更高的精度.\r\n(笔者因为这个卡了hidden test)</p></li>\r\n<li><p>如果想获取Field的Obj(即base部分),\r\n可以使用<code>FieldStmt.getFieldAccess().getBase()</code>.\r\n不过需要先转换为<code>InstanceFieldAccess</code>类型才能使用<code>getBase()</code>的API.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 笔者在此吐槽一句,\r\n为何关于Field的API都封装在了<code>tai-e-Assignemnt.jar</code>中而不是显式的给出,\r\n增大了如何处理Field的学习成本.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"arraystmt\">ArrayStmt</h3>\r\n<p>Array的结构相对简单一点,\r\n通过<code>getAccess()</code>就可以简单的<code>access.getBase/Index()</code>获取需要的信息.</p>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>恭喜挺过了本学期SPA的实验大魔王, 自己设计算法还是颇有难度的,\r\n接下来迎接较为轻松的A8吧. (^_^)</p>\r\n","length":3218,"excerpt":"<p><strong>NJU Static Program Analysis | Assignment-7 Alias-Aware\r\nInterprocedural Constant Propagation.</strong></p>","more":"<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>tai-e</strong>框架实现带别名分析的过程间常量传播.</p>\r\n<h2 id=\"preparation\">Preparation</h2>\r\n<ul>\r\n<li><p>将<code>A2/.../ConstantPropagation</code>复制到<code>A7/.../ConstantPropagation</code></p></li>\r\n<li><p>将<code>A4/.../InterConstantPropagation</code>复制到<code>A7/.../InterConstantPropagation</code></p></li>\r\n<li><p>将<code>A4/.../InterSolver</code>复制到<code>A7/InterSolver</code></p></li>\r\n<li><p>将<code>A6/.../cs/Solver</code>复制到<code>A7/.../cs/Solver</code></p></li>\r\n<li><p>将<code>A6/.../_2ObjSelector</code>复制到<code>A7/.../_2ObjSelector</code></p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n<code>plan.yml</code>已经配置好了<code>cs: 2-obj</code>,\r\n如果本地测试中想要使用其他策略,\r\n需要将对应<code>Selector</code>复制到本次实验目录,\r\n并配置<code>plan.yml</code>(方法已在A6实验指南中给出)</p>\r\n</blockquote></li>\r\n</ul>\r\n<p><strong><em>注意:</em></strong>\r\n除去指针分析的部分作为结果查询字段指向外,\r\n其余文件都可以是本次实验的更改范围.</p>\r\n<h2 id=\"review\">Review</h2>\r\n<p>由于要设计算法, 不妨先复习一下A2和A4中常量传播算法和应用范围.</p>\r\n<ul>\r\n<li><p>常量传播算法是<strong>Forward &amp; Must Analysis</strong>.\r\n迭代至收敛至\"最大\"不动点.</p>\r\n<blockquote>\r\n<p><strong>Additional:</strong></p>\r\n<p>迭代算法框架如下:</p>\r\n<img src=\"/2024/12/09/SPA-A7/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<p>活跃变量分析的迭代示例:</p>\r\n<img src=\"/2024/12/09/SPA-A7/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n</blockquote></li>\r\n<li><p>常量传播算法中对数值的抽象为<code>UNDEF-&gt;CONST-&gt;NAC</code>.</p></li>\r\n<li><p>由于数据流动的\"单调性\", <strong>Meet</strong>要满足</p>\r\n<blockquote>\r\n<img src=\"/2024/12/09/SPA-A7/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n</blockquote></li>\r\n<li><p>语句处理的<strong>Transfer Function</strong></p>\r\n<blockquote>\r\n<img src=\"/2024/12/09/SPA-A7/pic1-4.png\" class=\"\" title=\"pic1-4\">\r\n</blockquote></li>\r\n</ul>\r\n<blockquote>\r\n<p>在A2中,\r\n处理范围仅限于<code>DefinitionStmt</code>中的变量和表达式部分,\r\n对于诸如<strong>字段, 数组</strong>部分采取保守策略,\r\n赋值为<code>NAC</code>; 分析范围仅局限于<strong>过程内分析</strong>,\r\n此时为方法调用的返回值采取保守策略, 赋值为<code>NAC</code>.</p>\r\n<p>在A4中, 同样只处理变量, 但分析范围扩展为过程间分析,\r\n需要完成对方法调用传参, 传返回值, 为了完成过程间的数据流传递,\r\n加入了<strong>Transfer Edge</strong>.</p>\r\n<p>由于方法调用的<strong>动态时确认</strong>,\r\n需要知道在这个调用点<code>callsite</code>,\r\n真正的<code>callee</code>是什么,\r\n因此建立<strong>CallGraph</strong>为<strong>ICFG(inter-procedural\r\ncontrol-flow graph)</strong>\r\n提供调用图信息.(你应该还记得在A4的<code>CHABuilder</code>完成前,\r\n<code>Assignment</code>不会输出任何ICFG信息)</p>\r\n<img src=\"/2024/12/09/SPA-A7/pic1-5.png\" class=\"\" title=\"pic1-5\">\r\n</blockquote>\r\n<h2 id=\"requirement-analysis\">Requirement &amp; Analysis</h2>\r\n<p>现在来看看实验要求和手上的工具, 看看如何处理新需求.</p>\r\n<h3 id=\"常量处理范围\">常量处理范围</h3>\r\n<p>在之前的实验中,\r\n忽略了<strong>字段Field</strong>和<strong>数组Array</strong>的分析,\r\n原因在本次实验已经指出, 是<strong>别名Alias</strong>所引起的,\r\n由于多个变量(指针)可以指向同一个对象, 只有当明确指针所指向对象时,\r\n才能为其赋值<strong>常量Constant</strong>.</p>\r\n<p>需要指出的是, 本次实验仍然<strong>只需要处理int类型的变量</strong>.\r\nA2中已经提供了足够好用的<code>canHoldInt()</code>.</p>\r\n<p>另外,\r\n指南上讲述了实验框架中会忽略<strong>静态字段的初始化</strong>的情况,\r\n因其在控制流图中不可达, 不需要对其进行额外的处理.</p>\r\n<h3 id=\"域分析范围\">域分析范围</h3>\r\n<p>A4开始采用了一种精度较低的方法CHA构建<strong>CallGraph</strong>; A5,\r\nA6使用了精度更高的指针分析技术构建<strong>CallGraph</strong>.</p>\r\n<p>本次实验仍然是处理<strong>过程间常量传播</strong>,\r\n由于<strong>CallGraph</strong>更加精确, 分析精度相较于A4也会更进一步.\r\n同时,\r\n在Tai-e框架下完成实验不需要关注<strong>ICFG</strong>如何获得<strong>CG</strong>信息(如有兴趣可自行阅读框架代码).</p>\r\n<h3 id=\"pointeranalysisresult\">PointerAnalysisResult</h3>\r\n<p>框架代码提供了<code>class PointerAnalysisResult</code>用来获取指针分析的结果,\r\n该部分的初始化在<code>InterConstantPropagation</code>中的<code>initial()</code>中完成.</p>\r\n<p>其中包含的API说明都较为清晰, 笔者在此不过多赘述.</p>\r\n<h3 id=\"别名分析\">别名分析</h3>\r\n<p>该部分实验指南已经给出了一个比较简单的实现方法,\r\n<strong>Pointer指向的PointsToSet存在交集,\r\n则认为二者互为别名.</strong></p>\r\n<p>换个说法, <strong>存在两个或两个以上Pointer指向同一个Obj,\r\n则认为二者互为别名.</strong></p>\r\n<p>实验指南中讲述了为什么只需要<code>Pointer</code>而不是<code>CSPointer</code>的原因</p>\r\n<p>笔者在此给出两个简单的算法思路:</p>\r\n<ul>\r\n<li><p>遍历所有的<code>Pointer1</code>与<code>Pointer2</code>,\r\n获取<code>PointsToSet</code>,\r\n如果有交集就加入<code>Multiple Map</code>中,\r\n简单地以<code>&lt;Var, Var&gt;</code>的形式维护alias信息.</p></li>\r\n<li><p>遍历所有的<code>Pointer</code>和对应的<code>PointsToSet</code>,\r\n维护一个<code>&lt;Obj, Var&gt;</code>结构,\r\n对于<code>&lt;Obj, Var1&gt;</code>和<code>&lt;Obj, Var2&gt;</code>,\r\n<code>Var1</code>和<code>Var2</code>互为别名.</p></li>\r\n</ul>\r\n<blockquote>\r\n<p><strong>Tips: 框架代码的做法</strong></p>\r\n<p>如果你有阅读过框架代码或者\"意外\"跳转到<code>class Maps</code>,\r\n便会发现,\r\nTai-e框架中已经配置了好了获取基本数据结构的API(被TT深不可测的代码力所折服).\r\n可以通过简单的<code>Maps.newMultiMap()</code>获取实例化数据结构. 当然,\r\n也可以选择自己实例化Map的结构.</p>\r\n<p>不过需要注意的是, 该部分代码<strong>不是显式给出的</strong>,\r\n而是封装在<code>tai-e-assignment.jar</code>中,\r\n可以选择阅读科研版doc或者阅读反编译后的源码(该部分结构简单,\r\n即便无注释也可以理解)</p>\r\n</blockquote>\r\n<h3 id=\"field处理\">Field处理</h3>\r\n<p>在这里会遇到第一个头疼的点: <strong>ConstPropagation是流敏感的,\r\n但PointerAnalysis是流不敏感的.</strong></p>\r\n<p>尽管别名信息不依赖于常量传播, 但对象存储的值来源常量传播. 因此,\r\n需要先理清楚如何处理<code>Load</code>和<code>Store</code>.(<strong>注意:</strong>\r\n笔者以下论述基于InstanceField,\r\nSaticField的处理只会比InstanceField简单)</p>\r\n<blockquote>\r\n<p><strong>Try: 先收集所有的Store再更新给Load?</strong></p>\r\n<p>这是符合流不敏感的思路,\r\n但是在ConstPropagation的流敏感框架中非常难以实现. 在迭代过程中,\r\nStore的<strong>右值</strong>可能会改变,\r\nStore的变化也会引起非Field和Array变量的变化. 所以,\r\nField和Array的更新也需要采用流敏感框架中的迭代方法.</p>\r\n</blockquote>\r\n<p>现在来分析如何用迭代的方法处理Field.</p>\r\n<ul>\r\n<li><p>对于Load, 因为迭代的缘故, 可以先假设后续的处理会正确的广播到此处,\r\n更新Load的值. 因此只需要简单的传播到def即可.</p></li>\r\n<li><p>对于Store, 假设已经有了一个对应的Load结构,\r\nStore产生了更新该如何广播?\r\nworklist加入<code>Load Stmt</code>迭代即可.</p></li>\r\n<li><p>同时, 需要注意InstanceFiled的特性,\r\n考虑别名信息进行更新即可.</p></li>\r\n</ul>\r\n<h3 id=\"array处理\">Array处理</h3>\r\n<p>Array可以理解成一种特殊的InstanceField, 不过需要注意何时互为别名,\r\n只有在互为别名的情况下才考虑广播.</p>\r\n<h3 id=\"小结\">小结</h3>\r\n<p>至此已经有了一个对完成本次实验的一个基本思路了,\r\n接下来开始考虑一些完成实验的细节.</p>\r\n<h2 id=\"算法设计\">算法设计</h2>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 笔者在此章节不详谈实现上的细节, 该部分在<a\r\nhref=\"#拾遗-tai-e-faq-you-need-to-know\">拾遗</a>章节分点给出. 并且,\r\n由于框架代码的特性, 算法的实现可能与思路有所出入.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>Question: 这次新写的代码和A4冲突吗?</strong></p>\r\n<p>这个问题实际上是在问:\r\nField和Array的传播是否会影响到过程间常量传播的<strong>EdgeTransfer</strong>.</p>\r\n<p>答案自然是否定的, Field和Array可以理解成一种特殊的Var,\r\n尽管其结果不需要呈现在<code>DataFlowResult</code>中. 可以自然地得出结论:\r\n加入Field和Array并不会改变A4的算法框架.</p>\r\n<p>也即,\r\n本次实验所设计的算法是对<strong>TransferNonCallNode(A2-IntraConstPropagation)</strong>的补全.</p>\r\n</blockquote>\r\n<p>所以, 本次算法的基本框架可以表示为:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">transferNonCallNode</span><span class=\"params\">(Stmt stmt, CPFact in, CPFact out)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stmt <span class=\"keyword\">instanceof</span> LoadField)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stmt <span class=\"keyword\">instanceof</span> StoreFiled)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stmt <span class=\"keyword\">instanceof</span> LoadArray)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stmt <span class=\"keyword\">instanceof</span> StoreArray)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        cp.transferNode(); <span class=\"comment\">//form A2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>当然,\r\n你也可以选择将这些语句的处理直接整合进<code>ConstantPropagation</code>(前提是A2的实现最好确保是正确的).</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n还记得在A5和A6中是如何优雅地处理繁杂的<code>instanceof</code>判断吗? 对,\r\n就是<strong>访问者模式</strong>, 在本次实验中,\r\n仍然可以选择这样的方法实现算法.\r\n所有的<code>Stmt</code>类中都已经内置了<code>accept()</code>API可供访问,\r\n只需要新的访问类继承自<code>StmtVisitor</code>即可.</p>\r\n</blockquote>\r\n<h3\r\nid=\"field-value的存储和广播\"><code>&lt;Field, Value&gt;</code>的存储和广播</h3>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 在Tai-e框架中, 将Array等效抽象成Field,\r\n并不对<strong>Index</strong>做具体的区分(对<code>a[i]</code>和<code>a[j]</code>的store操作视为对同一对象<code>a[...]</code>的store操作).\r\n尽管如此,\r\nindex信息也有助于分区<code>a[i]</code>和<code>a[j]</code>是否为别名,\r\n从而决定是否需要广播. 因此, Array的维护会比Field更复杂, 但基本原理一致,\r\n笔者在此章节<strong>不再</strong>赘述Array应如何处理.</p>\r\n</blockquote>\r\n<p>在之前的分析中已经获知了<a href=\"#别名分析\">Alias信息</a>,\r\n该部分算法的实现依赖于别名信息.</p>\r\n<p>笔者在此给出两个算法思路抛砖引玉:</p>\r\n<h4 id=\"只考虑alias层\">只考虑Alias层</h4>\r\n<p>这是个朴实但简单的想法:\r\n所有的<code>y = x.f</code>来自也只来自<code>x.f = z</code>,\r\n这句\"废话\"意味着什么?</p>\r\n<p><strong>意味着其实根本就不需要考虑<code>x.f</code>或者说<code>oi.f</code>的取值,\r\n如果想知道<code>y</code>可能的value值,\r\n只需要<code>meet</code>所有的<code>z</code>就可以了.</strong></p>\r\n<p>根据这个思路, 有:</p>\r\n<ul>\r\n<li><p>对于<code>LoadField</code>,\r\n找到所有与<code>x.f</code>相关的<code>x'.f = z</code>,\r\n其中<code>x'</code>是<code>x</code>的别名, <strong>meet</strong>\r\n<code>z</code>的<code>value</code>值.\r\n如果<code>y = meet(foreach(z))</code>有更新,\r\n将其后续<code>Node</code>加入<code>workList</code>.</p></li>\r\n<li><p>对于<code>StoreField</code>,\r\n找到所有与<code>x.f</code>相关的<code>y = x'.f</code>,\r\n其中<code>x'</code>是<code>x</code>的别名,\r\n将这些<code>StoreField</code>加入<code>workList</code>.</p></li>\r\n</ul>\r\n<p>这个算法的优点是实现简单, 但缺点是效率低,\r\n展现着独属于暴力的美学魅力.</p>\r\n<p>其关键在于如何维护<code>&lt;Field, Stmt&gt;</code>的结构,\r\n框架代码中有不少细节需要关注.</p>\r\n<h4 id=\"考虑mapobj-value\">考虑<code>Map&lt;Obj, Value&gt;</code></h4>\r\n<p><code>x.f</code>中的<code>x</code>是<code>Pointer</code>,\r\n真正存储Value值的是<code>Obj</code>,\r\n因此可以考虑维护<code>&lt;Var, Obj&gt;</code>和<code>&lt;Obj.field, Value&gt;</code>两个Map,\r\n<code>Load</code>和<code>Store</code>均对Map进行操作.</p>\r\n<p>该思路避免了之前算法中的大量冗余计算(笔者自测跑完本地测试需要近30s),\r\n提高了效率, 但Map的维护较为复杂.</p>\r\n<p>具体处理<code>LoadField</code>和<code>StoreField</code>时,\r\n只需要将信息更新到<code>Map&lt;Obj.field, Value&gt;</code>即可,\r\n广播逻辑与之前相同.</p>\r\n<p>不过需要注意的是, 由于指针分析结果是流不敏感的,\r\n对于<code>Store</code>操作只使用<code>meet</code>而不是<code>kill</code>.</p>\r\n<blockquote>\r\n<p><strong>Question: Store语句应该在何时广播?</strong></p>\r\n<p>答案是当<code>outFact</code>改变的时候广播,\r\n或者具体来说,是<code>x.f = y</code>的<code>y</code>的value值改变时进行广播.</p>\r\n</blockquote>\r\n<h2 id=\"拾遗-tai-e-faq-you-need-to-know\">拾遗: Tai-e FAQ You Need to\r\nKnow</h2>\r\n<h3 id=\"cs-ci-pointer-analysis\">CS &amp; CI Pointer Analysis</h3>\r\n<p>CallGraph建立的ICFG是没有上下文的,\r\n这和常量传播不关注上下文的行为一致.\r\n但对<code>Pointer</code>指向信息可以使用带上下文的分析结果以获取更高的精度,\r\n这与ICFG并不冲突.</p>\r\n<h3 id=\"ir\">IR</h3>\r\n<p>IR的使用为本次实验做了大量简化, 你可能会疑惑,\r\n对于<code>x.f = y.g</code>这样的操作,\r\n上述算法框架可以覆盖到该语句吗?</p>\r\n<p>实际上, <code>x.f = y.g</code>在IR中会被转化为:</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">21</span><span class=\"meta\">@L16</span>] temp$<span class=\"number\">8</span> = x.&lt;X: <span class=\"type\">int</span> f&gt;;</span><br><span class=\"line\">[<span class=\"number\">22</span><span class=\"meta\">@L16</span>] y.&lt;Y: <span class=\"type\">int</span> g&gt; = temp$<span class=\"number\">8</span>;</span><br></pre></td></tr></table></figure>\r\n<p>与之类似的, <code>Invoke</code>,\r\n<code>BinaryExp</code>也具有相同的特性.</p>\r\n<p>如果不确定某条语句在框架中如何表示,\r\n可以自己设计测试样例通过Assignment分析其结果.</p>\r\n<p>回到这次实验,\r\n可以简单认为<strong>所有<code>AssignStmt</code>的左值和右值中最多只有一个是Field/Array,\r\n另外一个是Var</strong>.</p>\r\n<h3\r\nid=\"intersolver与interconstpropagation\">InterSolver与InterConstPropagation</h3>\r\n<p>InterConstPropagation的字段可以简单的通过参数的方式进行传递,\r\n但InterSolver与InterConstPropagation间该如何通信?</p>\r\n<p>注意到<code>InterConstantPropagation extends AbstractInterDataflowAnalysis</code>,\r\n其父类中含有字段<code>InterSolver solver</code>,\r\n可以通过<code>solver.xxx</code>实现通信.</p>\r\n<p>对于其中的<code>private</code>和<code>protected</code>字段,\r\n可以为其编写一个<code>public XType getX()</code>API提供访问接口.(如<code>result</code>,\r\n<code>worklist</code>等).</p>\r\n<h3 id=\"数据结构map\">数据结构Map</h3>\r\n<p>本次实验中存在大量\"一对多\"的联系,\r\n可以考虑选取<code>MultiMap</code>进行维护.\r\n其中提供了不少相当便捷的API.</p>\r\n<h3 id=\"relevantstmt\">relevantStmt</h3>\r\n<p>如果能把字段中的Var取出,\r\n可以使用其中的API<code>var.getStoreField()</code>等API方便的获取有关语句,\r\n不过对Static就没有太好的方法了,\r\n笔者采用的是遍历<code>icfg.getNodes()</code>.</p>\r\n<h3 id=\"fieldstmt-fieldaccesss-filedref-jfield\">FieldStmt, FieldAccesss,\r\nFiledRef &amp; JField</h3>\r\n<p>Tai-e框架中的Field的处理要比Array复杂不少, 笔者在此做简要解释.</p>\r\n<ul>\r\n<li><p>JField的结构是<code>&lt;Type: FieldName&gt;</code>,\r\n可以使用<code>FieldStmt.getRef().resolve()</code>得到.\r\n当使用Stmt解析出JField进行比较时会获取更高的精度.\r\n(笔者因为这个卡了hidden test)</p></li>\r\n<li><p>如果想获取Field的Obj(即base部分),\r\n可以使用<code>FieldStmt.getFieldAccess().getBase()</code>.\r\n不过需要先转换为<code>InstanceFieldAccess</code>类型才能使用<code>getBase()</code>的API.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 笔者在此吐槽一句,\r\n为何关于Field的API都封装在了<code>tai-e-Assignemnt.jar</code>中而不是显式的给出,\r\n增大了如何处理Field的学习成本.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"arraystmt\">ArrayStmt</h3>\r\n<p>Array的结构相对简单一点,\r\n通过<code>getAccess()</code>就可以简单的<code>access.getBase/Index()</code>获取需要的信息.</p>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>恭喜挺过了本学期SPA的实验大魔王, 自己设计算法还是颇有难度的,\r\n接下来迎接较为轻松的A8吧. (^_^)</p>"},{"title":"NJU静态分析|A8-Taint Analysis","date":"2024-12-17T00:29:48.000Z","hidden":false,"_content":"\n**NJU Static Program Analysis | Assignment-8 Taint Analysis.**\n\n<!--more-->\n\n## 实验目标\n\n基于**tai-e**框架实现污点分析.\n\n## Preparation\n\n将A6的代码复制到此处.\n\n**注意:** A8的`Solver`中额外加入了污点分析所需的字段, 因此不能直接替换A8的`Solver`.\n\n## 部分框架代码带读\n\n在上过课程和阅读了实验指南后, 对于怎么做这个实验会有一个大概的思路, 那么不妨先阅读一下框架代码, 看看Tai-e提供了什么样的工具和API.\n\n### Source & Sink\n\n分别代表了污点分析中的Source和Sink语句, 结构为`Source<JMethod, Type>`和`Sink<JMethod, index>`.\n\n> **Tips:** `record`的用法在之前的实验已经接触过了, 简单来说, 可以通过`source.method()`获取其中的`JMethod method`信息.\n\n### TaintTransfer\n\n对应污点传播的类, 即实验指南中的:\n\n![pic1-1](SPA-A8/pic1-1.png)\n\n具体规则实验指南和框架代码已足够清晰.\n\n### TaintManager\n\n实验框架中用来管理污点对象的类(或许命名为`TaintObjManager`更合适).\n\n类内采用简单的Map实现`<(Invoke, Type), TaintObj>`的查找.\n\n**注意: 笔者为了方便表述, 使用`TaintObj`表示污点对象, 该类在框架代码中并不存在.**\n\n其中包含三个方法:\n\n- `Obj makeTaint(Invoke source, Type type)`返回一个污点对象实例.\n\n    > **Tips:** 注意到污点对象也是`obj`, 即`taintObj`可以使用`obj`的方法进行操作.\n\n- `boolean isTaint(Obj obj)`判断一个`Obj`是否为`TaintObj`.\n\n- `Invoke getSourceCall(Obj obj)`返回该对象实例化对应的`Invoke`.\n\n### TaintFlow\n\n表示`Source -> Sink`的污染流, 也即污点分析的结果(TT老师在本次课程中一嘴带过的可以追踪的`Source -> Sink`).\n\n### TaintConfig\n\n~~碎碎念: 不是为什么要把管理污点分析所需的数据结构和设置污点分析的配置两个功能都塞进来啊喂!!! 阅读类名谁能知道会把数据结构放在这里啊喂!!!~~\n\n存储污点分析所需的信息, 可以通过`getSources()`, `getSinks()`, `getTransfers()`获取, 注意返回的类型是`Set`, 请使用`Set`的API对其进行操作.\n\n可以看出, TaintSources和TaintSinks以及TaintTransfers的规则在该类中已经配置 完成, 可以在实验中**直接使用**.\n\n> **Tips** 其余部分都是有关配置污点分析的工具, 本次实验不需要过多了解, 读者若有兴趣可以自行阅读框架代码.\n\n### TaintAnalysis\n\n> **Tips:** 实验指南解释了为何是`TaintAnalysiss`, 笔者在此使用更容易理解的表述.\n\n本次实验主要的逻辑实现部分, `Solver`可以根据其中的`taintAnalysis`字段调用`TaintAnalysis`中的API, 从代码规范角度, 处理污点分析的代码应当在此处完成, `Solver`中仅调用API.\n\n先看看该类具有哪些字段:\n\n- `TaintManager manager`\n- `TaintConfig config`\n- `Solver solver`\n- `CSManager csManager`\n- `Context emptyContext`\n\n注意到除了污点分析相关组件, `TaintAnalysis`也可以和`Solver`和`CSManager`通信, 并且给出了一个`emptyContext`, 以供直接使用.\n\n以上字段均在实例化时被初始化.\n\n接着看看类中的方法:\n\n- `void onFinish()`, 向外部(这里是`Solver`)给出污点分析结果`taintFlows`.\n\n- `Set<TaintFlow> collectTaintFlows()`, 该部分等待完成, 用以计算所有的污染流.\n\n### Solver\n\n到此已经知道所有污点分析相关类了, 现在从顶层`Solver`中看看污点分析的使用.\n\n- `void solve()`是指针分析的步骤, 可以看到相比A6, 最后一步设置了污点分析结果. 换句话说, 本次实验中只需要考虑污点分析的实现, 污点分析的前置工作和结果存储框架都已经做好了.\n\n## 算法设计\n\n### 基本假设\n\n在本次实验的污点分析中, 有几个基本假设:\n\n- `TaintObj`只会由`Source`产生, 依据`TaintTransfer`的规则, 最终传播到`Sink`. 其中`Source`的语句类型均为`Invoke`.\n\n- 本次实验不考虑**隐式污染**(详见[**课程ppt**](https://cs.nju.edu.cn/tiantan/software-analysis/Security.pdf#page=44)), 这大大简化了本次实验分析难度.\n\n- `TaintObj`是以`Obj`的方式进行封装的, 这意味着`TaintObj`可以像`Obj`一样在指针流图`PointerFlowGraph`中传递.\n\n    > **Tips: 这意味着什么?**\n    >\n    > 这意味着除了**TaintTransfer**和**Source Invoke**的传播途径外, `TaintObj`的其余传播途径都可以在之前的指针分析实现中完成.(如果感到难以理解可以试试推一下`Assign`, `Store`和`Load`语句的传播)\n\n- `TaintObj`的上下文被简单的处理成`emptyContext`, 即来自同一个`Index: Invoke`的`TaintObj`在堆中被抽象为一个对象.\n\n- ***(存疑)*** Online Judge上似乎所有的`Source`相关语句**均是静态方法**, 因此理论上不需要进行**dispatch**也可以通过测试.\n\n### Source & Sink & TaintTransferFlow\n\n三者均是在`Invoke`上进行操作, 因此需要修的地方有`processCall`和`addReachable`.\n\n- 对于`Source`, 只需要按实验指南上的规则处理即可. 但需要注意的是, 只有当`Invoke`存在返回值时, 才执行`Source`的处理.\n\n- 对于`Sink`, 可以选择边迭代边处理. 但因为**Pointer Analysis**不依赖于`Sink`, 也可以在算法跑完后遍历所有的`Sink`语句的参数的`PointsToSet`是否包含`TaintObj`. 也就是说, 这部分代码可以在`collectTaintFlows()`中统一完成.\n\n- 对于`TaintTransferFlow`, 同样只需要小心的按照指南规则处理即可. 但需要注意的是, 由于污点数据流向目标时可能会有类型转换, 因此需要创建一个新的`TaintObj`实例赋值给目标的`PointsToSet`.\n\n### 污点数据的广播\n\n污点数据的传播逻辑处理是本次实验相对简单的部分, 困难的是想清楚如何传播污点数据.\n\n想知道答案, 就要先回顾一下指针分析的广播.\n\n![pic1-2](SPA-A8/pic1-2.png)\n\n这个大循环中当`n`是变量`x`时, 对相关语句进行广播.\n\n如在A5, A6中, 需要对`Array`和`Filed`以及`processCall`进行广播.\n\n污点分析也是一种指针分析, 那么其理应也在这里广播.\n\n`from -> to`的情况有三种, `from`的取值只有`Arg`和`Base`两种情况.\n\n- `Base`的广播可以在`processCall`中进行, 因为二者中变量`x`都作为`Base`出现.\n\n- `Arg`的广播没有现成的方法, 那么就考虑与其余情况并列, 若`x`是某条`Invoke`的实参时, 则需要广播到此处, 为该`Invoke`执行`TaintTransferFlow`\n\n特别的, 因为这样的特性, 你也可以考虑将`TaintTransferFlow`拆开来写. 这样更符合其广播逻辑.\n\n## 拾遗\n\n本次实验几乎不涉及新的方法和工具(当然你也可以选择使用一些隐藏API来完成本次实验, 例如对于**Instance Invoke**, 可以通过`((InvokeInstanceExp)(invoke.getInvokeExp())).getBase()`来获取`base`信息).\n\n**All you need has already in Tai-e.**\n\n## 总结\n\n完结撒花啦!\n\n![pic1-3](SPA-A8/pic1-3.png)\n","source":"_posts/SPA-A8.md","raw":"---\ntitle: NJU静态分析|A8-Taint Analysis\ndate: 2024-12-17 08:29:48\nhidden: false\ntags:\n- NJU\n- 静态分析\ncategories:\n- NJU静态分析实验记录\n---\n\n**NJU Static Program Analysis | Assignment-8 Taint Analysis.**\n\n<!--more-->\n\n## 实验目标\n\n基于**tai-e**框架实现污点分析.\n\n## Preparation\n\n将A6的代码复制到此处.\n\n**注意:** A8的`Solver`中额外加入了污点分析所需的字段, 因此不能直接替换A8的`Solver`.\n\n## 部分框架代码带读\n\n在上过课程和阅读了实验指南后, 对于怎么做这个实验会有一个大概的思路, 那么不妨先阅读一下框架代码, 看看Tai-e提供了什么样的工具和API.\n\n### Source & Sink\n\n分别代表了污点分析中的Source和Sink语句, 结构为`Source<JMethod, Type>`和`Sink<JMethod, index>`.\n\n> **Tips:** `record`的用法在之前的实验已经接触过了, 简单来说, 可以通过`source.method()`获取其中的`JMethod method`信息.\n\n### TaintTransfer\n\n对应污点传播的类, 即实验指南中的:\n\n![pic1-1](SPA-A8/pic1-1.png)\n\n具体规则实验指南和框架代码已足够清晰.\n\n### TaintManager\n\n实验框架中用来管理污点对象的类(或许命名为`TaintObjManager`更合适).\n\n类内采用简单的Map实现`<(Invoke, Type), TaintObj>`的查找.\n\n**注意: 笔者为了方便表述, 使用`TaintObj`表示污点对象, 该类在框架代码中并不存在.**\n\n其中包含三个方法:\n\n- `Obj makeTaint(Invoke source, Type type)`返回一个污点对象实例.\n\n    > **Tips:** 注意到污点对象也是`obj`, 即`taintObj`可以使用`obj`的方法进行操作.\n\n- `boolean isTaint(Obj obj)`判断一个`Obj`是否为`TaintObj`.\n\n- `Invoke getSourceCall(Obj obj)`返回该对象实例化对应的`Invoke`.\n\n### TaintFlow\n\n表示`Source -> Sink`的污染流, 也即污点分析的结果(TT老师在本次课程中一嘴带过的可以追踪的`Source -> Sink`).\n\n### TaintConfig\n\n~~碎碎念: 不是为什么要把管理污点分析所需的数据结构和设置污点分析的配置两个功能都塞进来啊喂!!! 阅读类名谁能知道会把数据结构放在这里啊喂!!!~~\n\n存储污点分析所需的信息, 可以通过`getSources()`, `getSinks()`, `getTransfers()`获取, 注意返回的类型是`Set`, 请使用`Set`的API对其进行操作.\n\n可以看出, TaintSources和TaintSinks以及TaintTransfers的规则在该类中已经配置 完成, 可以在实验中**直接使用**.\n\n> **Tips** 其余部分都是有关配置污点分析的工具, 本次实验不需要过多了解, 读者若有兴趣可以自行阅读框架代码.\n\n### TaintAnalysis\n\n> **Tips:** 实验指南解释了为何是`TaintAnalysiss`, 笔者在此使用更容易理解的表述.\n\n本次实验主要的逻辑实现部分, `Solver`可以根据其中的`taintAnalysis`字段调用`TaintAnalysis`中的API, 从代码规范角度, 处理污点分析的代码应当在此处完成, `Solver`中仅调用API.\n\n先看看该类具有哪些字段:\n\n- `TaintManager manager`\n- `TaintConfig config`\n- `Solver solver`\n- `CSManager csManager`\n- `Context emptyContext`\n\n注意到除了污点分析相关组件, `TaintAnalysis`也可以和`Solver`和`CSManager`通信, 并且给出了一个`emptyContext`, 以供直接使用.\n\n以上字段均在实例化时被初始化.\n\n接着看看类中的方法:\n\n- `void onFinish()`, 向外部(这里是`Solver`)给出污点分析结果`taintFlows`.\n\n- `Set<TaintFlow> collectTaintFlows()`, 该部分等待完成, 用以计算所有的污染流.\n\n### Solver\n\n到此已经知道所有污点分析相关类了, 现在从顶层`Solver`中看看污点分析的使用.\n\n- `void solve()`是指针分析的步骤, 可以看到相比A6, 最后一步设置了污点分析结果. 换句话说, 本次实验中只需要考虑污点分析的实现, 污点分析的前置工作和结果存储框架都已经做好了.\n\n## 算法设计\n\n### 基本假设\n\n在本次实验的污点分析中, 有几个基本假设:\n\n- `TaintObj`只会由`Source`产生, 依据`TaintTransfer`的规则, 最终传播到`Sink`. 其中`Source`的语句类型均为`Invoke`.\n\n- 本次实验不考虑**隐式污染**(详见[**课程ppt**](https://cs.nju.edu.cn/tiantan/software-analysis/Security.pdf#page=44)), 这大大简化了本次实验分析难度.\n\n- `TaintObj`是以`Obj`的方式进行封装的, 这意味着`TaintObj`可以像`Obj`一样在指针流图`PointerFlowGraph`中传递.\n\n    > **Tips: 这意味着什么?**\n    >\n    > 这意味着除了**TaintTransfer**和**Source Invoke**的传播途径外, `TaintObj`的其余传播途径都可以在之前的指针分析实现中完成.(如果感到难以理解可以试试推一下`Assign`, `Store`和`Load`语句的传播)\n\n- `TaintObj`的上下文被简单的处理成`emptyContext`, 即来自同一个`Index: Invoke`的`TaintObj`在堆中被抽象为一个对象.\n\n- ***(存疑)*** Online Judge上似乎所有的`Source`相关语句**均是静态方法**, 因此理论上不需要进行**dispatch**也可以通过测试.\n\n### Source & Sink & TaintTransferFlow\n\n三者均是在`Invoke`上进行操作, 因此需要修的地方有`processCall`和`addReachable`.\n\n- 对于`Source`, 只需要按实验指南上的规则处理即可. 但需要注意的是, 只有当`Invoke`存在返回值时, 才执行`Source`的处理.\n\n- 对于`Sink`, 可以选择边迭代边处理. 但因为**Pointer Analysis**不依赖于`Sink`, 也可以在算法跑完后遍历所有的`Sink`语句的参数的`PointsToSet`是否包含`TaintObj`. 也就是说, 这部分代码可以在`collectTaintFlows()`中统一完成.\n\n- 对于`TaintTransferFlow`, 同样只需要小心的按照指南规则处理即可. 但需要注意的是, 由于污点数据流向目标时可能会有类型转换, 因此需要创建一个新的`TaintObj`实例赋值给目标的`PointsToSet`.\n\n### 污点数据的广播\n\n污点数据的传播逻辑处理是本次实验相对简单的部分, 困难的是想清楚如何传播污点数据.\n\n想知道答案, 就要先回顾一下指针分析的广播.\n\n![pic1-2](SPA-A8/pic1-2.png)\n\n这个大循环中当`n`是变量`x`时, 对相关语句进行广播.\n\n如在A5, A6中, 需要对`Array`和`Filed`以及`processCall`进行广播.\n\n污点分析也是一种指针分析, 那么其理应也在这里广播.\n\n`from -> to`的情况有三种, `from`的取值只有`Arg`和`Base`两种情况.\n\n- `Base`的广播可以在`processCall`中进行, 因为二者中变量`x`都作为`Base`出现.\n\n- `Arg`的广播没有现成的方法, 那么就考虑与其余情况并列, 若`x`是某条`Invoke`的实参时, 则需要广播到此处, 为该`Invoke`执行`TaintTransferFlow`\n\n特别的, 因为这样的特性, 你也可以考虑将`TaintTransferFlow`拆开来写. 这样更符合其广播逻辑.\n\n## 拾遗\n\n本次实验几乎不涉及新的方法和工具(当然你也可以选择使用一些隐藏API来完成本次实验, 例如对于**Instance Invoke**, 可以通过`((InvokeInstanceExp)(invoke.getInvokeExp())).getBase()`来获取`base`信息).\n\n**All you need has already in Tai-e.**\n\n## 总结\n\n完结撒花啦!\n\n![pic1-3](SPA-A8/pic1-3.png)\n","slug":"SPA-A8","published":1,"updated":"2024-12-19T08:06:42.187Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyv1002sssil1h4ogam1","content":"<p><strong>NJU Static Program Analysis | Assignment-8 Taint\r\nAnalysis.</strong></p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>tai-e</strong>框架实现污点分析.</p>\r\n<h2 id=\"preparation\">Preparation</h2>\r\n<p>将A6的代码复制到此处.</p>\r\n<p><strong>注意:</strong>\r\nA8的<code>Solver</code>中额外加入了污点分析所需的字段,\r\n因此不能直接替换A8的<code>Solver</code>.</p>\r\n<h2 id=\"部分框架代码带读\">部分框架代码带读</h2>\r\n<p>在上过课程和阅读了实验指南后, 对于怎么做这个实验会有一个大概的思路,\r\n那么不妨先阅读一下框架代码, 看看Tai-e提供了什么样的工具和API.</p>\r\n<h3 id=\"source-sink\">Source &amp; Sink</h3>\r\n<p>分别代表了污点分析中的Source和Sink语句,\r\n结构为<code>Source&lt;JMethod, Type&gt;</code>和<code>Sink&lt;JMethod, index&gt;</code>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n<code>record</code>的用法在之前的实验已经接触过了, 简单来说,\r\n可以通过<code>source.method()</code>获取其中的<code>JMethod method</code>信息.</p>\r\n</blockquote>\r\n<h3 id=\"tainttransfer\">TaintTransfer</h3>\r\n<p>对应污点传播的类, 即实验指南中的:</p>\r\n<img src=\"/2024/12/17/SPA-A8/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<p>具体规则实验指南和框架代码已足够清晰.</p>\r\n<h3 id=\"taintmanager\">TaintManager</h3>\r\n<p>实验框架中用来管理污点对象的类(或许命名为<code>TaintObjManager</code>更合适).</p>\r\n<p>类内采用简单的Map实现<code>&lt;(Invoke, Type), TaintObj&gt;</code>的查找.</p>\r\n<p><strong>注意: 笔者为了方便表述,\r\n使用<code>TaintObj</code>表示污点对象,\r\n该类在框架代码中并不存在.</strong></p>\r\n<p>其中包含三个方法:</p>\r\n<ul>\r\n<li><p><code>Obj makeTaint(Invoke source, Type type)</code>返回一个污点对象实例.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 注意到污点对象也是<code>obj</code>,\r\n即<code>taintObj</code>可以使用<code>obj</code>的方法进行操作.</p>\r\n</blockquote></li>\r\n<li><p><code>boolean isTaint(Obj obj)</code>判断一个<code>Obj</code>是否为<code>TaintObj</code>.</p></li>\r\n<li><p><code>Invoke getSourceCall(Obj obj)</code>返回该对象实例化对应的<code>Invoke</code>.</p></li>\r\n</ul>\r\n<h3 id=\"taintflow\">TaintFlow</h3>\r\n<p>表示<code>Source -&gt; Sink</code>的污染流,\r\n也即污点分析的结果(TT老师在本次课程中一嘴带过的可以追踪的<code>Source -&gt; Sink</code>).</p>\r\n<h3 id=\"taintconfig\">TaintConfig</h3>\r\n<p><del>碎碎念:\r\n不是为什么要把管理污点分析所需的数据结构和设置污点分析的配置两个功能都塞进来啊喂!!!\r\n阅读类名谁能知道会把数据结构放在这里啊喂!!!</del></p>\r\n<p>存储污点分析所需的信息, 可以通过<code>getSources()</code>,\r\n<code>getSinks()</code>, <code>getTransfers()</code>获取,\r\n注意返回的类型是<code>Set</code>,\r\n请使用<code>Set</code>的API对其进行操作.</p>\r\n<p>可以看出,\r\nTaintSources和TaintSinks以及TaintTransfers的规则在该类中已经配置 完成,\r\n可以在实验中<strong>直接使用</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips</strong> 其余部分都是有关配置污点分析的工具,\r\n本次实验不需要过多了解, 读者若有兴趣可以自行阅读框架代码.</p>\r\n</blockquote>\r\n<h3 id=\"taintanalysis\">TaintAnalysis</h3>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n实验指南解释了为何是<code>TaintAnalysiss</code>,\r\n笔者在此使用更容易理解的表述.</p>\r\n</blockquote>\r\n<p>本次实验主要的逻辑实现部分,\r\n<code>Solver</code>可以根据其中的<code>taintAnalysis</code>字段调用<code>TaintAnalysis</code>中的API,\r\n从代码规范角度, 处理污点分析的代码应当在此处完成,\r\n<code>Solver</code>中仅调用API.</p>\r\n<p>先看看该类具有哪些字段:</p>\r\n<ul>\r\n<li><code>TaintManager manager</code></li>\r\n<li><code>TaintConfig config</code></li>\r\n<li><code>Solver solver</code></li>\r\n<li><code>CSManager csManager</code></li>\r\n<li><code>Context emptyContext</code></li>\r\n</ul>\r\n<p>注意到除了污点分析相关组件,\r\n<code>TaintAnalysis</code>也可以和<code>Solver</code>和<code>CSManager</code>通信,\r\n并且给出了一个<code>emptyContext</code>, 以供直接使用.</p>\r\n<p>以上字段均在实例化时被初始化.</p>\r\n<p>接着看看类中的方法:</p>\r\n<ul>\r\n<li><p><code>void onFinish()</code>,\r\n向外部(这里是<code>Solver</code>)给出污点分析结果<code>taintFlows</code>.</p></li>\r\n<li><p><code>Set&lt;TaintFlow&gt; collectTaintFlows()</code>,\r\n该部分等待完成, 用以计算所有的污染流.</p></li>\r\n</ul>\r\n<h3 id=\"solver\">Solver</h3>\r\n<p>到此已经知道所有污点分析相关类了,\r\n现在从顶层<code>Solver</code>中看看污点分析的使用.</p>\r\n<ul>\r\n<li><code>void solve()</code>是指针分析的步骤, 可以看到相比A6,\r\n最后一步设置了污点分析结果. 换句话说,\r\n本次实验中只需要考虑污点分析的实现,\r\n污点分析的前置工作和结果存储框架都已经做好了.</li>\r\n</ul>\r\n<h2 id=\"算法设计\">算法设计</h2>\r\n<h3 id=\"基本假设\">基本假设</h3>\r\n<p>在本次实验的污点分析中, 有几个基本假设:</p>\r\n<ul>\r\n<li><p><code>TaintObj</code>只会由<code>Source</code>产生,\r\n依据<code>TaintTransfer</code>的规则, 最终传播到<code>Sink</code>.\r\n其中<code>Source</code>的语句类型均为<code>Invoke</code>.</p></li>\r\n<li><p>本次实验不考虑<strong>隐式污染</strong>(详见<a\r\nhref=\"https://cs.nju.edu.cn/tiantan/software-analysis/Security.pdf#page=44\"><strong>课程ppt</strong></a>),\r\n这大大简化了本次实验分析难度.</p></li>\r\n<li><p><code>TaintObj</code>是以<code>Obj</code>的方式进行封装的,\r\n这意味着<code>TaintObj</code>可以像<code>Obj</code>一样在指针流图<code>PointerFlowGraph</code>中传递.</p>\r\n<blockquote>\r\n<p><strong>Tips: 这意味着什么?</strong></p>\r\n<p>这意味着除了<strong>TaintTransfer</strong>和<strong>Source\r\nInvoke</strong>的传播途径外,\r\n<code>TaintObj</code>的其余传播途径都可以在之前的指针分析实现中完成.(如果感到难以理解可以试试推一下<code>Assign</code>,\r\n<code>Store</code>和<code>Load</code>语句的传播)</p>\r\n</blockquote></li>\r\n<li><p><code>TaintObj</code>的上下文被简单的处理成<code>emptyContext</code>,\r\n即来自同一个<code>Index: Invoke</code>的<code>TaintObj</code>在堆中被抽象为一个对象.</p></li>\r\n<li><p><strong><em>(存疑)</em></strong> Online\r\nJudge上似乎所有的<code>Source</code>相关语句<strong>均是静态方法</strong>,\r\n因此理论上不需要进行<strong>dispatch</strong>也可以通过测试.</p></li>\r\n</ul>\r\n<h3 id=\"source-sink-tainttransferflow\">Source &amp; Sink &amp;\r\nTaintTransferFlow</h3>\r\n<p>三者均是在<code>Invoke</code>上进行操作,\r\n因此需要修的地方有<code>processCall</code>和<code>addReachable</code>.</p>\r\n<ul>\r\n<li><p>对于<code>Source</code>, 只需要按实验指南上的规则处理即可.\r\n但需要注意的是, 只有当<code>Invoke</code>存在返回值时,\r\n才执行<code>Source</code>的处理.</p></li>\r\n<li><p>对于<code>Sink</code>, 可以选择边迭代边处理.\r\n但因为<strong>Pointer Analysis</strong>不依赖于<code>Sink</code>,\r\n也可以在算法跑完后遍历所有的<code>Sink</code>语句的参数的<code>PointsToSet</code>是否包含<code>TaintObj</code>.\r\n也就是说,\r\n这部分代码可以在<code>collectTaintFlows()</code>中统一完成.</p></li>\r\n<li><p>对于<code>TaintTransferFlow</code>,\r\n同样只需要小心的按照指南规则处理即可. 但需要注意的是,\r\n由于污点数据流向目标时可能会有类型转换,\r\n因此需要创建一个新的<code>TaintObj</code>实例赋值给目标的<code>PointsToSet</code>.</p></li>\r\n</ul>\r\n<h3 id=\"污点数据的广播\">污点数据的广播</h3>\r\n<p>污点数据的传播逻辑处理是本次实验相对简单的部分,\r\n困难的是想清楚如何传播污点数据.</p>\r\n<p>想知道答案, 就要先回顾一下指针分析的广播.</p>\r\n<img src=\"/2024/12/17/SPA-A8/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<p>这个大循环中当<code>n</code>是变量<code>x</code>时,\r\n对相关语句进行广播.</p>\r\n<p>如在A5, A6中,\r\n需要对<code>Array</code>和<code>Filed</code>以及<code>processCall</code>进行广播.</p>\r\n<p>污点分析也是一种指针分析, 那么其理应也在这里广播.</p>\r\n<p><code>from -&gt; to</code>的情况有三种,\r\n<code>from</code>的取值只有<code>Arg</code>和<code>Base</code>两种情况.</p>\r\n<ul>\r\n<li><p><code>Base</code>的广播可以在<code>processCall</code>中进行,\r\n因为二者中变量<code>x</code>都作为<code>Base</code>出现.</p></li>\r\n<li><p><code>Arg</code>的广播没有现成的方法, 那么就考虑与其余情况并列,\r\n若<code>x</code>是某条<code>Invoke</code>的实参时, 则需要广播到此处,\r\n为该<code>Invoke</code>执行<code>TaintTransferFlow</code></p></li>\r\n</ul>\r\n<p>特别的, 因为这样的特性,\r\n你也可以考虑将<code>TaintTransferFlow</code>拆开来写.\r\n这样更符合其广播逻辑.</p>\r\n<h2 id=\"拾遗\">拾遗</h2>\r\n<p>本次实验几乎不涉及新的方法和工具(当然你也可以选择使用一些隐藏API来完成本次实验,\r\n例如对于<strong>Instance Invoke</strong>,\r\n可以通过<code>((InvokeInstanceExp)(invoke.getInvokeExp())).getBase()</code>来获取<code>base</code>信息).</p>\r\n<p><strong>All you need has already in Tai-e.</strong></p>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>完结撒花啦!</p>\r\n<img src=\"/2024/12/17/SPA-A8/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n","length":1713,"excerpt":"<p><strong>NJU Static Program Analysis | Assignment-8 Taint\r\nAnalysis.</strong></p>","more":"<h2 id=\"实验目标\">实验目标</h2>\r\n<p>基于<strong>tai-e</strong>框架实现污点分析.</p>\r\n<h2 id=\"preparation\">Preparation</h2>\r\n<p>将A6的代码复制到此处.</p>\r\n<p><strong>注意:</strong>\r\nA8的<code>Solver</code>中额外加入了污点分析所需的字段,\r\n因此不能直接替换A8的<code>Solver</code>.</p>\r\n<h2 id=\"部分框架代码带读\">部分框架代码带读</h2>\r\n<p>在上过课程和阅读了实验指南后, 对于怎么做这个实验会有一个大概的思路,\r\n那么不妨先阅读一下框架代码, 看看Tai-e提供了什么样的工具和API.</p>\r\n<h3 id=\"source-sink\">Source &amp; Sink</h3>\r\n<p>分别代表了污点分析中的Source和Sink语句,\r\n结构为<code>Source&lt;JMethod, Type&gt;</code>和<code>Sink&lt;JMethod, index&gt;</code>.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n<code>record</code>的用法在之前的实验已经接触过了, 简单来说,\r\n可以通过<code>source.method()</code>获取其中的<code>JMethod method</code>信息.</p>\r\n</blockquote>\r\n<h3 id=\"tainttransfer\">TaintTransfer</h3>\r\n<p>对应污点传播的类, 即实验指南中的:</p>\r\n<img src=\"/2024/12/17/SPA-A8/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<p>具体规则实验指南和框架代码已足够清晰.</p>\r\n<h3 id=\"taintmanager\">TaintManager</h3>\r\n<p>实验框架中用来管理污点对象的类(或许命名为<code>TaintObjManager</code>更合适).</p>\r\n<p>类内采用简单的Map实现<code>&lt;(Invoke, Type), TaintObj&gt;</code>的查找.</p>\r\n<p><strong>注意: 笔者为了方便表述,\r\n使用<code>TaintObj</code>表示污点对象,\r\n该类在框架代码中并不存在.</strong></p>\r\n<p>其中包含三个方法:</p>\r\n<ul>\r\n<li><p><code>Obj makeTaint(Invoke source, Type type)</code>返回一个污点对象实例.</p>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 注意到污点对象也是<code>obj</code>,\r\n即<code>taintObj</code>可以使用<code>obj</code>的方法进行操作.</p>\r\n</blockquote></li>\r\n<li><p><code>boolean isTaint(Obj obj)</code>判断一个<code>Obj</code>是否为<code>TaintObj</code>.</p></li>\r\n<li><p><code>Invoke getSourceCall(Obj obj)</code>返回该对象实例化对应的<code>Invoke</code>.</p></li>\r\n</ul>\r\n<h3 id=\"taintflow\">TaintFlow</h3>\r\n<p>表示<code>Source -&gt; Sink</code>的污染流,\r\n也即污点分析的结果(TT老师在本次课程中一嘴带过的可以追踪的<code>Source -&gt; Sink</code>).</p>\r\n<h3 id=\"taintconfig\">TaintConfig</h3>\r\n<p><del>碎碎念:\r\n不是为什么要把管理污点分析所需的数据结构和设置污点分析的配置两个功能都塞进来啊喂!!!\r\n阅读类名谁能知道会把数据结构放在这里啊喂!!!</del></p>\r\n<p>存储污点分析所需的信息, 可以通过<code>getSources()</code>,\r\n<code>getSinks()</code>, <code>getTransfers()</code>获取,\r\n注意返回的类型是<code>Set</code>,\r\n请使用<code>Set</code>的API对其进行操作.</p>\r\n<p>可以看出,\r\nTaintSources和TaintSinks以及TaintTransfers的规则在该类中已经配置 完成,\r\n可以在实验中<strong>直接使用</strong>.</p>\r\n<blockquote>\r\n<p><strong>Tips</strong> 其余部分都是有关配置污点分析的工具,\r\n本次实验不需要过多了解, 读者若有兴趣可以自行阅读框架代码.</p>\r\n</blockquote>\r\n<h3 id=\"taintanalysis\">TaintAnalysis</h3>\r\n<blockquote>\r\n<p><strong>Tips:</strong>\r\n实验指南解释了为何是<code>TaintAnalysiss</code>,\r\n笔者在此使用更容易理解的表述.</p>\r\n</blockquote>\r\n<p>本次实验主要的逻辑实现部分,\r\n<code>Solver</code>可以根据其中的<code>taintAnalysis</code>字段调用<code>TaintAnalysis</code>中的API,\r\n从代码规范角度, 处理污点分析的代码应当在此处完成,\r\n<code>Solver</code>中仅调用API.</p>\r\n<p>先看看该类具有哪些字段:</p>\r\n<ul>\r\n<li><code>TaintManager manager</code></li>\r\n<li><code>TaintConfig config</code></li>\r\n<li><code>Solver solver</code></li>\r\n<li><code>CSManager csManager</code></li>\r\n<li><code>Context emptyContext</code></li>\r\n</ul>\r\n<p>注意到除了污点分析相关组件,\r\n<code>TaintAnalysis</code>也可以和<code>Solver</code>和<code>CSManager</code>通信,\r\n并且给出了一个<code>emptyContext</code>, 以供直接使用.</p>\r\n<p>以上字段均在实例化时被初始化.</p>\r\n<p>接着看看类中的方法:</p>\r\n<ul>\r\n<li><p><code>void onFinish()</code>,\r\n向外部(这里是<code>Solver</code>)给出污点分析结果<code>taintFlows</code>.</p></li>\r\n<li><p><code>Set&lt;TaintFlow&gt; collectTaintFlows()</code>,\r\n该部分等待完成, 用以计算所有的污染流.</p></li>\r\n</ul>\r\n<h3 id=\"solver\">Solver</h3>\r\n<p>到此已经知道所有污点分析相关类了,\r\n现在从顶层<code>Solver</code>中看看污点分析的使用.</p>\r\n<ul>\r\n<li><code>void solve()</code>是指针分析的步骤, 可以看到相比A6,\r\n最后一步设置了污点分析结果. 换句话说,\r\n本次实验中只需要考虑污点分析的实现,\r\n污点分析的前置工作和结果存储框架都已经做好了.</li>\r\n</ul>\r\n<h2 id=\"算法设计\">算法设计</h2>\r\n<h3 id=\"基本假设\">基本假设</h3>\r\n<p>在本次实验的污点分析中, 有几个基本假设:</p>\r\n<ul>\r\n<li><p><code>TaintObj</code>只会由<code>Source</code>产生,\r\n依据<code>TaintTransfer</code>的规则, 最终传播到<code>Sink</code>.\r\n其中<code>Source</code>的语句类型均为<code>Invoke</code>.</p></li>\r\n<li><p>本次实验不考虑<strong>隐式污染</strong>(详见<a\r\nhref=\"https://cs.nju.edu.cn/tiantan/software-analysis/Security.pdf#page=44\"><strong>课程ppt</strong></a>),\r\n这大大简化了本次实验分析难度.</p></li>\r\n<li><p><code>TaintObj</code>是以<code>Obj</code>的方式进行封装的,\r\n这意味着<code>TaintObj</code>可以像<code>Obj</code>一样在指针流图<code>PointerFlowGraph</code>中传递.</p>\r\n<blockquote>\r\n<p><strong>Tips: 这意味着什么?</strong></p>\r\n<p>这意味着除了<strong>TaintTransfer</strong>和<strong>Source\r\nInvoke</strong>的传播途径外,\r\n<code>TaintObj</code>的其余传播途径都可以在之前的指针分析实现中完成.(如果感到难以理解可以试试推一下<code>Assign</code>,\r\n<code>Store</code>和<code>Load</code>语句的传播)</p>\r\n</blockquote></li>\r\n<li><p><code>TaintObj</code>的上下文被简单的处理成<code>emptyContext</code>,\r\n即来自同一个<code>Index: Invoke</code>的<code>TaintObj</code>在堆中被抽象为一个对象.</p></li>\r\n<li><p><strong><em>(存疑)</em></strong> Online\r\nJudge上似乎所有的<code>Source</code>相关语句<strong>均是静态方法</strong>,\r\n因此理论上不需要进行<strong>dispatch</strong>也可以通过测试.</p></li>\r\n</ul>\r\n<h3 id=\"source-sink-tainttransferflow\">Source &amp; Sink &amp;\r\nTaintTransferFlow</h3>\r\n<p>三者均是在<code>Invoke</code>上进行操作,\r\n因此需要修的地方有<code>processCall</code>和<code>addReachable</code>.</p>\r\n<ul>\r\n<li><p>对于<code>Source</code>, 只需要按实验指南上的规则处理即可.\r\n但需要注意的是, 只有当<code>Invoke</code>存在返回值时,\r\n才执行<code>Source</code>的处理.</p></li>\r\n<li><p>对于<code>Sink</code>, 可以选择边迭代边处理.\r\n但因为<strong>Pointer Analysis</strong>不依赖于<code>Sink</code>,\r\n也可以在算法跑完后遍历所有的<code>Sink</code>语句的参数的<code>PointsToSet</code>是否包含<code>TaintObj</code>.\r\n也就是说,\r\n这部分代码可以在<code>collectTaintFlows()</code>中统一完成.</p></li>\r\n<li><p>对于<code>TaintTransferFlow</code>,\r\n同样只需要小心的按照指南规则处理即可. 但需要注意的是,\r\n由于污点数据流向目标时可能会有类型转换,\r\n因此需要创建一个新的<code>TaintObj</code>实例赋值给目标的<code>PointsToSet</code>.</p></li>\r\n</ul>\r\n<h3 id=\"污点数据的广播\">污点数据的广播</h3>\r\n<p>污点数据的传播逻辑处理是本次实验相对简单的部分,\r\n困难的是想清楚如何传播污点数据.</p>\r\n<p>想知道答案, 就要先回顾一下指针分析的广播.</p>\r\n<img src=\"/2024/12/17/SPA-A8/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<p>这个大循环中当<code>n</code>是变量<code>x</code>时,\r\n对相关语句进行广播.</p>\r\n<p>如在A5, A6中,\r\n需要对<code>Array</code>和<code>Filed</code>以及<code>processCall</code>进行广播.</p>\r\n<p>污点分析也是一种指针分析, 那么其理应也在这里广播.</p>\r\n<p><code>from -&gt; to</code>的情况有三种,\r\n<code>from</code>的取值只有<code>Arg</code>和<code>Base</code>两种情况.</p>\r\n<ul>\r\n<li><p><code>Base</code>的广播可以在<code>processCall</code>中进行,\r\n因为二者中变量<code>x</code>都作为<code>Base</code>出现.</p></li>\r\n<li><p><code>Arg</code>的广播没有现成的方法, 那么就考虑与其余情况并列,\r\n若<code>x</code>是某条<code>Invoke</code>的实参时, 则需要广播到此处,\r\n为该<code>Invoke</code>执行<code>TaintTransferFlow</code></p></li>\r\n</ul>\r\n<p>特别的, 因为这样的特性,\r\n你也可以考虑将<code>TaintTransferFlow</code>拆开来写.\r\n这样更符合其广播逻辑.</p>\r\n<h2 id=\"拾遗\">拾遗</h2>\r\n<p>本次实验几乎不涉及新的方法和工具(当然你也可以选择使用一些隐藏API来完成本次实验,\r\n例如对于<strong>Instance Invoke</strong>,\r\n可以通过<code>((InvokeInstanceExp)(invoke.getInvokeExp())).getBase()</code>来获取<code>base</code>信息).</p>\r\n<p><strong>All you need has already in Tai-e.</strong></p>\r\n<h2 id=\"总结\">总结</h2>\r\n<p>完结撒花啦!</p>\r\n<img src=\"/2024/12/17/SPA-A8/pic1-3.png\" class=\"\" title=\"pic1-3\">"},{"title":"Anaconda+Cuda+Pytorch+Pycharm环境配置","date":"2024-11-24T17:53:37.000Z","hidden":false,"_content":"\n**笔者个人conda环境搭建记录.**\n\n<!--more-->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [前言](#前言)\n- [安装Pycharm \\& Anaconda](#安装pycharm--anaconda)\n  - [Pycharm](#pycharm)\n  - [Anaconda3](#anaconda3)\n    - [选项配置](#选项配置)\n    - [环境变量](#环境变量)\n    - [安装位置](#安装位置)\n    - [Debug](#debug)\n    - [Anaconda 安装检测](#anaconda-安装检测)\n- [安装Cuda](#安装cuda)\n- [安装Pytorch](#安装pytorch)\n  - [Anaconda创建conda环境](#anaconda创建conda环境)\n  - [确定Pytorch版本](#确定pytorch版本)\n  - [Pytorch安装检测](#pytorch安装检测)\n- [Pycharm激活conda环境](#pycharm激活conda环境)\n  - [导入环境检测](#导入环境检测)\n- [参考资料](#参考资料)\n\n## 前言\n\n本日志记录一次笔者配置conda环境的过程. 参考资料来源网络, 见[**参考资料**](#参考资料)\n\n本次搭建环境基于[**Anaconda**](https://www.anaconda.com/)+[**Cuda**](https://developer.nvidia.com/)搭建[**Pytorch**](https://pytorch.org/)环境并导入[**Pycharm**](https://www.jetbrains.com.cn/pycharm/)中使用.\n\n笔者的环境为:\n\n**Win11家庭版23H2** + **CPU:AMD Ryzen 7 5800H** + **GPU: 3060laptop**\n\n**Anaconda-2024.10.1** + **Cuda-12.6** + **Pytorch-win_x86_64-cuda12.4** + **Pycharm Community-2022.2.2**\n\n## 安装Pycharm & Anaconda\n\n### Pycharm\n\n笔者的Pycharm已经安装好了, Community版本是可以免费使用的, 安装教程可以**STFW**.\n\n需要注意的是, Pycharm本身不包含python, python需要自行下载.\n\n### Anaconda3\n\n#### 选项配置\n\n![pic1-1](conda-env/pic1-1.png)\n\n`Just Me`与`All Users`选择`All Users`.\n\n![pic1-2](conda-env/pic1-2.png)\n\n全部勾选.\n\n安装结束后不需要launch, 还要配置环境变量.\n\n#### 环境变量\n\n在高级系统设置中添加系统环境变量, 路径以安装路径为准.\n\n```Shell\nD:\\anaconda3\nD:\\anaconda3\\Scripts\nD:\\anaconda3\\Library\\bin\nD:\\anaconda3\\Library\\mingw-w64\\bin\n```\n\n#### 安装位置\n\n如果已有分盘, 推荐安装到别的分区.\n\nAnaconda的环境和包管理也可以迁移, 笔者本次省略了这个步骤.\n\n#### Debug\n\n笔者在安装完成后遇到了打开`Anaconda Navigator`时卡死在`Loading Applications`页面上, 通过为程序添加默认管理员权限解决.\n\n#### Anaconda 安装检测\n\n打开`Anaconda Prompt`, 页面如下:\n\n![pic1-3](conda-env/pic1-3.png)\n\n执行指令\n\n```shell\n$ conda --version\n```\n\n终端输出conda版本号即成功安装了conda\n\n![pic1-4](conda-env/pic1-4.png)\n\n可以通过如下指令查看conda的配置信息:\n\n```shell\n$ conda info\n```\n\n> **Tips:** 笔者本次略去了Conda的配置, 如包和环境位置, 镜像源的配置. 有需要可以自行配置.\n\n## 安装Cuda\n\n调出cmd后在终端中输入\n\n```shell\n$ nvidia-smi\n```\n\n得到\n\n![pic1-5](conda-env/pic1-5.png)\n\n其中`CUDA Version`代表最高支持的`CUDA`版本, 到官网对应版本下载即可.\n\n安装完成后在cmd中执行\n\n```shell\n$ nvcc -V\n```\n\n正常输出Cuda版本即安装完成.\n\n![pic1-6](conda-env/pic1-6.png)\n\n## 安装Pytorch\n\nPytorch依赖于conda环境, 因此在安装Pytorch前需要配置conda虚拟环境.\n\n### Anaconda创建conda环境\n\n打开`Anaconda Prompt`, 此时的环境为默认的`base`(见[**上文**](#anaconda-安装检测))\n\n执行指令\n\n```shell\n$ conda create –n pytorch python=3.10\n```\n\n其中`pytorch`为环境名称, `python=3.10`为指定python解释器版本.\n\n需要注意的是, 目前(2024.11)的Pytorch需要**至少**python版本为3.9\n\n如果需要特定版本, 在安装Pytorch时需要查看`Preview Version`.\n\n执行\n\n```shell\n$ conda activate pytorch\n```\n\n终端环境变更为`pytorch`\n\n想要回到`base`环境, 只需要执行\n\n```shell\n$ conda deactivate\n```\n\nPytorch的安装位置便是在名为`pytorch`的环境中.\n\n### 确定Pytorch版本\n\n进入Pytorch官网的Install页面\n\n![pic1-7](conda-env/pic1-7.png)\n\n根据自己的Cuda版本选择安装.\n\n如果选择conda安装, 只需要在`Anaconda Prompt`中激活创建的`pytorch`环境, 执行官网上给出的安装命令.\n\n耐心等待安装完成即可.\n\n### Pytorch安装检测\n\n安装结束后, 在激活`pytorch`环境的终端中执行\n\n```shell\n$ python\n```\n\n![pic1-8](conda-env/pic1-8.png)\n\n输入以下python代码\n\n```python\nimport torch\nprint(torch.__version__)\nprint(torch.cuda.is_available())\n```\n\n![pic1-9](conda-env/pic1-9.png)\n\n得到类似输出而没有报错即成功在conda环境中安装pytorch.\n\n## Pycharm激活conda环境\n\n以创建的`pytorch`环境为例.\n\n使用Pycharm打开项目, 进入`File->Setting`页面\n\n![pic1-10](conda-env/pic1-10.png)\n\n选择`项目->Python解释器`\n\n点击`添加解释器->添加本地解释器->conda环境`\n\n![pic1-11](conda-env/pic1-11.png)\n\nConda可执行文件输入`D:\\anaconda3\\Scripts\\conda.exe`(依据Anaconda安装位置)\n\n选择解释器(依据自己的conda环境创建位置)\n\n![pic1-12](conda-env/pic1-12.png)\n\n点击确认等待配置完成.\n\n### 导入环境检测\n\n与[**Pytorch安装检测**](#pytorch安装检测)类似, 只需要在python文件中键入\n\n```python\nimport torch\nprint(torch.__version__)\nprint(torch.cuda.is_available())\n```\n\n执行代码得到\n\n```shell\n2.5.1\nTrue\n```\n\n然后就可以开始愉快(迫真)的炼丹之旅啦!\n\n## 参考资料\n\n> **Tips:** 博客并不能解决所有问题, 对于博客中的内容要和面对ChatGPT生成的内容一样小心求证. 必要时更推荐官方文档(此处略去).\n\n<https://blog.csdn.net/qq_44000789/article/details/142214660>\n\n<https://blog.csdn.net/weixin_41401924/article/details/120332417>\n\n<https://zhuanlan.zhihu.com/p/389992455>\n\n<https://blog.csdn.net/weixin_62075168/article/details/131226082>","source":"_posts/conda-env.md","raw":"---\ntitle: Anaconda+Cuda+Pytorch+Pycharm环境配置\ndate: 2024-11-25 01:53:37\nhidden: false\ntags:\n- 环境配置\n- AI\ncategories:\n- AI\n---\n\n**笔者个人conda环境搭建记录.**\n\n<!--more-->\n\n<p><font size = 5><b>目录</b></font></p>\n\n- [前言](#前言)\n- [安装Pycharm \\& Anaconda](#安装pycharm--anaconda)\n  - [Pycharm](#pycharm)\n  - [Anaconda3](#anaconda3)\n    - [选项配置](#选项配置)\n    - [环境变量](#环境变量)\n    - [安装位置](#安装位置)\n    - [Debug](#debug)\n    - [Anaconda 安装检测](#anaconda-安装检测)\n- [安装Cuda](#安装cuda)\n- [安装Pytorch](#安装pytorch)\n  - [Anaconda创建conda环境](#anaconda创建conda环境)\n  - [确定Pytorch版本](#确定pytorch版本)\n  - [Pytorch安装检测](#pytorch安装检测)\n- [Pycharm激活conda环境](#pycharm激活conda环境)\n  - [导入环境检测](#导入环境检测)\n- [参考资料](#参考资料)\n\n## 前言\n\n本日志记录一次笔者配置conda环境的过程. 参考资料来源网络, 见[**参考资料**](#参考资料)\n\n本次搭建环境基于[**Anaconda**](https://www.anaconda.com/)+[**Cuda**](https://developer.nvidia.com/)搭建[**Pytorch**](https://pytorch.org/)环境并导入[**Pycharm**](https://www.jetbrains.com.cn/pycharm/)中使用.\n\n笔者的环境为:\n\n**Win11家庭版23H2** + **CPU:AMD Ryzen 7 5800H** + **GPU: 3060laptop**\n\n**Anaconda-2024.10.1** + **Cuda-12.6** + **Pytorch-win_x86_64-cuda12.4** + **Pycharm Community-2022.2.2**\n\n## 安装Pycharm & Anaconda\n\n### Pycharm\n\n笔者的Pycharm已经安装好了, Community版本是可以免费使用的, 安装教程可以**STFW**.\n\n需要注意的是, Pycharm本身不包含python, python需要自行下载.\n\n### Anaconda3\n\n#### 选项配置\n\n![pic1-1](conda-env/pic1-1.png)\n\n`Just Me`与`All Users`选择`All Users`.\n\n![pic1-2](conda-env/pic1-2.png)\n\n全部勾选.\n\n安装结束后不需要launch, 还要配置环境变量.\n\n#### 环境变量\n\n在高级系统设置中添加系统环境变量, 路径以安装路径为准.\n\n```Shell\nD:\\anaconda3\nD:\\anaconda3\\Scripts\nD:\\anaconda3\\Library\\bin\nD:\\anaconda3\\Library\\mingw-w64\\bin\n```\n\n#### 安装位置\n\n如果已有分盘, 推荐安装到别的分区.\n\nAnaconda的环境和包管理也可以迁移, 笔者本次省略了这个步骤.\n\n#### Debug\n\n笔者在安装完成后遇到了打开`Anaconda Navigator`时卡死在`Loading Applications`页面上, 通过为程序添加默认管理员权限解决.\n\n#### Anaconda 安装检测\n\n打开`Anaconda Prompt`, 页面如下:\n\n![pic1-3](conda-env/pic1-3.png)\n\n执行指令\n\n```shell\n$ conda --version\n```\n\n终端输出conda版本号即成功安装了conda\n\n![pic1-4](conda-env/pic1-4.png)\n\n可以通过如下指令查看conda的配置信息:\n\n```shell\n$ conda info\n```\n\n> **Tips:** 笔者本次略去了Conda的配置, 如包和环境位置, 镜像源的配置. 有需要可以自行配置.\n\n## 安装Cuda\n\n调出cmd后在终端中输入\n\n```shell\n$ nvidia-smi\n```\n\n得到\n\n![pic1-5](conda-env/pic1-5.png)\n\n其中`CUDA Version`代表最高支持的`CUDA`版本, 到官网对应版本下载即可.\n\n安装完成后在cmd中执行\n\n```shell\n$ nvcc -V\n```\n\n正常输出Cuda版本即安装完成.\n\n![pic1-6](conda-env/pic1-6.png)\n\n## 安装Pytorch\n\nPytorch依赖于conda环境, 因此在安装Pytorch前需要配置conda虚拟环境.\n\n### Anaconda创建conda环境\n\n打开`Anaconda Prompt`, 此时的环境为默认的`base`(见[**上文**](#anaconda-安装检测))\n\n执行指令\n\n```shell\n$ conda create –n pytorch python=3.10\n```\n\n其中`pytorch`为环境名称, `python=3.10`为指定python解释器版本.\n\n需要注意的是, 目前(2024.11)的Pytorch需要**至少**python版本为3.9\n\n如果需要特定版本, 在安装Pytorch时需要查看`Preview Version`.\n\n执行\n\n```shell\n$ conda activate pytorch\n```\n\n终端环境变更为`pytorch`\n\n想要回到`base`环境, 只需要执行\n\n```shell\n$ conda deactivate\n```\n\nPytorch的安装位置便是在名为`pytorch`的环境中.\n\n### 确定Pytorch版本\n\n进入Pytorch官网的Install页面\n\n![pic1-7](conda-env/pic1-7.png)\n\n根据自己的Cuda版本选择安装.\n\n如果选择conda安装, 只需要在`Anaconda Prompt`中激活创建的`pytorch`环境, 执行官网上给出的安装命令.\n\n耐心等待安装完成即可.\n\n### Pytorch安装检测\n\n安装结束后, 在激活`pytorch`环境的终端中执行\n\n```shell\n$ python\n```\n\n![pic1-8](conda-env/pic1-8.png)\n\n输入以下python代码\n\n```python\nimport torch\nprint(torch.__version__)\nprint(torch.cuda.is_available())\n```\n\n![pic1-9](conda-env/pic1-9.png)\n\n得到类似输出而没有报错即成功在conda环境中安装pytorch.\n\n## Pycharm激活conda环境\n\n以创建的`pytorch`环境为例.\n\n使用Pycharm打开项目, 进入`File->Setting`页面\n\n![pic1-10](conda-env/pic1-10.png)\n\n选择`项目->Python解释器`\n\n点击`添加解释器->添加本地解释器->conda环境`\n\n![pic1-11](conda-env/pic1-11.png)\n\nConda可执行文件输入`D:\\anaconda3\\Scripts\\conda.exe`(依据Anaconda安装位置)\n\n选择解释器(依据自己的conda环境创建位置)\n\n![pic1-12](conda-env/pic1-12.png)\n\n点击确认等待配置完成.\n\n### 导入环境检测\n\n与[**Pytorch安装检测**](#pytorch安装检测)类似, 只需要在python文件中键入\n\n```python\nimport torch\nprint(torch.__version__)\nprint(torch.cuda.is_available())\n```\n\n执行代码得到\n\n```shell\n2.5.1\nTrue\n```\n\n然后就可以开始愉快(迫真)的炼丹之旅啦!\n\n## 参考资料\n\n> **Tips:** 博客并不能解决所有问题, 对于博客中的内容要和面对ChatGPT生成的内容一样小心求证. 必要时更推荐官方文档(此处略去).\n\n<https://blog.csdn.net/qq_44000789/article/details/142214660>\n\n<https://blog.csdn.net/weixin_41401924/article/details/120332417>\n\n<https://zhuanlan.zhihu.com/p/389992455>\n\n<https://blog.csdn.net/weixin_62075168/article/details/131226082>","slug":"conda-env","published":1,"updated":"2024-11-25T18:17:41.400Z","comments":1,"layout":"post","photos":[],"_id":"cm4v1fyv2002ussilcv93cp9y","content":"<p><strong>笔者个人conda环境搭建记录.</strong></p>\r\n<span id=\"more\"></span>\r\n<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#前言\">前言</a></li>\r\n<li><a href=\"#安装pycharm--anaconda\">安装Pycharm &amp; Anaconda</a>\r\n<ul>\r\n<li><a href=\"#pycharm\">Pycharm</a></li>\r\n<li><a href=\"#anaconda3\">Anaconda3</a>\r\n<ul>\r\n<li><a href=\"#选项配置\">选项配置</a></li>\r\n<li><a href=\"#环境变量\">环境变量</a></li>\r\n<li><a href=\"#安装位置\">安装位置</a></li>\r\n<li><a href=\"#debug\">Debug</a></li>\r\n<li><a href=\"#anaconda-安装检测\">Anaconda 安装检测</a></li>\r\n</ul></li>\r\n</ul></li>\r\n<li><a href=\"#安装cuda\">安装Cuda</a></li>\r\n<li><a href=\"#安装pytorch\">安装Pytorch</a>\r\n<ul>\r\n<li><a href=\"#anaconda创建conda环境\">Anaconda创建conda环境</a></li>\r\n<li><a href=\"#确定pytorch版本\">确定Pytorch版本</a></li>\r\n<li><a href=\"#pytorch安装检测\">Pytorch安装检测</a></li>\r\n</ul></li>\r\n<li><a href=\"#pycharm激活conda环境\">Pycharm激活conda环境</a>\r\n<ul>\r\n<li><a href=\"#导入环境检测\">导入环境检测</a></li>\r\n</ul></li>\r\n<li><a href=\"#参考资料\">参考资料</a></li>\r\n</ul>\r\n<h2 id=\"前言\">前言</h2>\r\n<p>本日志记录一次笔者配置conda环境的过程. 参考资料来源网络, 见<a\r\nhref=\"#参考资料\"><strong>参考资料</strong></a></p>\r\n<p>本次搭建环境基于<a\r\nhref=\"https://www.anaconda.com/\"><strong>Anaconda</strong></a>+<a\r\nhref=\"https://developer.nvidia.com/\"><strong>Cuda</strong></a>搭建<a\r\nhref=\"https://pytorch.org/\"><strong>Pytorch</strong></a>环境并导入<a\r\nhref=\"https://www.jetbrains.com.cn/pycharm/\"><strong>Pycharm</strong></a>中使用.</p>\r\n<p>笔者的环境为:</p>\r\n<p><strong>Win11家庭版23H2</strong> + <strong>CPU:AMD Ryzen 7\r\n5800H</strong> + <strong>GPU: 3060laptop</strong></p>\r\n<p><strong>Anaconda-2024.10.1</strong> + <strong>Cuda-12.6</strong> +\r\n<strong>Pytorch-win_x86_64-cuda12.4</strong> + <strong>Pycharm\r\nCommunity-2022.2.2</strong></p>\r\n<h2 id=\"安装pycharm-anaconda\">安装Pycharm &amp; Anaconda</h2>\r\n<h3 id=\"pycharm\">Pycharm</h3>\r\n<p>笔者的Pycharm已经安装好了, Community版本是可以免费使用的,\r\n安装教程可以<strong>STFW</strong>.</p>\r\n<p>需要注意的是, Pycharm本身不包含python, python需要自行下载.</p>\r\n<h3 id=\"anaconda3\">Anaconda3</h3>\r\n<h4 id=\"选项配置\">选项配置</h4>\r\n<img src=\"/2024/11/25/conda-env/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<p><code>Just Me</code>与<code>All Users</code>选择<code>All Users</code>.</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<p>全部勾选.</p>\r\n<p>安装结束后不需要launch, 还要配置环境变量.</p>\r\n<h4 id=\"环境变量\">环境变量</h4>\r\n<p>在高级系统设置中添加系统环境变量, 路径以安装路径为准.</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\anaconda3</span><br><span class=\"line\">D:\\anaconda3\\Scripts</span><br><span class=\"line\">D:\\anaconda3\\Library\\bin</span><br><span class=\"line\">D:\\anaconda3\\Library\\mingw-w64\\bin</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"安装位置\">安装位置</h4>\r\n<p>如果已有分盘, 推荐安装到别的分区.</p>\r\n<p>Anaconda的环境和包管理也可以迁移, 笔者本次省略了这个步骤.</p>\r\n<h4 id=\"debug\">Debug</h4>\r\n<p>笔者在安装完成后遇到了打开<code>Anaconda Navigator</code>时卡死在<code>Loading Applications</code>页面上,\r\n通过为程序添加默认管理员权限解决.</p>\r\n<h4 id=\"anaconda-安装检测\">Anaconda 安装检测</h4>\r\n<p>打开<code>Anaconda Prompt</code>, 页面如下:</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n<p>执行指令</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">conda --version</span></span><br></pre></td></tr></table></figure>\r\n<p>终端输出conda版本号即成功安装了conda</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-4.png\" class=\"\" title=\"pic1-4\">\r\n<p>可以通过如下指令查看conda的配置信息:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">conda info</span></span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 笔者本次略去了Conda的配置, 如包和环境位置,\r\n镜像源的配置. 有需要可以自行配置.</p>\r\n</blockquote>\r\n<h2 id=\"安装cuda\">安装Cuda</h2>\r\n<p>调出cmd后在终端中输入</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">nvidia-smi</span></span><br></pre></td></tr></table></figure>\r\n<p>得到</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-5.png\" class=\"\" title=\"pic1-5\">\r\n<p>其中<code>CUDA Version</code>代表最高支持的<code>CUDA</code>版本,\r\n到官网对应版本下载即可.</p>\r\n<p>安装完成后在cmd中执行</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">nvcc -V</span></span><br></pre></td></tr></table></figure>\r\n<p>正常输出Cuda版本即安装完成.</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-6.png\" class=\"\" title=\"pic1-6\">\r\n<h2 id=\"安装pytorch\">安装Pytorch</h2>\r\n<p>Pytorch依赖于conda环境, 因此在安装Pytorch前需要配置conda虚拟环境.</p>\r\n<h3 id=\"anaconda创建conda环境\">Anaconda创建conda环境</h3>\r\n<p>打开<code>Anaconda Prompt</code>,\r\n此时的环境为默认的<code>base</code>(见<a\r\nhref=\"#anaconda-安装检测\"><strong>上文</strong></a>)</p>\r\n<p>执行指令</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">conda create –n pytorch python=3.10</span></span><br></pre></td></tr></table></figure>\r\n<p>其中<code>pytorch</code>为环境名称,\r\n<code>python=3.10</code>为指定python解释器版本.</p>\r\n<p>需要注意的是,\r\n目前(2024.11)的Pytorch需要<strong>至少</strong>python版本为3.9</p>\r\n<p>如果需要特定版本,\r\n在安装Pytorch时需要查看<code>Preview Version</code>.</p>\r\n<p>执行</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">conda activate pytorch</span></span><br></pre></td></tr></table></figure>\r\n<p>终端环境变更为<code>pytorch</code></p>\r\n<p>想要回到<code>base</code>环境, 只需要执行</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">conda deactivate</span></span><br></pre></td></tr></table></figure>\r\n<p>Pytorch的安装位置便是在名为<code>pytorch</code>的环境中.</p>\r\n<h3 id=\"确定pytorch版本\">确定Pytorch版本</h3>\r\n<p>进入Pytorch官网的Install页面</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-7.png\" class=\"\" title=\"pic1-7\">\r\n<p>根据自己的Cuda版本选择安装.</p>\r\n<p>如果选择conda安装,\r\n只需要在<code>Anaconda Prompt</code>中激活创建的<code>pytorch</code>环境,\r\n执行官网上给出的安装命令.</p>\r\n<p>耐心等待安装完成即可.</p>\r\n<h3 id=\"pytorch安装检测\">Pytorch安装检测</h3>\r\n<p>安装结束后, 在激活<code>pytorch</code>环境的终端中执行</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">python</span></span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/25/conda-env/pic1-8.png\" class=\"\" title=\"pic1-8\">\r\n<p>输入以下python代码</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"built_in\">print</span>(torch.__version__)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/25/conda-env/pic1-9.png\" class=\"\" title=\"pic1-9\">\r\n<p>得到类似输出而没有报错即成功在conda环境中安装pytorch.</p>\r\n<h2 id=\"pycharm激活conda环境\">Pycharm激活conda环境</h2>\r\n<p>以创建的<code>pytorch</code>环境为例.</p>\r\n<p>使用Pycharm打开项目, 进入<code>File-&gt;Setting</code>页面</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-10.png\" class=\"\" title=\"pic1-10\">\r\n<p>选择<code>项目-&gt;Python解释器</code></p>\r\n<p>点击<code>添加解释器-&gt;添加本地解释器-&gt;conda环境</code></p>\r\n<img src=\"/2024/11/25/conda-env/pic1-11.png\" class=\"\" title=\"pic1-11\">\r\n<p>Conda可执行文件输入<code>D:\\anaconda3\\Scripts\\conda.exe</code>(依据Anaconda安装位置)</p>\r\n<p>选择解释器(依据自己的conda环境创建位置)</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-12.png\" class=\"\" title=\"pic1-12\">\r\n<p>点击确认等待配置完成.</p>\r\n<h3 id=\"导入环境检测\">导入环境检测</h3>\r\n<p>与<a\r\nhref=\"#pytorch安装检测\"><strong>Pytorch安装检测</strong></a>类似,\r\n只需要在python文件中键入</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"built_in\">print</span>(torch.__version__)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></table></figure>\r\n<p>执行代码得到</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.5.1</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\r\n<p>然后就可以开始愉快(迫真)的炼丹之旅啦!</p>\r\n<h2 id=\"参考资料\">参考资料</h2>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 博客并不能解决所有问题,\r\n对于博客中的内容要和面对ChatGPT生成的内容一样小心求证.\r\n必要时更推荐官方文档(此处略去).</p>\r\n</blockquote>\r\n<p><a href=\"https://blog.csdn.net/qq_44000789/article/details/142214660\"\r\nclass=\"uri\">https://blog.csdn.net/qq_44000789/article/details/142214660</a></p>\r\n<p><a\r\nhref=\"https://blog.csdn.net/weixin_41401924/article/details/120332417\"\r\nclass=\"uri\">https://blog.csdn.net/weixin_41401924/article/details/120332417</a></p>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/389992455\"\r\nclass=\"uri\">https://zhuanlan.zhihu.com/p/389992455</a></p>\r\n<p><a\r\nhref=\"https://blog.csdn.net/weixin_62075168/article/details/131226082\"\r\nclass=\"uri\">https://blog.csdn.net/weixin_62075168/article/details/131226082</a></p>\r\n","length":1091,"excerpt":"<p><strong>笔者个人conda环境搭建记录.</strong></p>","more":"<p>\r\n<font size = 5><b>目录</b></font>\r\n</p>\r\n<ul>\r\n<li><a href=\"#前言\">前言</a></li>\r\n<li><a href=\"#安装pycharm--anaconda\">安装Pycharm &amp; Anaconda</a>\r\n<ul>\r\n<li><a href=\"#pycharm\">Pycharm</a></li>\r\n<li><a href=\"#anaconda3\">Anaconda3</a>\r\n<ul>\r\n<li><a href=\"#选项配置\">选项配置</a></li>\r\n<li><a href=\"#环境变量\">环境变量</a></li>\r\n<li><a href=\"#安装位置\">安装位置</a></li>\r\n<li><a href=\"#debug\">Debug</a></li>\r\n<li><a href=\"#anaconda-安装检测\">Anaconda 安装检测</a></li>\r\n</ul></li>\r\n</ul></li>\r\n<li><a href=\"#安装cuda\">安装Cuda</a></li>\r\n<li><a href=\"#安装pytorch\">安装Pytorch</a>\r\n<ul>\r\n<li><a href=\"#anaconda创建conda环境\">Anaconda创建conda环境</a></li>\r\n<li><a href=\"#确定pytorch版本\">确定Pytorch版本</a></li>\r\n<li><a href=\"#pytorch安装检测\">Pytorch安装检测</a></li>\r\n</ul></li>\r\n<li><a href=\"#pycharm激活conda环境\">Pycharm激活conda环境</a>\r\n<ul>\r\n<li><a href=\"#导入环境检测\">导入环境检测</a></li>\r\n</ul></li>\r\n<li><a href=\"#参考资料\">参考资料</a></li>\r\n</ul>\r\n<h2 id=\"前言\">前言</h2>\r\n<p>本日志记录一次笔者配置conda环境的过程. 参考资料来源网络, 见<a\r\nhref=\"#参考资料\"><strong>参考资料</strong></a></p>\r\n<p>本次搭建环境基于<a\r\nhref=\"https://www.anaconda.com/\"><strong>Anaconda</strong></a>+<a\r\nhref=\"https://developer.nvidia.com/\"><strong>Cuda</strong></a>搭建<a\r\nhref=\"https://pytorch.org/\"><strong>Pytorch</strong></a>环境并导入<a\r\nhref=\"https://www.jetbrains.com.cn/pycharm/\"><strong>Pycharm</strong></a>中使用.</p>\r\n<p>笔者的环境为:</p>\r\n<p><strong>Win11家庭版23H2</strong> + <strong>CPU:AMD Ryzen 7\r\n5800H</strong> + <strong>GPU: 3060laptop</strong></p>\r\n<p><strong>Anaconda-2024.10.1</strong> + <strong>Cuda-12.6</strong> +\r\n<strong>Pytorch-win_x86_64-cuda12.4</strong> + <strong>Pycharm\r\nCommunity-2022.2.2</strong></p>\r\n<h2 id=\"安装pycharm-anaconda\">安装Pycharm &amp; Anaconda</h2>\r\n<h3 id=\"pycharm\">Pycharm</h3>\r\n<p>笔者的Pycharm已经安装好了, Community版本是可以免费使用的,\r\n安装教程可以<strong>STFW</strong>.</p>\r\n<p>需要注意的是, Pycharm本身不包含python, python需要自行下载.</p>\r\n<h3 id=\"anaconda3\">Anaconda3</h3>\r\n<h4 id=\"选项配置\">选项配置</h4>\r\n<img src=\"/2024/11/25/conda-env/pic1-1.png\" class=\"\" title=\"pic1-1\">\r\n<p><code>Just Me</code>与<code>All Users</code>选择<code>All Users</code>.</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-2.png\" class=\"\" title=\"pic1-2\">\r\n<p>全部勾选.</p>\r\n<p>安装结束后不需要launch, 还要配置环境变量.</p>\r\n<h4 id=\"环境变量\">环境变量</h4>\r\n<p>在高级系统设置中添加系统环境变量, 路径以安装路径为准.</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\anaconda3</span><br><span class=\"line\">D:\\anaconda3\\Scripts</span><br><span class=\"line\">D:\\anaconda3\\Library\\bin</span><br><span class=\"line\">D:\\anaconda3\\Library\\mingw-w64\\bin</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"安装位置\">安装位置</h4>\r\n<p>如果已有分盘, 推荐安装到别的分区.</p>\r\n<p>Anaconda的环境和包管理也可以迁移, 笔者本次省略了这个步骤.</p>\r\n<h4 id=\"debug\">Debug</h4>\r\n<p>笔者在安装完成后遇到了打开<code>Anaconda Navigator</code>时卡死在<code>Loading Applications</code>页面上,\r\n通过为程序添加默认管理员权限解决.</p>\r\n<h4 id=\"anaconda-安装检测\">Anaconda 安装检测</h4>\r\n<p>打开<code>Anaconda Prompt</code>, 页面如下:</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-3.png\" class=\"\" title=\"pic1-3\">\r\n<p>执行指令</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">conda --version</span></span><br></pre></td></tr></table></figure>\r\n<p>终端输出conda版本号即成功安装了conda</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-4.png\" class=\"\" title=\"pic1-4\">\r\n<p>可以通过如下指令查看conda的配置信息:</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">conda info</span></span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 笔者本次略去了Conda的配置, 如包和环境位置,\r\n镜像源的配置. 有需要可以自行配置.</p>\r\n</blockquote>\r\n<h2 id=\"安装cuda\">安装Cuda</h2>\r\n<p>调出cmd后在终端中输入</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">nvidia-smi</span></span><br></pre></td></tr></table></figure>\r\n<p>得到</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-5.png\" class=\"\" title=\"pic1-5\">\r\n<p>其中<code>CUDA Version</code>代表最高支持的<code>CUDA</code>版本,\r\n到官网对应版本下载即可.</p>\r\n<p>安装完成后在cmd中执行</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">nvcc -V</span></span><br></pre></td></tr></table></figure>\r\n<p>正常输出Cuda版本即安装完成.</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-6.png\" class=\"\" title=\"pic1-6\">\r\n<h2 id=\"安装pytorch\">安装Pytorch</h2>\r\n<p>Pytorch依赖于conda环境, 因此在安装Pytorch前需要配置conda虚拟环境.</p>\r\n<h3 id=\"anaconda创建conda环境\">Anaconda创建conda环境</h3>\r\n<p>打开<code>Anaconda Prompt</code>,\r\n此时的环境为默认的<code>base</code>(见<a\r\nhref=\"#anaconda-安装检测\"><strong>上文</strong></a>)</p>\r\n<p>执行指令</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">conda create –n pytorch python=3.10</span></span><br></pre></td></tr></table></figure>\r\n<p>其中<code>pytorch</code>为环境名称,\r\n<code>python=3.10</code>为指定python解释器版本.</p>\r\n<p>需要注意的是,\r\n目前(2024.11)的Pytorch需要<strong>至少</strong>python版本为3.9</p>\r\n<p>如果需要特定版本,\r\n在安装Pytorch时需要查看<code>Preview Version</code>.</p>\r\n<p>执行</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">conda activate pytorch</span></span><br></pre></td></tr></table></figure>\r\n<p>终端环境变更为<code>pytorch</code></p>\r\n<p>想要回到<code>base</code>环境, 只需要执行</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">conda deactivate</span></span><br></pre></td></tr></table></figure>\r\n<p>Pytorch的安装位置便是在名为<code>pytorch</code>的环境中.</p>\r\n<h3 id=\"确定pytorch版本\">确定Pytorch版本</h3>\r\n<p>进入Pytorch官网的Install页面</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-7.png\" class=\"\" title=\"pic1-7\">\r\n<p>根据自己的Cuda版本选择安装.</p>\r\n<p>如果选择conda安装,\r\n只需要在<code>Anaconda Prompt</code>中激活创建的<code>pytorch</code>环境,\r\n执行官网上给出的安装命令.</p>\r\n<p>耐心等待安装完成即可.</p>\r\n<h3 id=\"pytorch安装检测\">Pytorch安装检测</h3>\r\n<p>安装结束后, 在激活<code>pytorch</code>环境的终端中执行</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">python</span></span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/25/conda-env/pic1-8.png\" class=\"\" title=\"pic1-8\">\r\n<p>输入以下python代码</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"built_in\">print</span>(torch.__version__)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></table></figure>\r\n<img src=\"/2024/11/25/conda-env/pic1-9.png\" class=\"\" title=\"pic1-9\">\r\n<p>得到类似输出而没有报错即成功在conda环境中安装pytorch.</p>\r\n<h2 id=\"pycharm激活conda环境\">Pycharm激活conda环境</h2>\r\n<p>以创建的<code>pytorch</code>环境为例.</p>\r\n<p>使用Pycharm打开项目, 进入<code>File-&gt;Setting</code>页面</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-10.png\" class=\"\" title=\"pic1-10\">\r\n<p>选择<code>项目-&gt;Python解释器</code></p>\r\n<p>点击<code>添加解释器-&gt;添加本地解释器-&gt;conda环境</code></p>\r\n<img src=\"/2024/11/25/conda-env/pic1-11.png\" class=\"\" title=\"pic1-11\">\r\n<p>Conda可执行文件输入<code>D:\\anaconda3\\Scripts\\conda.exe</code>(依据Anaconda安装位置)</p>\r\n<p>选择解释器(依据自己的conda环境创建位置)</p>\r\n<img src=\"/2024/11/25/conda-env/pic1-12.png\" class=\"\" title=\"pic1-12\">\r\n<p>点击确认等待配置完成.</p>\r\n<h3 id=\"导入环境检测\">导入环境检测</h3>\r\n<p>与<a\r\nhref=\"#pytorch安装检测\"><strong>Pytorch安装检测</strong></a>类似,\r\n只需要在python文件中键入</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"built_in\">print</span>(torch.__version__)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></table></figure>\r\n<p>执行代码得到</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.5.1</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\r\n<p>然后就可以开始愉快(迫真)的炼丹之旅啦!</p>\r\n<h2 id=\"参考资料\">参考资料</h2>\r\n<blockquote>\r\n<p><strong>Tips:</strong> 博客并不能解决所有问题,\r\n对于博客中的内容要和面对ChatGPT生成的内容一样小心求证.\r\n必要时更推荐官方文档(此处略去).</p>\r\n</blockquote>\r\n<p><a href=\"https://blog.csdn.net/qq_44000789/article/details/142214660\"\r\nclass=\"uri\">https://blog.csdn.net/qq_44000789/article/details/142214660</a></p>\r\n<p><a\r\nhref=\"https://blog.csdn.net/weixin_41401924/article/details/120332417\"\r\nclass=\"uri\">https://blog.csdn.net/weixin_41401924/article/details/120332417</a></p>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/389992455\"\r\nclass=\"uri\">https://zhuanlan.zhihu.com/p/389992455</a></p>\r\n<p><a\r\nhref=\"https://blog.csdn.net/weixin_62075168/article/details/131226082\"\r\nclass=\"uri\">https://blog.csdn.net/weixin_62075168/article/details/131226082</a></p>"},{"title":"千里之行，始于足下","date":"2024-09-08T12:56:57.000Z","comments":1,"_content":"\n**A journey of a thousand miles begins with a single step.**\n\n<!-- more -->\n\n![picture](hello-world/picture.png)\n","source":"_posts/hello-world.md","raw":"---\ntitle: 千里之行，始于足下\ndate: 2024-09-08 20:56:57\ncomments: true\ntags:\n- 杂项\ncategories: \n- 杂项\n---\n\n**A journey of a thousand miles begins with a single step.**\n\n<!-- more -->\n\n![picture](hello-world/picture.png)\n","slug":"hello-world","published":1,"updated":"2024-09-12T15:49:07.668Z","layout":"post","photos":[],"_id":"cm4v1fyv2002xssildz1obh8d","content":"<p><strong>A journey of a thousand miles begins with a single\r\nstep.</strong></p>\r\n<span id=\"more\"></span>\r\n<img src=\"/2024/09/08/hello-world/picture.png\" class=\"\" title=\"picture\">\r\n","length":13,"excerpt":"<p><strong>A journey of a thousand miles begins with a single\r\nstep.</strong></p>","more":"<img src=\"/2024/09/08/hello-world/picture.png\" class=\"\" title=\"picture\">"}],"PostAsset":[{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-1.png","post":"cm4v1fyub0007ssilh5zl4zt8","slug":"pic1-1.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-2.png","post":"cm4v1fyub0007ssilh5zl4zt8","slug":"pic1-2.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-3.png","post":"cm4v1fyub0007ssilh5zl4zt8","slug":"pic1-3.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/pic1-4.png","post":"cm4v1fyub0007ssilh5zl4zt8","slug":"pic1-4.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-1/table1-1.png","post":"cm4v1fyub0007ssilh5zl4zt8","slug":"table1-1.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-1.png","post":"cm4v1fyud000assil90o2ann0","slug":"pic2-1.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-2.png","post":"cm4v1fyud000assil90o2ann0","slug":"pic2-2.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-3.png","post":"cm4v1fyud000assil90o2ann0","slug":"pic2-3.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-4.png","post":"cm4v1fyud000assil90o2ann0","slug":"pic2-4.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-5.png","post":"cm4v1fyud000assil90o2ann0","slug":"pic2-5.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-6.png","post":"cm4v1fyud000assil90o2ann0","slug":"pic2-6.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-7.png","post":"cm4v1fyud000assil90o2ann0","slug":"pic2-7.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/pic2-9.png","post":"cm4v1fyud000assil90o2ann0","slug":"pic2-9.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-1.png","post":"cm4v1fyud000assil90o2ann0","slug":"spic2-1.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-2.png","post":"cm4v1fyud000assil90o2ann0","slug":"spic2-2.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-3.png","post":"cm4v1fyud000assil90o2ann0","slug":"spic2-3.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/spic2-4.png","post":"cm4v1fyud000assil90o2ann0","slug":"spic2-4.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-1.png","post":"cm4v1fyud000assil90o2ann0","slug":"tab2-1.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-MachineLearning-by-ZhihuaZhou-2/tab2-2.png","post":"cm4v1fyud000assil90o2ann0","slug":"tab2-2.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-1/pic1-1.png","post":"cm4v1fyug000dssil3k5adbb0","slug":"pic1-1.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-1/pic1-2.png","post":"cm4v1fyug000dssil3k5adbb0","slug":"pic1-2.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-1/pic1-3.png","post":"cm4v1fyug000dssil3k5adbb0","slug":"pic1-3.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-1/pic1-4.png","post":"cm4v1fyug000dssil3k5adbb0","slug":"pic1-4.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-1/pic1-5.png","post":"cm4v1fyug000dssil3k5adbb0","slug":"pic1-5.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A1/pic1.png","post":"cm4v1fyuj000kssil2rsj7npw","slug":"pic1.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A1/pic2.png","post":"cm4v1fyuj000kssil2rsj7npw","slug":"pic2.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A1/pic3.png","post":"cm4v1fyuj000kssil2rsj7npw","slug":"pic3.png","modified":1,"renderable":0},{"_id":"source/_posts/BookNote-OnJava8-by-BruceEckel-2/pic2-1.png","post":"cm4v1fyui000issil1u3u9ee7","slug":"pic2-1.png","modified":1,"renderable":0},{"_id":"source/_posts/LeetCode-P4/p1.png","post":"cm4v1fyuk000pssilchw1hx3n","slug":"p1.png","modified":1,"renderable":0},{"_id":"source/_posts/LeetCode-P4/p2.png","post":"cm4v1fyuk000pssilchw1hx3n","slug":"p2.png","modified":1,"renderable":0},{"_id":"source/_posts/LeetCode-P4/P4.fig","post":"cm4v1fyuk000pssilchw1hx3n","slug":"P4.fig","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic1.png","post":"cm4v1fyul000qssilfre2d99x","slug":"pic1.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic2.png","post":"cm4v1fyul000qssilfre2d99x","slug":"pic2.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic3.png","post":"cm4v1fyul000qssilfre2d99x","slug":"pic3.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic4.png","post":"cm4v1fyul000qssilfre2d99x","slug":"pic4.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic5.png","post":"cm4v1fyul000qssilfre2d99x","slug":"pic5.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic6.png","post":"cm4v1fyul000qssilfre2d99x","slug":"pic6.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/pic7.png","post":"cm4v1fyul000qssilfre2d99x","slug":"pic7.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A2/SPA-A2-IR示意图.fig","post":"cm4v1fyul000qssilfre2d99x","slug":"SPA-A2-IR示意图.fig","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A3/pic1.png","post":"cm4v1fyum000ussilcx3r044d","slug":"pic1.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A3/pic2.png","post":"cm4v1fyum000ussilcx3r044d","slug":"pic2.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A3/pic3.png","post":"cm4v1fyum000ussilcx3r044d","slug":"pic3.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A3/pic4.png","post":"cm4v1fyum000ussilcx3r044d","slug":"pic4.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A3/pic5.png","post":"cm4v1fyum000ussilcx3r044d","slug":"pic5.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A3/pic6.png","post":"cm4v1fyum000ussilcx3r044d","slug":"pic6.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A3/pic7.png","post":"cm4v1fyum000ussilcx3r044d","slug":"pic7.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A3/pic8.png","post":"cm4v1fyum000ussilcx3r044d","slug":"pic8.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A4/pic4-1.png","post":"cm4v1fyun000wssil4q7y9g8y","slug":"pic4-1.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A5/pic1-1.png","post":"cm4v1fyuo0011ssilcx0ghqwz","slug":"pic1-1.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A5/pic1-2.png","post":"cm4v1fyuo0011ssilcx0ghqwz","slug":"pic1-2.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A5/pic1-3.png","post":"cm4v1fyuo0011ssilcx0ghqwz","slug":"pic1-3.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A5/pic1-4.png","post":"cm4v1fyuo0011ssilcx0ghqwz","slug":"pic1-4.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A5/pic1-5.png","post":"cm4v1fyuo0011ssilcx0ghqwz","slug":"pic1-5.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A6/pic1-1.png","post":"cm4v1fyv0002pssil0dqndob4","slug":"pic1-1.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A6/pic1-2.png","post":"cm4v1fyv0002pssil0dqndob4","slug":"pic1-2.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A6/pic1-3.png","post":"cm4v1fyv0002pssil0dqndob4","slug":"pic1-3.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A7/pic1-1.png","post":"cm4v1fyv1002qssil1v7r5ak3","slug":"pic1-1.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A7/pic1-2.png","post":"cm4v1fyv1002qssil1v7r5ak3","slug":"pic1-2.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A7/pic1-3.png","post":"cm4v1fyv1002qssil1v7r5ak3","slug":"pic1-3.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A7/pic1-4.png","post":"cm4v1fyv1002qssil1v7r5ak3","slug":"pic1-4.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A7/pic1-5.png","post":"cm4v1fyv1002qssil1v7r5ak3","slug":"pic1-5.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A8/pic1-1.png","post":"cm4v1fyv1002sssil1h4ogam1","slug":"pic1-1.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A8/pic1-2.png","post":"cm4v1fyv1002sssil1h4ogam1","slug":"pic1-2.png","modified":1,"renderable":0},{"_id":"source/_posts/SPA-A8/pic1-3.png","post":"cm4v1fyv1002sssil1h4ogam1","slug":"pic1-3.png","modified":1,"renderable":0},{"_id":"source/_posts/conda-env/pic1-1.png","post":"cm4v1fyv2002ussilcv93cp9y","slug":"pic1-1.png","modified":1,"renderable":0},{"_id":"source/_posts/conda-env/pic1-10.png","post":"cm4v1fyv2002ussilcv93cp9y","slug":"pic1-10.png","modified":1,"renderable":0},{"_id":"source/_posts/conda-env/pic1-11.png","post":"cm4v1fyv2002ussilcv93cp9y","slug":"pic1-11.png","modified":1,"renderable":0},{"_id":"source/_posts/conda-env/pic1-12.png","post":"cm4v1fyv2002ussilcv93cp9y","slug":"pic1-12.png","modified":1,"renderable":0},{"_id":"source/_posts/conda-env/pic1-2.png","post":"cm4v1fyv2002ussilcv93cp9y","slug":"pic1-2.png","modified":1,"renderable":0},{"_id":"source/_posts/conda-env/pic1-3.png","post":"cm4v1fyv2002ussilcv93cp9y","slug":"pic1-3.png","modified":1,"renderable":0},{"_id":"source/_posts/conda-env/pic1-4.png","post":"cm4v1fyv2002ussilcv93cp9y","slug":"pic1-4.png","modified":1,"renderable":0},{"_id":"source/_posts/conda-env/pic1-5.png","post":"cm4v1fyv2002ussilcv93cp9y","slug":"pic1-5.png","modified":1,"renderable":0},{"_id":"source/_posts/conda-env/pic1-6.png","post":"cm4v1fyv2002ussilcv93cp9y","slug":"pic1-6.png","modified":1,"renderable":0},{"_id":"source/_posts/conda-env/pic1-7.png","post":"cm4v1fyv2002ussilcv93cp9y","slug":"pic1-7.png","modified":1,"renderable":0},{"_id":"source/_posts/conda-env/pic1-8.png","post":"cm4v1fyv2002ussilcv93cp9y","slug":"pic1-8.png","modified":1,"renderable":0},{"_id":"source/_posts/conda-env/pic1-9.png","post":"cm4v1fyv2002ussilcv93cp9y","slug":"pic1-9.png","modified":1,"renderable":0},{"_id":"source/_posts/hello-world/picture.png","post":"cm4v1fyv2002xssildz1obh8d","slug":"picture.png","modified":1,"renderable":0},{"_id":"source/_posts/hello-world/test.txt","post":"cm4v1fyv2002xssildz1obh8d","slug":"test.txt","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cm4v1fyu50001ssildx3xeoqn","category_id":"cm4v1fyu90004ssil4vo7ecr5","_id":"cm4v1fyuh000gssilby5259a2"},{"post_id":"cm4v1fyu80003ssila9pj5hhm","category_id":"cm4v1fyu90004ssil4vo7ecr5","_id":"cm4v1fyuj000lssilep5r72cz"},{"post_id":"cm4v1fyub0007ssilh5zl4zt8","category_id":"cm4v1fyuh000fssil40byfwa3","_id":"cm4v1fyum000sssil42bnbssd"},{"post_id":"cm4v1fyud0009ssil7b1a9t9z","category_id":"cm4v1fyuh000fssil40byfwa3","_id":"cm4v1fyuo000zssil1zgs0yp6"},{"post_id":"cm4v1fyud000assil90o2ann0","category_id":"cm4v1fyuh000fssil40byfwa3","_id":"cm4v1fyup0012ssilceq7gbdo"},{"post_id":"cm4v1fyug000dssil3k5adbb0","category_id":"cm4v1fyuo000yssilf12cch8r","_id":"cm4v1fyuq0018ssilh4d9aqvd"},{"post_id":"cm4v1fyug000essil7zhic3yt","category_id":"cm4v1fyuo000yssilf12cch8r","_id":"cm4v1fyuq001dssilf52oc9ar"},{"post_id":"cm4v1fyui000issil1u3u9ee7","category_id":"cm4v1fyuo000yssilf12cch8r","_id":"cm4v1fyur001hssil2y2t0p7m"},{"post_id":"cm4v1fyuj000kssil2rsj7npw","category_id":"cm4v1fyuq001cssil5nh2cedm","_id":"cm4v1fyus001mssil50xcd3fs"},{"post_id":"cm4v1fyuk000pssilchw1hx3n","category_id":"cm4v1fyur001issilet2kdgiv","_id":"cm4v1fyut001tssil0me982xu"},{"post_id":"cm4v1fyul000qssilfre2d99x","category_id":"cm4v1fyuq001cssil5nh2cedm","_id":"cm4v1fyuu001xssilgmmdc603"},{"post_id":"cm4v1fyum000ussilcx3r044d","category_id":"cm4v1fyuq001cssil5nh2cedm","_id":"cm4v1fyuu0020ssilb905dog3"},{"post_id":"cm4v1fyun000wssil4q7y9g8y","category_id":"cm4v1fyuq001cssil5nh2cedm","_id":"cm4v1fyuv0023ssild3242l8n"},{"post_id":"cm4v1fyuo0011ssilcx0ghqwz","category_id":"cm4v1fyuq001cssil5nh2cedm","_id":"cm4v1fyuv0026ssil3m9e8lkt"},{"post_id":"cm4v1fyv0002pssil0dqndob4","category_id":"cm4v1fyuq001cssil5nh2cedm","_id":"cm4v1fyv2002vssilfd682n5x"},{"post_id":"cm4v1fyv1002qssil1v7r5ak3","category_id":"cm4v1fyuq001cssil5nh2cedm","_id":"cm4v1fyv3002yssil7eqt98o9"},{"post_id":"cm4v1fyv1002sssil1h4ogam1","category_id":"cm4v1fyuq001cssil5nh2cedm","_id":"cm4v1fyv30032ssil4253agq8"},{"post_id":"cm4v1fyv2002ussilcv93cp9y","category_id":"cm4v1fyv3002zssildlxv8zgm","_id":"cm4v1fyv40037ssil8xuk9abh"},{"post_id":"cm4v1fyv2002xssildz1obh8d","category_id":"cm4v1fyv30035ssila7rtbfqx","_id":"cm4v1fyv4003bssilgkbqblzx"}],"PostTag":[{"post_id":"cm4v1fyu50001ssildx3xeoqn","tag_id":"cm4v1fyua0005ssilhjfwg9xh","_id":"cm4v1fyui000jssil5zcv0pm2"},{"post_id":"cm4v1fyu50001ssildx3xeoqn","tag_id":"cm4v1fyue000cssil4c1m7pck","_id":"cm4v1fyuk000mssilfjhq84bv"},{"post_id":"cm4v1fyu80003ssila9pj5hhm","tag_id":"cm4v1fyua0005ssilhjfwg9xh","_id":"cm4v1fyun000vssil6vh9b4s0"},{"post_id":"cm4v1fyu80003ssila9pj5hhm","tag_id":"cm4v1fyue000cssil4c1m7pck","_id":"cm4v1fyuo000xssil291k3mwn"},{"post_id":"cm4v1fyub0007ssilh5zl4zt8","tag_id":"cm4v1fyua0005ssilhjfwg9xh","_id":"cm4v1fyup0015ssilgwof7y70"},{"post_id":"cm4v1fyub0007ssilh5zl4zt8","tag_id":"cm4v1fyuo0010ssil76ocgtu8","_id":"cm4v1fyuq0016ssilgsevh34p"},{"post_id":"cm4v1fyud0009ssil7b1a9t9z","tag_id":"cm4v1fyua0005ssilhjfwg9xh","_id":"cm4v1fyuq001assil7bxeeqpw"},{"post_id":"cm4v1fyud0009ssil7b1a9t9z","tag_id":"cm4v1fyuo0010ssil76ocgtu8","_id":"cm4v1fyuq001bssild310cvc6"},{"post_id":"cm4v1fyud000assil90o2ann0","tag_id":"cm4v1fyua0005ssilhjfwg9xh","_id":"cm4v1fyur001fssil42tq16ec"},{"post_id":"cm4v1fyud000assil90o2ann0","tag_id":"cm4v1fyuo0010ssil76ocgtu8","_id":"cm4v1fyur001gssil4jykcyc6"},{"post_id":"cm4v1fyug000dssil3k5adbb0","tag_id":"cm4v1fyua0005ssilhjfwg9xh","_id":"cm4v1fyus001kssil7q1q1j1h"},{"post_id":"cm4v1fyug000dssil3k5adbb0","tag_id":"cm4v1fyur001essil0xoz2234","_id":"cm4v1fyus001lssil3zp7bas0"},{"post_id":"cm4v1fyug000essil7zhic3yt","tag_id":"cm4v1fyua0005ssilhjfwg9xh","_id":"cm4v1fyut001pssila21ehzqd"},{"post_id":"cm4v1fyug000essil7zhic3yt","tag_id":"cm4v1fyur001essil0xoz2234","_id":"cm4v1fyut001qssil9m7ohlju"},{"post_id":"cm4v1fyui000issil1u3u9ee7","tag_id":"cm4v1fyua0005ssilhjfwg9xh","_id":"cm4v1fyut001ussilaar61sqk"},{"post_id":"cm4v1fyui000issil1u3u9ee7","tag_id":"cm4v1fyur001essil0xoz2234","_id":"cm4v1fyut001vssil47ol3ubk"},{"post_id":"cm4v1fyuj000kssil2rsj7npw","tag_id":"cm4v1fyut001rssilebc8e483","_id":"cm4v1fyuu0022ssil9d8de2j3"},{"post_id":"cm4v1fyuj000kssil2rsj7npw","tag_id":"cm4v1fyuu001yssil75cf7jkc","_id":"cm4v1fyuv0024ssil3ol00t98"},{"post_id":"cm4v1fyuk000pssilchw1hx3n","tag_id":"cm4v1fyuu0021ssil90vk1iz7","_id":"cm4v1fyuv0028ssilf8yi8xjn"},{"post_id":"cm4v1fyuk000pssilchw1hx3n","tag_id":"cm4v1fyuv0025ssil0hi83b7t","_id":"cm4v1fyuv0029ssile85t81mj"},{"post_id":"cm4v1fyul000qssilfre2d99x","tag_id":"cm4v1fyut001rssilebc8e483","_id":"cm4v1fyuw002cssil5d6hedxj"},{"post_id":"cm4v1fyul000qssilfre2d99x","tag_id":"cm4v1fyuu001yssil75cf7jkc","_id":"cm4v1fyuw002dssileaeraq0n"},{"post_id":"cm4v1fyum000ussilcx3r044d","tag_id":"cm4v1fyut001rssilebc8e483","_id":"cm4v1fyuw002gssilbvw120rq"},{"post_id":"cm4v1fyum000ussilcx3r044d","tag_id":"cm4v1fyuu001yssil75cf7jkc","_id":"cm4v1fyuw002hssilcrdwgkty"},{"post_id":"cm4v1fyun000wssil4q7y9g8y","tag_id":"cm4v1fyut001rssilebc8e483","_id":"cm4v1fyux002kssile03cawtr"},{"post_id":"cm4v1fyun000wssil4q7y9g8y","tag_id":"cm4v1fyuu001yssil75cf7jkc","_id":"cm4v1fyux002lssil1u11baky"},{"post_id":"cm4v1fyuo0011ssilcx0ghqwz","tag_id":"cm4v1fyut001rssilebc8e483","_id":"cm4v1fyux002nssil8qw60z0f"},{"post_id":"cm4v1fyuo0011ssilcx0ghqwz","tag_id":"cm4v1fyuu001yssil75cf7jkc","_id":"cm4v1fyux002ossil5r4cdglh"},{"post_id":"cm4v1fyv0002pssil0dqndob4","tag_id":"cm4v1fyut001rssilebc8e483","_id":"cm4v1fyv1002rssil62jc4oyi"},{"post_id":"cm4v1fyv0002pssil0dqndob4","tag_id":"cm4v1fyuu001yssil75cf7jkc","_id":"cm4v1fyv2002tssil03bs7oj7"},{"post_id":"cm4v1fyv1002qssil1v7r5ak3","tag_id":"cm4v1fyut001rssilebc8e483","_id":"cm4v1fyv2002wssil9b571mjb"},{"post_id":"cm4v1fyv1002qssil1v7r5ak3","tag_id":"cm4v1fyuu001yssil75cf7jkc","_id":"cm4v1fyv30031ssilgjwefdtk"},{"post_id":"cm4v1fyv1002sssil1h4ogam1","tag_id":"cm4v1fyut001rssilebc8e483","_id":"cm4v1fyv30033ssild4p89np3"},{"post_id":"cm4v1fyv1002sssil1h4ogam1","tag_id":"cm4v1fyuu001yssil75cf7jkc","_id":"cm4v1fyv30034ssil9evc7eba"},{"post_id":"cm4v1fyv2002ussilcv93cp9y","tag_id":"cm4v1fyv30030ssil5wok6g95","_id":"cm4v1fyv40039ssil1vn104au"},{"post_id":"cm4v1fyv2002ussilcv93cp9y","tag_id":"cm4v1fyv40036ssil4mya8avp","_id":"cm4v1fyv4003assil2n0rhqn6"},{"post_id":"cm4v1fyv2002xssildz1obh8d","tag_id":"cm4v1fyv40038ssil2zuyajg8","_id":"cm4v1fyv4003cssil20un1n6s"}],"Tag":[{"name":"读书笔记","_id":"cm4v1fyua0005ssilhjfwg9xh"},{"name":"设计模式","_id":"cm4v1fyue000cssil4c1m7pck"},{"name":"机器学习","_id":"cm4v1fyuo0010ssil76ocgtu8"},{"name":"Java","_id":"cm4v1fyur001essil0xoz2234"},{"name":"NJU","_id":"cm4v1fyut001rssilebc8e483"},{"name":"静态分析","_id":"cm4v1fyuu001yssil75cf7jkc"},{"name":"LeetCode","_id":"cm4v1fyuu0021ssil90vk1iz7"},{"name":"二分","_id":"cm4v1fyuv0025ssil0hi83b7t"},{"name":"环境配置","_id":"cm4v1fyv30030ssil5wok6g95"},{"name":"AI","_id":"cm4v1fyv40036ssil4mya8avp"},{"name":"杂项","_id":"cm4v1fyv40038ssil2zuyajg8"}]}}